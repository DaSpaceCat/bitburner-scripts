{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"max\":28,\"current\":10},\"skills\":{\"hacking\":178,\"strength\":182,\"defense\":182,\"dexterity\":191,\"agility\":201,\"charisma\":1,\"intelligence\":29},\"exp\":{\"hacking\":114989.07233279622,\"strength\":597748.5,\"defense\":597748.5,\"dexterity\":597748.5,\"agility\":597748.5,\"charisma\":0,\"intelligence\":776.9918744801452},\"mults\":{\"hacking_chance\":1.6423949800600361,\"hacking_speed\":1.660715264578495,\"hacking_money\":2.141444701892337,\"hacking_grow\":1.4897006621859739,\"hacking\":2.066658451309145,\"strength\":1.7988135495895636,\"defense\":1.7988135495895636,\"dexterity\":1.8887542270690414,\"agility\":1.9831919384224934,\"charisma\":1.939590262166138,\"hacking_exp\":2.611877274004047,\"strength_exp\":2.303242746035314,\"defense_exp\":2.303242746035314,\"dexterity_exp\":2.303242746035314,\"agility_exp\":2.303242746035314,\"charisma_exp\":2.303242746035314,\"company_rep\":1.3793524649870126,\"faction_rep\":1.3793524649870126,\"crime_money\":1.8814367622422856,\"crime_success\":1.7103970565838957,\"hacknet_node_money\":3.4788562309908384,\"hacknet_node_purchase_cost\":0.5226589807630692,\"hacknet_node_ram_cost\":0.6832143539386528,\"hacknet_node_core_cost\":0.6832143539386528,\"hacknet_node_level_cost\":0.5807322008478548,\"work_money\":1.4897006621859739,\"bladeburner_max_stamina\":1.08,\"bladeburner_stamina_gain\":1.08,\"bladeburner_analysis\":1.08,\"bladeburner_success_chance\":1.08},\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"HemoRecirculator\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":9,\"corporation\":null,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Vigilante Justice\",\"earnedRespect\":0,\"hack\":49,\"str\":20418,\"def\":20418,\"dex\":20418,\"agi\":20418,\"cha\":1,\"hack_exp\":1772.0361637790454,\"str_exp\":577864.738727794,\"def_exp\":577864.738727794,\"dex_exp\":577864.738727794,\"agi_exp\":577864.738727794,\"cha_exp\":0,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":2161.186666666067,\"str_asc_points\":16532245.186597962,\"def_asc_points\":16532245.186597962,\"dex_asc_points\":16532245.186597962,\"agi_asc_points\":16532245.186597962,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"Seven of Nine\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":50,\"str\":17475,\"def\":17475,\"dex\":26928,\"agi\":15618,\"cha\":50,\"hack_exp\":0,\"str_exp\":84448.71409473165,\"def_exp\":84448.71409473165,\"dex_exp\":121507.80007949981,\"agi_exp\":76883.55614408311,\"cha_exp\":0,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":5019677.068953775,\"str_asc_points\":22929577.447684024,\"def_asc_points\":22929577.447684024,\"dex_asc_points\":47469896.581691705,\"agi_asc_points\":19005394.784378905,\"cha_asc_points\":5019677.068953775,\"upgrades\":[],\"augmentations\":[],\"name\":\"Hydroflame\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":50,\"str\":17475,\"def\":17475,\"dex\":26928,\"agi\":15618,\"cha\":50,\"hack_exp\":0,\"str_exp\":84448.71409473165,\"def_exp\":84448.71409473165,\"dex_exp\":121507.80007949981,\"agi_exp\":76883.55614408311,\"cha_exp\":0,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":5019677.068953775,\"str_asc_points\":22929577.447684024,\"def_asc_points\":22929577.447684024,\"dex_asc_points\":47469896.581691705,\"agi_asc_points\":19005394.784378905,\"cha_asc_points\":5019677.068953775,\"upgrades\":[],\"augmentations\":[],\"name\":\"Roxy\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":564124.4371648461,\"hack\":1755,\"str\":21312,\"def\":21312,\"dex\":26731,\"agi\":20021,\"cha\":1755,\"hack_exp\":80088.43244863665,\"str_exp\":564938.0217819166,\"def_exp\":564938.0217819166,\"dex_exp\":1289700.0603820712,\"agi_exp\":436929.4680684879,\"cha_exp\":80088.43244863665,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":236322.4416254264,\"str_asc_points\":18128411.807437524,\"def_asc_points\":18128411.807437524,\"dex_asc_points\":22820970.881962936,\"agi_asc_points\":17241263.498501353,\"cha_asc_points\":236322.4416254264,\"upgrades\":[],\"augmentations\":[],\"name\":\"William Riker\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":573748.3648104187,\"hack\":1755,\"str\":21305,\"def\":21305,\"dex\":26748,\"agi\":20001,\"cha\":1755,\"hack_exp\":81230.35881432946,\"str_exp\":564330.7744872,\"def_exp\":564330.7744872,\"dex_exp\":1299849.8535401677,\"agi_exp\":434430.5260347946,\"cha_exp\":81230.35881432946,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":235016.23644702174,\"str_asc_points\":18121971.592596993,\"def_asc_points\":18121971.592596993,\"dex_asc_points\":22804172.27425848,\"agi_asc_points\":17236661.09727618,\"cha_asc_points\":235016.23644702174,\"upgrades\":[],\"augmentations\":[],\"name\":\"Gill Bates\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":576629.5270172217,\"hack\":1752,\"str\":21306,\"def\":21306,\"dex\":26755,\"agi\":20000,\"cha\":1752,\"hack_exp\":81457.32775182728,\"str_exp\":564894.4536719845,\"def_exp\":564894.4536719845,\"dex_exp\":1303712.9669649818,\"agi_exp\":434410.1010968853,\"cha_exp\":81457.32775182728,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":233968.9744561956,\"str_asc_points\":18119725.66661042,\"def_asc_points\":18119725.66661042,\"dex_asc_points\":22798351.15332582,\"agi_asc_points\":17235040.357316565,\"cha_asc_points\":233968.9744561956,\"upgrades\":[],\"augmentations\":[],\"name\":\"You\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":550204.7530535732,\"hack\":1750,\"str\":21297,\"def\":21297,\"dex\":26688,\"agi\":20021,\"cha\":1750,\"hack_exp\":78296.93970569712,\"str_exp\":562162.9410254497,\"def_exp\":562162.9410254497,\"dex_exp\":1271165.1707166075,\"agi_exp\":436925.53161012696,\"cha_exp\":78296.93970569712,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":237065.46446641764,\"str_asc_points\":18129655.940253194,\"def_asc_points\":18129655.940253194,\"dex_asc_points\":22830904.309424914,\"agi_asc_points\":17240952.834126037,\"cha_asc_points\":237065.46446641764,\"upgrades\":[],\"augmentations\":[],\"name\":\"Phillip\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":577151.2122772442,\"hack\":1752,\"str\":21324,\"def\":21324,\"dex\":26763,\"agi\":20021,\"cha\":1752,\"hack_exp\":81566.55858537529,\"str_exp\":567668.0492646748,\"def_exp\":567668.0492646748,\"dex_exp\":1307726.6024192648,\"agi_exp\":436930.15755058755,\"cha_exp\":81566.55858537529,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":233815.17774990576,\"str_asc_points\":18124302.9600228,\"def_asc_points\":18124302.9600228,\"dex_asc_points\":22793600.74880203,\"agi_asc_points\":17241317.912555974,\"cha_asc_points\":233815.17774990576,\"upgrades\":[],\"augmentations\":[],\"name\":\"Jean-Luc Picard\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":577130.0671537034,\"hack\":1752,\"str\":21323,\"def\":21323,\"dex\":26761,\"agi\":20020,\"cha\":1752,\"hack_exp\":81566.55858537529,\"str_exp\":567636.041662659,\"def_exp\":567636.041662659,\"dex_exp\":1307660.5942869904,\"agi_exp\":436904.9101903766,\"cha_exp\":81566.55858537529,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":233815.17774990576,\"str_asc_points\":18122259.163047906,\"def_asc_points\":18122259.163047906,\"dex_asc_points\":22791299.770845525,\"agi_asc_points\":17239325.442227058,\"cha_asc_points\":233815.17774990576,\"upgrades\":[],\"augmentations\":[],\"name\":\"Spock\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":503388.1194182234,\"hack\":1721,\"str\":21232,\"def\":21232,\"dex\":26510,\"agi\":20002,\"cha\":1721,\"hack_exp\":71997.54838409832,\"str_exp\":550443.4592670407,\"def_exp\":550443.4592670407,\"dex_exp\":1206577.074628914,\"agi_exp\":434446.6920793703,\"cha_exp\":71997.54838409832,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":237067.4366829538,\"str_asc_points\":18127375.588947706,\"def_asc_points\":18127375.588947706,\"dex_asc_points\":22832543.404242933,\"agi_asc_points\":17237943.943666935,\"cha_asc_points\":237067.4366829538,\"upgrades\":[],\"augmentations\":[],\"name\":\"Avelican\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":264779.43045187934,\"hack\":1537,\"str\":20960,\"def\":20960,\"dex\":25472,\"agi\":20005,\"cha\":1537,\"hack_exp\":39173.41048069815,\"str_exp\":501088.63857280446,\"def_exp\":501088.63857280446,\"dex_exp\":878667.7711395824,\"agi_exp\":433734.3246103304,\"cha_exp\":39173.41048069815,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":245090.81435601297,\"str_asc_points\":18151024.658354584,\"def_asc_points\":18151024.658354584,\"dex_asc_points\":22914848.90626668,\"agi_asc_points\":17251169.208542474,\"cha_asc_points\":245090.81435601297,\"upgrades\":[],\"augmentations\":[],\"name\":\"Natalie\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":879148.0846856138,\"hack\":387,\"str\":21140,\"def\":21140,\"dex\":24641,\"agi\":20005,\"cha\":387,\"hack_exp\":35851.667779008465,\"str_exp\":683708.1534992506,\"def_exp\":683708.1534992506,\"dex_exp\":1705363.0448149124,\"agi_exp\":487246.6826406498,\"cha_exp\":35851.667779008465,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":16190.919841115268,\"str_asc_points\":16903769.449476805,\"def_asc_points\":16903769.449476805,\"dex_asc_points\":18077821.4083679,\"agi_asc_points\":16670866.940753708,\"cha_asc_points\":16190.919841115268,\"upgrades\":[],\"augmentations\":[],\"name\":\"Zelow\"}}],\"wanted\":1,\"respect\":5065568.652013397,\"isHackingGang\":false,\"respectGainRate\":356.3052970050598,\"wantedGainRate\":-0.6900886276172934,\"moneyGainRate\":406972.7132040815,\"storedCycles\":7,\"storedTerritoryAndPowerCycles\":67,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":0,\"moneyLost\":0,\"rank\":0,\"maxRank\":0,\"skillPoints\":0,\"totalSkillPoints\":0,\"teamSize\":0,\"sleeveSize\":0,\"teamLost\":0,\"hpLost\":0,\"storedCycles\":7,\"randomEventCounter\":549,\"actionTimeToComplete\":0,\"actionTimeCurrent\":0,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1688534838,\"popEst\":1281730439.9928558,\"comms\":37,\"chaos\":1.5540849999999922}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1636825542,\"popEst\":1335860477.5335197,\"comms\":146,\"chaos\":14.302920547920538}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":3108377357,\"popEst\":1726215750.9278107,\"comms\":14,\"chaos\":4.141342658657624}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1803969250,\"popEst\":713296531.2969773,\"comms\":141,\"chaos\":2.351747999999886}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1754613390,\"popEst\":1067335922.0050274,\"comms\":108,\"chaos\":0}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1881565429,\"popEst\":940401798.6378238,\"comms\":40,\"chaos\":2.985960338399599}}},\"city\":\"Sector-12\",\"skills\":{},\"skillMultipliers\":{\"successChanceAll\":1,\"successChanceStealth\":1,\"successChanceKill\":1,\"successChanceContract\":1,\"successChanceOperation\":1,\"successChanceEstimate\":1,\"actionTime\":1,\"effHack\":1,\"effStr\":1,\"effDef\":1,\"effDex\":1,\"effAgi\":1,\"effCha\":1,\"effInt\":1,\"stamina\":1,\"money\":1,\"expGain\":1},\"staminaBonus\":86.04000000000225,\"maxStamina\":168.0821322123329,\"stamina\":168.0821322123329,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":125.61206152334164,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":0,\"failures\":0,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":1002.990833333332,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":242.4860190404936,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":0,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":916.0554166666598,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":217.71609174086578,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":1020.6974999999986,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":372.62042571160634,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":0,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":662.0131250000104,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":467.2537301955991,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":628.4435416666585,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":699.5459270967576,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":573.6243750000269,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":741.3913074352279,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":479.59083333335786,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":917.7678894821672,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":247.8822916666961,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1627.2010791240518,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":339.3325000000456,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[10/31 17:55:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:56:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:56:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:57:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:57:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:58:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:58:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:59:10] Intelligence indicates that a new Synthoid community was formed in a city\",\"[10/31 17:59:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 17:59:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:00:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:00:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:01:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:01:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:02:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:02:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:03:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:03:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:04:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:04:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:05:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:05:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:06:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:06:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:07:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:07:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:08:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:08:27] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[10/31 18:08:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:09:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:09:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:10:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:10:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:11:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:11:42] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:12:12] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:12:31] Tensions between Synthoids and humans lead to riots in Sector-12! Chaos increased\",\"[10/31 18:12:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:13:11] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:13:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:14:11] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:14:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:15:11] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:15:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:16:11] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:16:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:17:11] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:17:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:18:11] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:18:29] Intelligence indicates that a Synthoid community migrated from Sector-12 to some other city\",\"[10/31 18:18:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:19:11] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 18:19:41] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:40:37] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:40:43] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:40:49] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:40:55] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:01] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:07] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:13] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:19] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:25] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:31] Tensions between Synthoids and humans lead to riots in Ishima! Chaos increased\",\"[10/31 21:41:31] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:37] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:43] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:49] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:41:55] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:42:01] Player: Training completed. Gained: 67.1 str exp, 67.1 def exp, 67.1 dex exp, 67.1 agi exp, 0.040 max stamina\",\"[10/31 21:42:37] Intelligence indicates that a new Synthoid community was formed in a city\",\"[10/31 21:43:52] Intelligence indicates that a large number of Synthoids migrated from Ishima to some other city\",\"[10/31 21:45:09] Tensions between Synthoids and humans lead to riots in New Tokyo! Chaos increased\",\"[10/31 21:45:58] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[10/31 21:47:56] Intelligence indicates that the Synthoid population of Aevum just changed significantly\",\"[10/31 21:49:08] Intelligence indicates that a large number of Synthoids migrated from New Tokyo to some other city\",\"[10/31 21:50:44] Intelligence indicates that a large number of Synthoids migrated from Chongqing to some other city\",\"[10/31 21:52:21] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[10/31 21:53:29] Intelligence indicates that a large number of Synthoids migrated from Volhaven to some other city\",\"[10/31 21:56:17] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[10/31 21:57:07] Tensions between Synthoids and humans lead to riots in New Tokyo! Chaos increased\",\"[10/31 21:59:59] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[10/31 22:01:13] Intelligence indicates that the Synthoid population of Ishima just changed significantly\",\"[10/31 22:02:14] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[10/31 22:05:42] Intelligence indicates that a Synthoid community migrated from Volhaven to some other city\",\"[10/31 22:07:23] Tensions between Synthoids and humans lead to riots in Aevum! Chaos increased\",\"[10/31 22:08:58] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[10/31 22:09:50] Tensions between Synthoids and humans lead to riots in Aevum! Chaos increased\",\"[10/31 22:11:16] Tensions between Synthoids and humans lead to riots in New Tokyo! Chaos increased\",\"[10/31 22:13:11] Intelligence indicates that a large number of Synthoids migrated from Aevum to some other city\",\"[10/31 22:14:29] Intelligence indicates that the Synthoid population of Sector-12 just changed significantly\",\"[10/31 22:17:07] Intelligence indicates that a large number of Synthoids migrated from Aevum to some other city\",\"[10/31 22:19:07] Tensions between Synthoids and humans lead to riots in Volhaven! Chaos increased\",\"[10/31 22:21:07] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[10/31 22:22:04] Intelligence indicates that a large number of Synthoids migrated from Ishima to some other city\",\"[10/31 22:23:52] Intelligence indicates that a large number of Synthoids migrated from Chongqing to some other city\",\"[10/31 22:24:48] Tensions between Synthoids and humans lead to riots in Chongqing! Chaos increased\",\"[10/31 22:26:47] Intelligence indicates that the Synthoid population of New Tokyo just changed significantly\",\"[10/31 22:28:37] Intelligence indicates that a Synthoid community migrated from New Tokyo to some other city\",\"[10/31 22:29:38] Intelligence indicates that the Synthoid population of Aevum just changed significantly\",\"[10/31 22:32:10] Intelligence indicates that the Synthoid population of Chongqing just changed significantly\"]}},\"currentServer\":\"home\",\"factions\":[\"Sector-12\",\"Slum Snakes\",\"Netburners\"],\"factionInvitations\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\"],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":32768,\"hashes\":44.451387796078464,\"upgrades\":{\"Sell for Money\":1254,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-759837.8324999998,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":31267881.27705022,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":28597297102.37229,\"hacking\":6841530,\"hacknet\":3267021374.7856045,\"hacknet_expenses\":-37952274625.880486,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":6111382500,\"stock\":0,\"total\":30267881.27705022,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":571371891.1003053,\"gang\":95309366672.81291,\"hacking\":20725130.403667398,\"hacknet\":233450426142.46408,\"hacknet_expenses\":-279361384289.25476,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":77661022500,\"stock\":0,\"total\":5220660213.635578,\"work\":0,\"servers\":-80913033612.55727,\"other\":-314200000,\"augmentations\":-41203634221.179375}},\"playtimeSinceLastAug\":3024400,\"playtimeSinceLastBitnode\":280071400,\"purchasedServers\":[],\"scriptProdSinceLastAug\":6841530,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"max\":23,\"current\":22},\"skills\":{\"hacking\":1,\"strength\":139,\"defense\":139,\"dexterity\":139,\"agility\":139,\"charisma\":1,\"intelligence\":1},\"exp\":{\"hacking\":0,\"strength\":8228652.25,\"defense\":8228652.25,\"dexterity\":8228652.25,\"agility\":8228652.25,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":6,\"crimeType\":\"HOMICIDE\"}},\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"max\":23,\"current\":22},\"skills\":{\"hacking\":1,\"strength\":139,\"defense\":139,\"dexterity\":139,\"agility\":139,\"charisma\":1,\"intelligence\":1},\"exp\":{\"hacking\":0,\"strength\":8228652.25,\"defense\":8228652.25,\"dexterity\":8228652.25,\"agility\":8228652.25,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":6,\"crimeType\":\"HOMICIDE\"}},\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"max\":23,\"current\":22},\"skills\":{\"hacking\":1,\"strength\":139,\"defense\":139,\"dexterity\":139,\"agility\":139,\"charisma\":1,\"intelligence\":1},\"exp\":{\"hacking\":0,\"strength\":8228652.25,\"defense\":8228652.25,\"dexterity\":8228652.25,\"agility\":8228652.25,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":6,\"crimeType\":\"HOMICIDE\"}},\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"max\":23,\"current\":22},\"skills\":{\"hacking\":1,\"strength\":139,\"defense\":139,\"dexterity\":139,\"agility\":139,\"charisma\":1,\"intelligence\":1},\"exp\":{\"hacking\":0,\"strength\":8228652.25,\"defense\":8228652.25,\"dexterity\":8228652.25,\"agility\":8228652.25,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":6,\"crimeType\":\"HOMICIDE\"}},\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"max\":23,\"current\":22},\"skills\":{\"hacking\":1,\"strength\":139,\"defense\":139,\"dexterity\":139,\"agility\":139,\"charisma\":1,\"intelligence\":1},\"exp\":{\"hacking\":0,\"strength\":8228652.25,\"defense\":8228652.25,\"dexterity\":8228652.25,\"agility\":8228652.25,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":6,\"crimeType\":\"HOMICIDE\"}},\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"max\":23,\"current\":22},\"skills\":{\"hacking\":1,\"strength\":139,\"defense\":139,\"dexterity\":139,\"agility\":139,\"charisma\":1,\"intelligence\":1},\"exp\":{\"hacking\":0,\"strength\":8228652.25,\"defense\":8228652.25,\"dexterity\":8228652.25,\"agility\":8228652.25,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"currentWork\":{\"ctor\":\"SleeveCrimeWork\",\"data\":{\"type\":\"CRIME\",\"cyclesWorked\":6,\"crimeType\":\"HOMICIDE\"}},\"memory\":100,\"shock\":100,\"storedCycles\":4,\"sync\":100}}],\"sleevesFromCovenant\":5,\"sourceFiles\":[{\"lvl\":2,\"n\":1},{\"lvl\":1,\"n\":2},{\"lvl\":1,\"n\":10},{\"lvl\":1,\"n\":3},{\"lvl\":1,\"n\":7},{\"lvl\":1,\"n\":5}],\"exploits\":[\"N00dles\",\"UndocumentedFunctionCall\",\"INeedARainbow\",\"Bypass\",\"TimeCompression\",\"Unclickable\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1661036704531},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1661036824535},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1661040544546},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1661046629934},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1661054446149},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1661055646165},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1661105911685},{\"ID\":\"NITESEC\",\"unlockedOn\":1661570929855},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1662028753348},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662233703541},{\"ID\":\"TRAVEL\",\"unlockedOn\":1662318836513},{\"ID\":\"WORKOUT\",\"unlockedOn\":1662473150968},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1662517781325},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1662730176689},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1662730236691},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1662817842214},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1662921656843},{\"ID\":\"DONATION\",\"unlockedOn\":1663334565460},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1663359919211},{\"ID\":\"TOR\",\"unlockedOn\":1663449685403},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1663449805414},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1663610433243},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1663701902429},{\"ID\":\"SF1.1\",\"unlockedOn\":1663721462088},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":16637214620810},{\"ID\":\"N00DLES\",\"unlockedOn\":1663770010192},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1663774422768},{\"ID\":\"RAINBOW\",\"unlockedOn\":1663775383823},{\"ID\":\"BYPASS\",\"unlockedOn\":1663775503779},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1663776224353},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1663799882384},{\"ID\":\"GANG\",\"unlockedOn\":1663800363575},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1663883114329},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1663895977060},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1664132325429},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1664141581640},{\"ID\":\"SF2.1\",\"unlockedOn\":1664153947228},{\"ID\":\"DEVMENU\",\"unlockedOn\":1664162800647},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1664162842523},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1664752808061},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1664765065118},{\"ID\":\"FROZE\",\"unlockedOn\":1664797481999},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1664863061759},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1664914958788},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1664931460739},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1664933442055},{\"ID\":\"SF10.1\",\"unlockedOn\":1665045848287},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1665366958799},{\"ID\":\"CORPORATION\",\"unlockedOn\":1665415475594},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1665672840734},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1665687014728},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1665687614735},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1665688574731},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1665693316753},{\"ID\":\"SF3.1\",\"unlockedOn\":1665693856734},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1665708261664},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1665889586722},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1666134665038},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1666196071105},{\"ID\":\"SF7.1\",\"unlockedOn\":1666596384335},{\"ID\":\"SF5.1\",\"unlockedOn\":1666997088992},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1666997329129},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1667010456688},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1667021486744}],\"terminalCommandHistory\":[\"run src/hud.js\",\"scan-analyze 3\",\"run src/brain.js foodnstuff 412.05\",\"tail 5\",\"connect iron-gym\",\"connect CSEC\",\"buy -a\",\"run BruteSSH.exe\",\"run NUKE.exe\",\"backdoor\",\"clear\",\"home\",\"run src/hud.js\",\"run src/gang.js\",\"run src/brain.js foodnstuff 412.05\",\"kill 1\",\"run src/hud.js\",\"run src/gang.js\",\"run src/hud.js\\\\\",\"run src/brain.js foodnstuff 1975\",\"kill src/brain.js foodnstuff 1975\",\"kill src/brain.js foodnstuff 1950\",\"run src/brain.js foodnstuff 1950\",\"run src/hud.js\",\"run src/gang.js\",\"kill 2\",\"run src/hud.js\",\"run src/gang.js\",\"run src/hud.js\",\"run src/gang.js\",\"run src/hud.js\",\"run manager.js foodnstuff 0.9\",\"kill 8\",\"run breach.js\",\"clear\",\"run manager.js foodnstuff 0.9\",\"tail 112\",\"run src/gang.js\",\"run src/hud.js\",\"run src/gang.js\",\"run src/hud.js\",\"run src/gang.js\",\"run src/hud.js\",\"run manager.js foodnstuff 0.9\",\"tail 5\",\"kill 3\",\"run src/nsg.js\",\"kill 3803\",\"run src/getHash\",\"run src/getHashMoney.js\"],\"lastUpdate\":1667277152004,\"lastSave\":1667277151210,\"totalPlaytime\":6240727400,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"6e2455d958bea\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"5.5.6.3\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"Formulas.exe\",\"fl1ght.exe\"],\"ramUsed\":3879.2,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar sv = ns.args[0];\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\")\\n\\t//await eval(\\\"ns.weaken(sv)\\\")\\n\\tawait ns.weaken(sv)\\n}\",\"filename\":\"/src/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/weak.js\",\"url\":\"blob:file:///eb495374-6817-4fc3-9306-681ab9a56062\",\"moduleSequenceNumber\":185}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar sv = ns.args[0];\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\");\\n\\t//await eval(\\\"ns.grow(sv)\\\")\\n\\tawait ns.grow(sv)\\n}\",\"filename\":\"/src/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/grow.js\",\"url\":\"blob:file:///1eca95f1-9fee-4ccb-90fc-469a631cf992\",\"moduleSequenceNumber\":246}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar sv = ns.args[0];\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\")\\n\\t//await eval(\\\"ns.hack(sv)\\\");\\n\\tawait ns.hack(sv);\\n}\",\"filename\":\"/src/heck.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/heck.js\",\"url\":\"blob:file:///70280fc5-a39b-4439-aceb-da069f8ef94a\",\"moduleSequenceNumber\":684}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n/*\\nthis script is called with [server name] and [ram usable (in gigabytes)]\\nram MUST be at least 5.2g, excluding the ram required to run the script\\nfor best results, fully grow (this step may be negated) & weaken whatever server you're hacking BEFORE running this program.\\nyou should also probably have enough cores & ram on HOME to run this with enough ram to fully grow, weaken, and hack the target server every cycle\\n*/\\n\\nexport async function WaitPids(ns, pids) {\\n\\tif (!Array.isArray(pids)) pids = [pids];\\n\\twhile (pids.some(p => ns.getRunningScript(p) != undefined)) { await ns.sleep(5); }\\n}\\n\\nconst col = {\\n  \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n  \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n  \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n  \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n  \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n  \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n  \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n  \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n  \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n}\\n\\nlet doc = eval(\\\"document\\\");\\nlet cycles = 0;\\nexport async function main(ns) {\\n  const hook0 = doc.getElementById('overview-extra-hook-0');\\n  const hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tlet hs = ns.args[0];\\n\\tlet ram = ns.args[1];\\n\\t//let coH = Math.floor((ram/3)/1.6);\\n\\t//let coG = Math.floor((ram/3)/1.6);\\n\\tlet coH = Math.floor((ram/3)/1.7);\\n\\tlet coG = Math.floor((ram/3)/1.75);\\n\\tlet coW = coG;\\n\\tlet wag = ns.weakenAnalyze(coG, ns.getServer().cpuCores);\\n\\tif (wag >  100) {\\n\\t\\twhile (wag > 100) {\\n\\t\\t\\tcoW -= 1;\\n\\t\\t\\twag = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n\\t\\t}\\n\\t}\\n\\n\\tcoG = Math.floor(((ram-(coW*1.75))/2)/1.75);\\n\\tcoH = Math.floor(((ram-(coW*1.75))/2)/1.7);\\n\\n\\teval(\\\"ns.bypass(document);\\\")\\n\\twhile (true) {\\n\\t\\t//let gt = eval(\\\"ns.getGrowTime(hs);\\\")\\n\\t\\tlet gt = ns.getGrowTime(hs)\\n\\t\\t//let ht = eval(\\\"ns.getHackTime(hs);\\\")\\n\\t\\tlet ht = ns.getHackTime(hs);\\n\\t\\t//let wt = eval(\\\"ns.getWeakenTime(hs);\\\")\\n\\t\\tlet wt = ns.getWeakenTime(hs);\\n\\t\\tlet time = 0;\\n\\t\\t//eval(\\\"ns.run('src/weak.js', coG, hs);\\\")\\n\\t\\tns.run('src/weak.js', coW, hs);\\n\\t\\t//eval(\\\"ns.run('src/grow.js', coG, hs);\\\")\\n\\t\\tns.run('src/grow.js', coG, hs);\\n\\t\\tfor (let i = 0; i < Math.ceil((gt - (ht + 1))/1000) + 1; i++) {\\n\\t\\t\\t//ns.tprint(`I = ${i}, and it will execute grow when it is greater than ${Math.ceil((gt - (ht+1))/10)}`)\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t//gt = eval(\\\"ns.getGrowTime(hs);\\\")\\n\\t\\t\\tgt = ns.getGrowTime(hs)\\n\\t\\t\\t//ht = eval(\\\"ns.getHackTime(hs);\\\")\\n\\t\\t\\tht = ns.getHackTime(hs);\\n\\t\\t\\t//wt = eval(\\\"ns.getWeakenTime(hs);\\\")\\n\\t\\t\\twt = ns.getWeakenTime(hs);\\n\\t\\t\\ttime++;\\n\\t\\t\\thud(ns, hook0, hook1);\\n\\t\\t\\tconsole(ns, hs, coH, coG, coW);\\n\\t\\t}\\n\\t\\t//eval(\\\"ns.run ('src/heck.js', coH, hs);\\\")\\n\\t\\tns.run ('src/heck.js', coH, hs);\\n\\t\\t//ns.tprint(\\\"hacking!!\\\");\\n\\t\\tfor (let i = 0; i < (wt - Math.ceil((gt - (ht+1))))/1000 + 1; i++) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t//gt = eval(\\\"ns.getGrowTime(hs);\\\")\\n\\t\\t\\tgt = ns.getGrowTime(hs)\\n\\t\\t\\t//ht = eval(\\\"ns.getHackTime(hs);\\\")\\n\\t\\t\\tht = ns.getHackTime(hs);\\n\\t\\t\\t//wt = eval(\\\"ns.getWeakenTime(hs);\\\")\\n\\t\\t\\twt = ns.getWeakenTime(hs);\\n\\t\\t\\ttime++;\\n\\t\\t\\thud(ns, hook0, hook1);\\n\\t\\t\\tconsole(ns, hs, coH, coG, coW);\\n\\t\\t}\\n\\t\\tcycles++\\n\\t\\t//this is here so we don't end up calling the scripts again before they finish\\n\\t\\t//while (ns.scriptRunning(\\\"src/weak.js\\\", \\\"home\\\")) {await ns.sleep(1000); ns.tprint(\\\"\\\")}\\n\\t}\\n}\\n\\nfunction hud(ns, hook0, hook1) {\\n\\ttry {\\n\\t\\tlet header;\\n\\t\\tlet val;\\n\\n\\t\\t//add wether or not we're hacking, growing, weakening\\n\\t\\theader = \\\"Hk/Gw/Wk\\\\n\\\";\\n\\t\\tif (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {val = \\\"/\\\"} else {val = \\\"/\\\"}\\n\\t\\tif (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {val += \\\"/\\\"} else {val += \\\"/\\\"}\\n\\t\\tif (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {val += \\\"\\\\n\\\"} else {val += \\\"\\\\n\\\"}\\n\\t\\t/*if (eval('ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])')) {val = \\\"✓/\\\"} else {val = \\\"✗/\\\"}\\n\\t\\tif (eval('ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])')) {val += \\\"✓/\\\"} else {val += \\\"✗/\\\"}\\n\\t\\tif (eval('ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])')) {val += \\\"✓\\\\n\\\"} else {val += \\\"✗\\\\n\\\"}*/\\n\\t\\tns.print(val);\\n\\t\\t// Now drop it into the placeholder elements\\n\\t\\thook0.innerText = header\\n\\t\\thook1.innerText = val\\n\\t\\t//let wam = eval('ns.getServerMaxRam(\\\"home\\\")')\\n\\t\\t//let wamU = eval('ns.getServerUsedRam(\\\"home\\\")')\\n\\t\\tlet wam = ns.getServerMaxRam(\\\"home\\\")\\n\\t\\tlet wamU = ns.getServerUsedRam(\\\"home\\\")\\n\\n\\t\\t//other stats\\n\\t\\tconst headers = []\\n\\t\\tconst values = [];\\n\\t\\t// Add allowed ram usage\\n\\t\\theaders.push(\\\"Brain Ram\\\");\\n\\t\\tvalues.push(ns.args[1])\\n\\t\\t//add current server hacking\\n\\t\\theaders.push(\\\"Server Target\\\")\\n\\t\\tvalues.push(\\\" \\\" + ns.args[0])\\n\\t\\t//add cycles\\n\\t\\theaders.push(\\\"Cycles\\\")\\n\\t\\tvalues.push(cycles);\\n\\t\\t// Add ram\\n\\t\\theaders.push(\\\"Home Ram\\\");\\n\\t\\tvalues.push(wam);\\n\\t\\t// add free ram\\n\\t\\theaders.push(\\\"Home Ram Free\\\");\\n\\t\\tvalues.push(Math.round((wam - wamU) * 100) / 100);\\n\\n\\t\\t// Now drop those into the placeholder elements\\n\\t\\thook0.innerText += headers.join(\\\" \\\\n\\\");\\n\\t\\thook1.innerText += values.join(\\\"\\\\n\\\");\\t\\n\\t} catch (err) { // This might come in handy later\\n\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t}\\n}\\n\\nfunction console(ns, sv, coH, coG, coW) {\\n\\tlet gt = Math.ceil(ns.getGrowTime(sv)/1000);\\n\\tlet ht = Math.ceil(ns.getHackTime(sv)/1000);\\n\\tlet wt = Math.ceil(ns.getWeakenTime(sv)/1000);\\n\\tlet sl = ns.getServerSecurityLevel(sv);\\n\\tlet sml = ns.getServerMinSecurityLevel(sv);\\n\\tlet mm = ns.getServerMaxMoney(sv);\\n\\tlet ma = ns.getServerMoneyAvailable(sv);\\n\\tlet hm = ns.hackAnalyze(sv) * coH;\\n\\tlet wa = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n\\tlet ga = ns.growthAnalyze(sv, 100, ns.getServer().cpuCores);\\n\\tlet gaa = (100/ga)*coG;\\n\\tns.clearLog();\\n\\tns.print(\\\"╭┐Hack Brain┌──────────────────────────────────╮\\\\n\\\");\\n\\tns.print(`│╰──────────╯      Hack/Grow/Weak | ${isHacking(ns)}${col.d}/${isGrowing(ns)}${col.d}/${isWeakening(ns)}${col.d}      │\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Hack Time : ${Math.floor(ht/60)}m ${ht % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Grow Time : ${Math.floor(gt/60)}m ${gt % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Weaken Time : ${Math.floor(wt/60)}m ${wt % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.c}Security Level : ${sl}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.c}Min Security Level : ${sml}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Max Money : ${mm}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Money Available : ${ma}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Hack Money : ${hm}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Weaken Amount : ${wa}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Grow Amount : ${gaa}\\\\n`);\\n\\tns.print(`${col.d}╰──────────────────────────────────────────────╯`);\\n}\\n\\n/*alt log, with whitespace?\\n\\tns.print(`│ Hack Time : ${ht}${calcWhitespace(ht.length + 14, 48)} │\\\\n`);\\n\\tns.print(`│ Grow Time : ${gt}${calcWhitespace(gt.length + 14, 48)} │\\\\n`);\\n\\tns.print(`│ Weaken Time : ${wt}${calcWhitespace(wt.length + 16, 48)} │\\\\n`);\\n\\tns.print(`│ Security Level : ${sl}${calcWhitespace(sl.length + 19, 48)} │\\\\n`);\\n\\tns.print(`│ Min Security Level : ${sml} ${calcWhitespace(sml.length + 23, 48)} │\\\\n`);\\n\\tns.print(`│ Max Money : ${mm}${calcWhitespace(mm.length + 14, 48)} │\\\\n`);\\n\\tns.print(`│ Money Available : ${ma} ${calcWhitespace(ma.length + 20, 48)} │\\\\n`);\\n\\tns.print(`│ Hack Money : ${hm}${calcWhitespace(hm.length + 15, 48)} │\\\\n`);\\n\\tns.print(`│ Weaken Amount : ${wa}${calcWhitespace(wa.length + 18, 48)} │\\\\n`);\\n\\tns.print(`│ Grow Amount : ${gaa}${calcWhitespace(ga.length + 16, 48)} │\\\\n`);\\n*/ \\n\\nfunction calcWhitespace(sl, bl) {\\n\\tlet ws = \\\"\\\";\\n\\tfor (let i = 0; i < sl - bl; i++) {\\n\\t\\tws += \\\" \\\";\\n\\t}\\n\\treturn ws;\\n}\\n\\nfunction isWeakening(ns) {if (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\nfunction isHacking(ns) {if (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\nfunction isGrowing(ns) {if (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\n\\n//check Xmark\\n//       \",\"filename\":\"/src/brain.old.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/brain.js\",\"url\":\"blob:file:///d9513b4e-a2f0-4b2f-93f5-fd4074aa5705\",\"moduleSequenceNumber\":6694}],\"dependents\":[],\"ramUsage\":8.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n//used for resetting the running brains AFTER a period of offline\\nexport async function main(ns) {\\n\\tns.killall();\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"alpha-ent\\\", 66000)\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"infocomm\\\", 65000)\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"nova-med\\\", 65000)\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"nwo\\\", 66000)\\n}\",\"filename\":\"start.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"start.js\",\"url\":\"blob:file:///bdb53a93-3a5f-4334-ac28-53b6d7232931\",\"moduleSequenceNumber\":79}],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t//ns.rainbow(\\\"noodles\\\");\\n    ns.tprint(ns.heart.break());\\n\\tns.tprint(ns.getPlayer());\\n\\tns.tprint(ns.gang.getGangInformation());\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\");\\n\\t//eval('document.getElementById(\\\"unclickable\\\").style = \\\"display: block;position: absolute;top: 50%;left: 50%;width: 100px;height: 100px;z-index: 10000;background: red;\\\";')\\n    //eval('document.getElementById(\\\"unclickable\\\").parentNode.addEventListener(\\\"click\\\", () => {document.getElementById(\\\"unclickable\\\").style = \\\"display: none; visibility: hidden;\\\";}, true);')\\n\\t//ns.bypass(document);\\n}\",\"filename\":\"rnd.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"rnd.js\",\"url\":\"blob:file:///c237430a-e988-45c2-839f-25aa7d09d5f0\",\"moduleSequenceNumber\":11516}],\"dependents\":[],\"ramUsage\":4.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  ns.tprint(\\\"that's gay\\\");\\n}\",\"filename\":\"gay.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"gay.js\",\"url\":\"blob:file:///e1ccbad2-bd90-42db-9048-0601f2aace71\",\"moduleSequenceNumber\":3270}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var _ns;\\nconst col = {\\n  \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n  \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n  \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n  \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n  \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n  \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n  \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n  \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n  \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n}\\nvar doc = eval(\\\"document\\\");\\nconst term = doc.getElementById(\\\"terminal\\\")\\n//why do you hate me? I\\n//if the script isn't working just edit and save it that should fix it\\nexport async function main(ns) {\\n\\tvar seenList = [];\\n\\t_ns = ns;\\n\\tns.tprint(\\\"╭┐Map ┌──────────────────────────────────────────────────────────────────╮\\\");\\n\\tns.tprint(`│${col.g}R: Home ${col.d}[1]                                                             │`);\\n\\t//appterm(\\\"<span>╭─Map──<span>\\\")\\n\\t//appterm('<span>│</span><span style=\\\"color: green;\\\">R:✓ </span><span>Home [1]</span>')\\n\\tScanServer(\\\"home\\\", seenList, 0, \\\"\\\");\\n\\tns.tprint(\\\"╰──────────────────────────────────────────────────────────────────┘Map └╯\\\");\\n}\\n\\nfunction ScanServer(serverName, seenList, indent, prefix) {\\n\\tif (seenList.includes(serverName)) return;\\n\\tseenList.push(serverName);\\n\\t\\n\\tvar serverList = _ns.scan(serverName);\\n\\tserverList = serverList.filter(function (item) { return seenList.indexOf(item) === -1; });\\n\\tserverList = serverList.sort(ChildCountCompare);\\n\\n\\tfor (var i = 0; i < serverList.length; i++) {\\n\\t\\tvar newServer = serverList[i];\\n\\t\\tif (seenList.includes(newServer)) continue;\\n\\t\\tif (i != serverList.length - 1) {\\n\\t\\t\\tPrintServerInfo(newServer, prefix + \\\"├─\\\")\\n\\t\\t\\tScanServer(newServer, seenList, indent + 1, prefix + \\\"│ \\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tPrintServerInfo(newServer, prefix + \\\"╰─\\\")\\n\\t\\t\\tScanServer(newServer, seenList, indent + 1, prefix + \\\"  \\\");\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction ChildCountCompare(a, b) {\\n\\tvar ax = ChildCount(a);\\n\\tvar bx = ChildCount(b);\\n\\treturn ChildCount(a) > ChildCount(b) ? 1 : -1;\\n}\\n\\nfunction ChildCount(serverName) {\\n\\tvar count = 0;\\n\\tvar serverList = _ns.scan(serverName);\\n\\tfor (var i = 1; i < serverList.length; i++) {\\n\\t\\tcount += ChildCount(serverList[i]) + 1;\\n\\t}\\n\\treturn count;\\n}\\n\\nfunction PrintServerInfo(serverName, prefix) {\\n\\tvar hacked = (_ns.hasRootAccess(serverName)) ? \\\"\\\" : \\\"\\\";\\n\\tvar serverHackingLevel = _ns.getServerRequiredHackingLevel(serverName);\\n\\tvar canhack = false;\\n\\tvar dfstring = `│${prefix}R:${hacked} ${serverName} [${serverHackingLevel}]`\\n\\tlet dfl = dfstring.length\\n\\tlet spa = 74 - dfl;\\n\\tlet sp = \\\"\\\";\\n\\tfor (let i = 0; i < spa; i++) {\\n\\t\\tsp += \\\" \\\"\\n\\t}\\n\\tif (_ns.getHackingLevel() >= serverHackingLevel && !_ns.hasRootAccess(serverName)) {canhack = true}\\n\\tif (_ns.hasRootAccess(serverName)) {\\n\\t\\t_ns.tprint(`│${prefix}${col.g}R:${hacked} ${serverName}${col.d} [${serverHackingLevel}]${sp}│`)\\n\\t\\t//appterm(`<span>│${prefix}</span><span style=\\\"color: green;\\\">R:${hacked} </span><span>${serverName} [${serverHackingLevel}]</span>`);\\n\\t} else {\\n\\t\\tif (canhack) {\\n\\t\\t\\t_ns.tprint(`│${prefix}${col.r}R:${hacked}${col.y} ${serverName}${col.d} [${serverHackingLevel}]${sp}│`)\\n\\t\\t} else {\\n\\t\\t\\t_ns.tprint(`│${prefix}${col.r}R:${hacked} ${serverName}${col.d} [${serverHackingLevel}]${sp}│`)\\n\\t\\t}\\n\\t\\t//appterm(`<span>│${prefix}</span><span style=\\\"color: red;\\\">R:${hacked} </span><span>${serverName} [${serverHackingLevel}]</span>`);\\n\\t}\\n}\\n\\nfunction appterm(str) {\\n\\tlet dv = doc.createElement(\\\"div\\\");\\n\\tdv.innerHTML = '<li style=\\\"padding: 0px;\\\" class=\\\"jss14 MuiListItem-root MuiListItem-gutters MuiListItem-padding css-17eb3a9\\\"><p style=\\\"white-space: break-spaces;\\\" class=\\\"jss19 MuiTypography-root MuiTypography-body1 css-8twwy\\\">' + str + '</p></li>'\\n\\tterm.append(dv)\\n}\",\"filename\":\"/src/map.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/map.js\",\"url\":\"blob:file:///83963803-cb70-4dd5-b505-7036c10e9bc8\",\"moduleSequenceNumber\":4039}],\"dependents\":[],\"ramUsage\":2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const doc = eval(\\\"document\\\");\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    hook0.innerText = \\\"\\\"\\n    hook1.innerText = \\\"\\\"\\n}\",\"filename\":\"/src/clearHud.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/clearHud.js\",\"url\":\"blob:file:///0b5d8735-49f0-477a-a312-1d37b1a00702\",\"moduleSequenceNumber\":12342}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n    const col = {\\n        \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n        \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n        \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n        \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n        \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n        \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n        \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n        \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n        \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n    }\\n    ns.tprint(col.bk + \\\"black \\\" + col.r + \\\"red \\\" + col.g + \\\"green \\\" + col.y + \\\"yellow \\\"\\n        + col.b + \\\"blue \\\" + col.m + \\\"magenta \\\" + col.c + \\\"cyan \\\" + col.w + \\\"white \\\" + col.d + \\\"default\\\")\\n\\n}\",\"filename\":\"/src/colors.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/colors.js\",\"url\":\"blob:file:///4ef4beb9-a4ee-438b-96da-d919e833daa3\",\"moduleSequenceNumber\":163}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-undef */\\n/** @param {NS} ns */\\n/*\\nthis script is called with [server name], [ram usable (in gigabytes)], and [instance] (starts at 0)\\n*/\\n\\nimport {hudHelper} from \\\"/src/helpers.js\\\";\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function WaitPids(ns, pids, hooks, vars, instance, cycles) {\\n\\tif (!Array.isArray(pids)) pids = [pids];\\n\\twhile (pids.some(p => ns.getRunningScript(p) != undefined)) {\\n\\t\\tawait ns.sleep(5);\\n\\t\\t//hud(ns, hooks[0], hooks[1], instance, cycles);\\n\\t\\tconsole(ns, vars[0], vars[1], vars[2], vars[3], vars[4], vars[5], vars[6], instance, cycles);\\n\\t}\\n}\\n\\nconst col = {\\n  \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n  \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n  \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n  \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n  \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n  \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n  \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n  \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n  \\\"d\\\": \\\"\\\\x1b[0m\\\"\\n}\\n\\nlet doc = eval(\\\"document\\\");\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tlet instance = ns.args[2];\\n\\tlet cycles = 0;\\n\\t//if (instance == 0) scriptContent = true;\\n\\tlet hs = ns.args[0];\\n\\tlet ram = ns.args[1];\\n\\tlet coH = Math.floor((ram/3)/1.7);\\n\\tlet coG = Math.floor((ram/3)/1.75);\\n\\tlet coW = coG;\\n\\tlet wag = ns.weakenAnalyze(coG, ns.getServer().cpuCores);\\n\\tif (wag >  100) {\\n\\t\\twhile (wag > 100) {\\n\\t\\t\\tcoW -= 1;\\n\\t\\t\\twag = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n\\t\\t}\\n\\t}\\n\\tcoG = Math.floor(((ram-(coW*1.75))/2)/1.75);\\n\\tcoH = Math.floor(((ram-(coW*1.75))/2)/1.7);\\n\\n\\tlet ht = Math.ceil(ns.getHackTime(hs)/1000);\\n\\tlet gt = Math.ceil(ns.getGrowTime(hs)/1000);\\n\\tlet wt = Math.ceil(ns.getWeakenTime(hs)/1000);\\n\\n\\tif (ns.getServerMinSecurityLevel(hs) < ns.getServerSecurityLevel(hs) || ns.getServerMaxMoney(hs) > ns.getServerMoneyAvailable(hs)) {\\n\\t\\twhile (ns.getServerMinSecurityLevel(hs) < ns.getServerSecurityLevel(hs) || ns.getServerMaxMoney(hs) > ns.getServerMoneyAvailable(hs)) {\\n\\t\\t\\tlet prep = [ns.run('src/weak.js', coW, hs), ns.run('src/grow.js', coG * 2, hs)]\\n\\t\\t\\tawait WaitPids(ns, prep, [scriptContentV0, scriptContentV1], [hs, coH, coG, coW, gt, ht, wt], instance, cycles);\\n\\t\\t}\\n\\t}\\n\\n\\tlet ha = ns.hackAnalyze(hs) * coH;\\n\\tif (ha > 1.05) {\\n\\t\\twhile (ha > 1.05) {\\n\\t\\t\\tcoH -= 1;\\n\\t\\t\\tha = ns.hackAnalyze(hs) * coH;\\n\\t\\t}\\n\\t}\\n\\tlet pcoG = eval(coG * 2);\\n\\tcoG = Math.floor(((ram-((coW*1.75)+(coH*1.7))))/1.75);\\n\\n\\tht = Math.ceil(ns.getHackTime(hs)/1000);\\n\\tgt = Math.ceil(ns.getGrowTime(hs)/1000);\\n\\twt = Math.ceil(ns.getWeakenTime(hs)/1000);\\n\\n\\t// eslint-disable-next-line no-constant-condition\\n\\twhile (true) {\\n\\t\\tlet batch = [ns.run('src/weak.js', coW, hs), ns.run('src/grow.js', coG, hs), ns.run ('src/heck.js', coH, hs)]\\n\\t\\tawait WaitPids(ns, batch, [scriptContentV0, scriptContentV1], [hs, coH, coG, coW, gt, ht, wt], instance, cycles);\\n\\t\\tcycles++\\n\\t\\t//rerun hack calc so that leveling up dosen't cause us to hack for more than we need\\n\\t\\tha = ns.hackAnalyze(hs) * coH;\\n\\t\\tif (ha > 1.05) {\\n\\t\\t\\twhile (ha > 1.05) {\\n\\t\\t\\t\\tcoH -= 1;\\n\\t\\t\\t\\tha = ns.hackAnalyze(hs) * coH;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcoG = Math.floor(((ram-((coW*1.75)+(coH*1.7))))/1.75);\\n\\t\\t//prep the server if we've hacked it out / Security is over minimum\\n\\t\\tif (ns.getServerMinSecurityLevel(hs) < ns.getServerSecurityLevel(hs) || ns.getServerMaxMoney(hs) > ns.getServerMoneyAvailable(hs)) {\\n\\t\\t\\twhile (ns.getServerMinSecurityLevel(hs) < ns.getServerSecurityLevel(hs) || ns.getServerMaxMoney(hs) > ns.getServerMoneyAvailable(hs)) {\\n\\t\\t\\t\\tlet prep = [ns.run('src/weak.js', coW, hs), ns.run('src/grow.js', pcoG, hs)]\\n\\t\\t\\t\\tawait WaitPids(ns, prep, [scriptContentV0, scriptContentV1], [hs, coH, coG, coW, gt, ht, wt], instance, cycles);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction hud(ns, hook0, hook1, instance, cycles) {\\n\\ttry {\\n\\t\\tlet header;\\n\\t\\tlet val;\\n\\n\\t\\t//add wether or not we're hacking, growing, weakening\\n\\t\\theader = \\\"Hk/Gw/Wk\\\\n\\\";\\n\\t\\tif (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {val = `/`} else {val = `/`}\\n\\t\\tif (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {val += `/`} else {val += `/`}\\n\\t\\tif (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {val += `\\\\n`} else {val += `\\\\n`}\\n\\t\\tns.print(val);\\n\\t\\t// Now drop it into the placeholder elements\\n\\t\\tif (instance > 0) {\\n\\t\\t\\t//hook0 += \\\"Instance\\\\n\\\" + header;\\n\\t\\t\\t//hook1 += instance + \\\"\\\\n\\\" + val;\\n\\t\\t} else {\\n\\t\\t\\thook0 = \\\"Instance\\\\n\\\" + header;\\n\\t\\t\\thook1 = instance + \\\"\\\\n\\\" + val;\\n\\t\\t}\\n\\t\\tlet wam = ns.getServerMaxRam(\\\"home\\\")\\n\\t\\tlet wamU = ns.getServerUsedRam(\\\"home\\\")\\n\\n\\t\\t//other stats\\n\\t\\tconst headers = []\\n\\t\\tconst values = [];\\n\\t\\t// Add allowed ram usage\\n\\t\\theaders.push(\\\"Brain Ram\\\");\\n\\t\\tvalues.push(ns.args[1])\\n\\t\\t//add current server hacking\\n\\t\\theaders.push(\\\"Server Target\\\")\\n\\t\\tvalues.push(ns.args[0])\\n\\t\\t//add cycles\\n\\t\\theaders.push(\\\"Cycles\\\")\\n\\t\\tvalues.push(cycles);\\n\\t\\t// Now drop those into the placeholder elements\\n\\t\\tif (instance == 0) {\\n\\t\\t\\thook0 += headers.join(\\\"\\\\n\\\");\\n\\t\\t\\thook1 += values.join(\\\"\\\\n\\\");\\n\\t\\t}\\n\\t} catch (err) { // This might come in handy later\\n\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t}\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction console(ns, sv, coH, coG, coW, sgt, sht, swt, instance, cycles) {\\n\\tlet gt = Math.ceil(ns.getGrowTime(sv)/1000);\\n\\tlet ht = Math.ceil(ns.getHackTime(sv)/1000);\\n\\tlet wt = Math.ceil(ns.getWeakenTime(sv)/1000);\\n\\tlet sl = ns.getServerSecurityLevel(sv);\\n\\tlet sml = ns.getServerMinSecurityLevel(sv);\\n\\tlet mm = ns.getServerMaxMoney(sv);\\n\\tlet ma = ns.getServerMoneyAvailable(sv);\\n\\tlet hm = ns.hackAnalyze(sv) * coH;\\n\\tlet wa = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n\\tlet ga = ns.growthAnalyze(sv, 2, ns.getServer().cpuCores);\\n\\tlet gaa = coG/ga;\\n\\tns.clearLog();\\n\\tns.print(\\\"╭┐Hack Brain┌──────────────────────────────────╮\\\\n\\\");\\n\\tns.print(`│╰──────────╯      Hack/Grow/Weak | ${isHacking(ns)}${col.d}/${isGrowing(ns)}${col.d}/${isWeakening(ns)}${col.d}      │\\\\n`);\\n\\tns.print(`│ ${col.g}Target: ${sv}\\\\n`);\\n\\tns.print(`│ ${col.g}Instance: ${instance}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Hack Time : ${Math.floor(ht/60)}m ${ht % 60}s | At run : ${Math.floor(sht/60)}m ${sht % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Grow Time : ${Math.floor(gt/60)}m ${gt % 60}s | At run : ${Math.floor(sgt/60)}m ${sgt % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Weaken Time : ${Math.floor(wt/60)}m ${wt % 60}s | At run : ${Math.floor(swt/60)}m ${swt % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.c}Security Level : ${sl}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.c}Min Security Level : ${sml}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Max Money : ${mm}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Money Available : ${ma}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Hack Money : ${hm}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Weaken Amount : ${wa}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Grow ??? : ${gaa}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Cycles : ${cycles}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Live Time : ${Math.floor(ns.getRunningScript().onlineRunningTime/60)}m ${Math.round(ns.getRunningScript().onlineRunningTime % 60)}s\\\\n`);\\n\\tns.print(`${col.d}╰──────────────────────────────────────────────╯`);\\n}\\n\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\nfunction calcWhitespace(sl, bl) {\\n\\tlet ws = \\\"\\\";\\n\\tfor (let i = 0; i < sl - bl; i++) {\\n\\t\\tws += \\\" \\\";\\n\\t}\\n\\treturn ws;\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction isWeakening(ns) {if (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\nfunction isHacking(ns) {if (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\nfunction isGrowing(ns) {if (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\n\\n//check Xmark\\n//       \\n\",\"filename\":\"/src/brain.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/helpers.js\",\"url\":\"blob:file:///0cf3846e-91d9-4938-806a-161ab4878041\",\"moduleSequenceNumber\":97},{\"filename\":\"/src/brain.js\",\"url\":\"blob:file:///802ade73-36da-4c4a-a53d-1d302ba344ff\",\"moduleSequenceNumber\":184}],\"dependents\":[],\"ramUsage\":17.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  ns.tprint(\\\"Hello Remote API!\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JoaS9jb2RlL2JpdGJ1cm5lci1zY3JpcHRzL3NyYy90ZW1wbGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKTogUHJvbWlzZTx2b2lkPiB7XG4gIG5zLnRwcmludChcIkhlbGxvIFJlbW90ZSBBUEkhXCIpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFFQSxzQkFBc0IsS0FBSyxJQUF1QjtBQUNoRCxLQUFHLE9BQU8sbUJBQW1CO0FBQy9COyIsIm5hbWVzIjpbXX0=\",\"filename\":\"template.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n  This script will print a map of the entire network, treed from Home.\\n  if you have root access to a server, it will be marked in green, otherwise red.\\n  normally, both the name and checkmark will be green, but if you have root but cannot hack (if your level is too low) the name will be yellow.\\n  if you do not have root access, but can hack, the name will be yellow.\\n  otherwise, both the name and checkmark will be red.\\n  the required hacking level is shown in brackets, with the diffrence to your hacking level shown next to that.\\n*/\\n\\nvar _ns;\\nconst col = {\\n  \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n  \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n  \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n  \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n  \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n  \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n  \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n  \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n  \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n}\\nexport async function main(ns) {\\n\\t// eslint-disable-next-line no-constant-condition\\n\\twhile (true) {\\n\\t\\tns.disableLog(\\\"ALL\\\");\\n\\t\\tns.clearLog();\\n\\t\\tvar seenList = [];\\n\\t\\t_ns = ns;\\n\\t\\tns.print(\\\"╭┐Map ┌────────────────────────────────────────────────────────────────────────────────────────────────╮\\\");\\n\\t\\tns.print(`│${col.g}R: Home ${col.d}[1]                                                                                           │`);\\n\\t\\tScanServer(\\\"home\\\", seenList, 0, \\\"\\\");\\n\\t\\tns.print(\\\"╰────────────────────────────────────────────────────────────────────────────────────────────────┘Map └╯\\\");\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\nfunction ScanServer(serverName, seenList, indent, prefix) {\\n\\tif (seenList.includes(serverName)) return;\\n\\tseenList.push(serverName);\\n\\t\\n\\tvar serverList = _ns.scan(serverName);\\n\\tserverList = serverList.filter(function (item) { return seenList.indexOf(item) === -1; });\\n\\tserverList = serverList.sort(ChildCountCompare);\\n\\n\\tfor (var i = 0; i < serverList.length; i++) {\\n\\t\\tvar newServer = serverList[i];\\n\\t\\tif (seenList.includes(newServer)) continue;\\n\\t\\tif (i != serverList.length - 1) {\\n\\t\\t\\tPrintServerInfo(newServer, prefix + \\\"├─\\\")\\n\\t\\t\\tScanServer(newServer, seenList, indent + 1, prefix + \\\"│ \\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tPrintServerInfo(newServer, prefix + \\\"╰─\\\")\\n\\t\\t\\tScanServer(newServer, seenList, indent + 1, prefix + \\\"  \\\");\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction ChildCountCompare(a, b) {\\n\\tvar ax = ChildCount(a);\\n\\tvar bx = ChildCount(b);\\n\\treturn ChildCount(a) > ChildCount(b) ? 1 : -1;\\n}\\n\\nfunction ChildCount(serverName) {\\n\\tvar count = 0;\\n\\tvar serverList = _ns.scan(serverName);\\n\\tfor (var i = 1; i < serverList.length; i++) {\\n\\t\\tcount += ChildCount(serverList[i]) + 1;\\n\\t}\\n\\treturn count;\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction PrintServerInfo(serverName, prefix) {\\n\\tvar hacked = (_ns.hasRootAccess(serverName)) ? \\\"\\\" : \\\"\\\";\\n  \\t//swap these lines from being commented if you're not using a nerd font / don't want fancy marks on the root indicator\\n  \\t//var hacked = (_ns.hasRootAccess(serverName)) ? \\\"Y\\\" : \\\"N\\\";\\n\\tvar serverHackingLevel = _ns.getServerRequiredHackingLevel(serverName);\\n\\tvar serverRam = _ns.getServerMaxRam(serverName);\\n\\tvar hackSkill = _ns.getPlayer()['skills']['hacking'];\\n\\tvar hackDiff;\\n\\tvar money = [_ns.nFormat(_ns.getServerMoneyAvailable(serverName), '$0,0'), _ns.nFormat(_ns.getServerMaxMoney(serverName), '$0,0')]\\n\\tif (serverHackingLevel > hackSkill) hackDiff = `-${serverHackingLevel - hackSkill}`;\\n\\tif (serverHackingLevel == hackSkill) hackDiff = 0;\\n\\tif (serverHackingLevel < hackSkill) hackDiff = `+${hackSkill - serverHackingLevel}`;\\n\\tvar canhack = false;\\n\\tvar dfstring = `│${prefix}R:${hacked} ${serverName} ${serverRam}GB [${serverHackingLevel}] ${hackDiff} ${money[0]}/${money[1]}`\\n\\tlet dfl = dfstring.length\\n\\tlet spa = 104 - dfl;\\n\\tlet sp = \\\"\\\";\\n\\tfor (let i = 0; i < spa; i++) {\\n\\t\\tsp += \\\" \\\"\\n\\t}\\n\\tif (_ns.getHackingLevel() >= serverHackingLevel) {canhack = true}\\n\\tif (_ns.hasRootAccess(serverName)) {\\n\\t\\tif (canhack) {\\n      _ns.print(`│${prefix}${col.g}R:${hacked} ${serverName}${col.d} ${serverRam}GB [${serverHackingLevel}] ${hackDiff} ${col.y}${money[0]}/${money[1]}${col.d}${sp}│`)\\n    } else {\\n      _ns.print(`│${prefix}${col.g}R:${hacked}${col.y} ${serverName}${col.d} ${serverRam}GB [${serverHackingLevel}] ${hackDiff} ${col.y}${money[0]}/${money[1]}${col.d}${sp}│`)\\n    }\\n\\t} else {\\n\\t\\tif (canhack) {\\n\\t\\t\\t_ns.print(`│${prefix}${col.r}R:${hacked}${col.y} ${serverName}${col.d} ${serverRam}GB [${serverHackingLevel}] ${hackDiff} ${col.y}${money[0]}/${money[1]}${col.d}${sp}│`)\\n\\t\\t} else {\\n\\t\\t\\t_ns.print(`│${prefix}${col.r}R:${hacked} ${serverName}${col.d} ${serverRam}GB [${serverHackingLevel}] ${hackDiff} ${col.y}${money[0]}/${money[1]}${col.d}${sp}│`)\\n\\t\\t}\\n\\t}\\n}\\n\",\"filename\":\"/src/mapt.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/mapt.js\",\"url\":\"blob:file:///92b0ed01-59c1-4e77-85df-3f998eb6b6a3\",\"moduleSequenceNumber\":701}],\"dependents\":[],\"ramUsage\":2.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n  ns.tprint(ns.getPurchasedServerMaxRam());\\n  ns.tprint(ns.getPurchasedServerCost(ns.getPurchasedServerMaxRam()));\\n}\",\"filename\":\"/src/purchaseMaxRam.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/purchaseMaxRam.js\",\"url\":\"blob:file:///fc2b38a7-c8bf-4a2c-b12d-577b6d37f981\",\"moduleSequenceNumber\":11024}],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n  ns.purchaseServer(ns.args[0], ns.getPurchasedServerMaxRam());\\n}\",\"filename\":\"/src/buyMaxRam.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/buyMaxRam.js\",\"url\":\"blob:file:///a082c735-355b-4902-9da6-558626eb4e09\",\"moduleSequenceNumber\":42959}],\"dependents\":[],\"ramUsage\":3.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-constant-condition */\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    while(true) await ns.share();\\n}\",\"filename\":\"/src/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/share.js\",\"url\":\"blob:file:///641697af-da47-4730-ac87-2502a8bd27fb\",\"moduleSequenceNumber\":13941}],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\n    run Bitburner-Sounds.js\\r\\n    Author Zombean\\r\\n    Examples\\r\\n    run Bitburner-Sounds.js\\r\\n    to disable just re-run the script\\r\\n\\r\\n*/\\r\\n\\r\\n/* SETTINGS */\\r\\n/* GAINS DECIMAL 0 - 1 */\\r\\nconst musicGain = 0\\r\\nconst fadeOutOnUnFocus = true\\r\\nconst fadeOutSpeed = .00025\\r\\nconst serverRackFansGain = 1\\r\\nconst dialUpTonesGain = 1\\r\\nconst terminalTyperWriterGain = 1\\r\\nconst masterGain = 1\\r\\n\\r\\n/* SOUNDS IN SCRIPTS */\\r\\n/*\\r\\n\\r\\nimport { sound } from 'Bitburner-Sounds.js'\\r\\n\\r\\nsound.bell()\\r\\nsound.speak('Hello World')\\r\\nsound.bell().speak('Chaining is possible but will occur all at once')\\r\\nsound.beep()\\r\\nsound.beep().speak('This is text to speach')\\r\\n\\r\\nsound.beep options examples\\r\\nsound.beep({freq : 500})\\r\\nsound.beep({duration : 1000})\\r\\nsound.beep({type : 'sine'})\\r\\nsound.beep({gain : 0.2})\\r\\n\\r\\nAll are optional, you can declare a specific beep like this\\r\\n\\r\\nconst lowTone = {freq : 420, type : 'sine', gain: 1}\\r\\nsound.beep(lowTone)\\r\\n\\r\\nconst quiteLongHighTone = {freq : 840, gain: 0.1, duration : 5000}\\r\\nsound.beep(quiteLongHighTone).speak('Playing quite long high tone')\\r\\n\\r\\n*/\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const urlMap = {}\\r\\n    urlMap['URL_SONG']  = `https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/HypnocityReverb.mp3`\\r\\n    urlMap['URL_CLICK'] = `https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/click.mp3`\\r\\n    urlMap['URL_SWIPE'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/swipe.mp3'\\r\\n    urlMap['URL_TYPING']  = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/typing.mp3'\\r\\n    urlMap['URL_DIALUP'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/dialup.mp3'\\r\\n    urlMap['URL_SERVER_AIR'] =  'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/server_air.mp3'\\r\\n    urlMap['URL_SERVER_RACK'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/server_rack.mp3'\\r\\n    urlMap['URL_SERVER_FANS'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/server_fans.mp3'\\r\\n    urlMap['URL_LONGCLICK'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/longclick.mp3'\\r\\n    urlMap['URL_POP'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/pop.mp3'\\r\\n\\turlMap['URL_CYBER'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/cyberroom.mp3'\\r\\n\\r\\n    globalThis.BitburnerSounds ??= ({disabled : false, gainNodes : {}, cache : {}, isTyping : 0, typewriteTimeout : 0}) \\r\\n    \\r\\n    BitburnerSounds.urlMap = urlMap\\r\\n    \\r\\n    if(BitburnerSounds?.AudioContext?.state != undefined) {\\r\\n        let isOn = BitburnerSounds.AudioContext.state == 'running'\\r\\n        BitburnerSounds.isOn = !isOn\\r\\n        BitburnerSounds.AudioContext[(isOn?'suspend':'resume')]()\\r\\n        return ns.tprint(`${isOn?'WARN:':'INFO'} Bitburner-Sounds ${isOn ? 'paused' : 'resumed'}`)\\r\\n    }\\r\\n    \\r\\n    ns.tprint('INFO: INITIALIZING SOUNDS')\\r\\n\\r\\n    BitburnerSounds.newAudioContext = () => new (globalThis.AudioContext ?? globalThis.webkitAudioContext)() \\r\\n\\r\\n    BitburnerSounds.isOn = true\\r\\n\\r\\n    BitburnerSounds.AudioContext = BitburnerSounds.newAudioContext()\\r\\n    BitburnerSounds.masterGain = BitburnerSounds.AudioContext.createGain()\\r\\n    BitburnerSounds.masterGain.gain.value = 1\\r\\n    BitburnerSounds.masterGain['connect'](BitburnerSounds.AudioContext.destination)\\r\\n\\r\\n    BitburnerSounds.play = async (url, gain = 1) => {\\r\\n        gain *= masterGain\\r\\n        if(!BitburnerSounds.isOn) return\\r\\n        if(BitburnerSounds.cache[url] === undefined) {\\r\\n            let response = await fetch(url)\\r\\n            let dataArray = await response.arrayBuffer()\\r\\n            let buffer = await BitburnerSounds.AudioContext.decodeAudioData(dataArray)\\r\\n            BitburnerSounds.gainNodes[url] = BitburnerSounds.AudioContext.createGain()\\r\\n            BitburnerSounds.gainNodes[url].gain.value = gain\\r\\n            BitburnerSounds.gainNodes[url]['connect'](BitburnerSounds.masterGain)\\r\\n            BitburnerSounds.cache[url] = buffer\\r\\n        }\\r\\n        let bufferSource = BitburnerSounds.AudioContext.createBufferSource()\\r\\n        bufferSource.buffer = BitburnerSounds.cache[url]\\r\\n        bufferSource['connect'](BitburnerSounds.gainNodes[url])\\r\\n        bufferSource.start(0)\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.loop = async(url, gain = 1) => {\\r\\n        gain *= masterGain\\r\\n        if(BitburnerSounds.gainNodes[url]) {\\r\\n            let isSilent = gainNodes[url].gain.value == 0\\r\\n            gainNodes[url].gain.value = isSilent ? gain : 0\\r\\n            return\\r\\n        }\\r\\n\\r\\n        BitburnerSounds.gainNodes[url] = BitburnerSounds.AudioContext.createGain()\\r\\n        BitburnerSounds.gainNodes[url].gain.value = gain\\r\\n        BitburnerSounds.gainNodes[url]['connect'](BitburnerSounds.masterGain)\\r\\n        let bufferSource = BitburnerSounds.AudioContext.createBufferSource()\\r\\n        let response = await fetch(url)\\r\\n        let dataArray = await response.arrayBuffer()\\r\\n        let buffer = await BitburnerSounds.AudioContext.decodeAudioData(dataArray)\\r\\n        bufferSource.buffer = buffer\\r\\n        bufferSource.loop = true\\r\\n        bufferSource['connect'](BitburnerSounds.gainNodes[url])\\r\\n        bufferSource.start(0)\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.terminalType = () => {\\r\\n        clearTimeout(BitburnerSounds.typewriteTimeout)\\r\\n        BitburnerSounds.gainNodes[BitburnerSounds.urlMap.URL_TYPING].gain.value = 1 * terminalTyperWriterGain\\r\\n        setTimeout(BitburnerSounds.terminalStopped, 100)\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.bind2elements = (selector, sound, gain = 1) => {\\r\\n        for (const button of globalThis['document'].querySelectorAll(selector)) {\\r\\n            if(button === undefined) continue\\r\\n            if(button?.hasSound) continue\\r\\n            button.addEventListener('click', ()=>{\\r\\n                BitburnerSounds.play(sound, gain)\\r\\n            })\\r\\n            button.hasSound = true\\r\\n        }\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.terminalStopped = () => {\\r\\n        BitburnerSounds.gainNodes[BitburnerSounds.urlMap.URL_TYPING].gain.value = 0\\r\\n    }\\r\\n    \\r\\n    BitburnerSounds.bindEnforcer = () => {\\r\\n\\r\\n        BitburnerSounds.bind2elements('.MuiTouchRipple-root', BitburnerSounds.urlMap.URL_SWIPE, 0.3)\\r\\n        BitburnerSounds.bind2elements('.MuiListItem-button' , BitburnerSounds.urlMap.URL_LONGCLICK, 0.2)\\r\\n        BitburnerSounds.bind2elements('.MuiButton-sizeMedium', BitburnerSounds.urlMap.URL_CLICK, 2)\\r\\n        BitburnerSounds.bind2elements('div[role=button]', BitburnerSounds.urlMap.URL_POP, 0.1)\\r\\n        BitburnerSounds.bind2elements('button', BitburnerSounds.urlMap.URL_POP, 0.1)\\r\\n        BitburnerSounds.bind2elements('span[aria-label]', BitburnerSounds.urlMap.URL_SWIPE, 0.3)\\r\\n        \\r\\n        let terminal = globalThis['document'].getElementById('terminal-input')\\r\\n        if(!terminal) return\\r\\n        if(terminal?.hasSounds) return\\r\\n        terminal.addEventListener('input', BitburnerSounds.terminalType)\\r\\n        terminal.hasSounds = true\\r\\n    }\\r\\n\\r\\n    setInterval(BitburnerSounds.bindEnforcer, 100)\\r\\n    await BitburnerSounds.play(BitburnerSounds.urlMap.URL_DIALUP, 0.5)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_CYBER, 0.5)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SERVER_RACK, 0.7 * serverRackFansGain)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SERVER_FANS, 0.25 * serverRackFansGain)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_TYPING, 0)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SERVER_AIR, 0.3 * serverRackFansGain)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SONG, musicGain)\\r\\n\\t\\r\\n\\r\\n    setInterval(()=>{BitburnerSounds.play(BitburnerSounds.urlMap.URL_DIALUP, 0.5 * dialUpTonesGain)}, 1000*60*3)\\r\\n\\t\\r\\n  \\r\\n\\r\\n    ns.tprint('INFO: Bitburner-Sounds enabled')\\r\\n\\r\\n\\r\\n    BitburnerSounds.gainSlide = 1\\r\\n    if(fadeOutOnUnFocus) setInterval(()=>{\\r\\n        \\r\\n        let focus = globalThis['document'].hasFocus() \\r\\n        BitburnerSounds.gainSlide += focus ? .1 : -fadeOutSpeed\\r\\n        if(BitburnerSounds.gainSlide >= 1) BitburnerSounds.gainSlide = 1\\r\\n        if(BitburnerSounds.gainSlide <= .01) BitburnerSounds.gainSlide = .01\\r\\n        BitburnerSounds.masterGain.gain.value = BitburnerSounds.gainSlide\\r\\n        BitburnerSounds.gainNodes[BitburnerSounds.urlMap.URL_SONG].gain.value = BitburnerSounds.gainSlide * musicGain\\r\\n    }, 50)\\r\\n}\\r\\n\\r\\nexport const sound = {timeout : 0}\\r\\n\\r\\nsound.speak = (string) => { \\r\\n    let utterance = new SpeechSynthesisUtterance(string)\\r\\n    utterance.pitch = 0\\r\\n    speechSynthesis.speak(utterance)\\r\\n    return sound\\r\\n}\\r\\nsound.bell = () => { sound.makeSound(\\\"https://freesound.org/data/previews/299/299147_2050105-lq.mp3\\\"); return sound }\\r\\nsound.click = () => { sound.makeSound('https://cdn.freesound.org/previews/243/243772_3255970-lq.mp3'); return sound }\\r\\n\\r\\nsound.makeSound = async (soundUrl, loop = false) => { \\r\\n    globalThis.audioCache ??= {}\\r\\n    globalThis.gAudioCtx ??= BitburnerSounds.newAudioContext()\\r\\n\\r\\n    clearTimeout(sound.timeout)\\r\\n    sound.timeout = setTimeout(()=> {\\r\\n        gAudioCtx = BitburnerSounds.newAudioContext()\\r\\n    }, 1000) //refresh audio context to reduce potential jitter after lots of buffers\\r\\n\\r\\n    let bufferSource = gAudioCtx.createBufferSource()\\r\\n    if(!audioCache[soundUrl]) {\\r\\n        let response = await fetch(soundUrl)\\r\\n        let dataArray = await response.arrayBuffer()\\r\\n        let buffer = await gAudioCtx.decodeAudioData(dataArray)\\r\\n        audioCache[soundUrl] = buffer\\r\\n    }\\r\\n    bufferSource.buffer = audioCache[soundUrl]\\r\\n    bufferSource.loop = loop\\r\\n    bufferSource['connect'](gAudioCtx.destination)\\r\\n    bufferSource.start(0)\\r\\n} \\r\\n\\r\\nsound.beep = ({freq = 800, type = 'sine', duration = 50, gain = 0.5} = {}) => {\\r\\n    console.log(freq)\\r\\n    if(!isFinite(freq)) return console.error('none finite freq')\\r\\n    freq = Math.round(freq)\\r\\n    globalThis.beepChannels ??= {}\\r\\n    globalThis.beepContext ??= new (globalThis.AudioContext ?? globalThis.webkitAudioContext)\\r\\n    if(!beepChannels[[freq, type]]) {\\r\\n        let oscillator = beepContext.createOscillator()\\r\\n        let gainNode = beepContext.createGain()\\r\\n        gainNode['connect'](beepContext.destination)\\r\\n        oscillator.type = type\\r\\n        oscillator.frequency.value = freq\\r\\n        oscillator['connect'](gainNode)\\r\\n        gainNode.gain.value = 0\\r\\n        oscillator.start(0)\\r\\n        beepChannels[[freq, type]] = gainNode\\r\\n    }\\r\\n    beepChannels[[freq, type]].gain.value = 0\\r\\n    setTimeout(()=>{\\r\\n        beepChannels[[freq, type]].gain.value = gain\\r\\n    }, duration>=100?50:0)\\r\\n    clearTimeout(beepChannels[[freq, type]].timeout)\\r\\n    beepChannels[[freq, type]].timeout = setTimeout(()=>{\\r\\n        beepChannels[[freq, type]].gain.value = 0\\r\\n    }, duration)\\r\\n\\r\\n    return sound\\r\\n}\",\"filename\":\"Bitburner-Sounds.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"Bitburner-Sounds.js\",\"url\":\"blob:file:///e7772ee8-db21-4968-871f-9132f6744955\",\"moduleSequenceNumber\":1255}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://pegasus.pimpninjas.org/code/javascript/bitburner/second-terminal.js\\n// for BitBurner - https://danielyxie.github.io/bitburner/\\n// by \\\"The Almighty Pegasus Epsilon\\\" <pegasus@pimpninjas.org>\\n// version 2.3 (C)opyright March 13 2022\\n// Distribute Unmodifed - https://pegasus.pimpninjas.org/license\\n/** @param {NS} ns **/\\nexport async function main (ns) {\\n\\tawait terminal(ns, ns.getScriptName(), e => {\\n\\t\\tns.print(e.target.value);\\n\\t\\te.target.value = \\\"\\\";\\n\\t});\\n}\\nexport async function terminal (ns, scriptName, handler) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tconst style = globalThis.getComputedStyle(document\\n\\t\\t.querySelector(\\\".MuiTypography-root\\\"));\\n\\tlet input = document.createElement(\\\"input\\\");\\n\\tinput.style.boxSizing = \\\"border-box\\\";\\n\\tinput.style.position = \\\"relative\\\";\\n\\tinput.style[\\\"width\\\"] = \\\"100%\\\";\\n\\tinput.style.outline = \\\"none\\\";\\n\\tinput.style.padding = \\\"2px\\\";\\n\\tinput.style.fontFamily = style.fontFamily;\\n\\tinput.style.fontSize = style.fontSize;\\n\\tinput.style.color = style.color;\\n\\tinput.style.background = style.backgroundColor;\\n\\tinput.style.borderTop = \\\"1px solid \\\" + style.color;\\n\\tinput.onkeydown = e => {\\n\\t\\te.cancelBubble = true;\\n\\t\\tif (\\\"Enter\\\" != e.code && \\\"NumpadEnter\\\" != e.code) return true;\\n\\t\\thandler(e);\\n\\t};\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tfunction addInputBox () {\\n\\t\\tlet log = document.querySelector(\\\"h6[title=\\\\\\\"\\\"\\n\\t\\t\\t+ scriptName + \\\" \\\" + ns.args.join(\\\" \\\") + \\\"\\\\\\\"]\\\");\\n\\t\\tif (!log) return;\\n\\t\\tlog = log.parentNode.parentNode;\\n\\t\\tlet old_input = log.querySelector(\\\"input\\\");\\n\\t\\tif (old_input) {\\n\\t\\t\\told_input.onkeydown = input.onkeydown;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\ttry { log.appendChild(input); }\\n\\t\\tcatch (e) { console.log(e); }\\n\\t}\\n\\tfor (;;) {\\n\\t\\taddInputBox();\\n\\t\\tawait ns.asleep(1000);\\n\\t}\\n}\",\"filename\":\"sTerm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"sTerm.js\",\"url\":\"blob:file:///c5098c56-d06a-48c2-9f07-e4bdc41ef1ae\",\"moduleSequenceNumber\":30308}],\"dependents\":[],\"ramUsage\":26.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let rhiUIint = `const rhiUI = {\\n  createElement: function (type) {\\n    return document.createElement(type);\\n  },\\n  floatWindow: function(id, head, width, height, padding, bWeight, bRadius, content) {\\n    let div = document.createElement(\\\"div\\\");\\n    let iDiv = document.createElement(\\\"div\\\");\\n    div.style.position = \\\"absolute\\\";\\n    div.style.padding = \\\"0px\\\";\\n    div.style.top = \\\"0px\\\";\\n    div.style.left = \\\"0px\\\";\\n    div.style.width = width + \\\"px\\\";\\n    div.style.height = height + \\\"px\\\";\\n    div.style.backgroundColor = \\\"rgba(20, 20, 20, 1)\\\";\\n    div.style.color = \\\"white\\\";\\n    div.style.zIndex = \\\"9999\\\";\\n    div.style.border = bWeight + \\\"px solid rgb(68, 68, 68)\\\";\\n    div.style.borderRadius = bRadius + \\\"px\\\";\\n    div.id = id;\\n    div.classList.add(\\\"rhiUI\\\");\\n    iDiv.style.padding = padding + \\\"px\\\";\\n    iDiv.id = id + \\\"in\\\";\\n    let header = document.createElement(\\\"div\\\");\\n    header.style.backgroundColor = \\\"rgba(40, 40, 40, 1)\\\";\\n    header.innerHTML = '<h3 id=\\\"' + id + 'head\\\" style=\\\"margin: 0px;\\\"> ' + head + ' </h3>';\\n    header.style.color = \\\"white\\\";\\n    header.id = id + \\\"header\\\";\\n    header.style.cursor = \\\"move\\\";\\n    header.style.padding = padding + \\\"px\\\";\\n    header.style.borderRadius = bRadius + \\\"px \\\" + bRadius + \\\"px 0px 0px\\\";\\n    header.style.borderBottom = bWeight + \\\"px solid rgb(68, 68, 68)\\\";\\n    //create minimize button\\\\n\\n    let min = document.createElement(\\\"a\\\");\\n    min.id = id + \\\"min\\\";\\n    min.innerHTML = \\\"🗕\\\";\\n    min.style.color = \\\"white\\\";\\n    min.style.textDecoration = \\\"none\\\";\\n    min.style.float = \\\"right\\\";\\n    min.style.display = \\\"inline-block\\\";\\n    rhiUI.createGlobalScript(\\\"rhiUIelements\\\", \\\"var \\\" + id + \\\"min = true; const \\\" + id + \\\"Height = \\\" + height + \\\";\\\");\\n    min.onclick = eval('rhiUI.minimize(\\\"' + id + '\\\")')\\n    div.appendChild(header);\\n    iDiv.innerHTML = content;\\n    div.appendChild(iDiv);\\n    document.body.appendChild(div);\\n    //we have to do this after we add the element to the doc, otherwise we get issues\\\\n\\n    let heado = document.getElementById(id + \\\"head\\\");\\n    heado.appendChild(min);\\n    this.dragElement(div);\\n    return div;\\n  },\\n  createGlobalScript: function (id, script) {\\n    if (document.getElementById(id) == null) {\\n      let s = document.createElement(\\\"script\\\");\\n      s.id = id;\\n      s.innerHTML = script;\\n      document.head.appendChild(s);\\n    } else {\\n      console.log(\\\"rhiUI: WARN: Script with that ID already exists! Appending input to existing script.\\\");\\n      document.getElementById(id).innerHTML += script;\\n    }\\n  },\\n  createGlobNS: function(ns) { eval(\\\"ns.run('/ui/nsRef.js')\\\"); },\\n  dragElement: function(elmnt) {\\n    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\\n    if (document.getElementById(elmnt.id + \\\"header\\\")) {\\n      document.getElementById(elmnt.id + \\\"header\\\").onmousedown = dragMouseDown;\\n    } else {\\n      elmnt.onmousedown = dragMouseDown;\\n    }\\n    function dragMouseDown(e) {\\n      e = e || window.event;\\n      e.preventDefault();\\n      pos3 = e.clientX;\\n      pos4 = e.clientY;\\n      document.onmouseup = closeDragElement;\\n      document.onmousemove = elementDrag;\\n    }\\n    function elementDrag(e) {\\n      e = e || window.event;\\n      e.preventDefault();\\n      pos1 = pos3 - e.clientX;\\n      pos2 = pos4 - e.clientY;\\n      pos3 = e.clientX;\\n      pos4 = e.clientY;\\n      elmnt.style.top = (elmnt.offsetTop - pos2) + \\\"px\\\";\\n      elmnt.style.left = (elmnt.offsetLeft - pos1) + \\\"px\\\";\\n    }\\n    function closeDragElement() {\\n      document.onmouseup = null;\\n      document.onmousemove = null;\\n    }\\n  },\\n  minimize: function(id) {\\n    if (eval(id + \\\"min\\\") == false) {\\n      document.getElementById(id + \\\"in\\\").style.display = \\\"none\\\";\\n      document.getElementById(id).style.height = \\\"auto\\\";\\n      document.getElementById(id + \\\"min\\\").innerHTML = \\\"🗖\\\";\\n      eval(id + \\\"min = true;\\\");\\n    } else {\\n      document.getElementById(id + \\\"in\\\").style.display = \\\"block\\\";\\n      document.getElementById(id).style.height = eval(id + \\\"Height\\\") + \\\"px\\\";\\n      document.getElementById(id + \\\"min\\\").innerHTML = \\\"🗕\\\";\\n      eval(id + \\\"min = false;\\\");\\n    }\\n  }\\n}`\\n\\nexport function initRhiUI() {\\n  let doc = eval(\\\"document\\\");\\n  if (doc.getElementById(\\\"rhiUI\\\") == null) {\\n    let scr = doc.createElement(\\\"script\\\");\\n    scr.innerHTML = rhiUIint;\\n    scr.id = \\\"rhiUI\\\";\\n    doc.head.appendChild(scr);\\n  } else {\\n    console.log(\\\"rhiUI already initialized, reloading..\\\");\\n    doc.getElementById(\\\"rhiUI\\\").innerHTML = rhiUIint;\\n  }\\n}\\n\",\"filename\":\"/ui/ui.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-undef */\\nimport { initRhiUI } from \\\"/ui/ui.js\\\";\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    initRhiUI();\\n    ns.run(\\\"/dev/null\\\");\\n    rhiUI.createGlobNS(ns);\\n    let content = `\\n  <h1>Test, hello world!</h1>\\n  <h2 id=\\\"tsthck\\\">Hack Skill: </h2>`;\\n    let scr = `function update() {\\n  document.getElementById(\\\"tsthck\\\").innerHTML = \\\"Hack Skill: \\\" + globNS.getPlayer()[\\\"skills\\\"][\\\"hacking\\\"]  \\n}\\nsetInterval(update, 1000);`;\\n    rhiUI.floatWindow('test', 'header', 300, 300, 5, 3, 10, content);\\n}\\n\",\"filename\":\"/ui/exampleFloat.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/ui/ui.js\",\"url\":\"blob:file:///bb0d57ed-d6ef-47ed-9fb2-efa09abb7b93\",\"moduleSequenceNumber\":361},{\"filename\":\"/ui/exampleFloat.js\",\"url\":\"blob:file:///3fba52fe-891c-47ba-839c-1a1688899de3\",\"moduleSequenceNumber\":13200}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getSharePower())\\n}\",\"filename\":\"checkshare.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"checkshare.js\",\"url\":\"blob:file:///44ad4ef0-ad46-4f0f-88b1-1e4959bc68cc\",\"moduleSequenceNumber\":86808}],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable @typescript-eslint/no-unused-vars */\\n\\nimport { miscHelper } from \\\"/src/helpers.js\\\";\\n\\n/**  @param {import(\\\"../\\\").NS} ns */\\nexport async function main(ns) {\\n\\t//get gang aug types\\n\\t/*let types = [];\\n\\tns.gang.getEquipmentNames().forEach((e) => {\\n\\t\\tconst eType = ns.gang.getEquipmentType(e);\\n\\t\\tfor (let i = 0; i < types.length; i++) {\\n\\t\\t\\tif (types[i] == eType) return;\\n\\t\\t}\\n\\t\\ttypes.push(eType);\\n\\t});\\n\\tns.tprint(types);*/\\n\\n\\tns.tprint(miscHelper.findRoute(ns, \\\"The-Cave\\\"));\\n}\\n\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/helpers.js\",\"url\":\"blob:file:///4f87916d-c319-4573-b6bd-7dee1bbdf5cb\",\"moduleSequenceNumber\":16398},{\"filename\":\"test.js\",\"url\":\"blob:file:///d4e27638-1fc9-41c8-b50b-92d46aa1e5f3\",\"moduleSequenceNumber\":16464}],\"dependents\":[],\"ramUsage\":10.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function WaitPids(ns, pids, hooks, vars, instance, cycles) {\\n\\tif (!Array.isArray(pids)) pids = [pids];\\n\\twhile (pids.some(p => ns.getRunningScript(p) != undefined)) {\\n\\t\\tawait ns.sleep(5);\\n\\t}\\n}\\n\\nconst col = {\\n  \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n  \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n  \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n  \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n  \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n  \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n  \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n  \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n  \\\"d\\\": \\\"\\\\x1b[0m\\\"\\n}\\n\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n  \\n}\\n\",\"filename\":\"/src/karen.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const rhiUI = {\\n  createElement: function (type) {\\n    return document.createElement(type);\\n  },\\n  floatWindow: function(id, head, width, height, padding, bWeight, bRadius, content) {\\n    let div = document.createElement(\\\"div\\\");\\n    let iDiv = document.createElement(\\\"div\\\");\\n    div.style.position = \\\"absolute\\\";\\n    div.style.padding = \\\"0px\\\";\\n    div.style.top = \\\"0px\\\";\\n    div.style.left = \\\"0px\\\";\\n    div.style.width = width + \\\"px\\\";\\n    div.style.height = height + \\\"px\\\";\\n    div.style.backgroundColor = \\\"rgba(20, 20, 20, 1)\\\";\\n    div.style.color = \\\"white\\\";\\n    div.style.zIndex = \\\"9999\\\";\\n    div.style.border = bWeight + \\\"px solid rgb(68, 68, 68)\\\";\\n    div.style.borderRadius = bRadius + \\\"px\\\";\\n    div.id = id;\\n    div.classList.add(\\\"rhiUI\\\");\\n    iDiv.style.padding = padding + \\\"px\\\";\\n    iDiv.id = id + \\\"in\\\";\\n    let header = document.createElement(\\\"div\\\");\\n    header.style.backgroundColor = \\\"rgba(40, 40, 40, 1)\\\";\\n    header.innerHTML = '<h3 id=\\\"' + id + 'head\\\" style=\\\"margin: 0px;\\\"> ' + head + ' </h3>';\\n    header.style.color = \\\"white\\\";\\n    header.id = id + \\\"header\\\";\\n    header.style.cursor = \\\"move\\\";\\n    header.style.padding = padding + \\\"px\\\";\\n    header.style.borderRadius = bRadius + \\\"px \\\" + bRadius + \\\"px 0px 0px\\\";\\n    header.style.borderBottom = bWeight + \\\"px solid rgb(68, 68, 68)\\\";\\n    let min = document.createElement(\\\"a\\\");\\n    min.id = id + \\\"min\\\";\\n    min.innerHTML = \\\"🗕\\\";\\n    min.style.color = \\\"white\\\";\\n    min.style.textDecoration = \\\"none\\\";\\n    min.style.float = \\\"right\\\";\\n    min.style.display = \\\"inline-block\\\";\\n    rhiUI.createGlobalScript(\\\"rhiUIelements\\\", \\\"var \\\" + id + \\\"min = true; const \\\" + id + \\\"Height = \\\" + height + \\\";\\\");\\n    min.onclick = eval('rhiUI.minimize(\\\"' + id + '\\\")')\\n    div.appendChild(header);\\n    iDiv.innerHTML = content;\\n    div.appendChild(iDiv);\\n    document.body.appendChild(div);\\n    let heado = document.getElementById(id + \\\"head\\\");\\n    heado.appendChild(min);\\n    this.dragElement(div);\\n    return div;\\n  },\\n  createGlobalScript: function (id, script) {\\n    if (document.getElementById(id) == null) {\\n      let s = document.createElement(\\\"script\\\");\\n      s.id = id;\\n      s.innerHTML = script;\\n      document.head.appendChild(s);\\n    } else {\\n      console.log(\\\"rhiUI: WARN: Script with that ID already exists! Appending input to existing script.\\\");\\n      document.getElementById(id).innerHTML += script;\\n    }\\n  },\\n  createGlobNS: function(ns) { ns.run(\\\"/ui/nsRef.js\\\"); },\\n  dragElement: function(elmnt) {\\n    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\\n    if (document.getElementById(elmnt.id + \\\"header\\\")) {\\n      document.getElementById(elmnt.id + \\\"header\\\").onmousedown = dragMouseDown;\\n    } else {\\n      elmnt.onmousedown = dragMouseDown;\\n    }\\n    function dragMouseDown(e) {\\n      e = e || window.event;\\n      e.preventDefault();\\n      pos3 = e.clientX;\\n      pos4 = e.clientY;\\n      document.onmouseup = closeDragElement;\\n      document.onmousemove = elementDrag;\\n    }\\n    function elementDrag(e) {\\n      e = e || window.event;\\n      e.preventDefault();\\n      pos1 = pos3 - e.clientX;\\n      pos2 = pos4 - e.clientY;\\n      pos3 = e.clientX;\\n      pos4 = e.clientY;\\n      elmnt.style.top = (elmnt.offsetTop - pos2) + \\\"px\\\";\\n      elmnt.style.left = (elmnt.offsetLeft - pos1) + \\\"px\\\";\\n    }\\n    function closeDragElement() {\\n      document.onmouseup = null;\\n      document.onmousemove = null;\\n    }\\n  },\\n  minimize: function(id) {\\n    if (eval(id + \\\"min\\\") == false) {\\n      document.getElementById(id + \\\"in\\\").style.display = \\\"none\\\";\\n      document.getElementById(id).style.height = \\\"auto\\\";\\n      document.getElementById(id + \\\"min\\\").innerHTML = \\\"🗖\\\";\\n      eval(id + \\\"min = true;\\\");\\n    } else {\\n      document.getElementById(id + \\\"in\\\").style.display = \\\"block\\\";\\n      document.getElementById(id).style.height = eval(id + \\\"Height\\\") + \\\"px\\\";\\n      document.getElementById(id + \\\"min\\\").innerHTML = \\\"🗕\\\";\\n      eval(id + \\\"min = false;\\\");\\n    }\\n  }\\n}\\n\",\"filename\":\"/ui/forCode.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":52.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let EMPTYARR=[],SHORTSPLIT=/$|[!-@[-`{-~][\\\\s\\\\S]*/g,isArray=Array.isArray,parseValue=function(e){if(\\\"\\\"===e)return\\\"\\\";if(\\\"false\\\"===e)return!1;let i=+e;return 0*i==0?i:e},parseAlias=function(e){let i={},r,t,l;for(let o in e){l=e[o],r=i[o]=isArray(l)?l:[l];for(let s=0;s<r.length;s++){t=i[r[s]]=[o];for(let n=0;n<r.length;n++)s!==n&&t.push(r[n])}}return i},parseDefault=function(e,i){let r={},t,l;for(let o in i)if(t=e[o],l=i[o],r[o]=l,void 0===t)e[o]=EMPTYARR;else for(let s=0;s<t.length;s++)r[t[s]]=l;return r},parseOptions=function(e,i,r){let t={},l,o;if(void 0!==i)for(let s=0;s<i.length;s++)if(o=e[l=i[s]],t[l]=r,void 0===o)e[l]=EMPTYARR;else for(let n=0,f=o.length;n<f;n++)t[o[n]]=r;return t},write=function(e,i,r,t,l){let o,s=t[i],n=void 0===s?-1:s.length;if(n>=0||void 0===l||l(i)){void 0===(o=e[i])?e[i]=r:isArray(o)?o.push(r):e[i]=[o,r];for(let f=0;f<n;f++)e[s[f]]=e[i]}};export default function e(e,i){let r=(i=i||{}).unknown,t=parseAlias(i.alias),l=parseOptions(t,i.string,\\\"\\\"),o=parseDefault(t,i.default),s=parseOptions(t,i.boolean,!1),n=i.stopEarly,f=[],$={_:f},a,u,d,p,v;for(let _=0,c=e.length;_<c;_++)if(\\\"-\\\"!==(u=e[_])[0]||\\\"-\\\"===u){if(n)for(;_<c;)f.push(e[_++]);else f.push(u)}else if(\\\"--\\\"===u)for(;++_<c;)f.push(e[_]);else if(\\\"-\\\"===u[1])d=u.indexOf(\\\"=\\\",2),\\\"n\\\"===u[2]&&\\\"o\\\"===u[3]&&\\\"-\\\"===u[4]?(a=u.slice(5,d>=0?d:void 0),v=!1):v=d>=0?void 0!==s[a=u.slice(2,d)]||(void 0===l[a]?parseValue(u.slice(d+1)):u.slice(d+1)):void 0!==s[a=u.slice(2)]||(c===_+1||\\\"-\\\"===e[_+1][0]?void 0===l[a]||\\\"\\\":void 0===l[a]?parseValue(e[++_]):e[++_]),write($,a,v,t,r);else{SHORTSPLIT.lastIndex=2,d=(p=SHORTSPLIT.exec(u)).index,v=p[0];for(let h=1;h<d;h++)write($,a=u[h],h+1<d?void 0===l[a]||u.substring(h+1,h=d)+v:\\\"\\\"===v?c===_+1||\\\"-\\\"===e[_+1][0]?void 0===l[a]||\\\"\\\":void 0!==s[a]||(void 0===l[a]?parseValue(e[++_]):e[++_]):void 0!==s[a]||(void 0===l[a]?parseValue(v):v),t,r)}for(let g in o)void 0===$[g]&&($[g]=o[g]);for(let A in s)void 0===$[A]&&($[A]=!1);for(let R in l)void 0===$[R]&&($[R]=\\\"\\\");return $};\\n\",\"filename\":\"/ui/geopts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var running;\\nimport getopts from \\\"/ui/geopts.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\"), !0 !== running && (running = !1);\\n    let opts = getopts(ns.args, matrixOpts(ns));\\n    !0 === opts.help\\n        ? help(ns)\\n        : opts._.length\\n            ? error(ns, \\\"too many arguments.\\\")\\n            : \\\"boolean\\\" == typeof opts.blur || opts.blur < 0 || opts.blur > 10 || !Number.isInteger(Math.floor(opts.blur))\\n                ? error(ns, \\\"blur must be an integer from 0 to 10.\\\")\\n                : \\\"boolean\\\" != typeof opts.color && Number.isInteger(Math.floor(opts.color))\\n                    ? \\\"boolean\\\" == typeof opts.delay || opts.delay < 1 || opts.delay > 1e4 || !Number.isInteger(Math.floor(opts.delay))\\n                        ? error(ns, \\\"delay must be an integer from 1 to 10000.\\\")\\n                        : !1 !== opts.rainbow && (opts.rainbow < 1 || opts.rainbow > 100 || !Number.isInteger(Math.floor(opts.rainbow)))\\n                            ? error(ns, \\\"rainbow must be an integer from 1 to 100.\\\")\\n                            : (\\\"boolean\\\" == typeof opts.opacity || opts.opacity < 0 || opts.opacity > 100 || !Number.isInteger(Math.floor(opts.opacity))) && error(ns, \\\"opacity must be an integer from 0 to 100.\\\")\\n                    : error(ns, \\\"color must be an integer from 0 to 359.\\\"),\\n        !0 === opts.random && (opts.color = Math.floor(360 * Math.random())),\\n        !0 === opts.rainbow ? (opts.rainbow = 10) : (opts.rainbow = Math.floor(opts.rainbow)),\\n        running &&\\n            (ns.tprintf(\\\"%s: ERROR: script is already running.\\\", ns.getScriptName()),\\n                ns.tprint(\\\"ERROR: Script is already running with\\\"),\\n                ns.tprint(\\\"ERROR: other arguments. Kill previous\\\"),\\n                ns.tprint(\\\"ERROR: PIDs if you want to use new \\\"),\\n                ns.tprint(\\\"ERROR: arguments.\\\"),\\n                ns.exit());\\n    let doc = eval(\\\"document\\\"), win = eval(\\\"window\\\");\\n    running || mCleanup(), ns.atExit(mCleanup);\\n    try {\\n        doc.querySelector(\\\"#terminal\\\").parentNode;\\n    }\\n    catch (e) {\\n        ns.tail(), ns.print(\\\"ERROR: Could not find terminal.\\\"), ns.print(\\\"ERROR: Please switch back to the terminal\\\"), ns.print(\\\"ERROR: before running this script.\\\"), error(ns, \\\"could not find terminal.\\\");\\n    }\\n    ns.print(\\\"INFO: Matrix terminal background started.\\\"),\\n        ns.print(sprintf(\\\"INFO: Delay: %dms Hue: %d\\\\xb0 Opacity: %d%%\\\", Math.floor(opts.delay), Math.floor(opts.color), Math.floor(opts.opacity))),\\n        ns.print(sprintf(\\\"INFO: Blur: %dpx Rainbow: %s\\\", Math.floor(opts.blur), !1 === opts.rainbow ? \\\"Off\\\" : Math.floor(opts.rainbow) + \\\"s\\\"));\\n    var style = doc.createElement(\\\"style\\\");\\n    Object.assign(style, { id: \\\"matrix-css\\\" }), (style.type = \\\"text/css\\\"), (style.innerHTML = matrixCSS(opts)), doc.head.appendChild(style);\\n    let term = doc.querySelector(\\\"#terminal\\\").parentNode;\\n    Object.assign(term.parentNode, { id: \\\"transparent-term\\\" });\\n    let canvas = doc.createElement(\\\"canvas\\\");\\n    Object.assign(canvas, { id: \\\"matrix-canvas\\\" }), term.parentNode.insertBefore(canvas, term);\\n    var ctx = canvas.getContext(\\\"2d\\\"), columns = [], chars = [];\\n    (canvas.height = win.screen.height), (canvas.width = win.screen.width), ctx.translate(canvas.width, 0), ctx.scale(-1, 1), (ctx.shadowBlur = 2);\\n    for (let i = 0; i < 300; columns[i] = 1, chars[i++] = \\\"゠\\\")\\n        ;\\n    for (running = !0;;)\\n        (ctx.fillStyle = \\\"rgba(0,0,0,0.05)\\\"),\\n            (ctx.shadowColor = \\\"#000\\\"),\\n            ctx.fillRect(0, 0, canvas.width, canvas.height),\\n            columns.map(function (e, r) {\\n                (ctx.fillStyle = ctx.shadowColor = \\\"#000\\\"),\\n                    ctx.fillRect(10 * r, e - 10, 10, 10),\\n                    (ctx.fillStyle = ctx.shadowColor = \\\"#0F0\\\"),\\n                    ctx.fillText(chars[r], 10 * r, e - 10),\\n                    (columns[r] = e > 758 + 1e4 * Math.random() ? 0 : e + 10),\\n                    (chars[r] = String.fromCharCode(12448 + 96 * Math.random())),\\n                    (ctx.fillStyle = ctx.shadowColor = \\\"#AFA\\\"),\\n                    ctx.fillText(chars[r], 10 * r, e);\\n            }),\\n            await ns.sleep(opts.delay);\\n}\\nfunction matrixCSS(e) {\\n    let r = sprintf(\\\" rainbow %ds infinite\\\", !1 !== e.rainbow ? e.rainbow : 0);\\n    return [\\n        \\\"canvas#matrix-canvas {\\\",\\n        \\\" position: fixed;\\\",\\n        \\\" top: 0;\\\",\\n        \\\" left: 0;\\\",\\n        \\\" pointer-events: none;\\\",\\n        \\\" z-index: -100;\\\",\\n        \\\" opacity:\\\" + sprintf(\\\" %d%%;\\\", Math.floor(e.opacity)),\\n        \\\" filter:\\\" + sprintf(\\\" hue-rotate(%ddeg)\\\", Math.floor(e.color) % 360) + sprintf(\\\" blur(%dpx)\\\", Math.floor(e.blur)) + \\\";\\\",\\n        !1 !== e.rainbow ? \\\" -webkit-animation:\\\" + r + \\\";\\\" : \\\"\\\",\\n        \\\"}\\\",\\n        \\\"\\\",\\n        \\\"@-webkit-keyframes rainbow {\\\",\\n        \\\" 0% { -webkit-filter: hue-rotate(0deg); }\\\",\\n        \\\" 100% { -webkit-filter: hue-rotate(359deg); }\\\",\\n        \\\"}\\\",\\n        \\\".MuiPaper-root {\\\",\\n        \\\" background-color: rgba(33,37,43,0.1);\\\",\\n        \\\" backdrop-filter: blur(1px);\\\",\\n        \\\"}\\\",\\n        \\\".MuiButtonBase-root {\\\",\\n        \\\" background-color: rgba(33,37,43,0.1);\\\",\\n        \\\" backdrop-filter: blur(1px);\\\",\\n        \\\"}\\\",\\n        \\\".MuiButton-root {\\\",\\n        \\\" background-color: rgba(75,82,99,0.1);\\\",\\n        \\\" backdrop-filter: blur(1px);\\\",\\n        \\\"}\\\",\\n        \\\".Mui-selected {\\\",\\n        \\\" background-color: rgba(75,82,99,0.4) !important;\\\",\\n        \\\" backdrop-filter: blur(1px);\\\",\\n        \\\"}\\\",\\n        \\\".MuiInput-root {\\\",\\n        \\\" background-color: rgba(33,37,43,0.1);\\\",\\n        \\\" backdrop-filter: blur(1px);\\\",\\n        \\\"}\\\",\\n    ].join(\\\"\\\\n\\\");\\n}\\nfunction mCleanup() {\\n    running = !1;\\n    let doc = eval(\\\"document\\\");\\n    try {\\n        doc.getElementById(\\\"matrix-canvas\\\").remove(), doc.getElementById(\\\"matrix-css\\\").remove();\\n    }\\n    catch (e) { }\\n}\\nfunction error(e, r, o = 0) {\\n    e.tprintf(\\\"%s: %s\\\", e.getScriptName(), r), help(e);\\n}\\nfunction matrixOpts(e) {\\n    return {\\n        boolean: { help: [\\\"h\\\", \\\"help\\\"], random: [\\\"r\\\", \\\"random\\\"] },\\n        string: { blur: [\\\"b\\\", \\\"blur\\\"], color: [\\\"c\\\", \\\"color\\\"], delay: [\\\"d\\\", \\\"delay\\\"], opacity: [\\\"o\\\", \\\"opacity\\\"], rainbow: [\\\"R\\\", \\\"rainbow\\\"] },\\n        default: { blur: 0, color: 0, delay: 33, help: !1, opacity: 25, rainbow: !1, random: !1 },\\n        alias: { blur: [\\\"b\\\", \\\"blur\\\"], color: [\\\"c\\\", \\\"color\\\"], delay: [\\\"d\\\", \\\"delay\\\"], help: [\\\"h\\\", \\\"help\\\"], opacity: [\\\"o\\\", \\\"opacity\\\"], random: [\\\"r\\\", \\\"random\\\"], rainbow: [\\\"R\\\", \\\"rainbow\\\"] },\\n        unknown(r) {\\n            \\\"t\\\" == r && e.tail(), error(e, sprintf(\\\"invalid option: %s\\\\n\\\", (r.length > 1 ? \\\"--\\\" : \\\"-\\\") + r));\\n        },\\n    };\\n}\\nfunction help(e) {\\n    let r = e.tprintf;\\n    r(\\\"Usage: %s [OPTIONS]\\\", e.getScriptName()),\\n        r(\\\"\\\\nChanges your terminal background to a green matrix style output.\\\\n\\\\n -b, --blur N Apply blur with N pixels. (default: 0)\\\\n -c, --color DEG Color hue in degrees from the base. (default: 0)\\\\n -d, --delay MS Delay in milliseconds between updates. (default: 33)\\\\n Lower values result in faster animation.\\\\n -o, --opacity PCT Percentage of opacity. (default: 25)\\\\n -R, --rainbow [SEC] Loop through rainbow colors in seconds. (default: Off|10)\\\\n\\\\n -r, --random Chooses a random color. Overrides -c and --color.\\\\n -t, --tail Tail the output log.\\\\n\\\\n -h, --help This help.\\\\n\\\\nNOTE: Can only be run when the terminal is visible.\\\"),\\n        e.exit();\\n}\\n\",\"filename\":\"/ui/matrix.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/ui/geopts.js\",\"url\":\"blob:file:///60d0e117-5473-4f2f-9784-908bd277382d\",\"moduleSequenceNumber\":84},{\"filename\":\"/ui/matrix.js\",\"url\":\"blob:file:///45a49c43-f6e6-41ea-974b-cb4de26baa9b\",\"moduleSequenceNumber\":3250}],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let corp = eval(\\\"ns.corporation\\\");\\n    if (!ns.getPlayer()['hasCorporation']) {\\n        ns.tprint(\\\"You don't have a corporation you dingus\\\");\\n        return;\\n    }\\n    let corpObj = corp.getCorporation();\\n    if (corpObj[])\\n        ;\\n}\\n\",\"filename\":\"/src/corp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":295}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.tail();ns.disableLog(\\\"ALL\\\");ns.clearLog();\\r\\n\\t/*checked to work in 1.7 and 2.0 (8e859d84) in BNs 3,9 and 11\\r\\n\\tNOTE!! SF3.3 required for this to work\\r\\n\\r\\n\\tScript created by Mughur, following step-by-step the guide compiled and arranged by /u/angrmgmt00 link: https://docs.google.com/document/d/e/2PACX-1vTzTvYFStkFjQut5674ppS4mAhWggLL5PEQ_IbqSRDDCZ-l-bjv0E6Uo04Z-UfPdaQVu4c84vawwq8E/pub\\r\\n\\tRun this script before creating the corporation, running the script after corp creation or doing anything to corp manually during it's runtime may cause unwanted behaviour\\r\\n\\tThe script is designed to work on all BNs with the exception of BN13 (stops working in later BN12s, not sure at which point).\\r\\n\\tIn order for it to work properly in nodes with valuation <=0.5, one or more of the steps has to be skipped or tinkered.\\r\\n\\tScript is purposefully not optimized, as I do not want to give out too many tricks on how to build the main corp script.\\r\\n\\tCorporations are OP, I think people should put the work in in order to fully utilize them, but feel free to get inspirations from this script.\\r\\n\\r\\n\\tThis script will take about 20 minutes to run, starts by creating a corporation and ends after starting the development of 1st tobacco product and spending available money on upgrades.\\r\\n\\t*/\\r\\n\\r\\n\\t// enter wanted corporation, agriculture and tobacco division names\\r\\n\\tconst companyName=\\\"Money Printer\\\";\\r\\n\\tconst agricultureName=\\\"AG\\\";\\r\\n\\tconst tobaccoName=\\\"TB\\\";\\r\\n\\r\\n\\t//constants, do not touch\\r\\n\\tconst jobs=[\\\"Operations\\\",\\\"Engineer\\\",\\\"Business\\\",\\\"Management\\\",\\\"Research & Development\\\"];\\r\\n\\tconst boostMaterials=[\\\"Hardware\\\",\\\"Robots\\\",\\\"AI Cores\\\",\\\"Real Estate\\\"]\\r\\n\\tconst levelUpgrades=[\\\"Smart Factories\\\",\\\"Smart Storage\\\",\\\"FocusWires\\\",\\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\",\\\"Wilson Analytics\\\"]\\r\\n\\tconst cities=[\\\"Aevum\\\",\\\"Chongqing\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Volhaven\\\",\\\"Sector-12\\\"];\\r\\n\\t\\r\\n\\tawait startstuff();\\r\\n\\tawait initialPurchases();\\r\\n\\tawait waitForTheLazyFucksToGetTheirShitTogether();\\r\\n\\tawait invest(1);\\r\\n\\tawait upgradeStuff();\\r\\n\\tawait buyMoreStuff();\\r\\n\\tawait invest(2);\\r\\n\\tawait buyEvenMoreStuff();\\r\\n\\tawait expandToTobacco();\\r\\n\\t// enter the main corp script below or remove/comment out ns.spawn if you don't have one\\r\\n\\t//ns.spawn(\\\"corp.js\\\");\\r\\n\\r\\n\\tasync function startstuff(){\\r\\n\\t\\tns.corporation.createCorporation(companyName,false);\\r\\n\\t\\tns.corporation.createCorporation(companyName,true);\\r\\n\\t\\tns.corporation.expandIndustry(\\\"Agriculture\\\",agricultureName);\\r\\n\\t\\tns.corporation.unlockUpgrade(\\\"Smart Supply\\\");\\r\\n\\t\\t\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tif (city!=cities[5]){\\r\\n\\t\\t\\t\\tns.corporation.expandCity(agricultureName,city);\\r\\n\\t\\t\\t\\tns.corporation.purchaseWarehouse(agricultureName,city);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.corporation.setSmartSupply(agricultureName,city,true);\\r\\n\\t\\t\\tfor (let i=0;i<3;i++){\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(agricultureName,city,ns.corporation.hireEmployee(agricultureName,city).name,jobs[i])\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.corporation.sellMaterial(agricultureName,city,\\\"Plants\\\",\\\"MAX\\\",\\\"MP\\\");\\r\\n\\t\\t\\tns.corporation.sellMaterial(agricultureName,city,\\\"Food\\\",\\\"MAX\\\",\\\"MP\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ttry{ns.corporation.hireAdVert(agricultureName);\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[0])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[2])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[3])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[4])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[5])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[0])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[2])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[3])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[4])\\r\\n\\t\\tns.corporation.levelUpgrade(levelUpgrades[5])}catch{}\\r\\n\\r\\n\\t\\tfor (let i=0;i<2;i++){\\r\\n\\t\\t\\tfor (let city of cities){\\r\\n\\t\\t\\t\\ttry{ns.corporation.upgradeWarehouse(agricultureName,city,1);}catch{}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync function initialPurchases(){\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[0],12.5);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[2],7.5);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[3],2700);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\twhile(ns.corporation.getMaterial(agricultureName,cities[0],boostMaterials[0]).qty==0){\\r\\n\\t\\t\\tns.print(\\\"waiting for the state loop to finish\\\")\\r\\n\\t\\t\\tawait ns.sleep(0);\\r\\n\\t\\t\\tns.clearLog();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[0],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[2],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[3],0);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync function waitForTheLazyFucksToGetTheirShitTogether(){\\r\\n\\t\\twhile(true){\\r\\n\\t\\t\\tlet avgs=[0,0,0];\\r\\n\\t\\t\\tfor (let city of cities){\\r\\n\\t\\t\\t\\tfor (let emp of ns.corporation.getOffice(agricultureName,city).employees){\\r\\n\\t\\t\\t\\t\\tavgs[0]+=(ns.corporation.getEmployee(agricultureName,city,emp).mor)/18\\r\\n\\t\\t\\t\\t\\tavgs[1]+=(ns.corporation.getEmployee(agricultureName,city,emp).hap)/18\\r\\n\\t\\t\\t\\t\\tavgs[2]+=(ns.corporation.getEmployee(agricultureName,city,emp).ene)/18\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.print(\\\"waiting for employee stats to rise\\\");\\r\\n\\t\\t\\tns.print(\\\"   avg morale: \\\"+avgs[0].toFixed(3)+\\\"/100\\\")\\r\\n\\t\\t\\tns.print(\\\"avg happiness: \\\"+avgs[1].toFixed(3)+\\\"/99.998\\\")\\r\\n\\t\\t\\tns.print(\\\"   avg energy: \\\"+avgs[2].toFixed(3)+\\\"/99.998\\\")\\r\\n\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\tns.clearLog();\\r\\n\\t\\t\\tif (avgs[0]>=99.99999&&avgs[1]>=99.998&&avgs[2]>=99.998)break;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync function invest(i){\\r\\n        await ns.sleep(10000);\\r\\n\\t\\tns.tprint(\\\"investment offer: \\\"+ns.nFormat(ns.corporation.getInvestmentOffer().funds,\\\"0.00a\\\"))\\r\\n\\t\\tns.corporation.acceptInvestmentOffer();\\r\\n\\t}\\r\\n\\r\\n\\tasync function upgradeStuff(){\\r\\n\\t\\ttry{ns.corporation.levelUpgrade(levelUpgrades[1]);}catch{}\\r\\n\\t\\ttry{ns.corporation.levelUpgrade(levelUpgrades[1]);}catch{}\\r\\n\\t\\tfor (let i=0;i<8;i++){\\r\\n\\t\\t\\ttry{ns.corporation.levelUpgrade(levelUpgrades[0])}catch{};\\r\\n\\t\\t\\ttry{ns.corporation.levelUpgrade(levelUpgrades[1])}catch{};\\r\\n\\t\\t}\\r\\n\\t\\tfor (let i=0;i<2;i++){\\r\\n\\t\\t\\tfor (let city of cities){\\r\\n\\t\\t\\t\\ttry{ns.corporation.upgradeOfficeSize(agricultureName,city,3);\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(agricultureName,city,ns.corporation.hireEmployee(agricultureName,city).name,jobs[0])\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(agricultureName,city,ns.corporation.hireEmployee(agricultureName,city).name,jobs[1])\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(agricultureName,city,ns.corporation.hireEmployee(agricultureName,city).name,jobs[3])}catch{}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (let i=0;i<7;i++){\\r\\n\\t\\t\\tfor (let city of cities){\\r\\n\\t\\t\\t\\ttry{ns.corporation.upgradeWarehouse(agricultureName,city,1);}catch{}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync function buyMoreStuff(){\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[0],267.5);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[1],9.6);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[2],244.5);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[3],11940);\\r\\n\\t\\t}\\r\\n\\t\\twhile(ns.corporation.getMaterial(agricultureName,cities[0],boostMaterials[0]).qty<2800){\\r\\n\\t\\t\\tns.print(\\\"waiting for the state loop to finish\\\")\\r\\n\\t\\t\\tawait ns.sleep(0);\\r\\n\\t\\t\\tns.clearLog();\\r\\n\\t\\t}\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[0],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[1],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[2],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[3],0);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync function buyEvenMoreStuff(){\\r\\n\\t\\tfor (let i=0;i<9;i++){\\r\\n\\t\\t\\tfor (let city of cities){\\r\\n\\t\\t\\t\\ttry{ns.corporation.upgradeWarehouse(agricultureName,city,1);}catch{}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[0],650);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[1],63);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[2],375);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[3],8400);\\r\\n\\t\\t}\\r\\n\\t\\twhile(ns.corporation.getMaterial(agricultureName,cities[0],boostMaterials[0]).qty<9300){\\r\\n\\t\\t\\tns.print(\\\"waiting for the state loop to finish\\\")\\r\\n\\t\\t\\tawait ns.sleep(0);\\r\\n\\t\\t\\tns.clearLog();\\r\\n\\t\\t}\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[0],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[1],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[2],0);\\r\\n\\t\\t\\tns.corporation.buyMaterial(agricultureName,city,boostMaterials[3],0);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync function expandToTobacco(){\\r\\n\\t\\ttry{ns.corporation.expandIndustry(\\\"Tobacco\\\",tobaccoName);}catch{ns.tprint(\\\"Couldn't expand.. no money\\\");ns.exit();}\\r\\n\\t\\tns.corporation.expandCity(tobaccoName,cities[0]);\\r\\n\\t\\tns.corporation.purchaseWarehouse(tobaccoName,cities[0]);\\r\\n\\t\\ttry{\\r\\n\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,cities[0],ns.corporation.hireEmployee(tobaccoName,cities[0]).name,jobs[0])\\r\\n\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,cities[0],ns.corporation.hireEmployee(tobaccoName,cities[0]).name,jobs[1])\\r\\n\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,cities[0],ns.corporation.hireEmployee(tobaccoName,cities[0]).name,jobs[2])\\r\\n\\t\\t\\tfor (let i=0;i<9;i++){\\r\\n\\t\\t\\t\\tns.corporation.upgradeOfficeSize(tobaccoName,cities[0],3);\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,cities[0],ns.corporation.hireEmployee(tobaccoName,cities[0]).name,jobs[0])\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,cities[0],ns.corporation.hireEmployee(tobaccoName,cities[0]).name,jobs[1])\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,cities[0],ns.corporation.hireEmployee(tobaccoName,cities[0]).name,jobs[3])\\r\\n\\t\\t\\t}}catch{}\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tfor (let city of cities) {\\r\\n\\t\\t\\t\\tif (city==cities[0])continue;\\r\\n\\t\\t\\t\\tif (city!=cities[5]){\\r\\n\\t\\t\\t\\t\\tns.corporation.expandCity(tobaccoName,city);\\r\\n\\t\\t\\t\\tns.corporation.purchaseWarehouse(tobaccoName,city);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[0])\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[1])\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[2])\\r\\n\\t\\t\\t}\\r\\n\\t\\t}catch{};\\r\\n\\t\\t\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tif (city==cities[0])continue;\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tns.corporation.upgradeOfficeSize(tobaccoName,city,3)\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[0])\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[4])\\t\\r\\n\\t\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[4])\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcatch {}\\r\\n\\t\\t}\\r\\n\\t\\tfor (let city of cities){\\r\\n\\t\\t\\tif (city==cities[0])continue;\\r\\n\\t\\t\\ttry{ns.corporation.upgradeOfficeSize(tobaccoName,city,3)\\r\\n\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[1])\\r\\n\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[3])\\t\\r\\n\\t\\t\\tawait ns.corporation.assignJob(tobaccoName,city,ns.corporation.hireEmployee(tobaccoName,city).name,jobs[3])}catch{}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tns.corporation.makeProduct(tobaccoName,cities[0],\\\"Stick 1\\\",ns.corporation.getCorporation().funds/20,ns.corporation.getCorporation().funds/20);\\r\\n\\t\\ttry{for (let i=2;i<6;i++){\\r\\n\\t\\t\\twhile(ns.corporation.getUpgradeLevel(levelUpgrades[i])<20){\\r\\n\\t\\t\\t\\tns.corporation.levelUpgrade(levelUpgrades[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}}catch{}\\r\\n\\t\\twhile(ns.corporation.getCorporation().funds>3e12){\\r\\n\\t\\t\\tns.corporation.levelUpgrade(levelUpgrades[6]);\\r\\n\\t\\t}\\r\\n\\t\\twhile(ns.corporation.getCorporation().funds>ns.corporation.getHireAdVertCost(tobaccoName)){\\r\\n\\t\\t\\tns.corporation.hireAdVert(tobaccoName);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/src/corpExm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getWebpackModules() {\\n  const moduleMap = {};\\n  const _moduleID = (Math.random() * 1e18).toString(36);\\n  globalThis[\\\"window\\\"].webpackJsonp.push([\\n    [1e3],\\n    { [_moduleID]: (_e, _t, i) => {\\n      let m = i.c;\\n      Object.keys(m).forEach((mod) => {\\n        moduleMap[mod] = m[mod].exports;\\n      });\\n    } },\\n    [[_moduleID]]\\n  ]);\\n  return moduleMap;\\n}\\nconst M = getWebpackModules();\\nglobalThis.P = Object.values(M).find((module) => {\\n  return Object.keys(module ?? {}).length === 2 && module?.a?.bitNodeN !== void 0;\\n}).a;\\nglobalThis.R = Object.values(M).find((module) => {\\n  return Object.keys(module ?? {}).length === 2 && module?.b?.isInitialized !== void 0;\\n}).b;\\nglobalThis.T = Object.values(M).find((module) => {\\n  return Object.keys(module ?? {}).length === 1 && module?.a?.commandHistory !== void 0;\\n}).a;\\nglobalThis.E = Object.values(M).find((module) => {\\n  return Object.keys(module ?? {}).length === 1 && module?.a?._lastUpdate !== void 0;\\n}).a;\\nglobalThis.M = M;\\nasync function main(ns) {\\n}\\nexport { main };\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JoaS9jb2RlL2JpdGJ1cm5lci1zY3JpcHRzL3NyYy9zcmMvZGV2LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vb3BlbiBkZXYgbWVudSB3aXRob3V0IGRldiBidWlsZFxuZnVuY3Rpb24gZ2V0V2VicGFja01vZHVsZXMoKSB7XG4gIGNvbnN0IG1vZHVsZU1hcCA9IHt9O1xuICBjb25zdCBfbW9kdWxlSUQgPSAoTWF0aC5yYW5kb20oKSoxZTE4KS50b1N0cmluZygzNik7XG4gIChnbG9iYWxUaGlzWyd3aW5kb3cnXSBhcyBhbnkpLndlYnBhY2tKc29ucC5wdXNoKFtcbiAgICBbMWUzXSxcbiAgICB7W19tb2R1bGVJRF06IChfZSwgX3QsIGkpID0+IHtcbiAgICAgIGxldCBtID0gaS5jO1xuICAgICAgT2JqZWN0LmtleXMobSkuZm9yRWFjaCgobW9kKSA9PiB7XG4gICAgICAgIG1vZHVsZU1hcFttb2RdID0gbVttb2RdLmV4cG9ydHM7XG4gICAgICB9KTtcbiAgICB9fSxcbiAgICBbW19tb2R1bGVJRF1dXG4gIF0pO1xuICByZXR1cm4gbW9kdWxlTWFwO1xufVxuY29uc3QgTSA9IGdldFdlYnBhY2tNb2R1bGVzKCk7XG5nbG9iYWxUaGlzLlAgPSAoT2JqZWN0LnZhbHVlcyhNKS5maW5kKChtb2R1bGU6IGFueSkgPT4geyByZXR1cm4gKE9iamVjdC5rZXlzKG1vZHVsZSA/PyB7fSkubGVuZ3RoID09PSAyKSAmJiAobW9kdWxlPy5hPy5iaXROb2RlTiAhPT0gdW5kZWZpbmVkKTsgfSkgYXMgYW55KS5hO1xuZ2xvYmFsVGhpcy5SID0gKE9iamVjdC52YWx1ZXMoTSkuZmluZCgobW9kdWxlOiBhbnkpID0+IHsgcmV0dXJuIChPYmplY3Qua2V5cyhtb2R1bGUgPz8ge30pLmxlbmd0aCA9PT0gMikgJiYgKG1vZHVsZT8uYj8uaXNJbml0aWFsaXplZCAhPT0gdW5kZWZpbmVkKTsgfSkgYXMgYW55KS5iO1xuZ2xvYmFsVGhpcy5UID0gKE9iamVjdC52YWx1ZXMoTSkuZmluZCgobW9kdWxlOiBhbnkpID0+IHsgcmV0dXJuIChPYmplY3Qua2V5cyhtb2R1bGUgPz8ge30pLmxlbmd0aCA9PT0gMSkgJiYgKG1vZHVsZT8uYT8uY29tbWFuZEhpc3RvcnkgIT09IHVuZGVmaW5lZCk7IH0pIGFzIGFueSkuYTtcbmdsb2JhbFRoaXMuRSA9IChPYmplY3QudmFsdWVzKE0pLmZpbmQoKG1vZHVsZTogYW55KSA9PiB7IHJldHVybiAoT2JqZWN0LmtleXMobW9kdWxlID8/IHt9KS5sZW5ndGggPT09IDEpICYmIChtb2R1bGU/LmE/Ll9sYXN0VXBkYXRlICE9PSB1bmRlZmluZWQpOyB9KSBhcyBhbnkpLmE7XG5nbG9iYWxUaGlzLk0gPSBNO1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKG5zKSB7fVxuZXhwb3J0IHsgbWFpbiB9O1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLG9CQUFvQjtBQUMzQixRQUFNLFlBQVksQ0FBQztBQUNuQixRQUFNLGFBQWEsS0FBSyxPQUFPLElBQUUsTUFBTSxTQUFTLEVBQUU7QUFDbEQsRUFBQyxXQUFXLFVBQWtCLGFBQWEsS0FBSztBQUFBLElBQzlDLENBQUMsR0FBRztBQUFBLElBQ0osRUFBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksTUFBTTtBQUMzQixVQUFJLElBQUksRUFBRTtBQUNWLGFBQU8sS0FBSyxDQUFDLEVBQUUsUUFBUSxDQUFDLFFBQVE7QUFDOUIsa0JBQVUsT0FBTyxFQUFFLEtBQUs7QUFBQSxNQUMxQixDQUFDO0FBQUEsSUFDSCxFQUFDO0FBQUEsSUFDRCxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQUEsRUFDZCxDQUFDO0FBQ0QsU0FBTztBQUNUO0FBQ0EsTUFBTSxJQUFJLGtCQUFrQjtBQUM1QixXQUFXLElBQUssT0FBTyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBZ0I7QUFBRSxTQUFRLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQyxFQUFFLFdBQVcsS0FBTyxRQUFRLEdBQUcsYUFBYTtBQUFZLENBQUMsRUFBVTtBQUM1SixXQUFXLElBQUssT0FBTyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBZ0I7QUFBRSxTQUFRLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQyxFQUFFLFdBQVcsS0FBTyxRQUFRLEdBQUcsa0JBQWtCO0FBQVksQ0FBQyxFQUFVO0FBQ2pLLFdBQVcsSUFBSyxPQUFPLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxXQUFnQjtBQUFFLFNBQVEsT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxLQUFPLFFBQVEsR0FBRyxtQkFBbUI7QUFBWSxDQUFDLEVBQVU7QUFDbEssV0FBVyxJQUFLLE9BQU8sT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLFdBQWdCO0FBQUUsU0FBUSxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsRUFBRSxXQUFXLEtBQU8sUUFBUSxHQUFHLGdCQUFnQjtBQUFZLENBQUMsRUFBVTtBQUMvSixXQUFXLElBQUk7QUFFZixlQUFlLEtBQUssSUFBSTtBQUFDO0FBQ3pCLFNBQVM7IiwibmFtZXMiOltdfQ==\",\"filename\":\"/src/dev.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/dev.js\",\"url\":\"blob:file:///364c8f13-6c6c-470e-a792-e631a8c8ff47\",\"moduleSequenceNumber\":3282}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let globNS;\\nexport async function main(ns) {\\n  let functs = [ns.getPlayer()]\\n  globNS = ns;\\n  await ns.sleep(1000)\\n}\\n\",\"filename\":\"/ui/nsRef.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/ui/nsRef.js\",\"url\":\"blob:file:///ff420982-bafa-41cc-9a9c-388924419f07\",\"moduleSequenceNumber\":13201}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hack(args[0])\",\"filename\":\"hack-once.script\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"grow(args[0])\",\"filename\":\"grow-once.script\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"weaken(args[0])\",\"filename\":\"weaken-once.script\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//import { Comm_NS, PeekPort_NS } from \\\"tb_nstools.js\\\";\\n//import { TextFloat, StandardNotation } from 'tb_toolbox.js';\\n//\\n/** @param {import(\\\"../\\\").NS} ns */\\nexport async function main(ns) {\\n    //ns.tail('hud.js')\\n    const d = eval(\\\"document\\\");\\n    ns.clearLog();\\n    let showHiddenRows = false; // only applies to rows that are being updated or when resetting hud via \\\"kill all running scripts\\\"\\n    try {\\n        InitExistingRows();\\n        // TEXT HOOKS:\\n        // ============================================================\\n        // \\t\\tInitializing (from this file):\\n        // InitHudRow(hudHook, beforeThisRowHook, colorFromThisHook);\\n        //\\n        // \\t\\tUpdating (from other files):\\n        // ns.run(\\\"hud.js\\\", 1, \\\"update\\\", \\\"nameOf-hook\\\", \\\"Leftside Text|Rightside Text\\\");\\n        // ============================================================\\n        //\\n        // Unlike progress bars, these can be hidden at any time by updating them with the string \\\"null|null\\\"\\n        // therefore they don't need to be \\\"hidden\\\" or \\\"shown\\\"!\\n        //\\n        // PROGRESS BAR HOOKS:\\n        // ============================================================\\n        //\\t\\tInitializing (from this file):\\n        // InitProgrBar(hudHook, beforeThisRowHook, colorFromThisHook);\\n        //\\n        // \\t\\tShow (from other files):\\n        // ns.run(\\\"hud.js\\\", 1, \\\"show\\\", \\\"nameOf-hook\\\");\\n        //\\n        // \\t\\tHide (from other files):\\n        // ns.run(\\\"hud.js\\\", 1, \\\"hide\\\", \\\"nameOf-hook\\\");\\n        //\\n        // \\t\\tUpdating (from other files):\\n        // ns.run(\\\"hud.js\\\", 1, \\\"progr\\\", \\\"nameOf-hook\\\", 75);\\n        // ==========================================================\\n        //\\n        // Note that you cannot take color from a hook that does not have an existing progress bar, so no red or yellow bars :(\\n        //\\n        // List of all your custom hooks below! These are the ones I use.\\n        InitHudRow(\\\"bitnode-hook\\\", \\\"hp-hook\\\", \\\"cha-hook\\\");\\n        InitHudRow(\\\"aug-hook\\\", \\\"hp-hook\\\", \\\"cha-hook\\\");\\n        InitHudRow(\\\"ram-hook\\\", \\\"money-hook\\\", \\\"hp-hook\\\");\\n        InitHudRow(\\\"bar1-hook\\\", \\\"money-hook\\\", \\\"extra-hook-0\\\"); // decorative separator bars can be made by setting color to \\\"extra-hook-0\\\"\\n        InitHudRow(\\\"income-hook\\\", \\\"hack-hook\\\", \\\"money-hook\\\");\\n        InitHudRow(\\\"stock-hook\\\", \\\"hack-hook\\\", \\\"money-hook\\\");\\n        InitHudRow(\\\"hash-hook\\\", \\\"hack-hook\\\", \\\"hack-hook\\\");\\n        InitHudRow(\\\"hashincome-hook\\\", \\\"hack-hook\\\", \\\"hack-hook\\\");\\n        InitHudRow(\\\"bar2-hook\\\", \\\"hack-hook\\\", \\\"extra-hook-0\\\");\\n        InitHudRow(\\\"buyupgrYES-hook\\\", \\\"hack-hook\\\", \\\"money-hook\\\");\\n        InitHudRow(\\\"buyupgrNO-hook\\\", \\\"hack-hook\\\", \\\"hp-hook\\\");\\n        InitHudRow(\\\"buynodeYES-hook\\\", \\\"hack-hook\\\", \\\"money-hook\\\");\\n        InitHudRow(\\\"buynodeNO-hook\\\", \\\"hack-hook\\\", \\\"hp-hook\\\");\\n        InitHudRow(\\\"buyservYES-hook\\\", \\\"hack-hook\\\", \\\"money-hook\\\");\\n        InitHudRow(\\\"buyservNO-hook\\\", \\\"hack-hook\\\", \\\"hp-hook\\\");\\n        InitHudRow(\\\"buyhashYES-hook\\\", \\\"hack-hook\\\", \\\"hack-hook\\\");\\n        InitHudRow(\\\"buyhashNO-hook\\\", \\\"hack-hook\\\", \\\"hp-hook\\\");\\n        InitHudRow(\\\"buyhashcorpYES-hook\\\", \\\"hack-hook\\\", \\\"hack-hook\\\");\\n        InitHudRow(\\\"buyhashcorpNO-hook\\\", \\\"hack-hook\\\", \\\"hp-hook\\\");\\n        InitHudRow(\\\"buyhashbladeYES-hook\\\", \\\"hack-hook\\\", \\\"hack-hook\\\");\\n        InitHudRow(\\\"buyhashbladeNO-hook\\\", \\\"hack-hook\\\", \\\"hp-hook\\\");\\n        InitHudRow(\\\"bar3-hook\\\", \\\"hack-hook\\\", \\\"extra-hook-0\\\");\\n        // regular hack/combat/cha/int stats show up here\\n        InitHudRow(\\\"bar4-hook\\\", \\\"extra-hook-0\\\", \\\"extra-hook-0\\\");\\n        InitHudRow(\\\"karma-hook\\\", \\\"extra-hook-0\\\", \\\"str-hook\\\");\\n        InitProgrBar(\\\"karma-progr-hook\\\", \\\"extra-hook-0\\\", \\\"str-hook\\\");\\n        InitHudRow(\\\"kill-hook\\\", \\\"extra-hook-0\\\", \\\"str-hook\\\");\\n        InitProgrBar(\\\"kill-progr-hook\\\", \\\"extra-hook-0\\\", \\\"str-hook\\\");\\n        InitHudRow(\\\"gangtimer-hook\\\", \\\"extra-hook-0\\\", \\\"hp-hook\\\");\\n        d.getElementById(\\\"overview-extra-hook-2\\\").innerText = \\\"\\\";\\n        // If we run this file with the right args we can update hud elements from other files!\\n        let updType = ns.args[0] || null;\\n        let updHook = ns.args[1] || null;\\n        let updInfo = ns.args[2] || null;\\n        if (updType == \\\"update\\\" || updType == \\\"upd\\\") {\\n            if (updInfo == null)\\n                updInfo = \\\"null|null\\\";\\n            UpdateHudRow(updHook, updInfo, false);\\n        }\\n        else if (updType == \\\"update-progr\\\" || updType == \\\"progr\\\") {\\n            if (updInfo == null)\\n                updInfo = 0;\\n            UpdateHudRow(updHook, updInfo, true);\\n        }\\n        else if (updType == \\\"activate\\\" || updType == \\\"show\\\") {\\n            if (updInfo == null)\\n                updInfo = 0;\\n            ShowProgrBar(updhook);\\n            UpdateHudRow(updHook, updInfo, true);\\n        }\\n        else if (updType == \\\"deactivate\\\" || updType == \\\"hide\\\" || updType == \\\"kill\\\") {\\n            HideProgrBar(updhook);\\n        }\\n        // Or just define and update hud elements locally! These are the ones I do locally.\\n        // Kills\\n        let kills = ns.getPlayer().numPeopleKilled;\\n        let killStr = \\\"Kills|\\\" + kills;\\n        UpdateHudRow(\\\"kill-hook\\\", killStr);\\n        // Kill progress (toward the 30 required to access all factions)\\n        let killProgr = (kills / 30);\\n        if (killProgr < 1) {\\n            ShowProgrBar(\\\"kill-progr-hook\\\");\\n            UpdateHudRow(\\\"kill-progr-hook\\\", killProgr, true);\\n        }\\n        else {\\n            HideProgrBar(\\\"kill-progr-hook\\\");\\n        }\\n        ;\\n        // Karma\\n        var karma = ns.heart.break();\\n        //let karmaStr = \\\"Karma|\\\" + StandardNotation(karma, 3);\\n        //UpdateHudRow(\\\"karma-hook\\\", karmaStr);\\n        // Karma progress (toward unlocking gang)\\n        let karmaProgr = (Math.abs(karma) / 54000);\\n        //if (karmaProgr < 1 && PeekPort_NS(ns, 7)[\\\"wantGang\\\"]) { ShowProgrBar(\\\"karma-progr-hook\\\"); UpdateHudRow(\\\"karma-progr-hook\\\", karmaProgr, true); }\\n        //else { HideProgrBar(\\\"karma-progr-hook\\\"); };\\n        // Income (I use port 2 to store an array of income vals from different scripts and add them together here)\\n        //let totalCashPerSec = PeekPort_NS(ns, 2, \\\"sumdict\\\")\\n        //UpdateHudRow(\\\"income-hook\\\", \\\"$/sec|$\\\" + StandardNotation(totalCashPerSec, 3));\\n    }\\n    catch (err) {\\n        ns.toast(\\\"ERROR: HUD update Skipped: \\\" + String(err), \\\"error\\\", 1000);\\n    }\\n    // Functions (don't touch the stuff below this line!)\\n    // ==========================================================\\n    function InitExistingRows() {\\n        let hooknames = [\\\"hp-hook\\\", \\\"money-hook\\\", \\\"str-hook\\\", \\\"def-hook\\\", \\\"dex-hook\\\", \\\"agi-hook\\\", \\\"cha-hook\\\", \\\"int-hook\\\", \\\"extra-hook-0\\\"];\\n        for (let hook of hooknames) {\\n            let rowElement = d.getElementById(\\\"overview-row-\\\" + hook);\\n            if (rowElement !== null)\\n                continue;\\n            d.getElementById(\\\"overview-\\\" + hook).parentElement.parentElement.id = \\\"overview-row-\\\" + hook;\\n        }\\n        let rowElement = d.getElementById(\\\"overview-row-hack-hook\\\");\\n        if (rowElement !== null)\\n            return;\\n        d.getElementById(\\\"overview-hack-hook\\\").parentElement.parentElement.previousSibling.previousSibling.id = \\\"overview-row-hack-hook\\\";\\n        let nodeToDel = d.getElementById(\\\"overview-hack-hook\\\").parentElement.parentElement;\\n        d.getElementById(\\\"overview-hack-hook\\\").parentElement.parentElement.parentElement.removeChild(nodeToDel);\\n    }\\n    function InitHudRow(hudHook, beforeThisRowHook, colorFromThisHook) {\\n        let rowElement = d.getElementById(\\\"overview-row-\\\" + hudHook);\\n        if (rowElement !== null)\\n            return rowElement;\\n        // Get the custom display elements in HUD.\\n        let existingRow = d.getElementById(\\\"overview-row-\\\" + colorFromThisHook);\\n        // Make a clone of the hook for our extra hud elements\\n        let newHudRow = existingRow.cloneNode(true);\\n        // Remove any nested elements created by stats.js\\n        newHudRow.querySelectorAll(\\\"p > p\\\").forEach(el => el.parentElement.removeChild(el));\\n        // Change ids for individual columns since duplicate id's are invalid\\n        newHudRow.querySelectorAll(\\\"p\\\").forEach((el, i) => el.id = \\\"overview-\\\" + hudHook + \\\"-\\\" + i);\\n        newHudRow.id = \\\"overview-row-\\\" + hudHook;\\n        // Display label and default value\\n        newHudRow.querySelectorAll(\\\"p\\\")[0].innerText = \\\"\\\";\\n        if (showHiddenRows)\\n            newHudRow.querySelectorAll(\\\"p\\\")[0].innerText = hudHook;\\n        newHudRow.querySelectorAll(\\\"p\\\")[1].innerText = \\\"\\\";\\n        // Determine where to insert our element\\n        existingRow.parentElement.insertBefore(newHudRow, d.getElementById(\\\"overview-row-\\\" + beforeThisRowHook));\\n        return newHudRow;\\n    }\\n    function InitProgrBar(hudHook, beforeThisRowHook, colorFromThisHook) {\\n        let rowElement = d.getElementById(\\\"overview-row-\\\" + hudHook);\\n        if (rowElement !== null)\\n            return rowElement;\\n        // Get the custom display elements in HUD.\\n        let existingRow = d.getElementById(\\\"overview-row-\\\" + colorFromThisHook).nextSibling;\\n        // Make a clone of the hook for our extra hud elements\\n        let newHudRow = existingRow.cloneNode(true);\\n        newHudRow.id = \\\"overview-row-\\\" + hudHook;\\n        // Determine where to insert our element\\n        existingRow.parentElement.insertBefore(newHudRow, d.getElementById(\\\"overview-row-\\\" + beforeThisRowHook));\\n        UpdateProgrBar(newHudRow.firstChild.firstChild, 0);\\n        return newHudRow;\\n    }\\n    function HideProgrBar(hudHook) {\\n        let rowElement = d.getElementById(\\\"overview-row-\\\" + hudHook);\\n        if (rowElement !== null) {\\n            // Remove all HTML from the deepest child so the HTML doesn't auto-update\\n            rowElement.firstChild.firstChild.innerHTML = \\\"\\\";\\n            // Rename \\\"class\\\" to \\\"clss\\\" in the HTML of the first-depth child so the information cannot be parsed.\\n            let curHTML = rowElement.innerHTML;\\n            let htmlL = curHTML.split(`-3px;\\\"><span cl`)[0] + `-3px;\\\"><span cl`;\\n            let htmlR = curHTML.split(`-3px;\\\"><span cl`)[1];\\n            if (htmlR[0] == \\\"a\\\") {\\n                rowElement.innerHTML = htmlL + curHTML.split(`-3px;\\\"><span cla`)[1];\\n            }\\n        }\\n    }\\n    function ShowProgrBar(hudHook) {\\n        let rowElement = d.getElementById(\\\"overview-row-\\\" + hudHook);\\n        if (rowElement !== null) {\\n            // Replace the missing HTML in the deepest child\\n            let existingHTML = d.getElementById(\\\"overview-row-str-hook\\\").nextSibling.firstChild.firstChild.innerHTML;\\n            rowElement.firstChild.firstChild.innerHTML = existingHTML;\\n            // Rename \\\"class\\\" back to \\\"clss\\\" in the HTML of the first-depth child so the information can be parsed once again.\\n            let curHTML = rowElement.innerHTML;\\n            let htmlL = curHTML.split(`-3px;\\\"><span cl`)[0] + `-3px;\\\"><span cl`;\\n            let htmlR = curHTML.split(`-3px;\\\"><span cl`)[1];\\n            if (htmlR[0] != \\\"a\\\") {\\n                rowElement.innerHTML = htmlL + \\\"a\\\" + htmlR;\\n            }\\n        }\\n    }\\n    function UpdateHudRow(hookToUpdate, updateStr, isProgressBar = false) {\\n        if (!isProgressBar) {\\n            let textL = updateStr.split(\\\"|\\\")[0];\\n            if (textL == null || textL == \\\"null\\\") {\\n                if (showHiddenRows)\\n                    textL = hookToUpdate;\\n                else\\n                    textL = \\\"\\\";\\n            }\\n            d.getElementById(\\\"overview-\\\" + hookToUpdate + \\\"-0\\\").innerText = textL;\\n            let textR = updateStr.split(\\\"|\\\")[1];\\n            if (textR == null || textR == \\\"null\\\") {\\n                textR = \\\"\\\";\\n            }\\n            ;\\n            d.getElementById(\\\"overview-\\\" + hookToUpdate + \\\"-1\\\").innerText = textR;\\n        }\\n        else if (isProgressBar) {\\n            UpdateProgrBar(d.getElementById(\\\"overview-row-\\\" + hookToUpdate).firstChild.firstChild, updateStr);\\n        }\\n    }\\n    ;\\n    function UpdateProgrBar(elementToUpdate, updatePercent) {\\n        if (updatePercent == null || updatePercent == \\\"null\\\")\\n            updatePercent = 1;\\n        else\\n            updatePercent = (1 - Number(updatePercent)) * 100;\\n        // get existing HTML\\n        let existingHTML = elementToUpdate.innerHTML;\\n        // split the HTML so we get the sections we want to edit\\n        let leftHTML = String(existingHTML).split(\\\"translateX(-\\\")[0] + \\\"translateX(-\\\";\\n        let rightHTML = \\\"%);\\\" + String(existingHTML).split(\\\"%);\\\")[1];\\n        let newHTML = leftHTML + updatePercent + rightHTML;\\n        elementToUpdate.innerHTML = newHTML;\\n    }\\n    ;\\n}\\n\",\"filename\":\"hud.ot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hud.ot.js\",\"url\":\"blob:file:///be1ff324-ce7e-4749-8e9b-c9b60d6a8963\",\"moduleSequenceNumber\":1166}],\"dependents\":[],\"ramUsage\":2.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let slp=ms=>new Promise(r=>setTimeout(r,ms));\\nlet ts=()=>`[<span class=timestamp>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>] `;\\nlet makeNewTailWindow=async (title=\\\"Default Window Title\\\")=>{\\n  let win=open(\\\"steam_appid.txt\\\",title.replaceAll(\\\" \\\",\\\"_\\\"),\\\"popup=yes,height=200,width=500,left=100,top=100,resizable=yes,scrollbars=no,toolbar=no,menubar=no,location=no,directories=no,status=no\\\");\\n  await slp(1000);\\n  let doc=win[\\\"document\\\"];\\n  doc.head.innerHTML=`\\n  <title>${title}</title>\\n  <style>\\n    *{\\n      margin:0;\\n    }\\n    body{\\n      background:black;\\n      color:white;\\n      overflow:hidden;\\n      height:100vh;\\n      width:100vw;\\n      font-family:\\\"JetBrains Mono\\\";\\n      display:flex;\\n      flex-direction:column;\\n    }\\n    .title{\\n      font-size:20px;\\n      text-align:center;\\n      flex: 0 0;\\n      display:flex;\\n      align-items:center;\\n      border-bottom:1px solid white;\\n    }\\n    .scrollQuery{\\n      font-size:12px;\\n      margin-left:auto;\\n    }\\n    .timestamp{\\n      color:#07f;\\n    }\\n    .logs{\\n      width:100%;\\n      flex: 1;\\n      overflow-y:scroll;\\n      font-size:14px;\\n    }\\n    .logs::-webkit-scrollbar,::-webkit-scrollbar-corner{\\n      background:#222;\\n      width:10px;\\n      height:10px;\\n    }\\n    .logs::-webkit-scrollbar-button{\\n      width:0px;\\n      height:0px;\\n    }\\n    .logs::-webkit-scrollbar-thumb{\\n      background:#444;\\n    }\\n  </style>`\\n  doc.body.innerHTML=`<div class=title>${title} <span class=scrollQuery>Scroll to Bottom:<input type=checkbox /></span></div><div class=logs><p>Test log entry</p></div>`;\\n  let logs=doc.body.querySelector(\\\".logs\\\");\\n  win.log=(logContent, timeStamp=true)=>{\\n    logs.insertAdjacentHTML(\\\"beforeEnd\\\",`<p>${timeStamp?ts():\\\"\\\"}${logContent}</p>`);\\n    while(logs.children.length>200)logs.children[0].remove(); // Only keeps the last 200 log entries\\n    if (doc.querySelector(\\\"input\\\").checked) logs.scrollTop = logs.scrollHeight;\\n  }\\n  win.reopen=()=>open(\\\"steam_appid.txt\\\",title.replaceAll(\\\" \\\",\\\"_\\\"),\\\"popup=yes,height=200,width=500,left=100,top=100,resizable=yes,scrollbars=no,toolbar=no,menubar=no,location=no,directories=no,status=no\\\");\\n  return win;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  let tailWin=await makeNewTailWindow(ns.args[0]);\\n  let i=0;\\n  while(tailWin && !tailWin.closed){\\n    ++i%10===0 ? tailWin.log(`Log entry with no timestamp (${i})`, false) : tailWin.log(`Test log entry (${i})`);\\n    await slp(500);\\n  }\\n}\\n\",\"filename\":\"/ui/subwindows.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/ui/subwindows.js\",\"url\":\"blob:file:///7719a350-1c79-4c70-858f-0f8a0cee7483\",\"moduleSequenceNumber\":49678}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var running;\\nexport async function main(ns) {\\n    let doc = eval(\\\"document\\\")\\n    ns.disableLog(\\\"ALL\\\"), !0 !== running && (running = !1);\\n    try {\\n        doc.getElementById(\\\"terminal\\\").parentNode;\\n    } catch (e) {\\n        ns.tail(), ns.print(\\\"ERROR: Could not find terminal.\\\"), ns.print(\\\"ERROR: Please switch back to the terminal\\\"), ns.print(\\\"ERROR: before running this script.\\\"), error(ns, \\\"could not find terminal.\\\");\\n        ns.print(e);\\n    }\\n    //pls work hh\\n    ns.print(\\\"INFO: Terminal background started.\\\");\\n    let sty;\\n    sty = doc.createElement(\\\"style\\\");\\n    sty.id = \\\"bg-css\\\"\\n    sty.type = \\\"text/css\\\"\\n    sty.innerHTML = bgCSS()\\n    doc.head.appendChild(sty);\\n    let term = doc.getElementById(\\\"terminal\\\").parentNode;\\n    Object.assign(term.parentNode, { id: \\\"transparent-term\\\" });\\n    let img = doc.createElement(\\\"img\\\");\\n    img.src = \\\"https://gitlab.com/kalilinux/packages/kali-wallpapers/-/raw/kali/master/2023/backgrounds/kali/kali-cubism-16x9.png\\\"\\n    Object.assign(img, { id: \\\"bg-img\\\" }), term.parentNode.insertBefore(img, term);\\n    await ns.sleep(1000);\\n}\\nfunction bgCSS(e) {\\n    return [\\n        \\\"img#bg-img {\\\",\\n        \\\" position: fixed;\\\",\\n        \\\" top: 0;\\\",\\n        \\\" left: 0;\\\",\\n        \\\" pointer-events: none;\\\",\\n\\t\\t\\\" z-index: -100;\\\",\\n        \\\" width: 1920px;\\\",\\n        \\\" height: 1080px;\\\",\\n        \\\"}\\\",\\n        \\\".MuiPaper-root {\\\",\\n        \\\" background-color: rgba(33,37,43,0.5);\\\",\\n        \\\" backdrop-filter: blur(2px);\\\",\\n        \\\"}\\\",\\n        \\\".MuiButtonBase-root {\\\",\\n        \\\" background-color: rgba(33,37,43,0.5);\\\",\\n        \\\" backdrop-filter: blur(2px);\\\",\\n        \\\"}\\\",\\n        \\\".MuiButton-root {\\\",\\n        \\\" background-color: rgba(75,82,99,0.5);\\\",\\n        \\\" backdrop-filter: blur(2px);\\\",\\n        \\\"}\\\",\\n        \\\".Mui-selected {\\\",\\n        \\\" background-color: rgba(75,82,99,0.5) !important;\\\",\\n        \\\" backdrop-filter: blur(2px);\\\",\\n        \\\"}\\\",\\n        \\\".MuiInput-root {\\\",\\n        \\\" background-color: rgba(33,37,43,0.5);\\\",\\n        \\\" backdrop-filter: blur(2px);\\\",\\n        \\\"}\\\",\\n    ].join(\\\"\\\\n\\\");\\n}\\n\\nfunction mCleanup() {\\n    running = !1;\\n    let doc = eval(\\\"document\\\");\\n    try {\\n        doc.getElementById(\\\"bg-canvas\\\").remove(), doc.getElementById(\\\"bg-css\\\").remove();\\n    } catch (e) {}\\n}\\n\\nfunction error(e, r, o = 0) {\\n    e.tprintf(\\\"%s: %s\\\", e.getScriptName(), r);\\n}\\n\",\"filename\":\"/ui/bg.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/ui/bg.js\",\"url\":\"blob:file:///b8fadd16-67c3-48db-80b4-c3061aff58b7\",\"moduleSequenceNumber\":589}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-self-assign */\\n/* eslint-disable no-unreachable */\\n//helpers that deal with global elements\\nexport const globalHelper = {\\n\\tcreateGlobalScript: function(id, script) {\\n\\t\\tlet doc = eval(\\\"document\\\")\\n\\t\\tif (doc.getElementById(id) == null) {\\n\\t\\t\\tlet s = doc.createElement(\\\"script\\\");\\n\\t\\t\\ts.id = id;\\n\\t\\t\\ts.innerHTML = script;\\n\\t\\t\\tdoc.head.appendChild(s);\\n\\t\\t} else {\\n\\t\\t\\tconsole.log(\\\"WARN: Script with that ID already exists! overwriting current!\\\");\\n\\t\\t\\tdoc.getElementById(id).innerHTML = script;\\n\\t\\t}\\n\\t},\\n\\tcreateGlobalStyle: function (id, style) {\\n\\t\\tlet doc = eval(\\\"document\\\")\\n\\t\\tif (doc.getElementById(id) == null) {\\n\\t\\t\\tlet s = doc.createElement(\\\"style\\\");\\n\\t\\t\\ts.id = id;\\n\\t\\t\\ts.innerHTML = style;\\n\\t\\t\\tdoc.head.appendChild(s);\\n\\t\\t} else {\\n\\t\\t\\tconsole.log(\\\"WARN: Style with that ID already exists! overwriting current!\\\");\\n\\t\\t\\tdoc.getElementById(id).innerHTML = style;\\n\\t\\t}\\n\\t}\\n}\\n\\n//helpers that deal with creating custom HUD displays\\nexport const hudHelper = {\\n\\t//cVar should be a STRING that is the variable\\n\\tcreateMin: function(dv, isMin, cVar, id) {\\n\\t\\tdv.slice(0, -4);\\n\\t\\tif (isMin) {\\n\\t\\t\\tdv += ` <a class=\\\"ovvMin\\\" id=\\\"${id}\\\" style=\\\"cursor: pointer; transition: all .2s;\\\" onclick=\\\"${cVar} = !${cVar}; ovvMax('${id}')\\\"></a> ─`;\\n\\t\\t} else {\\n\\t\\t\\tdv += ` <a class=\\\"ovvMin\\\" id=\\\"${id}\\\" style=\\\"cursor: pointer; transition: all .2s;\\\" onclick=\\\"${cVar} = !${cVar}; ovvMin('${id}')\\\"></a> ─`;\\n\\t\\t}\\n\\t\\treturn dv;\\n\\t},\\n\\tendSec: function(hed, val) {\\n\\t\\thed.push(\\\"</div>\\\")\\n\\t\\tval.push(\\\"</div>\\\")\\n\\t},\\n\\t//min is the boolean passed, minVar is the boolean var name passed as a string\\n\\tpushBreak: function(hed, val, sec, dv, min, minVar, cls) {\\n\\t\\thed.push(`<span style=\\\"color: #FFFFFF\\\">├───────────────</span><br>`)\\n\\t\\tval.push(`<span style=\\\"color: #FFFFFF\\\">${dv} <span style=\\\"color: #98C379\\\">${sec}</span> ${hudHelper.createMin(dv, min, minVar, cls)}┤</span><br>`)\\n\\t},\\n\\tpushCont: function(hed, val, tp, cont, col, all) {\\n\\t\\thed.push(`<span style=\\\"color: #ffffff\\\">│</span><span style=\\\"color: ${col}\\\">${tp}</span><br>`)\\n\\t\\tif (all != undefined) {\\n\\t\\t\\tval.push(`<span style=\\\"color: ${col}; text-allign: ${all}\\\">${cont}</span><span style=\\\"color: #ffffff\\\">│</span><br>`)\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tval.push(`<span style=\\\"color: ${col}\\\">${cont}</span><span style=\\\"color: #ffffff\\\">│</span><br>`)\\n\\t},\\n\\tpushContE: function(hed, val, tp, cont, col) {\\n\\t\\thed.push(`<span style=\\\"color: ${col}\\\">${tp}</span><br>`)\\n\\t\\tval.push(`<span style=\\\"color: ${col}\\\">${cont}</span><br>`)\\n\\t},\\n\\t//dsp should either be \\\"none\\\" or \\\"inline\\\"\\n\\tstartSec: function(hed, val, clas, dsp) {\\n\\t\\thed.push(`<div class=\\\"${clas}\\\" style=\\\"display: ${dsp}\\\">`)\\n\\t\\tval.push(`<div class=\\\"${clas}\\\" style=\\\"display: ${dsp}\\\">`)\\n\\t},\\n\\tstartHud: function(hed, val) {\\n\\t\\tthis.pushContE(hed ,val, \\\"╭───────────────\\\", \\\"────────────────────────────────────────────╮\\\", \\\"#FFFFFF\\\")\\n\\t},\\n\\tendHud: function(hed, val) {\\n\\t\\tthis.pushContE(hed, val, \\\"╰───────────────\\\", \\\"────────────────────────────────────────────╯\\\", \\\"#FFFFFF\\\")\\n\\t},\\n\\tstartSubsec: function(hed, val, t, f) {\\n\\t\\tthis.pushContE(hed ,val, \\\"│╭──────────────\\\", `${f} <span style=\\\"color: #98C379\\\">${t}</span> ${f}╮│`, \\\"#FFFFFF\\\")\\n\\t},\\n\\tendSubsec: function(hed, val) {\\n\\t\\tthis.pushContE(hed, val, \\\"│╰──────────────\\\", \\\"───────────────────────────────────────────╯│\\\", \\\"#FFFFFF\\\")\\n\\t},\\n\\tpushContSub: function(hed, val, tp, cont, col) {\\n\\t\\thed.push(`<span style=\\\"color: #ffffff\\\">││</span><span style=\\\"color: ${col}\\\">${tp}</span><br>`)\\n\\t\\tval.push(`<span style=\\\"color: ${col}\\\">${cont}</span><span style=\\\"color: #ffffff\\\">││</span><br>`)\\n\\t}\\n}\\n\\nexport const miscHelper = {\\n\\t/** \\n\\t * Gets a route to the specified server.\\n\\t * @param {ns} Netscript ref.\\n\\t * @param {string} srv The server to get the route to.\\n\\t * @returns {array} An array containing the route.\\n\\t */\\n\\tfindRoute: function (s, srv) {\\n\\t\\tlet route = [srv]\\n\\t\\twhile (route[0] != \\\"home\\\") {\\n\\t\\t\\tlet temp = s.scan(route[0])\\n\\t\\t\\troute.unshift(temp[0])\\n\\t\\t}\\n\\t\\treturn route;\\n\\t}\\n}\\n\\n//helpers dealing with sleeve actions\\n//mostly just a diff function for task setting cause i think the way it's in the game normally is stupid\\nexport const sleeveHelper = {\\n\\tsetTask: function(s, a, n, t, o1, o2) {\\n\\t\\tlet i = n;\\n\\t\\tlet sleeves = 1\\n\\t\\tif (a) { i = 0; sleeves = s.sleeve.getNumSleeves(); }\\n\\t\\tfor (i = i; i < sleeves; i++) {\\n\\t\\t\\tswitch (t) {\\n\\t\\t\\t\\tcase \\\"recovery\\\":\\n\\t\\t\\t\\t\\ts.sleeve.setToShockRecovery(i)\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"sync\\\":\\n\\t\\t\\t\\t\\teval(\\\"s.sleeve.setToSynchronize(i)\\\");\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"crime\\\":\\n\\t\\t\\t\\t\\tif (o1 != undefined) {\\n\\t\\t\\t\\t\\t\\teval(\\\"s.sleeve.setToCommitCrime(i, o1)\\\");\\n\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no crime provided\\\") }\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"wFaction\\\":\\n\\t\\t\\t\\t\\tif (o1 != undefined) {\\n\\t\\t\\t\\t\\t\\tif (o2 != undefined) {\\n\\t\\t\\t\\t\\t\\t\\teval(\\\"s.sleeve.setToFactionWork(i, o1, o2)\\\");\\n\\t\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no work type provided\\\") }\\n\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no faction provided\\\") }\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"wCompany\\\":\\n\\t\\t\\t\\t\\tif (o1 != undefined) {\\n\\t\\t\\t\\t\\t\\teval(\\\"s.sleeve.setToCompanyWork(i, o1)\\\");\\n\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no company defined\\\") }\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"gym\\\":\\n\\t\\t\\t\\t\\tif (o1 != undefined) {\\n\\t\\t\\t\\t\\t\\tif (o2 != undefined) {\\n\\t\\t\\t\\t\\t\\t\\teval(\\\"s.sleeve.setToGymWorkout(i, o1, o2)\\\");\\n\\t\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no gym provided\\\") }\\n\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no stat provided\\\") }\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"uni\\\":\\n\\t\\t\\t\\t\\tif (o1 != undefined) {\\n\\t\\t\\t\\t\\t\\tif (o2 != undefined) {\\n\\t\\t\\t\\t\\t\\t\\teval(\\\"s.sleeve.setToUniversityCourse(i, o1, o2)\\\");\\n\\t\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no university provided\\\") }\\n\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no course provided\\\") }\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"blade\\\":\\n\\t\\t\\t\\t\\tif (o1 != undefined) {\\n\\t\\t\\t\\t\\t\\tif (o2 != undefined) {\\n\\t\\t\\t\\t\\t\\t\\teval(\\\"s.sleeve.setToBladeburnerAction(i, o1, o2)\\\");\\n\\t\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no category provided\\\") }\\n\\t\\t\\t\\t\\t} else { s.print(\\\"ERROR: no contract provided\\\") }\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase undefined:\\n\\t\\t\\t\\t\\ts.print(\\\"you, didn't define a work type. what are you even doing?\\\");\\n\\t\\t\\t\\t\\t(\\\"check the script log\\\");\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t//end\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\tbuyAllAugs: function (s) {\\n\\t\\tfor (let i = 0; i < s.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tconst augs = eval(\\\"s.sleeve.getSleevePurchasableAugs(i)\\\");\\n\\t\\t\\tlet totalCost;\\n\\t\\t\\tfor (let j = 0; j < augs.length; j++) {\\n\\t\\t\\t\\ttotalCost += eval(\\\"s.sleeve.getSleeveAugmentationPrice(augs[j])\\\");\\n\\t\\t\\t}\\n\\t\\t\\tif (s.getPlayer().money < totalCost) {\\n\\t\\t\\t\\ts.tprint(`ERROR: Not enough dollariedoos to buy augments for sleeve ${i}. Aborting.`)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tfor (let j = 0; j < augs.length; j++) {\\n\\t\\t\\t\\teval(\\\"s.purchaseSleeveAug(i, augs[j])\\\");\\n\\t\\t\\t}\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const gangHelper = {\\n\\trandomName: function (members) {\\n\\t\\tconst names = [\\n\\t\\t\\t\\\"Boe Jiden\\\",\\n\\t\\t\\t\\\"Beff Jesos\\\",\\n\\t\\t\\t\\\"Darcetine\\\",\\n\\t\\t\\t\\\"Gill Bates\\\",\\n\\t\\t\\t\\\"Zarco\\\",\\n\\t\\t\\t\\\"Lilly\\\",\\n\\t\\t\\t\\\"Doc. Brown\\\",\\n\\t\\t\\t\\\"Marty McFly\\\",\\n\\t\\t\\t\\\"Roxy\\\",\\n\\t\\t\\t\\\"Natalie\\\",\\n\\t\\t\\t\\\"Rem\\\",\\n\\t\\t\\t\\\"Tai\\\",\\n\\t\\t\\t\\\"Luther\\\",\\n\\t\\t\\t\\\"Sean\\\",\\n\\t\\t\\t\\\"Celso\\\",\\n\\t\\t\\t\\\"Paul\\\",\\n\\t\\t\\t\\\"Kit\\\",\\n\\t\\t\\t\\\"Anna\\\",\\n\\t\\t\\t\\\"Todd\\\",\\n\\t\\t\\t\\\"Chozo\\\",\\n\\t\\t\\t\\\"Kai\\\",\\n\\t\\t\\t\\\"Tucker\\\",\\n\\t\\t\\t\\\"John Doe\\\",\\n\\t\\t\\t\\\"undefined\\\",\\n\\t\\t\\t\\\"Nezomi\\\",\\n\\t\\t\\t\\\"Avery\\\",\\n\\t\\t\\t\\\"Phillip\\\",\\n\\t\\t\\t\\\"Amtrak\\\",\\n\\t\\t\\t\\\"Avelican\\\",\\n\\t\\t\\t\\\"You\\\",\\n\\t\\t\\t\\\"Hydroflame\\\",\\n\\t\\t\\t\\\"xsinx\\\",\\n\\t\\t\\t\\\"Zoe\\\",\\n\\t\\t\\t\\\"Zelow\\\",\\n\\t\\t\\t\\\"nightElf\\\",\\n\\t\\t\\t\\\"Jeoshua\\\",\\n\\t\\t\\t\\\"Lyra\\\",\\n\\t\\t\\t\\\"Dashi\\\",\\n\\t\\t\\t\\\"ElJay\\\",\\n\\t\\t\\t\\\"Quacksouls\\\",\\n\\t\\t\\t\\\"_NAME_PLACEHOLDER_\\\",\\n\\t\\t\\t\\\"Neo\\\",\\n\\t\\t\\t\\\"Trinity\\\",\\n\\t\\t\\t\\\"Morpheus\\\",\\n\\t\\t\\t\\\"Agent Smith\\\",\\n\\t\\t\\t\\\"Keanu Reeves\\\",\\n\\t\\t\\t\\\"John Matrix\\\",\\n\\t\\t\\t\\\"Mughur\\\",\\n\\t\\t\\t\\\"Khan\\\",\\n\\t\\t\\t\\\"James T. Kirk\\\",\\n\\t\\t\\t\\\"Spock\\\",\\n\\t\\t\\t\\\"Leonard McCoy\\\",\\n\\t\\t\\t\\\"Jean-Luc Picard\\\",\\n\\t\\t\\t\\\"William Riker\\\",\\n\\t\\t\\t\\\"Data\\\",\\n\\t\\t\\t\\\"Kathryn Janeway\\\",\\n\\t\\t\\t\\\"Chakotay\\\",\\n\\t\\t\\t\\\"Tom Paris\\\",\\n\\t\\t\\t\\\"Harry Kim\\\",\\n\\t\\t\\t\\\"Neelix\\\",\\n\\t\\t\\t\\\"The Borg Queen\\\",\\n\\t\\t\\t\\\"Seven of Nine\\\",\\n\\t\\t\\t\\\"Q\\\",\\n\\t\\t\\t\\\"Mariah Carey\\\",\\n\\t\\t\\t\\\"Rafi\\\",\\n\\t\\t\\t\\\"Rios\\\",\\n\\t\\t\\t\\\"Grant\\\",\\n\\t\\t\\t\\\"Alex\\\",\\n\\t\\t\\t\\\"Robert\\\",\\n\\t\\t\\t\\\"Ace\\\",\\n\\t\\t]\\n\\t\\t//remove names already in use\\n\\t\\tfor (let i = 0; i < members; i++) {\\n\\t\\t\\tfor (let j = 0; j < names.length; j++) {\\n\\t\\t\\t\\tif (names[j] == members[i]) {\\n\\t\\t\\t\\t\\tnames.splice(j, 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn names[Math.floor(Math.random() * names.length)];\\n\\t},\\n\\tgetUpgradeDiscount: function (pwr, rep) {\\n\\t\\tconst rlf = 5e6;\\n\\t\\tconst plf = 1e6;\\n\\t\\tconst d = Math.pow(rep, 0.01) + rep / rlf + Math.pow(pwr, 0.01) + pwr / plf - 1;\\n\\t\\treturn Math.max(1, d);\\n\\t}\\n}\\n\\n/** @param {import(\\\"../../\\\").NS} s*/\\nexport const formulaHelper = {\\n\\thasFormulas : function (s) { return s.fileExists(\\\"Formulas.exe\\\", \\\"home\\\"); },\\n\\t//returns how much exp you need to get the provided level\\n\\tgetExpReq: function (s, sk, lvl) {\\n\\t\\tconst exp = s.getPlayer()['exp'][sk];\\n\\t\\tconst multi = s.getPlayer()['mults'][sk];\\n\\t\\tconst expReq = s.formulas.skills.calculateExp(lvl, multi);\\n\\t\\treturn expReq - exp;\\n\\t},\\n\\t/** @param {import(\\\"../../\\\").NS} s*/\\n\\tlevelsFromExpGain: function (s, sk, exp) {\\n\\t\\tconst multi = s.getPlayer()['mults'][sk];\\n\\t\\tconst cexp = s.getPlayer()['exp'][sk] + exp;\\n\\t\\tconst clvl = s.getPlayer()['skills'][sk];\\n\\t\\tconst lvlExp = s.formulas.skills.calculateSkill(cexp, multi);\\n\\t\\tconst extLvls = lvlExp - clvl;\\n\\t\\treturn extLvls;\\n\\t}\\n}\\n\",\"filename\":\"/src/helpers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable @typescript-eslint/no-unused-vars */\\n/* eslint-disable no-constant-condition */\\nimport { gangHelper } from \\\"/src/helpers.js\\\";\\n\\n/** @param {import(\\\"../../\\\").NS} ns */\\nexport async function main(ns) {\\n\\tconst lvlThres = 20000\\n\\tconst ascThres = 8000\\n\\twhile (true) {\\n\\t\\tif (ns.gang.inGang()) {\\n\\t\\t\\t//do member recruting if we can\\n\\t\\t\\tif (ns.gang.canRecruitMember()) {\\n\\t\\t\\t\\tlet done = ns.gang.recruitMember(gangHelper.randomName());\\n\\t\\t\\t\\t//one pass just in case we get the same name\\n\\t\\t\\t\\tif (!done) {\\n\\t\\t\\t\\t\\tns.gang.recruitMember(gangHelper.randomName(ns.gang.getMemberNames()));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t//get every gang member and set them to train combat/hacking if their stats are low, other stuff if they aren't'\\n\\t\\t\\tconst members = ns.gang.getMemberNames();\\n\\t\\t\\tfor (let i = 0; i < members.length; i++) {\\n\\t\\t\\t\\tconst member = ns.gang.getMemberInformation(members[i])\\n\\t\\t\\t\\tif (ns.gang.getGangInformation().isHacking) {\\n\\t\\t\\t\\t\\tif (member.hack < lvlThres) {\\n\\t\\t\\t\\t\\t\\tns.gang.setMemberTask(members[i], \\\"Train Hacking\\\");\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\t\\t\\tns.gang.setMemberTask(members[i], \\\"Ethical Hacking\\\");\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tns.gang.setMemberTask(members[i], \\\"Money Laundering\\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif (member.agi < lvlThres || member.def < lvlThres || member.dex < lvlThres || member.str < lvlThres) {\\n\\t\\t\\t\\t\\t\\tns.gang.setMemberTask(members[i], \\\"Train Combat\\\");\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tif (i == 0) {\\n\\t\\t\\t\\t\\t\\t\\tns.gang.setMemberTask(members[i], \\\"Vigilante Justice\\\");\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tns.gang.setMemberTask(members[i], \\\"Human Trafficking\\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t//check multipliers for ascencion\\n\\t\\t\\tfor (let i = 0; i < members.length; i++) {\\n\\t\\t\\t\\tconst member = ns.gang.getMemberInformation(members[i])\\n\\t\\t\\t\\t//basically, what this says, is that when every stat applicable to the gang type, based off of 0x asc, we will ascend\\n\\t\\t\\t\\tif (ns.gang.getGangInformation().isHacking) {\\n\\t\\t\\t\\t\\tconst expGoalHck = member.hack_asc_mult * ascThres;\\n\\t\\t\\t\\t\\tif (member.hack_exp >= expGoalHck) {\\n\\t\\t\\t\\t\\t\\tns.gang.ascendMember(members[i]);\\n\\t\\t\\t\\t\\t\\tconst n = new Notification(\\\"Gang\\\", { body: `${members[i]} has been ascended!` });\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t//for COMBAT gangs\\n\\t\\t\\t\\t\\tconst expGoalAgi = member.agi_asc_mult * ascThres;\\n\\t\\t\\t\\t\\tconst expGoalDef = member.def_asc_mult * ascThres;\\n\\t\\t\\t\\t\\tconst expGoalDex = member.dex_asc_mult * ascThres;\\n\\t\\t\\t\\t\\tconst expGoalStr = member.str_asc_mult * ascThres;\\n\\t\\t\\t\\t\\tif ((member.agi_exp >= expGoalAgi || member.agi >= lvlThres) && member.def_exp >= expGoalDef && member.dex_exp >= expGoalDex && member.str_exp >= expGoalStr) {\\n\\t\\t\\t\\t\\t\\tns.gang.ascendMember(members[i]);\\n\\t\\t\\t\\t\\t\\tconst n = new Notification(\\\"Gang\\\", {body: `${members[i]} has been ascended!`});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t//can we buy some augments? i think this should work now? hopefully?\\n\\t\\t\\tlet augs = [];\\n\\t\\t\\tns.gang.getEquipmentNames().forEach((name) => {\\n\\t\\t\\t\\tif (ns.gang.getEquipmentType(name) == \\\"Augmentation\\\") {\\n\\t\\t\\t\\t\\taugs.push(name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tconst discount = gangHelper.getUpgradeDiscount(ns.gang.getGangInformation().power, ns.gang.getGangInformation().respect);\\n\\t\\t\\tif (discount >= 0.9) {\\n\\t\\t\\t\\tlet totalPrice;\\n\\t\\t\\t\\taugs.forEach((aug) => {\\n\\t\\t\\t\\t\\ttotalPrice += ns.gang.getEquipmentCost(aug);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tif (totalPrice * members.length <= ns.getPlayer().money) {\\n\\t\\t\\t\\t\\taugs.forEach((aug) => {\\n\\t\\t\\t\\t\\t\\tmembers.forEach((m) => {\\n\\t\\t\\t\\t\\t\\t\\tns.gang.purchaseEquipment(m, aug);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tconst n = new Notification(\\\"Gang\\\", {body: `Purchased all Augments for every gang member! it cost you $${ns.nFormat(totalPrice, '0,0')}.`});\\n\\t\\t\\t\\t} \\n\\t\\t\\t\\t//also, check for other equipment depending on gang type\\n\\t\\t\\t\\tif (ns.gang.getGangInformation().isHacking) {\\n\\t\\t\\t\\t\\tlet equip = ns.gang.getEquipmentNames();\\n\\t\\t\\t\\t\\tlet toBuy = [];\\n\\t\\t\\t\\t\\tlet eqp;\\n\\t\\t\\t\\t\\tequip.forEach((e) => {\\n\\t\\t\\t\\t\\t\\tif (ns.gang.getEquipmentType(e) == \\\"Rootkit\\\") {\\n\\t\\t\\t\\t\\t\\t\\ttoBuy.push(e);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t//calc total price\\n\\t\\t\\t\\t\\ttoBuy.forEach((e) => {\\n\\t\\t\\t\\t\\t\\teqp += ns.gang.getEquipmentCost(e);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tif (eqp * members.length <= ns.getPlayer().money) {\\n\\t\\t\\t\\t\\t\\ttoBuy.forEach((e) => {\\n\\t\\t\\t\\t\\t\\t\\tmembers.forEach((m) => {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.gang.purchaseEquipment(m, e);\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\tconst n = new Notification(\\\"Gang\\\", {body: `Purchased all Rootkits for every gang member! it cost you $${ns.nFormat(eqp, '0,0')}.`});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tlet equip = ns.gang.getEquipmentNames();\\n\\t\\t\\t\\t\\tlet toBuy = [];\\n\\t\\t\\t\\t\\tlet eqp;\\n\\t\\t\\t\\t\\tequip.forEach((e) => {\\n\\t\\t\\t\\t\\t\\tif (ns.gang.getEquipmentType(e) == \\\"Armor\\\" || ns.gang.getEquipmentType(e) == \\\"Weapon\\\" || ns.gang.getEquipmentType(e) == \\\"Vehicle\\\") {\\n\\t\\t\\t\\t\\t\\t\\ttoBuy.push(e);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t//calc total price\\n\\t\\t\\t\\t\\ttoBuy.forEach((e) => {\\n\\t\\t\\t\\t\\t\\teqp += ns.gang.getEquipmentCost(e);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tif (eqp * members.length <= ns.getPlayer().money) {\\n\\t\\t\\t\\t\\t\\ttoBuy.forEach((e) => {\\n\\t\\t\\t\\t\\t\\t\\tmembers.forEach((m) => {\\n\\t\\t\\t\\t\\t\\t\\t\\tns.gang.purchaseEquipment(m, e);\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\tconst n = new Notification(\\\"Gang\\\", {body: `Purchased all Armor, Weapons, and Vehicles for every gang member! it cost you $${ns.nFormat(eqp, '0,0')}.`});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tns.tprint(\\\"you're not in a gang, dingy\\\");\\n\\t\\t}\\n\\t\\tawait ns.sleep(250);\\n\\t}\\n}\\n\",\"filename\":\"/src/gang.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/helpers.js\",\"url\":\"blob:file:///a7313468-8802-4c16-b86a-186285305004\",\"moduleSequenceNumber\":305},{\"filename\":\"/src/gang.js\",\"url\":\"blob:file:///4910059e-7c31-477a-8b70-929360ad6910\",\"moduleSequenceNumber\":387}],\"dependents\":[],\"ramUsage\":34.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let col={money:\\\"#e5C07B\\\",def:\\\"#FFFFFF\\\",hak:\\\"#98c379\\\",sta:\\\"#abb2bf\\\",cha:\\\"#c678dd\\\"};export async function main(ns){let doc=eval(\\\"document\\\"),hook0=doc.getElementById(\\\"overview-extra-hook-0\\\"),hook1=doc.getElementById(\\\"overview-extra-hook-1\\\"),ovv=doc.getElementsByClassName(\\\"MuiPaper-root\\\")[0],srvs=ns.args,gVars;for(createGlobalScript(\\\"hudMins\\\",`let crmMin = false;let monMin=false;let sklMin=false;let gngMin=false;let crpMin=false;let bldMin=false;let srvMin = false;let pltMin = false;`);;){ovv.style.borderRadius=\\\"10px\\\",ovv.style.backgroundColor=\\\"rgba(33,37,43,0.8)\\\",ovv.style.backdropFilter=\\\"blur(1px)\\\",ovv.style.border=\\\"none\\\",ovv.style.boxShadow=\\\"5px 5px 10px rgba(0,0,0,0.5)\\\",ovv.style.zIndex=\\\"99999999\\\";try{let headers=[],values=[];if(pushContE(headers,values,\\\"╭─ CUSTOM STATS \\\",\\\"────────────────────────────────────────────╮\\\",col.def),pushCont(headers,values,\\\"In: \\\"+ns.getPlayer().city,\\\"At: \\\"+ns.getPlayer().location,col.def),pushBreak(headers,values,\\\"CRIMES\\\",\\\"────────────────\\\",crmMin,\\\"crmMin\\\"),startSec(headers,values,\\\"crime\\\",crmMin?\\\"none\\\":\\\"inline\\\"),pushCont(headers,values,\\\"Total Karma: \\\",\\\"   \\\"+ns.nFormat(ns.heart.break(),\\\"0,0\\\"),col.cha),pushCont(headers,values,\\\"People Killed: \\\",\\\"   \\\"+ns.nFormat(ns.getPlayer().numPeopleKilled,\\\"0,0\\\"),col.cha),endSec(headers,values),pushBreak(headers,values,\\\"MONEY & PROFIT\\\",\\\"────────────\\\",monMin,\\\"monMin\\\"),startSec(headers,values,\\\"money\\\",monMin?\\\"none\\\":\\\"inline\\\"),pushCont(headers,values,\\\"Money: \\\",\\\"   \\\"+ns.nFormat(ns.getPlayer().money,\\\"$0,0\\\"),col.money),ns.gang.inGang()&&ns.gang.getGangInformation().moneyGainRate>0&&pushCont(headers,values,\\\"Gang Income: \\\",\\\"   \\\"+ns.nFormat(5*ns.gang.getGangInformation().moneyGainRate,\\\"$0,0\\\")+\\\" /s\\\",col.money),pushCont(headers,values,\\\"Hack Income: \\\",\\\"   \\\"+ns.nFormat(ns.getTotalScriptIncome()[0],\\\"$0,0\\\")+\\\" /s\\\",col.money),endSec(headers,values),pushBreak(headers,values,\\\"SKILL EXPERIENCE\\\",\\\"───────────\\\",sklMin,\\\"sklMin\\\"),startSec(headers,values,\\\"skill\\\",sklMin?\\\"none\\\":\\\"inline\\\"),pushCont(headers,values,\\\"Hacking: \\\",\\\"   \\\"+ns.nFormat(ns.getPlayer().exp.hacking,\\\"0,0\\\"),col.hak),pushCont(headers,values,\\\"Str | Def: \\\",\\\"   \\\"+ns.nFormat(ns.getPlayer().exp.strength,\\\"0,0\\\")+\\\" | \\\"+ns.nFormat(ns.getPlayer().exp.defense,\\\"0,0\\\"),col.sta),pushCont(headers,values,\\\"Dex | Agi: \\\",\\\"   \\\"+ns.nFormat(ns.getPlayer().exp.dexterity,\\\"0,0\\\")+\\\" | \\\"+ns.nFormat(ns.getPlayer().exp.agility,\\\"0,0\\\"),col.sta),pushCont(headers,values,\\\"Charisma: \\\",\\\"   \\\"+ns.nFormat(ns.getPlayer().exp.charisma,\\\"0,0\\\"),col.cha),endSec(headers,values),ns.gang.inGang()){pushBreak(headers,values,\\\"GANG\\\",\\\"─────────────────\\\",gngMin,\\\"gngMin\\\"),startSec(headers,values,\\\"gang\\\",gngMin?\\\"none\\\":\\\"inline\\\"),ns.gang.getBonusTime()>3e3&&pushCont(headers,values,\\\"Bonus Time: \\\",\\\"   \\\"+ns.tFormat(ns.gang.getBonusTime()),col.hak);let gangType=ns.gang.getGangInformation().isHacking?\\\"Hacking\\\":\\\"Combat\\\";pushCont(headers,values,\\\"Faction: \\\",\\\"   \\\"+ns.gang.getGangInformation().faction+\\\", \\\"+gangType,col.def),pushCont(headers,values,\\\"Respect: \\\",\\\"   \\\"+ns.nFormat(ns.gang.getGangInformation().respect,\\\"0,0\\\"),col.sta),ns.gang.getGangInformation().power>1&&pushCont(headers,values,\\\"Power: \\\",\\\"   \\\"+ns.nFormat(ns.gang.getGangInformation().power,\\\"0,0.00\\\"),col.sta),pushCont(headers,values,\\\"Territory: \\\",\\\"   \\\"+ns.nFormat(ns.gang.getGangInformation().territory,\\\"0.000%\\\"),col.cha),ns.gang.getGangInformation().wantedLevel>1&&pushCont(headers,values,\\\"Wanted Level: \\\",\\\"   \\\"+ns.nFormat(ns.gang.getGangInformation().wantedLevel,\\\"0,0\\\"),col.cha),ns.gang.getGangInformation().territoryClashChance>0&&pushCont(headers,values,\\\"Clash Chance: \\\",\\\"   \\\"+ns.nFormat(ns.gang.getGangInformation().territoryClashChance,\\\"0.0%\\\")+\\\" / \\\"+(ns.gang.getGangInformation().territoryWarfareEngaged?\\\"\\\":\\\"\\\"),col.cha),endSec(headers,values)}if(ns.getPlayer().hasCorporation){let corp=eval(\\\"ns.corporation.getCorporation()\\\");pushBreak(headers,values,\\\"CORP\\\",\\\"─────────────────\\\",crpMin,\\\"crpMin\\\"),startSec(headers,values,\\\"corp\\\",crpMin?\\\"none\\\":\\\"inline\\\"),pushCont(headers,values,\\\"Name: \\\",\\\"   \\\"+corp.name,col.def),pushCont(headers,values,\\\"Funds: \\\",\\\"   \\\"+ns.nFormat(corp.funds,\\\"$0,0\\\"),col.money),pushCont(headers,values,\\\"Revenue: \\\",\\\"   \\\"+ns.nFormat(corp.revenue,\\\"$0,0\\\")+\\\"/s\\\",col.money),pushCont(headers,values,\\\"Expenses: \\\",\\\"   \\\"+ns.nFormat(corp.expenses,\\\"$0,0\\\")+\\\"/s\\\",col.money),pushCont(headers,values,\\\"Profit: \\\",\\\"   \\\"+ns.nFormat(corp.revenue-corp.expenses,\\\"$0,0\\\")+\\\"/s\\\",col.money),pushCont(headers,values,\\\"Shares: \\\",\\\"   \\\"+ns.nFormat(corp.numShares,\\\"0,0\\\")+\\\" / \\\"+ns.nFormat(corp.totalShares,\\\"0,0\\\"),col.hak),endSec(headers,values)}if(ns.getPlayer().inBladeburner){pushBreak(headers,values,\\\"BLADEBURNERS\\\",\\\"─────────────\\\",bldMin,\\\"bldMin\\\"),startSec(headers,values,\\\"blade\\\",bldMin?\\\"none\\\":\\\"inline\\\"),pushCont(headers,values,\\\"Rank: \\\",\\\"   \\\"+ns.nFormat(ns.bladeburner.getRank(),\\\"0,0\\\"),col.cha);let stm=ns.bladeburner.getStamina();pushCont(headers,values,\\\"Stamina: \\\",`   ${ns.nFormat(stm[0],\\\"0,0.00\\\")}/${ns.nFormat(stm[1],\\\"0,0.00\\\")} | ${ns.nFormat(stm[0]/stm[1],\\\"0.000%\\\")}`,col.sta),\\\"Idle\\\"==ns.bladeburner.getCurrentAction().type?pushCont(headers,values,\\\"Action: \\\",\\\"   \\\"+ns.bladeburner.getCurrentAction().type,col.sta):pushCont(headers,values,\\\"Action: \\\",`   ${ns.bladeburner.getCurrentAction().type}: ${ns.bladeburner.getCurrentAction().name}`,col.hak),pushCont(headers,values,\\\"Skill Points: \\\",\\\"   \\\"+ns.nFormat(ns.bladeburner.getSkillPoints(),\\\"0,0\\\"),col.hak),pushCont(headers,values,\\\"City: \\\",\\\"   \\\"+ns.bladeburner.getCity(),col.def),endSec(headers,values)}pushBreak(headers,values,\\\"SERVER\\\",\\\"────────────────\\\",srvMin,\\\"srvMin\\\"),startSec(headers,values,\\\"server\\\",srvMin?\\\"none\\\":\\\"inline\\\"),pushCont(headers,values,\\\"Home: \\\",\\\"   Cores: \\\"+ns.getServer(\\\"home\\\").cpuCores+\\\" | Ram: \\\"+ns.nFormat(ns.getServerUsedRam(\\\"home\\\"),\\\"0,0\\\")+\\\" / \\\"+ns.nFormat(ns.getServerMaxRam(\\\"home\\\"),\\\"0,0\\\"),col.hak);for(let i=0;i<=srvs.length-1;i++)pushCont(headers,values,srvs[i]+\\\": \\\",\\\"   Cores: \\\"+ns.getServer(srvs[i]).cpuCores+\\\" | Ram: \\\"+ns.nFormat(ns.getServerUsedRam(srvs[i]),\\\"0,0\\\")+\\\" / \\\"+ns.nFormat(ns.getServerMaxRam(srvs[i]),\\\"0,0\\\"),col.hak);endSec(headers,values),pushBreak(headers,values,\\\"PLAYTIME\\\",\\\"───────────────\\\",pltMin,\\\"pltMin\\\"),startSec(headers,values,\\\"playt\\\",pltMin?\\\"none\\\":\\\"inline\\\"),pushCont(headers,values,`BN${ns.getPlayer().bitNodeN}: `,ns.tFormat(ns.getPlayer().playtimeSinceLastBitnode),col.def),pushCont(headers,values,\\\"Total: \\\",ns.tFormat(ns.getPlayer().totalPlaytime),col.def),endSec(headers,values),pushContE(headers,values,\\\"╰─ CUSTOM STATS \\\",\\\"────────────────────────────────────────────╯\\\",col.def),hook0.innerHTML=headers.join(\\\" \\\\n\\\"),hook1.innerHTML=values.join(\\\"\\\\n\\\")}catch(err){ns.print(\\\"ERROR: Update Skipped: \\\"+String(err))}await ns.sleep(1e3)}}function pushBreak(e,n,t,a,o,r){e.push(`<span style=\\\"color: ${col.def}\\\">├───────────────</span><br>`),n.push(`<span style=\\\"color: ${col.def}\\\">${a} <span style=\\\"color: ${col.hak}\\\">${t}</span> ${createMin(a,o,r)}┤</span><br>`)}function pushCont(e,n,t,a,o){e.push(`<span style=\\\"color: #ffffff\\\">│</span><span style=\\\"color: ${o}\\\">${t}</span><br>`),n.push(`<span style=\\\"color: ${o}\\\">${a}</span><span style=\\\"color: #ffffff\\\">│</span><br>`)}function pushContE(e,n,t,a,o){e.push(`<span style=\\\"color: ${o}\\\">${t}</span><br>`),n.push(`<span style=\\\"color: ${o}\\\">${a}</span><br>`)}function startSec(e,n,t,a){e.push(`<div class=\\\"${t}\\\" style=\\\"display: ${a}\\\">`),n.push(`<div class=\\\"${t}\\\" style=\\\"display: ${a}\\\">`)}function endSec(e,n){e.push(\\\"</div>\\\"),n.push(\\\"</div>\\\")}function createMin(e,n,t){return e.slice(0,-4),n?e+=` <a style=\\\"cursor: pointer;\\\" onclick=\\\"${t} = !${t}\\\"></a> ─`:e+=` <a style=\\\"cursor: pointer;\\\" onclick=\\\"${t} = !${t}\\\"></a> ─`,e}function createGlobalScript(e,n){if(null==document.getElementById(e)){let t=document.createElement(\\\"script\\\");t.id=e,t.innerHTML=n,document.head.appendChild(t)}else console.log(\\\"WARN: Script with that ID already exists! overwriting current!\\\"),document.getElementById(e).innerHTML=n}\\n\",\"filename\":\"/src/hud.min.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":49.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getTotalScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"bladeburner.getRank\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getStamina\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillPoints\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getCity\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.grow('joesguns');\\n    }\\n}\",\"filename\":\"xp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"xp.js\",\"url\":\"blob:file:///2ae2ab4e-b991-4cd8-b00d-dcbacd5e8456\",\"moduleSequenceNumber\":15582}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Random utility functions\\nexport function getBaseLog(x, y) { return Math.ceil(Math.log(y+1) / Math.log(x))}\\n\\n// Random Braille - Suitable for Blinkenlights\\nexport function RandomBraille() { return String.fromCharCode(0x2800 + Math.ceil(Math.random() * 0xFF)) }\\n\\n// Binary Braille - Suitable for Binary counters\\nexport const BrailleChar = (\\n    '⠀⢀⠠⢠⠐⢐⠰⢰⠈⢈⠨⢨⠘⢘⠸⢸' +\\n    '⡀⣀⡠⣠⡐⣐⡰⣰⡈⣈⡨⣨⡘⣘⡸⣸' +\\n    '⠄⢄⠤⢤⠔⢔⠴⢴⠌⢌⠬⢬⠜⢜⠼⢼' +\\n    '⡄⣄⡤⣤⡔⣔⡴⣴⡌⣌⡬⣬⡜⣜⡼⣼' +\\n    '⠂⢂⠢⢢⠒⢒⠲⢲⠊⢊⠪⢪⠚⢚⠺⢺' +\\n    '⡂⣂⡢⣢⡒⣒⡲⣲⡊⣊⡪⣪⡚⣚⡺⣺' +\\n    '⠆⢆⠦⢦⠖⢖⠶⢶⠎⢎⠮⢮⠞⢞⠾⢾' +\\n    '⡆⣆⡦⣦⡖⣖⡶⣶⡎⣎⡮⣮⡞⣞⡾⣾' +\\n    '⠁⢁⠡⢡⠑⢑⠱⢱⠉⢉⠩⢩⠙⢙⠹⢹' +\\n    '⡁⣁⡡⣡⡑⣑⡱⣱⡉⣉⡩⣩⡙⣙⡹⣹' +\\n    '⠅⢅⠥⢥⠕⢕⠵⢵⠍⢍⠭⢭⠝⢝⠽⢽' +\\n    '⡅⣅⡥⣥⡕⣕⡵⣵⡍⣍⡭⣭⡝⣝⡽⣽' +\\n    '⠃⢃⠣⢣⠓⢓⠳⢳⠋⢋⠫⢫⠛⢛⠻⢻' +\\n    '⡃⣃⡣⣣⡓⣓⡳⣳⡋⣋⡫⣫⡛⣛⡻⣻' +\\n    '⠇⢇⠧⢧⠗⢗⠷⢷⠏⢏⠯⢯⠟⢟⠿⢿' +\\n    '⡇⣇⡧⣧⡗⣗⡷⣷⡏⣏⡯⣯⡟⣟⡿⣿'\\n  ).split('')\\n\\nexport function BinaryBraille(num = 0) {\\n    let len = getBaseLog(256, num);\\n    let n = num.toString(16).padStart(len/2);\\n    let result = '';\\n    for (let i = 0; i <= len; i += 2) {\\n        let char = BrailleChar[parseInt(n.substring(i, i+2), 16)];\\n        result = result + char;\\n      }\\n      return result;\\n  }\\n\\n// Presets - Wheel\\n\\nexport const AsciiWheel     = ['|', '/', '-', '\\\\\\\\'];\\nexport const BounceWheel    = [\\\"⠁\\\",\\\"⠂\\\",\\\"⠄\\\", \\\"⡀\\\",\\\"⠄\\\", \\\"⠂\\\"];\\nexport const BrailleWheel   = [\\\"⠋\\\",\\\"⠙\\\",\\\"⠹\\\",\\\"⠸\\\",\\\"⠼\\\",\\\"⠴\\\",\\\"⠦\\\",\\\"⠧\\\",\\\"⠇\\\",\\\"⠏\\\"];\\nexport const ClockWheel     = [\\\"🕛 \\\",\\\"🕐 \\\",\\\"🕑 \\\",\\\"🕒 \\\",\\\"🕓 \\\",\\\"🕔 \\\",\\\"🕕 \\\",\\\"🕖 \\\",\\\"🕗 \\\",\\\"🕘 \\\",\\\"🕙 \\\",\\\"🕚 \\\"];\\nexport const Dots           = ['.', '..', '...'];\\nexport const EarthWheel     = [\\\"🌍 \\\",\\\"🌎 \\\",\\\"🌏 \\\"];\\nexport const FiraWheel      = ['', '', '', '', '', ''];\\nexport const MonoDots       = ['․', '‥', '…'];\\nexport const MoonWheel      = [\\\"🌑 \\\",\\\"🌒 \\\",\\\"🌓 \\\",\\\"🌔 \\\",\\\"🌕 \\\",\\\"🌖 \\\",\\\"🌗 \\\",\\\"🌘 \\\"];\\nexport const ScrollingDots  = [ \\\".  \\\",\\\".. \\\",\\\"...\\\",\\\" ..\\\",\\\"  .\\\",\\\"   \\\" ];\\n\\n/** @param {import(\\\"../\\\").NS} ns */\\nexport function Wheel(period = 1000, style = AsciiWheel) {\\n    let len = style.length;\\n    return style[Math.floor(performance.now() / period) % len];\\n}\\n\\nexport const AsciiBar = [\\n\\t\\t['[', '-', ']'],\\n\\t\\t['[', '|', ']']\\n\\t];\\n\\nexport const FiraBar = [\\n\\t\\t['', '', ''],\\n\\t\\t['', '', '']\\n\\t];\\n\\n/** @param {import(\\\"../\\\").NS} ns */\\nexport function ProgressBar(len = 5, fill = 0, style = AsciiBar) {\\n    let                                 result =    (fill > 0) ?    style[1][0] : style[0][0];\\n    for (let i = 1; i < len - 1; i++)   result +=   (i < fill) ?    style[1][1] : style[0][1];\\n                                        result +=   (fill >= len) ? style[1][2] : style[0][2];\\n    return result;\\n}\\n\\n/** @param {import(\\\"../\\\").NS} ns */\\nexport async function main(ns){\\n    let period = 25;\\n    for (let i = 0; i <= 25; i++) {\\n        ns.clearLog();\\n        ns.tprint(`i = ${i} (${BinaryBraille(i)}): ${Wheel(period,MoonWheel)} - ${ProgressBar(25, i, FiraBar)} - ${Wheel(10, ['a', 'b', 'c'] )}`);\\n        await ns.sleep();\\n    }\\n}\",\"filename\":\"/src/glyph.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/glyph.js\",\"url\":\"blob:file:///f8ca6d3c-fc67-457d-aa1f-04c32d1a0875\",\"moduleSequenceNumber\":12892}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    for (let file of ns.ls('home', ns.args[0])) ns.rm(file);\\n}\",\"filename\":\"rmf.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"rmf.js\",\"url\":\"blob:file:///33f5b641-d9e6-4c10-8da1-c2d94850015b\",\"moduleSequenceNumber\":22609}],\"dependents\":[],\"ramUsage\":2.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet [force = false, destinationFolder = ''] = ns.args;\\n\\tif (destinationFolder != '' && !destinationFolder.endsWith('/'))\\n\\t\\tdestinationFolder += '/';\\n\\n\\tconst BASE_URL = 'https://raw.githubusercontent.com/xxxsinx/bitburner/main/';\\n\\tconst FILES = [\\n\\t\\t'controller.js',\\n\\t\\t'manager.js',\\n\\t\\t'metrics.js',\\n\\t\\t'ram.js',\\n\\t\\t'utils.js',\\n\\t\\t'weaken-once.js',\\n\\t\\t'grow-once.js',\\n\\t\\t'hack-once.js',\\n\\t\\t'prep.js',\\n\\t\\t'tables.js'\\n\\t];\\n\\n\\tfor (const file of FILES) {\\n\\t\\tconst source = BASE_URL + file;\\n\\t\\tconst destination = destinationFolder + file;\\n\\t\\tif (ns.fileExists(destination) && force == false) {\\n\\t\\t\\tvar resp = await ns.prompt(`?! ${destination} already exists, do you want to overwrite it ?!`);\\n\\t\\t\\tif (resp == false) {\\n\\t\\t\\t\\tns.tprint(\\\"Download skipped.\\\");\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tconst ret = await ns.wget(source, destination);\\n\\t\\tif (ret == true) {\\n\\t\\t\\tns.tprint('SUCCESS: Downloaded ' + source + ' to ' + destination);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tns.tprint('FAIL: ?! Could not download ' + source + ' to ' + destination + ' ?!');\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/xsinx/insBatch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsinx/insBatch.js\",\"url\":\"blob:file:///9689c966-0708-40ad-bd88-1c549b322928\",\"moduleSequenceNumber\":25393}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AnalyzeAllServers } from 'metrics.js'\\nimport { FormatMoney } from 'utils.js'\\nimport { IsPrepped } from 'prep.js'\\nimport { PrintTable, DefaultStyle } from 'tables.js'\\n\\nconst QmConfig = {\\n\\tMaxPreppingServers: 3,\\t\\t// how many servers can be in prep simultaneously\\n\\tMaxBatchingServers: 2,\\t\\t// how many servers can be batching at the same time\\n\\tMaxServers: 4,\\t\\t\\t\\t// how many servers can be active at all times (if this is smaller than the two previous values, they will alternate as needed)\\n\\tListMaxServers: 30,\\t\\t\\t// how many servers are analyzed. More trivial servers are dropped from the list.\\n\\tEvalDelay: 10 * 60 * 1000,\\t// frequency in ms that we re-evaluate the metrics on the server list\\n\\tLoopDelay: 5000,\\t\\t\\t// delay in the main loop\\n\\tMaxPrepingDepth: 30,\\t\\t// This is how deep from the top of the server list we can allow prep\\n\\tMaxBatchingDepth: 30\\t\\t// This is how deep from the top of the server list we can allow batching\\n};\\n\\nconst SERVER_STATES = {\\n\\tUNPREPPED: \\\"UNPREPPED\\\",\\n\\tPREPARING: \\\"PREPPING\\\",\\n\\tPREPPED: \\\"READY\\\",\\n\\tBATCHING: \\\"BATCHING\\\"\\n};\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tns.resizeTail(1020,620);\\n\\t//await ns.sleep(0);\\n\\t//ns.resizeTail(1080, 600);\\n\\tconst qm = new QuarterMaster(ns, QmConfig.EvalDelay); // re-eval every 2 min\\n\\n\\t// Config overrides\\n\\tconst [prep, batch, max] = ns.args;\\n\\tQmConfig.MaxPreppingServers = prep;\\n\\tQmConfig.MaxBatchingServers = batch;\\n\\tQmConfig.MaxServers = max;\\n\\n\\twhile (true) {\\n\\t\\tawait qm.Dispatch();\\n\\t\\t//ns.print('WARN: config: ' + JSON.stringify(QmConfig));\\n\\t\\t//ns.print('INFO: Loop over, sleeping ' + Math.round(QmConfig.LoopDelay / 1000) + ' second');\\n\\t\\tns.print('');\\n\\t\\tawait ns.sleep(QmConfig.LoopDelay);\\n\\t}\\n}\\n\\nexport class QuarterMaster {\\n\\tconstructor(ns, refreshTime) {\\n\\t\\tthis.ns = ns;\\n\\t\\tthis.refreshTime = refreshTime;\\n\\t\\tthis.lastRefresh = 0;\\n\\t\\tthis.topServers = undefined;\\n\\t}\\n\\n\\tasync Dispatch() {\\n\\t\\t// Find top targets\\n\\t\\tif (this.lastRefresh == 0 || Date.now() - this.lastRefresh > this.refreshTime) {\\n\\t\\t\\tthis.ns.print('INFO: Re-evaluating top targets!');\\n\\t\\t\\tthis.topServers = await this.GetTopServers(this.ns, QmConfig.ListMaxServers, 1);\\n\\t\\t\\tthis.lastRefresh = Date.now();\\n\\t\\t}\\n\\n\\t\\t// Determine the current state of all top servers\\n\\t\\tfor (const metrics of this.topServers) {\\n\\t\\t\\t// Check if prep is running for that server\\n\\t\\t\\tmetrics.prepping = this.IsProcRunning('prep.js', metrics.server);\\n\\t\\t\\t// Check if batcher is running for that server\\n\\t\\t\\tmetrics.batching = this.IsProcRunning('manager.js', metrics.server);\\n\\n\\t\\t\\tif (metrics.batching)\\n\\t\\t\\t\\tmetrics.state = SERVER_STATES.BATCHING;\\n\\t\\t\\telse if (metrics.prepping)\\n\\t\\t\\t\\tmetrics.state = SERVER_STATES.PREPARING;\\n\\t\\t\\telse if (IsPrepped(this.ns, metrics.server))\\n\\t\\t\\t\\tmetrics.state = SERVER_STATES.PREPPED;\\n\\t\\t\\telse\\n\\t\\t\\t\\tmetrics.state = SERVER_STATES.UNPREPPED;\\n\\t\\t}\\n\\n\\t\\t// Prep targets\\n\\t\\tlet nbPrepping = this.topServers.filter(p => p.prepping).length;\\n\\t\\tlet nbBatching = this.topServers.filter(p => p.batching).length;\\n\\n\\t\\t// Assign tasks\\n\\t\\tlet depth = 0;\\n\\t\\tfor (let metrics of this.topServers) {\\n\\t\\t\\tif (depth > QmConfig.MaxBatchingDepth) break;\\n\\n\\t\\t\\t// Check if we can launch a batch cycle for this target\\n\\t\\t\\tif (metrics.batching == false && IsPrepped(this.ns, metrics.server) && nbBatching < QmConfig.MaxBatchingServers && nbPrepping + nbBatching < QmConfig.MaxServers) {\\n\\t\\t\\t\\tthis.ns.print('WARN: Launched manager for ' + metrics.server);\\n\\n\\t\\t\\t\\t//const ram = new MemoryMap(this.ns);\\n\\t\\t\\t\\t//const ramRatio = ram.available / ram.total;\\n\\t\\t\\t\\tconst ramRatio = 1// / (QmConfig.MaxPreppingServers + QmConfig.MaxBatchingServers);\\n\\n\\t\\t\\t\\tthis.ns.exec('manager.js', 'home', 1, metrics.server, ramRatio, false);\\n\\n\\t\\t\\t\\tmetrics.state = SERVER_STATES.BATCHING;\\n\\n\\t\\t\\t\\tnbBatching++;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tdepth++;\\n\\t\\t}\\n\\t\\tdepth = 0;\\n\\t\\tfor (let metrics of this.topServers) {\\n\\t\\t\\tif (depth > QmConfig.MaxPrepingDepth) continue;\\n\\t\\t\\tdepth++;\\n\\n\\t\\t\\tif (metrics.batching) continue;\\n\\t\\t\\tif (metrics.prepping) continue;\\n\\t\\t\\tif (IsPrepped(this.ns, metrics.server)) continue;\\n\\n\\t\\t\\t// Opportunistic prep: if the server is almost prepped, we dedicate a bit of resources to prepping it opportunistically\\n\\t\\t\\tconst so = this.ns.getServer(metrics.server);\\n\\t\\t\\tconst opportunisticPrep = so.hackDifficulty - so.minDifficulty < 5 || so.moneyAvailable / so.moneyMax >= 0.5;\\n\\n\\t\\t\\tif (!opportunisticPrep) {\\n\\t\\t\\t\\tif (nbPrepping >= QmConfig.MaxPreppingServers) continue;\\n\\t\\t\\t\\tif (nbPrepping + nbBatching >= QmConfig.MaxServers) continue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!opportunisticPrep)\\n\\t\\t\\t\\tthis.ns.print('WARN: Launched prep for ' + metrics.server);\\n\\t\\t\\telse\\n\\t\\t\\t\\tthis.ns.print('WARN: Launched opportunistic prep for ' + metrics.server);\\n\\t\\t\\tthis.ns.exec('prep.js', 'home', 1, metrics.server);\\n\\t\\t\\tmetrics.state = SERVER_STATES.PREPARING;\\n\\n\\t\\t\\tif (!opportunisticPrep)\\n\\t\\t\\t\\tnbPrepping++;\\n\\t\\t}\\n\\t\\t//this.ns.print('We now have ' + nbPrepping + ' servers in prep and ' + nbBatching + ' servers batching');\\n\\n\\t\\tlet tableData = [];\\n\\t\\tconst columns = [\\n\\t\\t\\t{ header: ' Server', width: 20 },\\n\\t\\t\\t{ header: ' Hack %', width: 8 },\\n\\t\\t\\t{ header: '   $/sec', width: 9 },\\n\\t\\t\\t{ header: ' BatchTime', width: 25 },\\n\\t\\t\\t{ header: ' Cash', width: 6 },\\n\\t\\t\\t{ header: ' Sec', width: 5 },\\n\\t\\t\\t{ header: ' State', width: 12 }\\n\\t\\t];\\n\\n\\t\\tfor (let metrics of this.topServers) {\\n\\t\\t\\tlet so = this.ns.getServer(metrics.server);\\n\\n\\t\\t\\tlet stateCol = 'white';\\n\\t\\t\\tswitch (metrics.state) {\\n\\t\\t\\t\\tcase SERVER_STATES.UNPREPPED:\\n\\t\\t\\t\\t\\tstateCol = 'red';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase SERVER_STATES.PREPARING:\\n\\t\\t\\t\\t\\tstateCol = 'yellow';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase SERVER_STATES.PREPPED:\\n\\t\\t\\t\\t\\tstateCol = 'lime';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase SERVER_STATES.BATCHING:\\n\\t\\t\\t\\t\\tstateCol = 'aqua';\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttableData.push([\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + metrics.server },\\n\\t\\t\\t\\t{ color: 'white', text: ((metrics.pct * 100).toFixed(2) + '%').padStart(7) },\\n\\t\\t\\t\\t{ color: 'white', text: this.ns.nFormat(metrics.cashPerSecond, '0.0a').padStart(8) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + this.ns.tFormat(metrics.batchTime) },\\n\\t\\t\\t\\t{ color: 'white', text: (Math.round(so.moneyAvailable / so.moneyMax * 100).toString() + '%').padStart(5) },\\n\\t\\t\\t\\t{ color: 'white', text: (Math.round(so.hackDifficulty - so.minDifficulty).toString()).padStart(4) },\\n\\t\\t\\t\\t{ color: stateCol, text: ' ' + metrics.state },\\n\\t\\t\\t]);\\n\\t\\t}\\n\\n\\t\\tPrintTable(this.ns, tableData, columns, DefaultStyle(), this.ns.print);\\n\\n\\t\\t// Display report\\n\\t\\t// this.ns.print('INFO: Server name'.padEnd(30) +\\n\\t\\t// \\t'$'.padEnd(15) +\\n\\t\\t// \\t'Security'.padEnd(25) +\\n\\t\\t// \\t'State'.padEnd(15));\\n\\n\\t\\t// for (let metrics of this.topServers) {\\n\\t\\t// \\tlet so = this.ns.getServer(metrics.server);\\n\\n\\t\\t// \\tlet prefix = 'WARN: ';\\n\\t\\t// \\tif (!IsPrepped(this.ns, metrics.server) && metrics.state != 'BATCHING')\\n\\t\\t// \\t\\tprefix = 'FAIL: ';\\n\\n\\t\\t// \\tthis.ns.print((prefix + metrics.server).padEnd(30) +\\n\\t\\t// \\t\\t(Math.round(so.moneyAvailable / so.moneyMax * 100).toString()).padEnd(15) +\\n\\t\\t// \\t\\t(Math.round(so.hackDifficulty - so.minDifficulty).toString()).padEnd(25) +\\n\\t\\t// \\t\\tmetrics.state);\\n\\t\\t// }\\n\\t}\\n\\n\\tIsProcRunning(scriptName, argument = undefined) {\\n\\t\\treturn this.ns.ps().find(p => p.filename == scriptName && (argument != undefined ? p.args.includes(argument) : true)) != undefined;\\n\\t}\\n\\n\\tasync GetTopServers(ns, count = QmConfig.ListMaxServers, maxNetworkRamPct = 0.5) {\\n\\t\\tvar data = await AnalyzeAllServers(ns, maxNetworkRamPct, false);\\n\\t\\treturn data.slice(0, Math.max(count, 0));\\n\\t\\t// const data = new Array();\\n\\t\\t// const servers = GetAllServers(this.ns).filter(s => this.ns.getServer(s).hasAdminRights && this.ns.getServer(s).moneyMax > 0);;\\n\\t\\t// for (let server of servers) {\\n\\t\\t// \\tlet subData = new Array();\\n\\t\\t// \\tfor (let pct = 0.05; pct <= 0.95; pct += 0.05) {\\n\\t\\t// \\t\\tconst metrics = new Metrics(this.ns, server, Math.min(pct, 0.99), BATCH_SPACER, 1, maxNetworkRamPct)\\n\\t\\t// \\t\\t// Skip stuff we can't hack\\n\\t\\t// \\t\\t//if (metrics.hackChance >= 0.50)\\n\\t\\t// \\t\\tif (metrics.cashPerSecond == undefined) continue;\\n\\t\\t// \\t\\tsubData.push(metrics);\\n\\t\\t// \\t\\tawait this.ns.sleep(0);\\n\\t\\t// \\t}\\n\\n\\t\\t// \\tif (subData.length > 0) {\\n\\t\\t// \\t\\tsubData = subData.sort((a, b) => b.cashPerSecond - a.cashPerSecond);\\n\\t\\t// \\t\\tdata.push(subData[0]);\\n\\t\\t// \\t}\\n\\t\\t// }\\n\\n\\t\\t// let sorted = data.sort((a, b) => b.cashPerSecond - a.cashPerSecond);\\n\\t\\t// return sorted.slice(0, count);\\n\\t}\\n}\",\"filename\":\"controller.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Prep, IsPrepped } from \\\"prep.js\\\";\\nimport { BATCH_SPACER, MaxHackForServer, GetBestMetricsForServer, HGW_MODE } from \\\"metrics.js\\\";\\nimport { MemoryMap, RunScript } from \\\"ram.js\\\";\\nimport { HasFormulas, ServerReport, WaitPids } from \\\"utils.js\\\";\\n\\nconst H = 0;\\nconst W1 = 1;\\nconst G = 2;\\nconst W2 = 3;\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tif (!HasFormulas(ns)) {\\n\\t\\tns.tprint('ERROR: Formulas.exe is needed to run this script.');\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tlet [server, maxPctTotalRam, loop] = ns.args;\\n\\n\\t// ns.args[0] = target server name\\n\\tif (server == null) {\\n\\t\\tns.tprint('ERROR: No server specified');\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (maxPctTotalRam == null) {\\n\\t\\tns.tprint('ERROR: No max percentage of total ram specified');\\n\\t\\tns.exit();\\n\\t}\\n\\n\\tif (loop == null) {\\n\\t\\tloop = true;\\n\\t}\\n\\n\\t// Manage the server!\\n\\tawait ManageServer(ns, server, maxPctTotalRam, loop);\\n}\\n\\nasync function ManageServer(ns, server, maxPctTotalRam, loop) {\\n\\t// Batch cycle counter\\n\\tlet cycle = 0;\\n\\tlet masterCycle= 0;\\n\\n\\t// Store hack level, this is just for reporting it when we detect a desync.\\n\\t// Ideally, most desyncs are caused by an increase in hackLevel mid-cycle,\\n\\t// fudging the batch metrics to the point of throwing batches out of sync\\n\\tlet hackLevel = ns.getPlayer().skills.hacking;\\n\\n\\twhile (true) {\\n\\t\\t// const pct = await GetBestPctForServer(ns, server, BATCH_SPACER, 0.05, 0.8, 0.05, maxPctTotalRam);\\n\\t\\t// let metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1, maxPctTotalRam);\\n\\t\\tns.print('INFO: Cycle ' + masterCycle + ' - Gathering batch metrics');\\n\\t\\tlet metrics = await GetBestMetricsForServer(ns, server, 1, MaxHackForServer(ns, server), maxPctTotalRam);\\n\\t\\t//const pct= metrics.pct;\\n\\n\\t\\t//metrics.Report(ns);\\n\\t\\tServerReport(ns, server, metrics);\\n\\n\\t\\tconst hackLevelChanged = ns.getPlayer().skills.hacking != hackLevel;\\n\\t\\t// if (hackLevelChanged)\\n\\t\\t// \\tns.tprint('WARN: Cycle ' + masterCycle + ' - Hack level changed, was ' + hackLevel + ' now is ' + ns.getPlayer().skills.hacking);\\n\\n\\t\\t// Since we prepped in main(), the only reason why we would ever enter this is our metrics changed, something desynced, or some other external factor\\n\\t\\t// changed the server state or player capacities\\n\\t\\tif (!IsPrepped(ns, server)) {\\n\\t\\t\\tlet msg = (hackLevelChanged ? 'WARN: ' : 'ERROR: ') +\\n\\t\\t\\t\\t'Cycle ' + masterCycle + ' - Desync detected, re-prepping ' + server + ' cycles= ' + cycle + ' hack= ' + ns.getPlayer().skills.hacking + ' (was ' + hackLevel + ')';\\n\\t\\t\\tif (cycle == 0)\\n\\t\\t\\t\\tmsg = 'WARN: Cycle ' + masterCycle + ' prepping server!';\\n\\n\\t\\t\\t//if (!hackLevelChanged)\\n\\t\\t\\tns.tprint(msg);\\n\\t\\t\\tns.print(msg);\\n\\t\\t\\tawait Prep(ns, server, metrics);\\n\\t\\t\\tns.print('SUCCESS: Server prepped!');\\n\\t\\t\\tcycle = 0; // reset cycle\\n\\t\\t\\thackLevel = ns.getPlayer().skills.hacking;\\n\\t\\t\\tServerReport(ns, server, metrics);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tcycle++;\\n\\t\\tmasterCycle++;\\n\\n\\t\\tlet pids = new Array();\\n\\t\\tlet mem = new MemoryMap(ns);\\n\\n\\t\\tlet coreBonus = 1 + (ns.getServer('home').cpuCores - 1) / 16;\\n\\n\\t\\tlet batchCount = Math.min(metrics.maxBatches, Math.floor(mem.available * maxPctTotalRam / (metrics.batchRam / coreBonus)));\\n\\t\\tif (batchCount <= 0) {\\n\\t\\t\\tns.print('metrics.maxBatches = ' + metrics.maxBatches);\\n\\t\\t\\tns.print('mem.available = ' + mem.available);\\n\\t\\t\\tns.print('metrics.batchRam = ' + metrics.batchRam);\\n\\t\\t\\tns.print('Math.floor(mem.available / metrics.batchRam) = ' + Math.floor(mem.available / metrics.batchRam));\\n\\n\\t\\t\\tns.print('FAIL: Insufficient ram to run a single batch! Aborting...');\\n\\t\\t\\tns.exit();\\n\\t\\t}\\n\\t\\tns.print('INFO: Cycle ' + masterCycle + ' - Spawning ' + batchCount + ' batches');\\n\\n\\t\\tfor (let i = 0; i < batchCount; i++) {\\n\\t\\t\\tns.print('INFO: Cycle ' + masterCycle + ' - Starting batch #' + (i + 1) + ' of ' + batchCount);\\n\\t\\t\\tif (!BatchFitsInMemoryBlocks(ns, metrics)) {\\n\\t\\t\\t\\tns.print('WARN: Not enough free memory to start batch #' + (i + 1) + ', lets take a break!');\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tpids = pids.concat(await StartBatch(ns, server, metrics, i));\\n\\t\\t\\tawait ns.sleep(BATCH_SPACER * 4);\\n\\t\\t}\\n\\n\\t\\tServerReport(ns, server, metrics);\\n\\t\\tns.print('INFO: Cycle ' + masterCycle + ' - Waiting for batch to end (approx: ' + ns.tFormat(metrics.batchTime) + ')');\\n\\n\\t\\tawait WaitPids(ns, pids);\\n\\t\\tns.print('SUCCESS: Cycle ' + masterCycle + ' - Cycle ended');\\n\\t\\tns.print('');\\n\\n\\t\\tif (!loop) {\\n\\t\\t\\tns.print('SUCCESS: We are done, exiting, controller will restart us if needed...');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(BATCH_SPACER);\\n\\t}\\n}\\n\\nexport function BatchFitsInMemoryBlocks(ns, metrics) {\\n\\tconst mem = new MemoryMap(ns);\\n\\n\\tconst HACK_RAM = ns.getScriptRam('hack-once.js');\\n\\tconst GROW_RAM = ns.getScriptRam('grow-once.js');\\n\\tconst WEAKEN_RAM = ns.getScriptRam('weaken-once.js');\\n\\n\\t// Failsafe, on veut pas trop taxer\\n\\tif (metrics.batchRam > mem.available * 0.9) {\\n\\t\\tns.print('Batch won\\\\'t fit in 90% of total ram (failsalfe)');\\n\\t\\treturn false;\\n\\t}\\n\\n\\tif (mem.ReserveBlock(metrics.threads[H] * HACK_RAM) == undefined) {\\n\\t\\tns.print('Could not find a block big enough for ' + metrics.threads[H] + ' hack threads');\\n\\t\\tns.print('Required = ' + metrics.threads[H] * HACK_RAM + ' Biggest block = ' + mem.BiggestBlock());\\n\\n\\t\\treturn false;\\n\\t}\\n\\tif (mem.ReserveBlock(metrics.threads[G] * GROW_RAM) == undefined) {\\n\\t\\tns.print('Could not find a block big enough for ' + metrics.threads[G] + ' grow threads');\\n\\t\\treturn false;\\n\\t}\\n\\tfor (let i = 0; i < (metrics.threads[W1] + metrics.threads[W2]) * WEAKEN_RAM; i++) {\\n\\t\\tif (mem.ReserveBlock(WEAKEN_RAM) == undefined) {\\n\\t\\t\\tns.print('Could not find enough network RAM for ' + (metrics.threads[W1] + metrics.threads[W2]) + ' weaken threads');\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\nasync function StartBatch(ns, server, metrics, batchNumber) {\\n\\tconst colors = [\\n\\t\\t'#9226e0', '#6b1a93', '#6754f7', '#e81284', '#dd9713', '#338fc4', '#6be84c', '#ea784b',\\n\\t\\t'#1dd62a', '#ba02ed', '#4139dd', '#120087', '#4dcc53', '#8c2700', '#7f1ee8', '#2cb2ab',\\n\\t\\t'#e84351', '#390b72', '#38c974', '#368293', '#e5a12b', '#4fe274', '#1230b7', '#21d392',\\n\\t\\t'#9dd356', '#8c30e8', '#ed2fd3', '#d3303b', '#0dbf6f', '#e8009e', '#3799fc', '#bc3260'\\n\\t];\\n\\n\\t//const logColor = colors[batchNumber % colors.length];\\n\\tconst logColor = 0;\\n\\t//ns.tprint(logColor);\\n\\n\\tlet w1pids = [];\\n\\tif (!HGW_MODE) {\\n\\t\\tw1pids = await RunScript(ns, 'weaken-once.js', metrics.threads[W1], [server, 0, metrics.times[W1], batchNumber, logColor], true, false);\\n\\t\\tawait ns.sleep(0);\\n\\t\\tif (w1pids.length == 0) {\\n\\t\\t\\tns.print('FAIL: W1 Aborting batch');\\n\\t\\t\\tawait ns.sleep(metrics.batchTime);\\n\\t\\t\\treturn [w1pids].flat(Infinity);\\n\\t\\t}\\n\\t}\\n\\tconst w2pids = await RunScript(ns, 'weaken-once.js', metrics.threads[W2], [server, metrics.delays[W2], metrics.times[W2], batchNumber, logColor], true, false);\\n\\tawait ns.sleep(0);\\n\\tif (w2pids.length == 0) {\\n\\t\\tns.print('FAIL: W2 Aborting batch');\\n\\t\\tawait ns.sleep(metrics.batchTime);\\n\\t\\treturn [w1pids, w2pids].flat(Infinity);\\n\\t}\\n\\tconst gpids = await RunScript(ns, 'grow-once.js', metrics.threads[G], [server, metrics.delays[G], metrics.times[G], batchNumber, logColor], false, false);\\n\\tawait ns.sleep(0);\\n\\tif (gpids.length == 0) {\\n\\t\\tns.print('FAIL: G Aborting batch');\\n\\t\\tawait ns.sleep(metrics.batchTime);\\n\\t\\treturn [w1pids, gpids, w2pids].flat(Infinity);\\n\\t}\\n\\tconst hpids = await RunScript(ns, 'hack-once.js', metrics.threads[H], [server, metrics.delays[H], metrics.times[H], batchNumber, logColor], false, false);\\n\\tawait ns.sleep(0);\\n\\tif (hpids.length == 0) {\\n\\t\\tns.print('FAIL: H Aborting batch');\\n\\t\\tawait ns.sleep(metrics.batchTime);\\n\\t\\treturn [hpids, w1pids, gpids, w2pids].flat(Infinity);\\n\\t}\\n\\n\\treturn [hpids, w1pids, gpids, w2pids].flat(Infinity);\\n}\",\"filename\":\"manager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///adb22adb-b1d6-4024-bbc0-6f5e8c7e457d\",\"moduleSequenceNumber\":316},{\"filename\":\"tables.js\",\"url\":\"blob:file:///389da67f-4217-4b43-823e-6bfc6bab8368\",\"moduleSequenceNumber\":321},{\"filename\":\"utils.js\",\"url\":\"blob:file:///b14c6697-3581-452b-87f4-c1c537916648\",\"moduleSequenceNumber\":316},{\"filename\":\"ram.js\",\"url\":\"blob:file:///121c1592-fb49-4bca-8416-ac9fdde9e14c\",\"moduleSequenceNumber\":315},{\"filename\":\"tables.js\",\"url\":\"blob:file:///b085144c-3a33-407f-b0bc-0128ded7b9a9\",\"moduleSequenceNumber\":321},{\"filename\":\"utils.js\",\"url\":\"blob:file:///796c2da8-482e-4188-9425-d7077c78829a\",\"moduleSequenceNumber\":316},{\"filename\":\"tables.js\",\"url\":\"blob:file:///f6633455-3c58-4eb8-abb3-46136f16c20c\",\"moduleSequenceNumber\":321},{\"filename\":\"utils.js\",\"url\":\"blob:file:///e9e8b074-ca73-417d-bf91-6c6ab0e9aa11\",\"moduleSequenceNumber\":316},{\"filename\":\"ram.js\",\"url\":\"blob:file:///8877b245-a88f-4c4f-a625-ffa000bae126\",\"moduleSequenceNumber\":315},{\"filename\":\"metrics.js\",\"url\":\"blob:file:///4962cb66-ba46-4632-a860-4696970eca27\",\"moduleSequenceNumber\":314},{\"filename\":\"tables.js\",\"url\":\"blob:file:///4378bb45-5561-4ac9-a49c-84fe538d6151\",\"moduleSequenceNumber\":321},{\"filename\":\"utils.js\",\"url\":\"blob:file:///b91f587c-74dd-4da9-967d-0627c8c93eec\",\"moduleSequenceNumber\":316},{\"filename\":\"tables.js\",\"url\":\"blob:file:///12811f5a-445f-45ff-8dd7-7cdb1bc7b4c2\",\"moduleSequenceNumber\":321},{\"filename\":\"utils.js\",\"url\":\"blob:file:///aca29c7a-a48e-4fa5-94d4-ec6342598cdc\",\"moduleSequenceNumber\":316},{\"filename\":\"ram.js\",\"url\":\"blob:file:///a39ea3bb-a8d9-4f81-9a34-d7f53337f133\",\"moduleSequenceNumber\":315},{\"filename\":\"metrics.js\",\"url\":\"blob:file:///fddfadeb-a4fa-4a89-9f1b-65a593f3bc79\",\"moduleSequenceNumber\":314},{\"filename\":\"tables.js\",\"url\":\"blob:file:///7e9686f9-612f-43b7-9ad7-334f6d427143\",\"moduleSequenceNumber\":321},{\"filename\":\"utils.js\",\"url\":\"blob:file:///43e608ce-d7e0-4e61-8795-5ccd683bbba9\",\"moduleSequenceNumber\":316},{\"filename\":\"ram.js\",\"url\":\"blob:file:///dd9d1c16-62af-4ef9-aa50-31667de6493e\",\"moduleSequenceNumber\":315},{\"filename\":\"utils.js\",\"url\":\"blob:file:///b011a924-4afb-4b40-bbbf-984f4501253d\",\"moduleSequenceNumber\":316},{\"filename\":\"prep.js\",\"url\":\"blob:file:///5c722da8-6c73-4f3c-9e5a-560c92824fc8\",\"moduleSequenceNumber\":320},{\"filename\":\"manager.js\",\"url\":\"blob:file:///d1741901-13f6-4f16-988f-54d70cc8b5c2\",\"moduleSequenceNumber\":686}],\"dependents\":[],\"ramUsage\":8.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MemoryMap } from \\\"ram.js\\\";\\nimport { HasFormulas, FormatMoney, GetAllServers, GetNextLevelXp } from \\\"utils.js\\\";\\nimport { ColorPrint, PrintTable, DefaultStyle } from 'tables.js'\\n\\nexport const H = 0;\\t\\t// Index of HACK data\\nexport const W1 = 1;\\t// Index of first WEAKEN data\\nexport const G = 2;\\t\\t// Index of GROW data\\nexport const W2 = 3;\\t// Index of second WEAKEN data\\n\\nexport const BATCH_SPACER = 20; // Spacer between jobs (and batches) in milliseconds\\n\\nexport let HGW_MODE = false;\\n\\nconst DEPTH = 10;\\n\\nlet LEECH = [];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tLEECH = [];\\n\\tfor (let i = 0.05; i < 1; i += 0.05) LEECH.push(i);\\n\\n\\tlet start = performance.now();\\n\\n\\tif (!HasFormulas(ns)) {\\n\\t\\tns.tprint('ERROR: Formulas.exe not found, running this command would take years, aborting.');\\n\\t\\tns.exit();\\n\\t}\\n\\n\\t// args[0] : max total network ram percentage\\n\\t// args[1] : server name to analyze (if empty, do a full server list report)\\n\\tlet [server, maxNetworkRamPct = 1, HGW] = ns.args;\\n\\tif (HGW != undefined)\\n\\t\\tHGW_MODE = HGW;\\n\\n\\tif (server == undefined) {\\n\\t\\tAnalyzeAllServers(ns, maxNetworkRamPct, true);\\n\\t\\tns.tprint('Executed in ' + Math.ceil(performance.now() - start) + ' milliseconds');\\n\\t\\treturn;\\n\\t}\\n\\telse if (server == 'seq') {\\n\\t\\tAnalyzeAllServersSequential(ns, maxNetworkRamPct);\\n\\n\\t\\t// let metrics = GetBestSequentialMetricsForServer(ns, 'foodnstuff', 1, MaxHackForServer(ns, 'foodnstuff'), maxNetworkRamPct);\\n\\t\\t// if (metrics) metrics.Report(ns, ns.tprint);\\n\\n\\t\\tns.tprint('Executed in ' + Math.ceil(performance.now() - start) + ' milliseconds');\\n\\t\\treturn;\\n\\t}\\n\\telse {\\n\\t\\tlet results = [];\\n\\n\\t\\tfor (const pct of LEECH) {\\n\\t\\t\\tlet metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1, 1);\\n\\t\\t\\tif (metrics == undefined)\\n\\t\\t\\t\\tns.tprint('metrics is null?')\\n\\t\\t\\telse if (metrics.cashPerSecond == undefined)\\n\\t\\t\\t\\tns.tprint('cashPerSecond is null?')\\n\\t\\t\\tresults.push(metrics);\\n\\t\\t}\\n\\n\\t\\tlet bestPct = GetBestPctForServer(ns, server, BATCH_SPACER, 0.05, 1, 0.05, 1)?.pct ?? 0;\\n\\n\\t\\tlet cpsorder = [...results].sort((a, b) => a.cashPerSecond - b.cashPerSecond);\\n\\t\\tlet ramorder = [...results].sort((a, b) => a.batchRam - b.batchRam);\\n\\t\\tlet batches = [...results].sort((a, b) => a.maxRunnableBatches - b.maxRunnableBatches);\\n\\n\\t\\tlet tableData = [];\\n\\t\\tconst columns = [\\n\\t\\t\\t{ header: ' ' + server, width: server.length + 2 },\\n\\t\\t\\t{ header: '  $/sec', width: 10 },\\n\\t\\t\\t{ header: ' BatchRam', width: 10 },\\n\\t\\t\\t{ header: '    Count', width: 12 },\\n\\t\\t\\t{ header: ' Charts', width: 34 },\\n\\t\\t\\t{ header: ' Threads', width: 37 },\\n\\t\\t\\t{ header: ' Cycle $', width: 9 },\\n\\t\\t\\t{ header: ' Cycle time', width: 25 },\\n\\t\\t\\t{ header: ' Batch XP', width: 10 },\\n\\t\\t\\t{ header: ' Max to lvl', width: 12 }\\n\\t\\t];\\n\\n\\t\\tconst barchar = '■';\\n\\n\\t\\tlet maxH = Math.max(...results.map(s => s.threads[H]));\\n\\t\\tlet maxG = Math.max(...results.map(s => s.threads[G]));\\n\\t\\tlet maxW = Math.max(...results.map(s => s.threads[W1] + s.threads[W2]));\\n\\n\\t\\tfor (const metrics of results) {\\n\\t\\t\\tlet maxThreads = Math.max(...metrics.threads);\\n\\t\\t\\tlet pctOfMax = Math.round(metrics.cashPerSecond / cpsorder[cpsorder.length - 1].cashPerSecond * 100);\\n\\t\\t\\tlet pctH = Math.round(metrics.threads[H] / maxH * 100);\\n\\t\\t\\tlet pctH2 = Math.round(metrics.threads[H] / maxThreads * 100);\\n\\t\\t\\tpctH = pctH2;\\n\\t\\t\\ttableData.push([\\n\\t\\t\\t\\t{ color: bestPct == metrics.pct ? 'lime' : 'white', text: ((metrics.pct * 100).toFixed(2) + '% ').padStart(server.length + 1) },\\n\\t\\t\\t\\t{ color: 'white', text: ns.nFormat(metrics.cashPerSecond, '0.000a').padStart(9) },\\n\\t\\t\\t\\t{ color: 'white', text: ns.nFormat(Math.ceil(metrics.batchRam) * 1000000000, '0.0b').padStart(9) },\\n\\t\\t\\t\\t{ color: 'white', text: (metrics.maxRunnableBatches + '/' + metrics.maxBatches).padStart(11) },\\n\\t\\t\\t\\t{ color: metrics.maxRunnableBatches == 0 ? 'red' : 'lime', text: metrics.maxRunnableBatches == 0 ? ' Not enough RAM available!' : '$/sec'.padStart(6) + ' '.padEnd(pctOfMax / 4 + 2, barchar) },\\n\\t\\t\\t\\t{ color: 'darkorange', text: ' H ' + metrics.threads[H].toString().padStart(7) + ' '.padEnd(pctH / 4 + 1, barchar) },\\n\\t\\t\\t\\t{ color: 'white', text: ns.nFormat(metrics.batchMoney * metrics.maxRunnableBatches, '0.0a').padStart(8) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + ns.tFormat(metrics.batchTime + BATCH_SPACER * metrics.maxRunnableBatches).padStart(9) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + ns.nFormat(metrics.batchXp, '0.000a').padStart(8) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + Math.ceil(GetNextLevelXp(ns).remaining / metrics.batchXp).toString().padStart(10) }\\n\\t\\t\\t]);\\n\\n\\t\\t\\tpctOfMax = Math.round(metrics.maxRunnableBatches / batches[ramorder.length - 1].maxRunnableBatches * 100);\\n\\n\\t\\t\\tlet pctG = Math.round(metrics.threads[G] / maxG * 100);\\n\\t\\t\\tlet pctG2 = Math.round(metrics.threads[G] / maxThreads * 100);\\n\\t\\t\\tpctG = pctG2;\\n\\t\\t\\ttableData.push([\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'darkorange', text: metrics.maxRunnableBatches == 0 ? '' : 'Count'.padStart(6) + ' '.padEnd(pctOfMax / 4 + 2, barchar) },\\n\\t\\t\\t\\t{ color: 'lime', text: ' G ' + metrics.threads[G].toString().padStart(7) + ' '.padEnd(pctG / 4 + 1, barchar) },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' }\\n\\t\\t\\t]);\\n\\n\\t\\t\\tpctOfMax = Math.round(metrics.batchRam / ramorder[ramorder.length - 1].batchRam * 100);\\n\\n\\t\\t\\tlet pctW = Math.round((metrics.threads[W1] + metrics.threads[W2]) / maxW * 100);\\n\\t\\t\\tlet pctW2 = Math.round((metrics.threads[W1] + metrics.threads[W2]) / maxThreads * 100);\\n\\t\\t\\tpctW = pctW2;//(pctW + pctW2) / 2;\\n\\t\\t\\tlet weakenThreadsText = HGW_MODE ? metrics.threads[W2].toString() : (metrics.threads[W1] + '/' + metrics.threads[W2]).toString();\\n\\t\\t\\ttableData.push([\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'yellow', text: metrics.maxRunnableBatches == 0 ? '' : 'B.Ram'.padStart(6) + ' '.padEnd(pctOfMax / 4 + 2, barchar) },\\n\\t\\t\\t\\t{ color: '#4488FF', text: ' W ' + weakenThreadsText.padStart(7) + ' '.padEnd(pctW / 4 + 1, barchar) },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' },\\n\\t\\t\\t\\t{ color: 'white', text: '' }\\n\\t\\t\\t]);\\n\\n\\t\\t\\ttableData.push(null);\\n\\t\\t}\\n\\n\\t\\ttableData.pop();\\n\\t\\tPrintTable(ns, tableData, columns, DefaultStyle(), ColorPrint);\\n\\t\\tns.tprint('Executed in ' + Math.ceil(performance.now() - start) + ' milliseconds');\\n\\t}\\n}\\n\\nexport function GetBestPctForServer(ns, server, spacer = BATCH_SPACER, minPct = 0.05, maxPct = 1, step = 0.05, maxNetworkRamPct) {\\n\\tlet best = undefined;\\n\\n\\tfor (const pct of LEECH) {\\n\\t\\tconst metrics = new Metrics(ns, server, pct, spacer, 1, maxNetworkRamPct)\\n\\t\\tif (metrics.cashPerSecond > (best?.cashPerSecond ?? 0))\\n\\t\\t\\tbest = metrics;\\n\\t}\\n\\n\\treturn best;\\n}\\n\\nexport function AnalyzeAllServers(ns, maxNetworkRamPct, verbose = true) {\\n\\tconst data = new Array();\\n\\tconst servers = GetAllServers(ns).filter(s => ns.getServer(s).hasAdminRights && ns.getServer(s).moneyMax > 0);\\n\\n\\tif (verbose) ns.tprint('INFO: Getting metrics for ' + servers.length + ' servers');\\n\\tfor (let server of servers) {\\n\\t\\tlet metrics = GetBestMetricsForServer(ns, server, 1, MaxHackForServer(ns, server), maxNetworkRamPct);\\n\\t\\tif (metrics)\\n\\t\\t\\tdata.push(metrics);\\n\\t}\\n\\tif (verbose) ns.tprint('SUCCESS: Done gathering metrics on ' + servers.length + ' servers');\\n\\n\\tlet sorted = data.sort((a, b) => b.cashPerSecond - a.cashPerSecond);\\n\\n\\tif (verbose) {\\n\\t\\tlet tableData = [];\\n\\t\\tconst columns = [\\n\\t\\t\\t{ header: ' server', width: 20 },\\n\\t\\t\\t{ header: ' Hack %', width: 8 },\\n\\t\\t\\t{ header: '   $/sec', width: 9 },\\n\\t\\t\\t{ header: ' batchTime', width: 25 },\\n\\t\\t\\t{ header: ' weakenTime', width: 25 }\\n\\t\\t];\\n\\n\\t\\tfor (let metrics of sorted) {\\n\\t\\t\\ttableData.push([\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + metrics.server },\\n\\t\\t\\t\\t{ color: 'white', text: ((metrics.pct * 100).toFixed(2) + '%').padStart(7) },\\n\\t\\t\\t\\t{ color: 'white', text: ns.nFormat(metrics.cashPerSecond, '0.0a').padStart(8) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + ns.tFormat(metrics.batchTime) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + ns.tFormat(metrics.currentStateWeakenTime) }\\n\\t\\t\\t]);\\n\\t\\t}\\n\\n\\t\\tns.tprint('Something should show.');\\n\\t\\tns.tprint('tableData.length: ' + tableData.length);\\n\\t\\tns.tprint('columns.length: ' + columns.length);\\n\\t\\tPrintTable(ns, tableData, columns, DefaultStyle(), ColorPrint);\\n\\t}\\n\\treturn sorted;\\n}\\n\\nexport class Metrics {\\n\\tconstructor(ns, server, pct, spacer, cores = 1, maxNetworkRamPct = 1, forcedHackThreads = undefined) {\\n\\t\\t// Params\\n\\t\\tthis.server = server;\\n\\t\\tthis.pct = pct;\\n\\t\\tthis.spacer = spacer;\\n\\t\\tthis.cores = cores;\\n\\t\\tthis.maxNetworkRamPct = maxNetworkRamPct;\\n\\t\\tthis.maxNetworkRam = undefined;\\n\\t\\tthis.forcedHackThreads = forcedHackThreads;\\n\\n\\t\\t// Metrics\\n\\t\\tthis.times = new Array(0, 0, 0, 0);\\n\\t\\tthis.threads = new Array(0, 0, 0, 0);\\n\\n\\t\\t// Calculated values\\n\\t\\tthis.delays = new Array(0, 0, 0, 0);\\n\\t\\tthis.ends = new Array(0, 0, 0, 0);\\n\\n\\t\\t// Additional information\\n\\t\\tthis.batchRam = 0;\\n\\t\\tthis.batchTime = 0;\\n\\t\\tthis.batchMoney = 0;\\n\\t\\tthis.hackChance = 0;\\n\\t\\tthis.effectivePct = 0;\\n\\t\\tthis.moneyPerRam = 0;\\n\\t\\tthis.maxRunnableBatches = 0;\\n\\t\\tthis.jobXp = new Array(0, 0, 0, 0);\\n\\t\\tthis.batchXp = 0;\\n\\n\\t\\tthis.cashPerSecond = 0;\\n\\n\\t\\t// Fill the data\\n\\t\\tthis.UpdateMetrics(ns);\\n\\t}\\n\\n\\tReport(ns, printfunc = ns.print, minimalist = false) {\\n\\t\\tif (minimalist) {\\n\\t\\t\\tlet pct = Math.round(this.pct * 100).toString() + '%';\\n\\t\\t\\tlet threads = this.threads.toString();\\n\\t\\t\\tlet cps = FormatMoney(ns, Math.ceil(this.batchMoney * this.maxRunnableBatches / (this.batchTime / 1000)));\\n\\t\\t\\tlet ram = ns.nFormat(Math.ceil(this.maxRunnableBatches * this.batchRam) * 1000000000, '0.00b');\\n\\t\\t\\tlet batchRam = ns.nFormat(Math.ceil(this.batchRam) * 1000000000, '0.00b');\\n\\t\\t\\tprintfunc(pct.padEnd(6) + threads.padEnd(20) + cps.padEnd(12) + ram.padEnd(12) + batchRam.padEnd(12));\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tprintfunc('┌─────────────────────────────────────────────────────┐');\\n\\t\\tlet line = 'Metrics for ' + this.server + ' skimming ' + Math.round(this.pct * 100) + '%';\\n\\t\\tprintfunc('│ ' + line.padStart(52 / 2 + line.length / 2).padEnd(52) + '│');\\n\\t\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\t\\tline = 'RAM                     :  ' + ns.nFormat(Math.ceil(this.batchRam) * 1000000000, '0.00b');\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = '$                       :  ' + FormatMoney(ns, this.batchMoney);\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = 'Time                    :  ' + ns.tFormat(this.batchTime);\\n\\t\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = 'Max Count               :  ' + this.maxBatches;\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = '$/RAM                   :  ' + FormatMoney(ns, this.moneyPerRam);\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = 'Max in allowed ram      :  ' + this.maxRunnableBatches;\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\t\\tline = 'Cycle profit            :  ' + FormatMoney(ns, this.batchMoney * this.maxRunnableBatches);\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = 'Cycle RAM               :  ' + ns.nFormat(Math.ceil(this.maxRunnableBatches * this.batchRam) * 1000000000, '0.00b');\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = '$/s                     :  ' + FormatMoney(ns, Math.ceil(this.batchMoney * this.maxRunnableBatches / (this.batchTime / 1000)));\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\n\\t\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\t\\tif (HGW_MODE) {\\n\\t\\t\\tprintfunc('│ ' + ('HGW threads : ' + this.threads).padEnd(52) + '│');\\n\\t\\t\\tprintfunc('│ ' + ('HGW times   : ' + this.times.map(p => Math.ceil(p))).padEnd(52) + '│');\\n\\t\\t\\tprintfunc('│ ' + ('HGW delays  : ' + this.delays).padEnd(52) + '│');\\n\\t\\t\\tprintfunc('│ ' + ('HGW ends    : ' + this.ends).padEnd(52) + '│');\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tprintfunc('│ ' + ('HWGW threads : ' + this.threads).padEnd(52) + '│');\\n\\t\\t\\tprintfunc('│ ' + ('HWGW times   : ' + this.times.map(p => Math.ceil(p))).padEnd(52) + '│');\\n\\t\\t\\tprintfunc('│ ' + ('HWGW delays  : ' + this.delays).padEnd(52) + '│');\\n\\t\\t\\tprintfunc('│ ' + ('HWGW ends    : ' + this.ends).padEnd(52) + '│');\\n\\t\\t}\\n\\n\\t\\tprintfunc('└─────────────────────────────────────────────────────┘');\\n\\t}\\n\\n\\tUpdateMetrics(ns) {\\n\\t\\tif (!HasFormulas(ns)) {\\n\\t\\t\\tns.tprint('ERROR: Formulas.exe is required.');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Figure hack time and threads\\n\\t\\tconst so = ns.getServer(this.server);\\n\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t// Note current security weaken time\\n\\t\\tthis.currentStateWeakenTime = ns.formulas.hacking.weakenTime(so, player);\\n\\n\\t\\t// Set server to min difficulty, it's the state where all 4 ops start at\\n\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\t\\tso.moneyAvailable = so.moneyMax;\\n\\n\\t\\t// Get the times, those are fixed since we start at X security\\n\\t\\tthis.times[H] = ns.formulas.hacking.hackTime(so, player);\\n\\t\\tthis.times[W1] = ns.formulas.hacking.weakenTime(so, player);\\n\\t\\tthis.times[G] = ns.formulas.hacking.growTime(so, player);\\n\\t\\tthis.times[W2] = ns.formulas.hacking.weakenTime(so, player);\\n\\n\\t\\t// Figure first hack time and threads\\n\\t\\tconst hackPctThread = ns.formulas.hacking.hackPercent(so, player);\\n\\t\\tthis.threads[H] = Math.ceil(this.pct / hackPctThread);\\n\\t\\tif (this.threads[H] == Infinity) this.threads[H] = 0;\\n\\t\\tthis.effectivePct = Math.min(hackPctThread * this.threads[H], 1 - 0.000001);\\n\\t\\tthis.batchMoney = Math.floor(so.moneyAvailable * hackPctThread) * this.threads[H];\\n\\n\\t\\tso.moneyAvailable -= this.batchMoney;\\n\\t\\tso.hackDifficulty += this.threads[H] * 0.002; //ns.hackAnalyzeSecurity(this.threads[H]);\\n\\n\\t\\tif (this.pct == 1) {\\n\\t\\t\\tthis.effectivePct = 1 - 0.000001;\\n\\t\\t\\tso.moneyAvailable = 0;\\n\\t\\t}\\n\\n\\t\\t// Figure first weaken time and threads\\n\\t\\tthis.threads[W1] = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, this.cores)*/);\\n\\t\\tif (!HGW_MODE)\\n\\t\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\n\\t\\tif (isNaN(so.moneyAvailable)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t//this.threads[G] = calculateGrowThreads(ns, so, player, this.cores);\\n\\t\\tthis.threads[G] = solveGrow(ns.formulas.hacking.growPercent(so, 1, player, 1), so.moneyAvailable, so.moneyMax);\\n\\n\\t\\t// Figure grow time and threads\\n\\t\\t// const growFactor = 1 / (1 - ((so.moneyMax - 0.01) / so.moneyMax));\\n\\t\\t// this.debugThreadsG = Math.ceil(Math.log(growFactor) / Math.log(ns.formulas.hacking.growPercent(so, 1, player, this.cores)));\\n\\n\\t\\tif (so.moneyAvailable == 0) so.moneyAvailable = 1;\\n\\n\\t\\tso.hackDifficulty += this.threads[G] * 0.004; //ns.growthAnalyzeSecurity(this.threads[G]);\\n\\t\\tso.moneyAvailable = so.moneyMax;\\n\\n\\t\\t// Figure second weaken time and threads\\n\\t\\tthis.threads[W2] = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, this.cores)*/);\\n\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\n\\t\\t// Make sure we have whole values of threads and times\\n\\t\\tthis.threads = this.threads.map(p => Math.ceil(p));\\n\\t\\tthis.times = this.times.map(p => Math.ceil(p));\\n\\n\\t\\tif (HGW_MODE) {\\n\\t\\t\\tthis.threads[W1] = 0;\\n\\t\\t\\tthis.times[W1] = 0;\\n\\n\\t\\t\\tthis.delays[H] = this.times[W2] - this.spacer * 2 - this.times[H];\\n\\t\\t\\tthis.delays[W1] = 0;\\n\\t\\t\\tthis.delays[G] = this.times[W2] - this.spacer - this.times[G];\\n\\t\\t\\tthis.delays[W2] = 0;\\n\\n\\t\\t\\tthis.ends[H] = this.delays[H] + this.times[H];\\n\\t\\t\\tthis.ends[W1] = 0;\\n\\t\\t\\tthis.ends[G] = this.delays[G] + this.times[G];\\n\\t\\t\\tthis.ends[W2] = this.delays[W2] + this.times[W2];\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tthis.delays[H] = this.times[W1] - this.spacer - this.times[H];\\n\\t\\t\\tthis.delays[W1] = 0;\\n\\t\\t\\tthis.delays[G] = this.times[W1] + this.spacer - this.times[G];\\n\\t\\t\\tthis.delays[W2] = this.spacer * 2;\\n\\n\\t\\t\\tthis.ends[H] = this.delays[H] + this.times[H];\\n\\t\\t\\tthis.ends[W1] = this.delays[W1] + this.times[W1];\\n\\t\\t\\tthis.ends[G] = this.delays[G] + this.times[G];\\n\\t\\t\\tthis.ends[W2] = this.delays[W2] + this.times[W2];\\n\\t\\t}\\n\\n\\t\\t// Round delays\\n\\t\\tthis.delays = this.delays.map(p => Math.ceil(p))\\n\\n\\t\\t// Calculate batch time\\n\\t\\tthis.batchTime = Math.ceil(this.delays[W2] + this.times[W2]);\\n\\n\\t\\t// Calculate batch ram requirement\\n\\t\\tconst HACK_RAM = ns.getScriptRam('hack-once.js');\\n\\t\\tconst GROW_RAM = ns.getScriptRam('grow-once.js');\\n\\t\\tconst WEAKEN_RAM = ns.getScriptRam('weaken-once.js');\\n\\t\\tthis.batchRam = this.threads[G] * GROW_RAM;\\n\\t\\tthis.batchRam += this.threads[W1] * WEAKEN_RAM;\\n\\t\\tthis.batchRam += this.threads[W2] * WEAKEN_RAM;\\n\\t\\tthis.batchRam += this.threads[H] * HACK_RAM;\\n\\n\\t\\t// Calculate max concurrent batches (very rough arbitrary calculation)\\n\\t\\tif (HGW_MODE)\\n\\t\\t\\tthis.maxBatches = Math.ceil(Math.floor(this.times[W2] / (this.spacer * 3)));\\n\\t\\telse\\n\\t\\t\\tthis.maxBatches = Math.ceil(Math.floor(this.times[W2] / (this.spacer * 4)));\\n\\n\\t\\t// Calculate hackChance\\n\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\t\\tthis.hackChance = ns.formulas.hacking.hackChance(so, player);\\n\\n\\t\\t// Correct money by hack chance\\n\\t\\tthis.batchMoney *= this.hackChance;\\n\\n\\t\\t// Money vs ram ratio\\n\\t\\tthis.moneyPerRam = this.batchMoney / this.batchRam;\\n\\n\\t\\t// Max number of batches we can run in alloted memory\\n\\t\\tconst ram = new MemoryMap(ns, true);\\n\\t\\tconst MAX_RAM = ram.total;\\n\\t\\tthis.maxNetworkRam = MAX_RAM;\\n\\n\\t\\tlet nbBatches = 0;\\n\\t\\tfor (let i = 0; i < this.maxBatches; i++) {\\n\\t\\t\\tif (ram.ReserveBlock(this.threads[H] * HACK_RAM) == undefined) break;\\n\\t\\t\\tif (!HGW_MODE)\\n\\t\\t\\t\\tif (ram.ReserveBlock(this.threads[W1] * WEAKEN_RAM) == undefined) break;\\n\\t\\t\\tif (ram.ReserveBlock(this.threads[G] * GROW_RAM) == undefined) break;\\n\\t\\t\\tif (ram.ReserveBlock(this.threads[W2] * WEAKEN_RAM) == undefined) break;\\n\\t\\t\\tnbBatches++;\\n\\t\\t}\\n\\n\\t\\tconst maxBatchesInRam = nbBatches;\\n\\t\\t// const maxBatchesInRam = Math.floor(this.maxNetworkRam / this.batchRam);\\n\\n\\t\\tthis.maxRunnableBatches = Math.min(this.maxBatches, maxBatchesInRam);\\n\\n\\t\\tthis.batchXp = 0;\\n\\t\\tfor (let i = 0; i < 4; i++) {\\n\\t\\t\\tthis.jobXp[i] = this.threads[i] * ns.formulas.hacking.hackExp(so, player);\\n\\t\\t\\tthis.batchXp += this.jobXp[i];\\n\\t\\t}\\n\\n\\t\\tthis.cashPerSecond = Math.ceil(this.batchMoney * this.maxRunnableBatches / (this.batchTime / 1000));\\n\\t}\\n}\\n\\n\\nexport class SequentialMetrics {\\n\\tconstructor(ns, server, pct) {\\n\\t\\t// Params\\n\\t\\tthis.server = server;\\n\\t\\tthis.pct = pct;\\n\\n\\t\\t// Metrics\\n\\t\\tthis.times = new Array(0, 0, 0, 0);\\n\\t\\tthis.threads = new Array(0, 0, 0, 0);\\n\\n\\t\\t// Additional information\\n\\t\\tthis.maxRam = 0;\\n\\t\\tthis.cycleTime = 0;\\n\\t\\tthis.cycleMoney = 0;\\n\\t\\tthis.hackChance = 0;\\n\\t\\tthis.effectivePct = 0;\\n\\n\\t\\tthis.cashPerSecond = 0;\\n\\n\\t\\t// Fill the data\\n\\t\\tthis.UpdateMetrics(ns);\\n\\t}\\n\\n\\tReport(ns, printfunc = ns.print, minimalist = false) {\\n\\t\\tif (minimalist) {\\n\\t\\t\\tlet pct = Math.round(this.pct * 100).toString() + '%';\\n\\t\\t\\tlet threads = this.threads.toString();\\n\\t\\t\\tlet cps = FormatMoney(ns, Math.ceil(this.cycleMoney / (this.cycleTime / 1000)));\\n\\t\\t\\tlet ram = ns.nFormat(this.maxRam * 1000000000, '0.00b');\\n\\t\\t\\tprintfunc(pct.padEnd(6) + threads.padEnd(20) + cps.padEnd(12) + ram.padEnd(12));\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tprintfunc('┌─────────────────────────────────────────────────────┐');\\n\\t\\tlet line = 'Sequential Metrics for ' + this.server + ' skimming ' + Math.round(this.pct * 100) + '%';\\n\\t\\tprintfunc('│ ' + line.padStart(52 / 2 + line.length / 2).padEnd(52) + '│');\\n\\t\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\t\\tline = 'RAM                     :  ' + ns.nFormat(Math.ceil(this.maxRam) * 1000000000, '0.00b');\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = '$                       :  ' + FormatMoney(ns, this.cycleMoney);\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\t\\tline = 'Time                    :  ' + ns.tFormat(this.cycleTime);\\n\\t\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\t\\tline = '$/s                     :  ' + FormatMoney(ns, Math.ceil(this.cycleMoney / (this.cycleTime / 1000)));\\n\\t\\tprintfunc('│ ' + line.padEnd(52) + '│');\\n\\n\\t\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\t\\tprintfunc('│ ' + ('HWGW threads : ' + this.threads).padEnd(52) + '│');\\n\\t\\tprintfunc('│ ' + ('HWGW times   : ' + this.times.map(p => Math.ceil(p))).padEnd(52) + '│');\\n\\t\\tprintfunc('└─────────────────────────────────────────────────────┘');\\n\\t}\\n\\n\\tUpdateMetrics(ns) {\\n\\t\\tif (!HasFormulas(ns)) {\\n\\t\\t\\tns.tprint('ERROR: Formulas.exe is required.');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Figure hack time and threads\\n\\t\\tconst so = ns.getServer(this.server);\\n\\t\\tconst player = ns.getPlayer();\\n\\n\\t\\t// Note current security weaken time\\n\\t\\tthis.currentStateWeakenTime = ns.formulas.hacking.weakenTime(so, player);\\n\\n\\t\\t// Set server to min difficulty, it's the state where all 4 ops start at\\n\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\t\\tso.moneyAvailable = so.moneyMax;\\n\\n\\t\\t// Get the hack and grow times, those are fixed since we start at min security\\n\\t\\tthis.times[H] = ns.formulas.hacking.hackTime(so, player);\\n\\t\\tthis.times[G] = ns.formulas.hacking.growTime(so, player);\\n\\n\\t\\t// Figure first hack time and threads\\n\\t\\tconst hackPctThread = ns.formulas.hacking.hackPercent(so, player);\\n\\t\\tthis.threads[H] = Math.ceil(this.pct / hackPctThread);\\n\\t\\tif (this.threads[H] == Infinity) this.threads[H] = 0;\\n\\t\\tthis.effectivePct = Math.min(hackPctThread * this.threads[H], 1 - 0.000001);\\n\\t\\tthis.cycleMoney = Math.floor(so.moneyAvailable * hackPctThread) * this.threads[H];\\n\\n\\t\\tso.moneyAvailable -= this.cycleMoney;\\n\\t\\tso.hackDifficulty += this.threads[H] * 0.002; //ns.hackAnalyzeSecurity(this.threads[H]);\\n\\t\\tthis.times[W1] = ns.formulas.hacking.weakenTime(so, player);\\n\\n\\t\\tif (this.pct == 1) {\\n\\t\\t\\tthis.effectivePct = 1 - 0.000001;\\n\\t\\t\\tso.moneyAvailable = 0;\\n\\t\\t}\\n\\n\\t\\t// Figure first weaken time and threads\\n\\t\\tthis.threads[W1] = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, this.cores)*/);\\n\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\n\\t\\tif (isNaN(so.moneyAvailable)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t//this.threads[G] = calculateGrowThreads(ns, so, player, this.cores);\\n\\t\\tthis.threads[G] = solveGrow(ns.formulas.hacking.growPercent(so, 1, player, 1), so.moneyAvailable, so.moneyMax);\\n\\n\\t\\tif (so.moneyAvailable == 0) so.moneyAvailable = 1;\\n\\n\\t\\tso.hackDifficulty += this.threads[G] * 0.004; //ns.growthAnalyzeSecurity(this.threads[G]);\\n\\t\\tso.moneyAvailable = so.moneyMax;\\n\\n\\t\\tthis.times[W2] = ns.formulas.hacking.weakenTime(so, player);\\n\\n\\t\\t// Figure second weaken time and threads\\n\\t\\tthis.threads[W2] = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, this.cores)*/);\\n\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\n\\t\\t// Make sure we have whole values of threads and times\\n\\t\\tthis.threads = this.threads.map(p => Math.ceil(p));\\n\\t\\tthis.times = this.times.map(p => Math.ceil(p));\\n\\n\\t\\t// Calculate batch time\\n\\t\\tthis.cycleTime = Math.ceil(this.times[H] + this.times[W2] + this.times[G] + this.times[W2]);\\n\\n\\t\\t// Calculate batch ram requirement\\n\\t\\tconst HACK_RAM = ns.getScriptRam('hack-once.js');\\n\\t\\tconst GROW_RAM = ns.getScriptRam('grow-once.js');\\n\\t\\tconst WEAKEN_RAM = ns.getScriptRam('weaken-once.js');\\n\\t\\tthis.maxRam = Math.max(this.threads[G] * GROW_RAM, this.threads[W1] * WEAKEN_RAM, this.threads[W2] * WEAKEN_RAM, this.threads[H] * HACK_RAM);\\n\\n\\t\\t// Calculate hackChance\\n\\t\\tso.hackDifficulty = so.minDifficulty;\\n\\t\\tthis.hackChance = ns.formulas.hacking.hackChance(so, player);\\n\\n\\t\\t// Correct money by hack chance\\n\\t\\tthis.cycleMoney *= this.hackChance;\\n\\n\\t\\tthis.cashPerSecond = Math.ceil(this.cycleMoney / (this.cycleTime / 1000));\\n\\n\\t\\tconst MAX_RAM = new MemoryMap(ns, true).total;\\n\\t\\tif (this.maxRam > MAX_RAM) {\\n\\t\\t\\t//ns.tprint('Zeroing metrics for ' + this.server);\\n\\t\\t\\tthis.cashPerSecond = 0;\\n\\t\\t}\\n\\t\\t//this.Report(ns, ns.tprint);\\n\\t}\\n}\\n\\n// export function calculateGrowThreads(ns, serverObject, playerObject, cores) {\\n// \\tif (serverObject.moneyAvailable >= serverObject.moneyMax) return 0;\\n// \\tlet min = 1;\\n\\n// \\t// Use the flawed API to find a maximum value\\n// \\tconst growFactor = 1 / (1 - ((serverObject.moneyMax - 1) / serverObject.moneyMax));\\n// \\tlet max = Math.ceil(Math.log(growFactor) / Math.log(ns.formulas.hacking.growPercent(serverObject, 1, playerObject, cores)));\\n\\n// \\tlet threads = binarySearchGrow(ns, min, max, serverObject, playerObject, cores);\\n\\n// \\tlet newMoney = CalcGrowth(ns, serverObject, playerObject, threads, cores);\\n// \\tlet diff = (newMoney - serverObject.moneyMax);\\n// \\tif (diff < 0)\\n// \\t\\tns.tprint('FAIL: undershot by ' + diff);\\n\\n// \\treturn threads;\\n// }\\n\\n// function binarySearchGrow(ns, min, max, so, po, cores) {\\n// \\tif (min == max) return max;\\n// \\tlet threads = Math.ceil(min + (max - min) / 2);\\n\\n// \\tlet newMoney = CalcGrowth(ns, so, po, threads, cores);\\n// \\tif (newMoney > so.moneyMax) {\\n// \\t\\tif (CalcGrowth(ns, so, po, threads - 1, cores) < so.moneyMax)\\n// \\t\\t\\treturn threads;\\n// \\t\\treturn binarySearchGrow(ns, min, threads - 1, so, po, cores);\\n// \\t}\\n// \\telse if (newMoney < so.moneyMax) {\\n// \\t\\treturn binarySearchGrow(ns, threads + 1, max, so, po, cores);\\n// \\t}\\n// \\telse {\\n// \\t\\treturn threads;\\n// \\t}\\n// }\\n\\n// function CalcGrowth(ns, so, po, threads, cores) {\\n// \\tlet serverGrowth = ns.formulas.hacking.growPercent(so, threads, po, cores);\\n// \\treturn (so.moneyAvailable + threads) * serverGrowth;\\n// }\\n\\n// Solve for number of growth threads required to get from money_lo to money_hi\\n// base is ns.formulas.hacking.growPercent(serverObject, 1, playerObject, cores)\\nexport function solveGrow(base, money_lo, money_hi) {\\n\\tif (money_lo >= money_hi) { return 0; }\\n\\n\\tlet threads = 1000;\\n\\tlet prev = threads;\\n\\tfor (let i = 0; i < 30; ++i) {\\n\\t\\tlet factor = money_hi / Math.min(money_lo + threads, money_hi - 1);\\n\\t\\tthreads = Math.log(factor) / Math.log(base);\\n\\t\\tif (Math.ceil(threads) == Math.ceil(prev)) { break; }\\n\\t\\tprev = threads;\\n\\t}\\n\\n\\treturn Math.ceil(Math.max(threads, prev, 0));\\n}\\n\\n\\nexport function MaxHackForServer(ns, server) {\\n\\tlet so = ns.getServer(server);\\n\\tlet po = ns.getPlayer();\\n\\tso.hackDifficulty = so.minDifficulty;\\n\\tconst hackPctThread = ns.formulas.hacking.hackPercent(so, po);\\n\\tlet ret = Math.ceil(1 / hackPctThread);\\n\\tif (ret == Infinity) ret = 0;\\n\\t//ns.tprint('Max threads for ' + server + ' is ' + ret);\\n\\treturn ret;\\n}\\n\\nexport function GetBestMetricsForServer(ns, server, minThreads, maxThreads, maxNetworkRamPct, depth = DEPTH) {\\n\\tif (maxThreads == 0) return undefined;\\n\\n\\tlet STEP = (maxThreads - minThreads) / depth;\\n\\t// ns.tprint('');\\n\\t// ns.tprint('minThreads: ' + minThreads + ' maxThreads: ' + maxThreads + ' STEP: ' + STEP);\\n\\tlet steps = new Set();\\n\\tfor (let i = minThreads; i <= maxThreads; i += STEP)\\n\\t\\tsteps.add(Math.round(i));\\n\\tsteps = [...steps];\\n\\t//ns.tprint('Steps: ' + steps);\\n\\tif (steps.length == 1) return steps[0];\\n\\n\\n\\tlet bestMetrics = undefined;\\n\\tfor (const threads of steps) {\\n\\t\\tlet pct = threads / MaxHackForServer(ns, server);\\n\\t\\tconst metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1, maxNetworkRamPct)\\n\\t\\t//ns.tprint('Trying pct: ' + (pct * 100).toFixed(2) + ' threads=' + threads + ' cps: ' + metrics.cashPerSecond);\\n\\t\\tif (bestMetrics == undefined || metrics.cashPerSecond > bestMetrics.cashPerSecond) {\\n\\t\\t\\tbestMetrics = metrics;\\n\\t\\t}\\n\\t\\telse if (bestMetrics != undefined && metrics.cashPerSecond < bestMetrics.cashPerSecond * 0.95)\\n\\t\\t\\tbreak;\\n\\n\\t\\t//await ns.sleep(0);\\n\\t}\\n\\n\\tif (STEP > 1) {\\n\\t\\t//ns.tprint('WARN: Best threads yet for server is ' + bestMetrics.threads[H]);\\n\\t\\treturn GetBestMetricsForServer(ns, server, Math.max(Math.round(bestMetrics.threads[H] - STEP), minThreads), Math.min(Math.round(bestMetrics.threads[H] + STEP), maxThreads), maxNetworkRamPct);\\n\\t}\\n\\n\\treturn bestMetrics;\\n}\\n\\nexport function GetBestSequentialMetricsForServer(ns, server, minThreads, maxThreads, maxNetworkRamPct, depth = DEPTH) {\\n\\tif (maxThreads == 0) {\\n\\t\\t//ns.tprint('max threads is 0');\\n\\t\\treturn undefined;\\n\\t}\\n\\n\\tlet STEP = (maxThreads - minThreads) / depth;\\n\\t// ns.tprint('');\\n\\t// ns.tprint('minThreads: ' + minThreads + ' maxThreads: ' + maxThreads + ' STEP: ' + STEP);\\n\\tlet steps = new Set();\\n\\tfor (let i = minThreads; i <= maxThreads; i += STEP)\\n\\t\\tsteps.add(Math.round(i));\\n\\tsteps = [...steps];\\n\\t//ns.tprint('Steps: ' + steps);\\n\\tif (steps.length == 1) return steps[0];\\n\\n\\n\\tlet bestMetrics = undefined;\\n\\tfor (const threads of steps) {\\n\\t\\tlet pct = threads / MaxHackForServer(ns, server);\\n\\t\\tconst metrics = new SequentialMetrics(ns, server, pct);\\n\\t\\t//ns.tprint('Trying pct: ' + (pct * 100).toFixed(2) + ' threads=' + threads + ' cps: ' + metrics.cashPerSecond);\\n\\t\\tif (bestMetrics == undefined || metrics.cashPerSecond > bestMetrics.cashPerSecond) {\\n\\t\\t\\tif (metrics.cashPerSecond > 0)\\n\\t\\t\\t\\tbestMetrics = metrics;\\n\\t\\t\\telse {\\n\\t\\t\\t\\t//ns.tprint('shit metrics at ' + threads + ' threads')\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse if (bestMetrics != undefined && metrics.cashPerSecond < bestMetrics.cashPerSecond * 0.95)\\n\\t\\t\\tbreak;\\n\\n\\t\\t//await ns.sleep(0);\\n\\t}\\n\\n\\tif (STEP > 1 && bestMetrics) {\\n\\t\\t//ns.tprint('WARN: Best threads yet for server is ' + bestMetrics.threads[H]);\\n\\t\\treturn GetBestSequentialMetricsForServer(ns, server, Math.max(Math.round(bestMetrics.threads[H] - STEP), minThreads), Math.min(Math.round(bestMetrics.threads[H] + STEP), maxThreads), maxNetworkRamPct);\\n\\t}\\n\\n\\treturn bestMetrics;\\n}\\n\\nexport function AnalyzeAllServersSequential(ns, maxNetworkRamPct, verbose = true) {\\n\\tconst data = new Array();\\n\\tconst servers = GetAllServers(ns).filter(s => ns.getServer(s).hasAdminRights && ns.getServer(s).moneyMax > 0);\\n\\n\\tif (verbose) ns.tprint('INFO: Getting metrics for ' + servers.length + ' servers');\\n\\tfor (let server of servers) {\\n\\t\\tlet metrics = GetBestSequentialMetricsForServer(ns, server, 1, MaxHackForServer(ns, server), maxNetworkRamPct);\\n\\t\\tif (metrics) {\\n\\t\\t\\tdata.push(metrics);\\n\\t\\t}\\n\\t}\\n\\tif (verbose) ns.tprint('SUCCESS: Done gathering metrics on ' + servers.length + ' servers');\\n\\n\\tlet sorted = data.sort((a, b) => b.cashPerSecond - a.cashPerSecond);\\n\\n\\tif (verbose) {\\n\\t\\tlet tableData = [];\\n\\t\\tconst columns = [\\n\\t\\t\\t{ header: ' server', width: 20 },\\n\\t\\t\\t{ header: ' Hack %', width: 8 },\\n\\t\\t\\t{ header: '   $/sec', width: 9 },\\n\\t\\t\\t{ header: ' cycleTime', width: 25 },\\n\\t\\t\\t{ header: ' weakenTime', width: 25 },\\n\\t\\t\\t{ header: ' ram', width: 9 },\\n\\t\\t\\t{ header: ' threads', width: 25 },\\n\\t\\t];\\n\\n\\t\\tfor (let metrics of sorted) {\\n\\t\\t\\ttableData.push([\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + metrics.server },\\n\\t\\t\\t\\t{ color: 'white', text: ((metrics.pct * 100).toFixed(2) + '%').padStart(7) },\\n\\t\\t\\t\\t{ color: 'white', text: ns.nFormat(metrics.cashPerSecond, '0.0a').padStart(8) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + ns.tFormat(metrics.cycleTime) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + ns.tFormat(metrics.currentStateWeakenTime) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + ns.nFormat(Math.ceil(metrics.maxRam) * 1000000000, '0.0b').padStart(7) },\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + metrics.threads.toString().padStart(7) }\\n\\t\\t\\t]);\\n\\t\\t}\\n\\n\\t\\tPrintTable(ns, tableData, columns, DefaultStyle(), ColorPrint);\\n\\t}\\n\\n\\treturn sorted;\\n}\",\"filename\":\"metrics.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetAllServers } from \\\"utils.js\\\";\\nimport { pctColor, PrintTable, DefaultStyle, ColorPrint } from 'tables.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tconst columns = [\\n\\t\\t{ header: ' Server', width: 22 },\\n\\t\\t{ header: '    Total', width: 10 },\\n\\t\\t{ header: '     Used', width: 15 },\\n\\t\\t{ header: '     Free', width: 15 },\\n\\t\\t{ header: ' Weaken', width: 8 },\\n\\t\\t{ header: '   Grow', width: 8 },\\n\\t\\t{ header: '   Hack', width: 8 },\\n\\t\\t{ header: '  Share', width: 8 },\\n\\t\\t{ header: ' Charge', width: 8 },\\n\\t\\t{ header: '  Other', width: 8 },\\n\\t\\t{ header: ' Scripts', width: 9 }\\n\\t];\\n\\n\\tlet data = [];\\n\\tlet servers = GetAllServers(ns).filter(s => ns.getServer(s).hasAdminRights).sort((a, b) => ns.getServer(b).maxRam - ns.getServer(a).maxRam);\\n\\tlet details = [];\\n\\tlet totalProcs = 0;\\n\\n\\tif (ns.args.length == 0) {\\n\\t\\tfor (const server of servers) {\\n\\t\\t\\tif (ns.getServer(server).maxRam < 1.6) continue;\\n\\n\\t\\t\\tlet total = ns.getServer(server).maxRam;\\n\\t\\t\\tlet used = ns.getServer(server).ramUsed;\\n\\t\\t\\tlet free = total - used;\\n\\t\\t\\tlet usedPct = Math.round(used / total * 100);\\n\\t\\t\\tlet freePct = Math.round(free / total * 100);\\n\\n\\t\\t\\tlet entry = [\\n\\t\\t\\t\\t{ color: 'white', text: ' ' + server },\\n\\t\\t\\t\\t{ color: 'white', text: ns.nFormat(total * 1e9, '0.00b').padStart(9) },\\n\\t\\t\\t\\t{ color: pctColor(1 - (usedPct / 100)), text: ns.nFormat(used * 1e9, '0.00b').padStart(9) + (usedPct.toFixed(0) + '%').padStart(5) },\\n\\t\\t\\t\\t{ color: pctColor(freePct / 100), text: ns.nFormat(free * 1e9, '0.00b').padStart(9) + (freePct.toFixed(0) + '%').padStart(5) }\\n\\t\\t\\t];\\n\\n\\t\\t\\tlet [procs, nbProcs] = GetProcessDetails(ns, server);\\n\\t\\t\\tdetails.push(procs);\\n\\t\\t\\tprocs.forEach(function (s) {\\n\\t\\t\\t\\tentry.push(\\n\\t\\t\\t\\t\\t{ color: pctColor(1 - (s.percent / 100)), text: s.percent > 0 ? (s.percent.toFixed(0) + '%').padStart(7) : '' }\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\n\\t\\t\\ttotalProcs += nbProcs;\\n\\t\\t\\tentry.push({ color: 'white', text: nbProcs.toString().padStart(8) });\\n\\n\\t\\t\\tdata.push(entry);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tlet home = servers.filter(s => s == 'home');\\n\\t\\tlet personals = ns.getPurchasedServers();\\n\\t\\tlet network = servers.filter(s => s != 'home' && !personals.includes(s));\\n\\n\\t\\tconst cats = [\\n\\t\\t\\t{ desc: 'Home', servers: home },\\n\\t\\t\\t{ desc: 'Personals', servers: personals },\\n\\t\\t\\t{ desc: 'Network', servers: network }\\n\\t\\t];\\n\\n\\t\\tfor (const cat of cats) {\\n\\t\\t\\tlet total = cat.servers.reduce((a, s) => a += ns.getServer(s).maxRam, 0);\\n\\t\\t\\tlet used = cat.servers.reduce((a, s) => a += ns.getServer(s).ramUsed, 0);\\n\\t\\t\\tlet free = total - used;\\n\\t\\t\\tlet usedPct = Math.round(used / total * 100);\\n\\t\\t\\tlet freePct = Math.round(free / total * 100);\\n\\n\\t\\t\\tlet procs = [];\\n\\t\\t\\tlet nbProcs = 0;\\n\\n\\t\\t\\tfor (const server of cat.servers) {\\n\\t\\t\\t\\tlet [serverProcs, nbServerProcs] = GetProcessDetails(ns, server);\\n\\n\\t\\t\\t\\t//ns.tprint(JSON.stringify(serverProcs));\\n\\n\\t\\t\\t\\tfor (let proc of serverProcs) {\\n\\t\\t\\t\\t\\tlet match = procs.find(s => s.category == proc.category);\\n\\t\\t\\t\\t\\tif (match == undefined)\\n\\t\\t\\t\\t\\t\\tprocs.push(proc);\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tmatch.ram += proc.ram;\\n\\t\\t\\t\\t\\t\\tmatch.percent = Math.round(match.ram / total * 100);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//procs.push(...serverProcs);\\n\\n\\t\\t\\t\\tnbProcs += nbServerProcs;\\n\\t\\t\\t}\\n\\n\\t\\t\\t//ns.tprint('procs.length: ' + procs.length);\\n\\n\\t\\t\\tlet entry = [\\n\\t\\t\\t\\t{ color: 'white', text: cat.desc },\\n\\t\\t\\t\\t{ color: 'white', text: ns.nFormat(total * 1e9, '0.00b').padStart(9) },\\n\\t\\t\\t\\t{ color: pctColor(1 - (usedPct / 100)), text: ns.nFormat(used * 1e9, '0.00b').padStart(9) + (usedPct.toFixed(0) + '%').padStart(5) },\\n\\t\\t\\t\\t{ color: pctColor(freePct / 100), text: ns.nFormat(free * 1e9, '0.00b').padStart(9) + (freePct.toFixed(0) + '%').padStart(5) }\\n\\t\\t\\t];\\n\\n\\t\\t\\tdetails.push(procs);\\n\\t\\t\\tprocs.forEach(function (s) {\\n\\t\\t\\t\\tentry.push(\\n\\t\\t\\t\\t\\t{ color: pctColor(1 - (s.percent / 100)), text: s.percent > 0 ? (s.percent.toFixed(0) + '%').padStart(7) : '' }\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\t\\t\\ttotalProcs += nbProcs;\\n\\t\\t\\tentry.push({ color: 'white', text: nbProcs.toString().padStart(8) });\\n\\n\\t\\t\\tdata.push(entry);\\n\\t\\t}\\n\\n\\t}\\n\\tdata.push(null);\\n\\n\\tlet total = servers.reduce((a, s) => a += ns.getServer(s).maxRam, 0);\\n\\tlet used = servers.reduce((a, s) => a += ns.getServer(s).ramUsed, 0);\\n\\tlet free = total - used;\\n\\tlet usedPct = Math.round(used / total * 100);\\n\\tlet freePct = Math.round(free / total * 100);\\n\\n\\tlet entry = [\\n\\t\\t{ color: 'white', text: 'Total' },\\n\\t\\t{ color: 'white', text: ns.nFormat(total * 1e9, '0.00b').padStart(9) },\\n\\t\\t{ color: pctColor(1 - (usedPct / 100)), text: ns.nFormat(used * 1e9, '0.00b').padStart(9) + (usedPct.toFixed(0) + '%').padStart(5) },\\n\\t\\t{ color: pctColor(freePct / 100), text: ns.nFormat(free * 1e9, '0.00b').padStart(9) + (freePct.toFixed(0) + '%').padStart(5) }\\n\\t];\\n\\n\\tfor (let i = 0; i < details[0].length; i++) {\\n\\t\\tlet pct = details.reduce((a, s) => a += s[i].ram, 0) / total * 100;\\n\\t\\tentry.push(\\n\\t\\t\\t{ color: pctColor(1 - (pct / 100)), text: pct > 0 ? (pct.toFixed(1) + '%').padStart(7) : '' }\\n\\t\\t)\\n\\t}\\n\\n\\tentry.push({ color: 'white', text: totalProcs.toString().padStart(8) });\\n\\n\\tdata.push(entry);\\n\\n\\n\\tPrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\n\\nfunction GetProcessDetails(ns, server) {\\n\\tconst categories = [\\n\\t\\t{ script: 'weaken', header: 'Weaken' },\\n\\t\\t{ script: 'grow', header: 'Grow' },\\n\\t\\t{ script: 'hack', header: 'Hack' },\\n\\t\\t{ script: 'share-', header: 'Share' },\\n\\t\\t{ script: 'charge', header: 'Charge' }\\n\\t];\\n\\n\\tlet procs = ns.ps(server);\\n\\tlet serverRam = ns.getServer(server).maxRam;\\n\\n\\tlet ret = categories.map(function (cat) {\\n\\t\\tlet matches = procs.filter(p => p.filename.startsWith(cat.script));\\n\\t\\tlet ram = matches.reduce((a, s) => a += s.threads * ns.getScriptRam(s.filename, server), 0);\\n\\t\\tlet pct = Math.round(ram / serverRam * 100);\\n\\t\\treturn { category: cat.header, percent: pct, ram: ram };\\n\\t});\\n\\n\\t// Other category\\n\\tlet matches = procs.filter(p => !categories.some(c => p.filename.startsWith(c.script)));\\n\\tlet ram = matches.reduce((a, s) => a += s.threads * ns.getScriptRam(s.filename, server), 0);\\n\\tlet pct = Math.round(ram / serverRam * 100);\\n\\tret.push({ category: 'Other', percent: pct, ram: ram });\\n\\n\\treturn [ret, procs.length];\\n}\\n\\nexport class MemoryMap {\\n\\tconstructor(ns, simulateFull = false) {\\n\\t\\tconst servers = GetAllServers(ns).filter(s => ns.getServer(s).hasAdminRights);\\n\\n\\t\\tthis.blocks = new Array();\\n\\t\\tthis.used = 0;\\n\\t\\tthis.available = 0;\\n\\t\\tthis.total = 0;\\n\\t\\tthis.purchased = 0;\\n\\t\\tthis.home = 0;\\n\\t\\tthis.other = 0;\\n\\t\\tthis.reserved = 0;\\n\\n\\t\\tfor (var server of servers) {\\n\\t\\t\\tvar so = ns.getServer(server);\\n\\n\\t\\t\\tif (so.hostname.startsWith('hacknet')) continue;\\n\\n\\t\\t\\tlet free = so.maxRam - (simulateFull ? 0 : so.ramUsed);\\n\\t\\t\\tif (free < 1.6) free = 0;\\n\\n\\t\\t\\tthis.used += simulateFull ? 0 : so.ramUsed;\\n\\t\\t\\tthis.available += free;\\n\\t\\t\\tthis.total += so.maxRam;\\n\\n\\t\\t\\tif (server == 'home')\\n\\t\\t\\t\\tthis.home = so.maxRam;\\n\\t\\t\\telse if (so.purchasedByPlayer)\\n\\t\\t\\t\\tthis.purchased += so.maxRam;\\n\\t\\t\\telse\\n\\t\\t\\t\\tthis.other += so.maxRam;\\n\\n\\t\\t\\tif (free >= 0 && so.maxRam > 0) {\\n\\t\\t\\t\\tlet block = new Object();\\n\\t\\t\\t\\tblock.server = server;\\n\\t\\t\\t\\tblock.free = free;\\n\\t\\t\\t\\tblock.coreBonus = 1 + (so.cpuCores - 1) / 16;\\n\\n\\t\\t\\t\\tif (server == 'home') {\\n\\t\\t\\t\\t\\tlet minFree = 64;\\n\\t\\t\\t\\t\\tif (free < minFree) {\\n\\t\\t\\t\\t\\t\\tminFree = free;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tblock.reserved = minFree;\\n\\t\\t\\t\\t\\tthis.reserved += minFree;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tblock.reserved = 0;\\n\\t\\t\\t\\tblock.purchased = so.purchasedByPlayer;\\n\\t\\t\\t\\tblock.isHome = server == 'home';\\n\\t\\t\\t\\tblock.total = so.maxRam;\\n\\t\\t\\t\\tthis.blocks.push(block);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tthis.blocks.sort(BlockSort(this.total, this.other));\\n\\n\\t\\t// let homeBlock= this.HomeBlock();\\n\\t\\t// if (this.total > 3000) {\\n\\t\\t// \\tlet reserved= this.homeBlock / 2;\\n\\t\\t// \\tconst maxReserved= 256;\\n\\t\\t// \\thomeBlock.reserved= Math.min(reserved, maxReserved);\\n\\t\\t// }\\n\\n\\t\\tfunction BlockSort(total, other) {\\n\\t\\t\\treturn function (a, b) {\\n\\t\\t\\t\\t// home is always last unless we have to use other servers\\n\\t\\t\\t\\tif (a.isHome) return 1;\\n\\t\\t\\t\\tif (b.isHome) return -1;\\n\\n\\t\\t\\t\\t// Priorize by block size, smallers first\\n\\t\\t\\t\\tif (a.free - a.reserved > b.free - b.reserved) return 1;\\n\\t\\t\\t\\tif (a.free - a.reserved < b.free - b.reserved) return -1;\\n\\n\\t\\t\\t\\t// Priorize purchased servers\\n\\t\\t\\t\\tif (a.purchased && !b.purchased) return [total] > [other] ? -1 : 1;\\n\\t\\t\\t\\tif (!a.purchased && b.purchased) return [total] > [other] ? 1 : -1;\\n\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tget blockList() { return this.blocks; }\\n\\n\\tReserveBlock(minSize) {\\n\\t\\tvar match = this.blocks.find(b => (b.free - b.reserved) >= minSize);\\n\\t\\tif (match == undefined) return undefined;\\n\\t\\tmatch.reserved += minSize;\\n\\t\\treturn match.server;\\n\\t}\\n\\n\\tSmallestBlock(minSize = 0) {\\n\\t\\tlet smallest = this.BiggestBlock();\\n\\t\\tfor (const block of this.blocks) {\\n\\t\\t\\tconst available = block.free - block.reserved;\\n\\t\\t\\tif (available < smallest && available >= minSize)\\n\\t\\t\\t\\tsmallest = available;\\n\\t\\t}\\n\\t\\treturn smallest;\\n\\t}\\n\\n\\tBiggestBlock() {\\n\\t\\tlet biggest = 0;\\n\\n\\t\\tfor (const block of this.blocks) {\\n\\t\\t\\tconst available = block.free - block.reserved;\\n\\t\\t\\tif (available > biggest)\\n\\t\\t\\t\\tbiggest = available;\\n\\t\\t}\\n\\t\\treturn biggest;\\n\\t}\\n\\n\\tHomeBlock() {\\n\\t\\treturn this.blocks.find(b => b.isHome);\\n\\t}\\n}\\n\\nexport function RunScript(ns, scriptName, threads, params, allowSpread, allowPartial) {\\n\\tlet ramMap = new MemoryMap(ns);\\n\\n\\t// Find script RAM usage\\n\\tlet ram = ns.getScriptRam(scriptName);\\n\\n\\t// Fired threads counter\\n\\tlet fired = 0;\\n\\tlet pids = new Array();\\n\\n\\tlet prot = 0;\\n\\n\\tlet unique = 0;\\n\\n\\twhile (fired < threads) {\\n\\t\\t// const biggest = ramMap.BiggestBlock();\\n\\t\\t// let maxThreads = Math.floor(biggest / ram);\\n\\t\\t// if (maxThreads == 0) break;\\n\\t\\t// if (maxThreads > threads - fired) {\\n\\t\\t// \\tmaxThreads = threads - fired;\\n\\t\\t// }\\n\\t\\t// const blockSize = maxThreads * ram;\\n\\t\\t// const server = ramMap.ReserveBlock(blockSize);\\n\\n\\t\\tlet candidate = ramMap.BiggestBlock();\\n\\t\\t// if (allowSpread) {\\n\\t\\t// \\tcandidate = ramMap.SmallestBlock(ram);\\n\\t\\t// \\t//ns.tprint('smallest='+ candidate);\\n\\t\\t// }\\n\\n\\t\\tlet maxThreads = Math.floor(candidate / ram);\\n\\t\\tif (maxThreads == 0) break;\\n\\t\\tif (maxThreads > threads - fired) {\\n\\t\\t\\tmaxThreads = threads - fired;\\n\\t\\t}\\n\\t\\tconst blockSize = maxThreads * ram;\\n\\t\\tlet server = ramMap.ReserveBlock(blockSize);\\n\\n\\t\\tlet coreBonus = 1;\\n\\n\\t\\tif (scriptName.startsWith('grow') || scriptName.startsWith('weaken')) {\\n\\t\\t\\tlet homeBlock = ramMap.HomeBlock();\\n\\t\\t\\tif (homeBlock != undefined && homeBlock.coreBonus > 1 && threads * ram < homeBlock.free - homeBlock.reserved) {\\n\\t\\t\\t\\tif (server == 'home') {\\n\\t\\t\\t\\t\\t//ns.tprint('INFO: Favoring home for');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tserver = 'home';\\n\\t\\t\\t\\t\\t//ns.tprint('INFO: Spawning grow on home for bonus!');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcoreBonus = homeBlock.coreBonus;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (server != undefined) {\\n\\t\\t\\t// if (!ns.fileExists(scriptName, server)) {\\n\\t\\t\\t// \\tns.print('WARN: ' + scriptName + ' not found on ' + server);\\n\\t\\t\\t// \\tns.print('WARN: Attempting to copy ' + scriptName + ' to ' + server);\\n\\n\\t\\t\\tns.scp(scriptName, server, \\\"home\\\");\\n\\n\\t\\t\\t// \\tif (!ns.fileExists(scriptName, server)) {\\n\\t\\t\\t// \\t\\tns.print('FAIL: Could not copy ' + scriptName + ' to ' + server + ', aborting.');\\n\\t\\t\\t// \\t\\tbreak;\\n\\t\\t\\t// \\t}\\n\\t\\t\\t// \\telse {\\n\\t\\t\\t// \\t\\tns.print('SUCCESS: Copied ' + scriptName + ' to ' + server + ', resuming.');\\n\\t\\t\\t// \\t}\\n\\t\\t\\t// }\\n\\n\\t\\t\\t//ns.print('Attempting to start ' + scriptName + ' on ' + server + ' with ' + maxThreads + ' threads');\\n\\n\\t\\t\\tlet actualThreads = Math.ceil(maxThreads / coreBonus);\\n\\t\\t\\tif (actualThreads != maxThreads) {\\n\\t\\t\\t\\tns.print('INFO: Readjusting threads from ' + maxThreads + ' to ' + actualThreads);\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet pid = ns.exec(scriptName, server, actualThreads, ...params, performance.now() + unique++);\\n\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\tns.print('Started script ' + scriptName + ' on ' + server + ' with ' + actualThreads + ' threads');\\n\\t\\t\\t\\tpids.push(pid);\\n\\t\\t\\t\\tfired += maxThreads;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tns.print('FAIL: Failed to launch script ' + scriptName + ' on ' + server + ' with ' + actualThreads + ' threads');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse if (!allowPartial) {\\n\\t\\t\\t// Couldn't find a block big enough so can't allowPartial\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\telse if (!allowSpread) {\\n\\t\\t\\t// Couldn't find a block big enough and cannot allowSpread\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tprot++;\\n\\t\\tif (prot > 100) {\\n\\t\\t\\tns.print('ERROR: RunScript infinite loop detected.');\\n\\t\\t\\tns.print('INFO: candidate= ' + candidate + ' ram= ' + ram + ' maxThreads= ' + maxThreads + ' threads= ' + threads + ' fired=' + fired + ' blockSize=' + blockSize);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (fired != threads) {\\n\\t\\tns.print('ERROR: No server big enough to handle ' + threads + ' threads of ' + scriptName + ' (fired ' + fired + ' total)');\\n\\t}\\n\\treturn pids;\\n}\",\"filename\":\"ram.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(GetServerPath(ns, 'run4theh111z'));\\n\\n\\t//ns.tprint(HasFormulas(ns));\\n\\n\\t// const servers = GetAllServers(ns);\\n\\t// ns.tprint(servers.length + ' ' + servers);\\n\\n\\t// ns.tprint('path of ecorp is ' + GetServerPath(ns, 'ecorp'));\\n\\n\\t// ns.tprint(FormatMoney(ns, 0));\\n\\t// ns.tprint(FormatMoney(ns, 1e3));\\n\\t// ns.tprint(FormatMoney(ns, 1e6));\\n\\t// ns.tprint(FormatMoney(ns, 1e9));\\n\\t// ns.tprint(FormatMoney(ns, 1e12));\\n\\t// ns.tprint(FormatMoney(ns, 1e15));\\n\\t// ns.tprint(FormatMoney(ns, 1e18));\\n\\t// ns.tprint(FormatMoney(ns, 1e21));\\n\\t// ns.tprint(FormatMoney(ns, 1e24));\\n\\t// ns.tprint(FormatMoney(ns, 1e27));\\n\\t// ns.tprint(FormatMoney(ns, 1e30));\\n\\t// ns.tprint(FormatMoney(ns, 1e33));\\n\\t// ns.tprint(FormatMoney(ns, 1e36));\\n\\t// ns.tprint(FormatMoney(ns, 1e39));\\n\\t// ns.tprint(FormatMoney(ns, 1e42));\\n\\t// ns.tprint(FormatMoney(ns, 1e45));\\n\\t// ns.tprint(FormatMoney(ns, 1e48));\\n\\t// ns.tprint(FormatMoney(ns, 1e51));\\n\\t// ns.tprint(FormatMoney(ns, 1e54));\\n\\t// ns.tprint(FormatMoney(ns, 1e57));\\n\\t// ns.tprint(FormatMoney(ns, 1e60));\\n\\t// ns.tprint(FormatMoney(ns, 1e63));\\n\\t// ns.tprint(FormatMoney(ns, 1e66));\\n}\\n\\n// Iterative network scan\\nexport function GetAllServers(ns) {\\n\\tlet servers = ['home'];\\n\\tfor (const server of servers) {\\n\\t\\tconst found = ns.scan(server);\\n\\t\\tif (server != 'home') found.splice(0, 1);\\n\\t\\tservers.push(...found);\\n\\t}\\n\\treturn servers;\\n}\\n\\n// Find the path to a server\\nexport function GetServerPath(ns, server) {\\n\\tconst path = [server];\\n\\twhile (server != 'home') {\\n\\t\\tserver = ns.scan(server)[0];\\n\\t\\tpath.unshift(server);\\n\\t}\\n\\treturn path;\\n}\\n\\nexport function ServerReport(ns, server, metrics = undefined, printfunc = ns.print) {\\n\\t// Get server object for this server\\n\\tvar so = ns.getServer(server);\\n\\n\\t// weaken threads\\n\\tconst tweaken = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, 1)*/);\\n\\t// grow threads\\n\\tconst tgrow = Math.ceil(ns.growthAnalyze(server, so.moneyMax / Math.max(so.moneyAvailable, 1), 1));\\n\\t// hack threads\\n\\tconst thack = Math.ceil(ns.hackAnalyzeThreads(server, so.moneyAvailable));\\n\\n\\tprintfunc('┌─────────────────────────────────────────────────────┐');\\n\\tprintfunc('│ ' + server.padStart(52 / 2 + server.length / 2).padEnd(52) + '│');\\n\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\tprintfunc('│ ' + ('Money        : ' + ns.nFormat(so.moneyAvailable, \\\"$0.000a\\\") + ' / ' + ns.nFormat(so.moneyMax, \\\"$0.000a\\\") + ' (' + (so.moneyAvailable / so.moneyMax * 100).toFixed(2) + '%)').padEnd(52) + '│');\\n\\tprintfunc('│ ' + ('Security     : ' + (so.hackDifficulty - so.minDifficulty).toFixed(2) + ' min= ' + so.minDifficulty.toFixed(2) + ' current= ' + so.hackDifficulty.toFixed(2)).padEnd(52) + '│');\\n\\tprintfunc('├─────────────────────────────────────────────────────┤');\\n\\tprintfunc('│ ' + ('Weaken time  : ' + ns.tFormat(ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 4) + ' (t=' + tweaken + ')').padEnd(52) + '│');\\n\\tprintfunc('│ ' + ('Grow         : ' + ns.tFormat(ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 3.2) + ' (t=' + tgrow + ')').padEnd(52) + '│');\\n\\tprintfunc('│ ' + ('Hack         : ' + ns.tFormat(ns.formulas.hacking.hackTime(so, ns.getPlayer())) + ' (t=' + thack + ')').padEnd(52) + '│');\\n\\tprintfunc('└─────────────────────────────────────────────────────┘');\\n\\n\\tif (metrics != undefined) {\\n\\t\\tmetrics.Report(ns, printfunc);\\n\\t}\\n}\\n\\nexport function FormatMoney(ns, value, decimals = 3) {\\n\\tif (Math.abs(value) >= 1e33) return '$' + value.toExponential(0);\\n\\tfor (const pair of [[1e30, 'n'], [1e27, 'o'], [1e24, 'S'], [1e21, 's'], [1e18, 'Q'], [1e15, 'q'], [1e12, 't'], [1e9, 'b'], [1e6, 'm'], [1e3, 'k']])\\n\\t\\tif (Math.abs(value) >= pair[0]) return (Math.sign(value) < 0 ? \\\"-\\\" : \\\"\\\") + (Math.abs(value) / pair[0]).toFixed(decimals) + pair[1];\\n\\treturn '$' + (Math.sign(value) < 0 ? \\\"-\\\" : \\\"\\\") + Math.abs(value).toFixed(decimals);\\n}\\n\\nexport function FormatRam(ns, value, decimals = 1) {\\n\\tconst zero = 0;\\n\\treturn ns.nFormat(value * 1000000000, (zero.toFixed(decimals) + 'b'));\\n}\\n\\nexport async function WaitPids(ns, pids) {\\n\\tif (!Array.isArray(pids)) pids = [pids];\\n\\twhile (pids.some(p => ns.getRunningScript(p) != undefined)) { await ns.sleep(5); }\\n}\\n\\nexport function HasFormulas(ns) {\\n\\ttry { ns.formulas.hacknetNodes.constants(); return true; } catch { return false; }\\n}\\n\\n// Returns the needed XP for the next hacking level\\nexport function GetNextLevelXp(ns, skill = 'hacking') {\\n\\tlet player = ns.getPlayer();\\n\\tlet prevXp = ns.formulas.skills.calculateExp(player.skills[skill], player.mults[skill]);\\n\\tlet nextXp = ns.formulas.skills.calculateExp(player.skills[skill] + 1, player.mults[skill]);\\n\\n\\tlet needed = nextXp - prevXp;\\n\\tlet progress = player.exp[skill] - prevXp;\\n\\tlet remaining = needed - progress;\\n\\tlet pct = progress / needed * 100;\\n\\n\\t// ns.tprint('Progress : ' + ns.nFormat(progress, '0.000a') + ' / ' + ns.nFormat(needed, '0.000a'));\\n\\t// ns.tprint('Remaining: ' + ns.nFormat(remaining, '0.000a') + ' (' + pct.toFixed(2) + '%)');\\n\\n\\treturn {\\n\\t\\tneeded: needed,\\n\\t\\tprogress: progress,\\n\\t\\tremaining: remaining,\\n\\t\\tpct: pct\\n\\t}\\n}\\n\\nexport function LogMessage(ns, message) {\\n\\tlet time = new Date().toLocaleTimeString();\\n\\tlet date = new Date().toLocaleDateString();\\n\\tlet log = '[' + date.padStart(10) + ' ' + time.padStart(11) + '] ' + message + '\\\\n';\\n\\tns.write('nodelog.txt', log, 'a');\\n}\",\"filename\":\"utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.weaken(target);\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' weaken did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"weaken-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken-once.js\",\"url\":\"blob:file:///1e0023b6-6923-477d-8d4a-7064d5f52ff5\",\"moduleSequenceNumber\":687}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///6a37f68d-f35b-4d62-a56a-e97f620fe422\",\"moduleSequenceNumber\":712}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.hack(target);\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' hack did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"hack-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-once.js\",\"url\":\"blob:file:///0c38b343-c52a-4429-8869-015d4f53b1a4\",\"moduleSequenceNumber\":1092}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":1092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerReport, WaitPids } from \\\"utils.js\\\";\\nimport { RunScript, MemoryMap } from 'ram.js';\\nimport { solveGrow } from 'metrics.js'\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst [target] = ns.args;\\n\\n\\tif (target == undefined) {\\n\\t\\tns.print('ERROR: No target server specified');\\n\\t\\treturn;\\n\\t}\\n\\n\\tif (IsPrepped(ns, target)) {\\n\\t\\t//ns.tprint('INFO: Server is already prepped (' + target + ')');\\n\\t}\\n\\telse {\\n\\t\\t//ns.tprint('INFO: Prep initiated on ' + target);\\n\\t\\tawait Prep(ns, target);\\n\\t\\t//ns.tprint('SUCCESS: Prep completed on ' + target);\\n\\t}\\n}\\n\\nexport function IsPrepped(ns, server) {\\n\\tvar so = ns.getServer(server);\\n\\tif (so.moneyAvailable < so.moneyMax) return false;\\n\\tif (so.hackDifficulty > so.minDifficulty) return false;\\n\\treturn true;\\n}\\n\\nexport async function Grow(ns, server, allowSpread = false, allowPartial = true, extra = 1.1) {\\n\\tconst script = 'grow-once.js';\\n\\tconst so = ns.getServer(server);\\n\\tlet threads = Math.ceil(ns.growthAnalyze(server, so.moneyMax / Math.max(so.moneyAvailable, 1), 1) * extra);\\n\\tconst estTime = ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 3.2;\\n\\tns.print('INFO: Funds are not maxed, starting ' + threads + ' threads to grow them');\\n\\tconst pids = await RunScript(ns, script, threads, [server, 0, estTime, 0, 0], allowSpread, allowPartial);\\n\\tawait WaitPids(ns, pids);\\n\\treturn [threads, estTime];\\n}\\n\\nexport async function Weaken(ns, server, allowSpread = true, allowPartial = true, extra = 1.0) {\\n\\tconst script = 'weaken-once.js';\\n\\tconst so = ns.getServer(server);\\n\\tconst threads = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, 1)*/ * extra);\\n\\tconst estTime = ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 4;\\n\\tns.print('INFO: Security is over minimum, starting ' + threads + ' threads to floor it');\\n\\tconst pids = await RunScript(ns, script, threads, [server, 0, estTime, 0, 0], allowSpread, allowPartial);\\n\\tawait WaitPids(ns, pids);\\n\\treturn [threads, estTime];\\n}\\n\\nexport async function Hack(ns, server, pct, allowSpread = false, allowPartial = true, extra = 1.1) {\\n\\tconst script = 'hack-once.js';\\n\\tconst so = ns.getServer(server);\\n\\tconst threads = Math.floor(ns.hackAnalyzeThreads(server, so.moneyAvailable) * pct * extra);\\n\\tconst estTime = ns.formulas.hacking.hackTime(so, ns.getPlayer());\\n\\tns.print('INFO: Server is ripe for hacking, starting ' + threads + ' threads to hack it');\\n\\tconst pids = await RunScript(ns, script, threads, [server, 0, estTime, 0, 0], allowSpread, allowPartial);\\n\\tawait WaitPids(ns, pids);\\n\\treturn [threads, estTime];\\n}\\n\\nasync function BatchPrep(ns, server) {\\n\\tconst so = ns.getServer(server);\\n\\n\\tlet security = so.hackDifficulty - so.minDifficulty;\\n\\n\\tlet gthreads = solveGrow(ns.formulas.hacking.growPercent(so, 1, ns.getPlayer(), 1), so.moneyAvailable, so.moneyMax);\\n\\tconst gtime = ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 3.2;\\n\\n\\t//security += gthreads * 0.004;\\n\\n\\tlet w1threads = Math.ceil(security / 0.05);\\n\\tconst wtime = ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 4;\\n\\n\\tlet w2threads = Math.ceil((gthreads * 0.004) / 0.05);\\n\\n\\t//const ram= new MemoryMap(ns);\\n\\t// let maxThreads = Math.floor((ram.available - ram.reserved) / 1.75);\\n\\t// //ns.tprint('WARN: Max threads = ' + maxThreads);\\n\\t// if (wthreads > maxThreads) {\\n\\t// \\twthreads = Math.floor(maxThreads / 2);\\n\\t// }\\n\\t// // if (gthreads > maxThreads) {\\n\\t// // \\tgthreads = Math.floor(maxThreads / 2);\\n\\t// // }\\n\\n\\tconst allPids = [];\\n\\n\\tif (w1threads > 0) {\\n\\t\\tns.print('INFO: Security is over minimum, starting ' + w1threads + ' threads to floor it');\\n\\t\\tconst pids = await RunScript(ns, 'weaken-once.js', w1threads, [server, 0, wtime, performance.now(), 0], true, true);\\n\\t\\tallPids.push(...pids);\\n\\t}\\n\\n\\tif (gthreads > 0) {\\n\\t\\tawait ns.sleep(30);\\n\\t\\tns.print('INFO: Funds are not maxed, starting ' + gthreads + ' threads to grow them');\\n\\t\\tconst pids = await RunScript(ns, 'grow-once.js', gthreads, [server, 0, gtime, performance.now(), 0], true, true);\\n\\t\\tallPids.push(...pids);\\n\\t}\\n\\n\\tif (w2threads > 0) {\\n\\t\\tawait ns.sleep(30);\\n\\t\\tns.print('INFO: We launched grow threads, starting ' + w2threads + ' weaken threads to cancel them it');\\n\\t\\tconst pids = await RunScript(ns, 'weaken-once.js', w2threads, [server, 0, wtime, performance.now(), 0], true, true);\\n\\t\\tallPids.push(...pids);\\n\\t}\\n\\n\\tawait WaitPids(ns, allPids);\\n}\\n\\nexport async function Prep(ns, server, metrics) {\\n\\twhile (!IsPrepped(ns, server)) {\\n\\t\\tlet so = ns.getServer(server);\\n\\t\\tServerReport(ns, server, metrics);\\n\\n\\t\\tawait BatchPrep(ns, server);\\n\\n\\t\\t// if (so.hackDifficulty > so.minDifficulty)\\n\\t\\t// \\tawait Weaken(ns, server, true, true);\\n\\t\\t// else if (so.moneyAvailable < so.moneyMax)\\n\\t\\t// \\tawait Grow(ns, server, false, true);\\n\\n\\t\\tawait ns.sleep(200);\\n\\t}\\n}\",\"filename\":\"prep.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"tables.js\",\"url\":\"blob:file:///58b5d803-953b-46ab-9f5a-9912fbb707cf\",\"moduleSequenceNumber\":15461},{\"filename\":\"utils.js\",\"url\":\"blob:file:///5043d9e9-7de2-4c33-99ce-37cec1c4538f\",\"moduleSequenceNumber\":15456},{\"filename\":\"tables.js\",\"url\":\"blob:file:///7998d17f-724e-4f84-943a-bf4def31769b\",\"moduleSequenceNumber\":15461},{\"filename\":\"utils.js\",\"url\":\"blob:file:///5e8fff42-a3cc-473d-81fa-d0bd3ad519a0\",\"moduleSequenceNumber\":15456},{\"filename\":\"ram.js\",\"url\":\"blob:file:///9e5ec46b-e601-4eee-a27f-b84492c9f1dd\",\"moduleSequenceNumber\":15455},{\"filename\":\"metrics.js\",\"url\":\"blob:file:///be7caaa9-c4b5-49e6-bfd5-0b4721d2bcf6\",\"moduleSequenceNumber\":15454},{\"filename\":\"tables.js\",\"url\":\"blob:file:///41dc40ae-816f-461f-9860-f614eeee3aab\",\"moduleSequenceNumber\":15461},{\"filename\":\"utils.js\",\"url\":\"blob:file:///d43500d9-f8b2-40b4-894b-e8151769b922\",\"moduleSequenceNumber\":15456},{\"filename\":\"ram.js\",\"url\":\"blob:file:///34d7a8a2-8bd5-4903-9846-63baaef9d3b9\",\"moduleSequenceNumber\":15455},{\"filename\":\"utils.js\",\"url\":\"blob:file:///9321f59f-2d0f-4410-b668-dd0992f369b8\",\"moduleSequenceNumber\":15456},{\"filename\":\"prep.js\",\"url\":\"blob:file:///5858a971-06a4-489d-8536-fed8c2075d80\",\"moduleSequenceNumber\":15464}],\"dependents\":[],\"ramUsage\":8.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const HEADER = 0;\\t// Index of the header styles\\nconst DIVIDER = 1\\t// Index of the horizontal divider style\\nconst FOOTER = 2;\\t// Index of the footer style\\n\\nconst OPENER = 0;\\t// Index of the opener line character\\nconst SEPARATOR = 1; // Index of the separator line character (where columns meet)\\nconst CLOSER = 2;\\t// Index of the closer line character\\nconst FILLER = 3;\\t// Index of the filler line character\\nconst BAR = 4;\\t\\t// Index of the straight vertical bar line character\\n\\nexport let win = globalThis, doc = win[\\\"document\\\"]\\nlet fmt = Intl.NumberFormat('en', { notation: 'compact' });\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\t// Some sample data, basic information on root servers\\n\\t// Note that if you want color, you need to use ColorPrint as the printing function\\n\\t// Colored cells need to be an object with color and text, instead of \\\"any\\\".. Red cell example here\\n\\tlet data = ns.scan('home').map(s => [{ color: 'red', text: s }, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]);\\n\\n\\t// For bold we need to correct the spacing... Sketch AF, not sure how else.\\n\\t// let boldText = 'bold text example blah';\\n\\t// let spacing = -0.00666666666666666666666666666667 * boldText.length;\\n\\tdata.push([\\n\\t\\t{ style: { color: 'red' }, text: 'nope' },\\n\\t\\t//{ style: { color: 'red', fontWeight: 'bold', letterSpacing: spacing }, text: boldText },\\n\\t\\t{ style: { color: 'white', fontStyle: 'italic' }, text: 'italic text' },\\n\\t\\t{ style: { color: 'white', textDecorationLine: 'line-through', textDecorationStyle: 'solid' }, text: 'strikethrough text' }\\n\\t]);\\n\\n\\t// Free style, no columns, the table adjusts to contents\\n\\tPrintTable(ns, data, undefined, DefaultStyle(), ColorPrint);\\n\\n\\t// Example of adding a break line in the middle of the table:\\n\\t// data.push(null);\\n\\t// data.push(...ns.scan('sigma-cosmetics').slice(1).map(s => [s, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]));\\n\\n\\t// We use pre-defined columns\\n\\t// header: The text to display\\n\\t// width : Width of the column content\\n\\t// pad   : 0 for center, < 0 for left, > 0 for right\\n\\tconst columns = [\\n\\t\\t{ header: 'Servers', width: 40 },\\n\\t\\t{ header: 'Ram', width: 13 },\\n\\t\\t{ header: 'Money', width: 20 }\\n\\t];\\n\\tPrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\n\\nexport function PrintTable(ns, data, columns, style = DefaultStyle(), printfunc = ns.print) {\\n\\t// if (printfunc != ns.print)\\n\\t// \\tprintfunc = ns.tprint; // Temp fix until I get ansi colors working\\n\\n\\t// Create default columns if no definition were provided\\n\\tlet columnsProvided = true;\\n\\tif (columns == undefined) {\\n\\t\\tcolumnsProvided = false;\\n\\t\\tcolumns = [];\\n\\t\\tfor (let i = 0; i < data[0].length; i++) {\\n\\t\\t\\tlet longest = 0;\\n\\t\\t\\tfor (let ii = 0; ii < data.length; ii++) {\\n\\t\\t\\t\\tif (data[ii] == null) continue;\\n\\t\\t\\t\\tlet len = data[ii][i].text != undefined ? data[ii][i].text.length : data[ii][i].toString().length;\\n\\t\\t\\t\\tif (len > longest) longest = len;\\n\\t\\t\\t}\\n\\t\\t\\tcolumns.push({ header: '', width: longest, padHeader: 0, padContent: 0 });\\n\\t\\t}\\n\\t}\\n\\n\\tPrintBorder(ns, columns, style[HEADER], printfunc);\\n\\tif (columnsProvided) {\\n\\t\\tPrintHeader(ns, columns, style[HEADER], printfunc)\\n\\t\\tPrintBorder(ns, columns, style[DIVIDER], printfunc);\\n\\t}\\n\\tlet i = 0;\\n\\tfor (const line of data) {\\n\\t\\tPrintLine(ns, columns, line, style, printfunc, i++ % 2 == 0);\\n\\t}\\n\\tPrintBorder(ns, columns, style[FOOTER], printfunc);\\n}\\n\\nexport function DefaultStyle() {\\n\\treturn [\\n\\t\\t['┌', '┬', '┐', '─', '│'],\\n\\t\\t['├', '┼', '┤', '─', '│'],\\n\\t\\t['└', '┴', '┘', '─', '│']\\n\\t];\\n}\\n\\nfunction PrintBorder(ns, columns, style, printfunc = ns.print) {\\n\\tlet printStack = [];\\n\\tprintStack.push('white', style[OPENER]);\\n\\tfor (let c = 0; c < columns.length; c++) {\\n\\t\\tprintStack.push('white', ''.padEnd(columns[c].width, style[FILLER]));\\n\\t\\tif (c == columns.length - 1)\\n\\t\\t\\tprintStack.push('white', style[CLOSER]);\\n\\t\\telse\\n\\t\\t\\tprintStack.push('white', style[SEPARATOR]);\\n\\n\\t}\\n\\tPrintStack(ns, printStack, printfunc);\\n}\\n\\nfunction PrintHeader(ns, columns, style, printfunc = ns.print) {\\n\\tlet printStack = [];\\n\\tprintStack.push('white', style[BAR]);\\n\\tfor (let c = 0; c < columns.length; c++) {\\n\\t\\tprintStack.push('white', columns[c].header.padEnd(columns[c].width));\\n\\t\\tprintStack.push('white', style[BAR]);\\n\\t}\\n\\tPrintStack(ns, printStack, printfunc);\\n}\\n\\nfunction PrintLine(ns, columns, data, style, printfunc = ns.print, highlight) {\\n\\tif (data == null) {\\n\\t\\tPrintBorder(ns, columns, style[DIVIDER], printfunc);\\n\\t\\treturn;\\n\\t}\\n\\n\\tlet printStack = [];\\n\\tprintStack.push('white', style[0][BAR]);\\n\\tfor (let c = 0; c < columns.length; c++) {\\n\\t\\tif (data[c].style != undefined)\\n\\t\\t\\tprintStack.push({ style: data[c].style }, data[c].text.padEnd(columns[c].width));\\n\\t\\telse if (data[c].color != undefined)\\n\\t\\t\\tprintStack.push(CreateStyle(data[c].color, highlight), data[c].text.padEnd(columns[c].width));\\n\\t\\telse\\n\\t\\t\\tprintStack.push(CreateStyle('white', highlight), data[c].toString().padEnd(columns[c].width));\\n\\t\\tprintStack.push('white', style[0][BAR]);\\n\\t}\\n\\n\\tPrintStack(ns, printStack, printfunc);\\n}\\n\\nexport function CreateStyle(color, highlight) {\\n\\t//return color;\\n\\tlet backColor = highlight ? '#000000' : '#1A1A1A';\\n\\treturn { style: { color: color, backgroundColor: backColor } };\\n}\\n\\nfunction PrintStack(ns, printStack, printfunc) {\\n\\tif (printfunc == ns.tprint || printfunc == ns.print || printfunc == ns.tprintf) {\\n\\t\\tColorPrint(ns, printStack, false);\\n\\t}\\n\\telse {\\n\\t\\tprintfunc(ns, printStack, true);\\n\\t}\\n}\\n\\n// Selects a color based on a 1-based percentage\\nexport function pctColor(pct) {\\n\\tif (pct >= 1) return 'Lime';\\n\\telse if (pct >= 0.9) return 'Green';\\n\\telse if (pct >= 0.75) return 'DarkGreen';\\n\\telse if (pct >= 0.6) return 'GreenYellow';\\n\\telse if (pct >= 0.3) return 'Yellow';\\n\\telse if (pct != 0) return 'DarkOrange';\\n\\treturn 'Red';\\n}\\n\\n// Usage: ColorPrint(ns, ['red', 'This is some red text', '#FFFFFF', ' This is some white text], true);\\nexport function ColorPrint(ns, stack, toTerminal = true) {\\n\\tlet out = '';\\n\\tfor (let i = 0; i < stack.length; i += 2) {\\n\\t\\tlet style = stack[i];\\n\\t\\tif (style.style == undefined) {\\n\\t\\t\\tstyle = { style: { color: stack[i], backgroundColor: '#000000' } };\\n\\t\\t}\\n\\n\\t\\tlet color = style;\\n\\t\\tif (style.style) color = style.style.color;\\n\\n\\t\\tlet match = COLORS.find(s => s.html == color || s.desc.toLowerCase() == color.toLowerCase());\\n\\t\\tif (!match && color.startsWith('#')) match = FindHtmlColorEquivalent(ns, color);\\n\\t\\tif (!match) match = COLORS.find(s => s.desc.toLowerCase().startsWith(color.toLowerCase()));\\n\\t\\tif (match) color = '\\\\x1b[38;5;' + match.ansi + 'm';\\n\\t\\telse ns.tprint('FAIL: unsupported color: ' + color);\\n\\n\\t\\tlet text = stack[i + 1].replace('%', '%%');\\n\\t\\tout = out + color + text;\\n\\t}\\n\\n\\tif (toTerminal)\\n\\t\\tns.tprintf(out);\\n\\telse\\n\\t\\tns.printf(out);\\n}\\n\\n// ANSI colors supported by the game are 256 colors, HTML color is RGB\\n// This functions finds the closest match to a full range HTML color code in the 256 color ANSI colors we have to work with\\nfunction FindHtmlColorEquivalent(ns, htmlCode) {\\n\\tlet copy = COLORS.map(s => s);\\n\\n\\tcopy.sort(function (a, b) {\\n\\t\\tlet ca = rgbFromHtml(a.html);\\n\\t\\tlet cb = rgbFromHtml(b.html);\\n\\t\\tlet col = rgbFromHtml(htmlCode);\\n\\n\\t\\tlet oa = Math.abs(ca.r - col.r) + Math.abs(ca.g - col.g) + Math.abs(ca.b - col.b);\\n\\t\\tlet ob = Math.abs(cb.r - col.r) + Math.abs(cb.g - col.g) + Math.abs(cb.b - col.b);\\n\\t\\treturn oa - ob;\\n\\t}\\n\\t);\\n\\n\\treturn copy[0];\\n}\\n\\n// Converts a hexadecimal HTML color back to RGB int values\\nfunction rgbFromHtml(htmlCode) {\\n\\tlet r = Number.parseInt('0x' + htmlCode.substr(1, 2));\\n\\tlet g = Number.parseInt('0x' + htmlCode.substr(3, 2));\\n\\tlet b = Number.parseInt('0x' + htmlCode.substr(5, 2));\\n\\treturn { r: r, g: g, b: b };\\n}\\n\\n/**\\n * @param {ns} \\n * @param {Array} JSON DATA in form of [{id:1,name:\\\"Lexicon\\\"},{id:2,name:\\\"Paradox\\\"}]\\n * @param {Array} pass an array of columns \\n * @returns {HTMLTableElement} Returns a HTMLTableElement that you can use DOM.appendChild(table);\\n */\\nexport function createHTMLTableFromJSON(ns, data, columns) {\\n\\n\\tvar formattedData = JSON.parse(JSON.stringify(data, columns));\\n\\tvar col = [];\\n\\tfor (var i = 0; i < formattedData.length; i++) {\\n\\t\\tfor (var key in formattedData[i]) {\\n\\t\\t\\tif (col.indexOf(key) === -1) {\\n\\t\\t\\t\\tcol.push(key);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tvar table = doc.createElement(\\\"table\\\");\\n\\ttable.style.width = '100%'\\n\\n\\tvar tr = table.insertRow(-1);                   // TABLE ROW.\\n\\n\\tfor (var i = 0; i < col.length; i++) {\\n\\t\\tvar th = doc.createElement(\\\"th\\\");      // TABLE HEADER.\\n\\t\\tth.innerHTML = col[i];\\n\\t\\ttr.appendChild(th);\\n\\t}\\n\\n\\tfor (var i = 0; i < formattedData.length; i++) {\\n\\n\\t\\ttr = table.insertRow(-1);\\n\\n\\t\\tfor (var j = 0; j < col.length; j++) {\\n\\t\\t\\tvar tabCell = tr.insertCell(-1);\\n\\t\\t\\tif (typeof (formattedData[i][col[j]]) == 'number') {\\n\\t\\t\\t\\tvar number = formattedData[i][col[j]]\\n\\t\\t\\t\\tif (number > 0)\\n\\t\\t\\t\\t\\ttabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"green\\\");\\n\\t\\t\\t\\telse if (number == 0)\\n\\t\\t\\t\\t\\ttabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"white\\\");\\n\\t\\t\\t\\telse if (number < 0)\\n\\t\\t\\t\\t\\ttabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"red\\\");\\n\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttabCell.innerHTML = formattedData[i][col[j]];\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t}\\n\\treturn table;\\n}\\n\\nlet addHtmlWithColor = (tag, data, color) => {\\n\\treturn \\\"<\\\" + tag + \\\" style='color:\\\" + color + \\\"'>\\\" + data + \\\"</\\\" + tag + \\\">\\\";\\n}\\n\\nexport let COLORS = [\\n\\t{\\n\\t\\t\\\"ansi\\\": 0,\\n\\t\\t\\\"desc\\\": \\\"Grey\\\",\\n\\t\\t\\\"html\\\": \\\"#808080\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 1,\\n\\t\\t\\\"desc\\\": \\\"Red\\\",\\n\\t\\t\\\"html\\\": \\\"#ff0000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 2,\\n\\t\\t\\\"desc\\\": \\\"Lime\\\",\\n\\t\\t\\\"html\\\": \\\"#00ff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 3,\\n\\t\\t\\\"desc\\\": \\\"Yellow\\\",\\n\\t\\t\\\"html\\\": \\\"#ffff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 4,\\n\\t\\t\\\"desc\\\": \\\"Blue\\\",\\n\\t\\t\\\"html\\\": \\\"#0000ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 5,\\n\\t\\t\\\"desc\\\": \\\"Fuchsia\\\",\\n\\t\\t\\\"html\\\": \\\"#ff00ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 6,\\n\\t\\t\\\"desc\\\": \\\"Aqua\\\",\\n\\t\\t\\\"html\\\": \\\"#00ffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 7,\\n\\t\\t\\\"desc\\\": \\\"White\\\",\\n\\t\\t\\\"html\\\": \\\"#ffffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 8,\\n\\t\\t\\\"desc\\\": \\\"Black\\\",\\n\\t\\t\\\"html\\\": \\\"#000000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 9,\\n\\t\\t\\\"desc\\\": \\\"Maroon\\\",\\n\\t\\t\\\"html\\\": \\\"#800000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(128,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,25%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 10,\\n\\t\\t\\\"desc\\\": \\\"Green\\\",\\n\\t\\t\\\"html\\\": \\\"#008000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,128,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,25%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 11,\\n\\t\\t\\\"desc\\\": \\\"Olive\\\",\\n\\t\\t\\\"html\\\": \\\"#808000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(128,128,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,25%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 12,\\n\\t\\t\\\"desc\\\": \\\"Navy\\\",\\n\\t\\t\\\"html\\\": \\\"#000080\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,128)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,25%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 13,\\n\\t\\t\\\"desc\\\": \\\"Purple\\\",\\n\\t\\t\\\"html\\\": \\\"#800080\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(128,0,128)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,25%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 14,\\n\\t\\t\\\"desc\\\": \\\"Teal\\\",\\n\\t\\t\\\"html\\\": \\\"#008080\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,128,128)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,25%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 15,\\n\\t\\t\\\"desc\\\": \\\"Silver\\\",\\n\\t\\t\\\"html\\\": \\\"#c0c0c0\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(192,192,192)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,75%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 16,\\n\\t\\t\\\"desc\\\": \\\"Grey0\\\",\\n\\t\\t\\\"html\\\": \\\"#000000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,0%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 17,\\n\\t\\t\\\"desc\\\": \\\"NavyBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#00005f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,18%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 18,\\n\\t\\t\\\"desc\\\": \\\"DarkBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#000087\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 19,\\n\\t\\t\\\"desc\\\": \\\"Blue3\\\",\\n\\t\\t\\\"html\\\": \\\"#0000af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 20,\\n\\t\\t\\\"desc\\\": \\\"Blue3\\\",\\n\\t\\t\\\"html\\\": \\\"#0000d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 21,\\n\\t\\t\\\"desc\\\": \\\"Blue1\\\",\\n\\t\\t\\\"html\\\": \\\"#0000ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 22,\\n\\t\\t\\\"desc\\\": \\\"DarkGreen\\\",\\n\\t\\t\\\"html\\\": \\\"#005f00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,95,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,18%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 23,\\n\\t\\t\\\"desc\\\": \\\"DeepSkyBlue4\\\",\\n\\t\\t\\\"html\\\": \\\"#005f5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,95,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,18%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 24,\\n\\t\\t\\\"desc\\\": \\\"DeepSkyBlue4\\\",\\n\\t\\t\\\"html\\\": \\\"#005f87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,95,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(97,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 25,\\n\\t\\t\\\"desc\\\": \\\"DeepSkyBlue4\\\",\\n\\t\\t\\\"html\\\": \\\"#005faf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,95,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(07,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 26,\\n\\t\\t\\\"desc\\\": \\\"DodgerBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#005fd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,95,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(13,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 27,\\n\\t\\t\\\"desc\\\": \\\"DodgerBlue2\\\",\\n\\t\\t\\\"html\\\": \\\"#005fff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,95,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(17,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 28,\\n\\t\\t\\\"desc\\\": \\\"Green4\\\",\\n\\t\\t\\\"html\\\": \\\"#008700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,135,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 29,\\n\\t\\t\\\"desc\\\": \\\"SpringGreen4\\\",\\n\\t\\t\\\"html\\\": \\\"#00875f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,135,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(62,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 30,\\n\\t\\t\\\"desc\\\": \\\"Turquoise4\\\",\\n\\t\\t\\\"html\\\": \\\"#008787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,135,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 31,\\n\\t\\t\\\"desc\\\": \\\"DeepSkyBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#0087af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,135,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(93,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 32,\\n\\t\\t\\\"desc\\\": \\\"DeepSkyBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#0087d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,135,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(02,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 33,\\n\\t\\t\\\"desc\\\": \\\"DodgerBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#0087ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,135,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(08,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 34,\\n\\t\\t\\\"desc\\\": \\\"Green3\\\",\\n\\t\\t\\\"html\\\": \\\"#00af00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,175,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 35,\\n\\t\\t\\\"desc\\\": \\\"SpringGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#00af5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,175,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(52,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 36,\\n\\t\\t\\\"desc\\\": \\\"DarkCyan\\\",\\n\\t\\t\\\"html\\\": \\\"#00af87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,175,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(66,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 37,\\n\\t\\t\\\"desc\\\": \\\"LightSeaGreen\\\",\\n\\t\\t\\\"html\\\": \\\"#00afaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,175,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 38,\\n\\t\\t\\\"desc\\\": \\\"DeepSkyBlue2\\\",\\n\\t\\t\\\"html\\\": \\\"#00afd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,175,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(91,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 39,\\n\\t\\t\\\"desc\\\": \\\"DeepSkyBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#00afff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,175,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(98,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 40,\\n\\t\\t\\\"desc\\\": \\\"Green3\\\",\\n\\t\\t\\\"html\\\": \\\"#00d700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,215,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 41,\\n\\t\\t\\\"desc\\\": \\\"SpringGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#00d75f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,215,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(46,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 42,\\n\\t\\t\\\"desc\\\": \\\"SpringGreen2\\\",\\n\\t\\t\\\"html\\\": \\\"#00d787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,215,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(57,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 43,\\n\\t\\t\\\"desc\\\": \\\"Cyan3\\\",\\n\\t\\t\\\"html\\\": \\\"#00d7af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,215,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(68,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 44,\\n\\t\\t\\\"desc\\\": \\\"DarkTurquoise\\\",\\n\\t\\t\\\"html\\\": \\\"#00d7d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,215,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 45,\\n\\t\\t\\\"desc\\\": \\\"Turquoise2\\\",\\n\\t\\t\\\"html\\\": \\\"#00d7ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,215,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(89,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 46,\\n\\t\\t\\\"desc\\\": \\\"Green1\\\",\\n\\t\\t\\\"html\\\": \\\"#00ff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 47,\\n\\t\\t\\\"desc\\\": \\\"SpringGreen2\\\",\\n\\t\\t\\\"html\\\": \\\"#00ff5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(42,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 48,\\n\\t\\t\\\"desc\\\": \\\"SpringGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#00ff87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(51,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 49,\\n\\t\\t\\\"desc\\\": \\\"MediumSpringGreen\\\",\\n\\t\\t\\\"html\\\": \\\"#00ffaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(61,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 50,\\n\\t\\t\\\"desc\\\": \\\"Cyan2\\\",\\n\\t\\t\\\"html\\\": \\\"#00ffd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(70,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 51,\\n\\t\\t\\\"desc\\\": \\\"Cyan1\\\",\\n\\t\\t\\\"html\\\": \\\"#00ffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(0,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 52,\\n\\t\\t\\\"desc\\\": \\\"DarkRed\\\",\\n\\t\\t\\\"html\\\": \\\"#5f0000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,18%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 53,\\n\\t\\t\\\"desc\\\": \\\"DeepPink4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f005f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,0,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,18%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 54,\\n\\t\\t\\\"desc\\\": \\\"Purple4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f0087\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,0,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(82,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 55,\\n\\t\\t\\\"desc\\\": \\\"Purple4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f00af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,0,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(72,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 56,\\n\\t\\t\\\"desc\\\": \\\"Purple3\\\",\\n\\t\\t\\\"html\\\": \\\"#5f00d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,0,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(66,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 57,\\n\\t\\t\\\"desc\\\": \\\"BlueViolet\\\",\\n\\t\\t\\\"html\\\": \\\"#5f00ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(62,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 58,\\n\\t\\t\\\"desc\\\": \\\"Orange4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f5f00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,95,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,18%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 59,\\n\\t\\t\\\"desc\\\": \\\"Grey37\\\",\\n\\t\\t\\\"html\\\": \\\"#5f5f5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,95,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 60,\\n\\t\\t\\\"desc\\\": \\\"MediumPurple4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f5f87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,95,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,17%,45%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 61,\\n\\t\\t\\\"desc\\\": \\\"SlateBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#5f5faf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,95,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 62,\\n\\t\\t\\\"desc\\\": \\\"SlateBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#5f5fd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,95,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 63,\\n\\t\\t\\\"desc\\\": \\\"RoyalBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#5f5fff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,95,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 64,\\n\\t\\t\\\"desc\\\": \\\"Chartreuse4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f8700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,135,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(7,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 65,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f875f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,135,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,17%,45%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 66,\\n\\t\\t\\\"desc\\\": \\\"PaleTurquoise4\\\",\\n\\t\\t\\\"html\\\": \\\"#5f8787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,135,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,17%,45%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 67,\\n\\t\\t\\\"desc\\\": \\\"SteelBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#5f87af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,135,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(210,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 68,\\n\\t\\t\\\"desc\\\": \\\"SteelBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#5f87d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,135,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(220,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 69,\\n\\t\\t\\\"desc\\\": \\\"CornflowerBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#5f87ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,135,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(225,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 70,\\n\\t\\t\\\"desc\\\": \\\"Chartreuse3\\\",\\n\\t\\t\\\"html\\\": \\\"#5faf00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,175,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(7,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 71,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen4\\\",\\n\\t\\t\\\"html\\\": \\\"#5faf5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,175,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 72,\\n\\t\\t\\\"desc\\\": \\\"CadetBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#5faf87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,175,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(150,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 73,\\n\\t\\t\\\"desc\\\": \\\"CadetBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#5fafaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,175,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 74,\\n\\t\\t\\\"desc\\\": \\\"SkyBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#5fafd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,175,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(200,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 75,\\n\\t\\t\\\"desc\\\": \\\"SteelBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#5fafff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,175,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(210,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 76,\\n\\t\\t\\\"desc\\\": \\\"Chartreuse3\\\",\\n\\t\\t\\\"html\\\": \\\"#5fd700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,215,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(3,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 77,\\n\\t\\t\\\"desc\\\": \\\"PaleGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#5fd75f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,215,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 78,\\n\\t\\t\\\"desc\\\": \\\"SeaGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#5fd787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,215,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(140,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 79,\\n\\t\\t\\\"desc\\\": \\\"Aquamarine3\\\",\\n\\t\\t\\\"html\\\": \\\"#5fd7af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,215,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(160,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 80,\\n\\t\\t\\\"desc\\\": \\\"MediumTurquoise\\\",\\n\\t\\t\\\"html\\\": \\\"#5fd7d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,215,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 81,\\n\\t\\t\\\"desc\\\": \\\"SteelBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#5fd7ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,215,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(195,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 82,\\n\\t\\t\\\"desc\\\": \\\"Chartreuse2\\\",\\n\\t\\t\\\"html\\\": \\\"#5fff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(7,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 83,\\n\\t\\t\\\"desc\\\": \\\"SeaGreen2\\\",\\n\\t\\t\\\"html\\\": \\\"#5fff5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,255,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 84,\\n\\t\\t\\\"desc\\\": \\\"SeaGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#5fff87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,255,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(135,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 85,\\n\\t\\t\\\"desc\\\": \\\"SeaGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#5fffaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,255,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(150,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 86,\\n\\t\\t\\\"desc\\\": \\\"Aquamarine1\\\",\\n\\t\\t\\\"html\\\": \\\"#5fffd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,255,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(165,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 87,\\n\\t\\t\\\"desc\\\": \\\"DarkSlateGray2\\\",\\n\\t\\t\\\"html\\\": \\\"#5fffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(95,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 88,\\n\\t\\t\\\"desc\\\": \\\"DarkRed\\\",\\n\\t\\t\\\"html\\\": \\\"#870000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 89,\\n\\t\\t\\\"desc\\\": \\\"DeepPink4\\\",\\n\\t\\t\\\"html\\\": \\\"#87005f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,0,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(17,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 90,\\n\\t\\t\\\"desc\\\": \\\"DarkMagenta\\\",\\n\\t\\t\\\"html\\\": \\\"#870087\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,0,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 91,\\n\\t\\t\\\"desc\\\": \\\"DarkMagenta\\\",\\n\\t\\t\\\"html\\\": \\\"#8700af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,0,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(86,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 92,\\n\\t\\t\\\"desc\\\": \\\"DarkViolet\\\",\\n\\t\\t\\\"html\\\": \\\"#8700d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,0,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(77,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 93,\\n\\t\\t\\\"desc\\\": \\\"Purple\\\",\\n\\t\\t\\\"html\\\": \\\"#8700ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(71,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 94,\\n\\t\\t\\\"desc\\\": \\\"Orange4\\\",\\n\\t\\t\\\"html\\\": \\\"#875f00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,95,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(2,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 95,\\n\\t\\t\\\"desc\\\": \\\"LightPink4\\\",\\n\\t\\t\\\"html\\\": \\\"#875f5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,95,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,17%,45%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 96,\\n\\t\\t\\\"desc\\\": \\\"Plum4\\\",\\n\\t\\t\\\"html\\\": \\\"#875f87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,95,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,17%,45%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 97,\\n\\t\\t\\\"desc\\\": \\\"MediumPurple3\\\",\\n\\t\\t\\\"html\\\": \\\"#875faf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,95,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(270,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 98,\\n\\t\\t\\\"desc\\\": \\\"MediumPurple3\\\",\\n\\t\\t\\\"html\\\": \\\"#875fd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,95,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(260,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 99,\\n\\t\\t\\\"desc\\\": \\\"SlateBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#875fff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,95,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(255,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 100,\\n\\t\\t\\\"desc\\\": \\\"Yellow4\\\",\\n\\t\\t\\\"html\\\": \\\"#878700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,135,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 101,\\n\\t\\t\\\"desc\\\": \\\"Wheat4\\\",\\n\\t\\t\\\"html\\\": \\\"#87875f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,135,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,17%,45%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 102,\\n\\t\\t\\\"desc\\\": \\\"Grey53\\\",\\n\\t\\t\\\"html\\\": \\\"#878787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,135,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 103,\\n\\t\\t\\\"desc\\\": \\\"LightSlateGrey\\\",\\n\\t\\t\\\"html\\\": \\\"#8787af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,135,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,20%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 104,\\n\\t\\t\\\"desc\\\": \\\"MediumPurple\\\",\\n\\t\\t\\\"html\\\": \\\"#8787d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,135,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 105,\\n\\t\\t\\\"desc\\\": \\\"LightSlateBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#8787ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,135,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 106,\\n\\t\\t\\\"desc\\\": \\\"Yellow4\\\",\\n\\t\\t\\\"html\\\": \\\"#87af00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,175,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(3,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 107,\\n\\t\\t\\\"desc\\\": \\\"DarkOliveGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#87af5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,175,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(90,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 108,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen\\\",\\n\\t\\t\\\"html\\\": \\\"#87af87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,175,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,20%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 109,\\n\\t\\t\\\"desc\\\": \\\"LightSkyBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#87afaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,175,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,20%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 110,\\n\\t\\t\\\"desc\\\": \\\"LightSkyBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#87afd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,175,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(210,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 111,\\n\\t\\t\\\"desc\\\": \\\"SkyBlue2\\\",\\n\\t\\t\\\"html\\\": \\\"#87afff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,175,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(220,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 112,\\n\\t\\t\\\"desc\\\": \\\"Chartreuse2\\\",\\n\\t\\t\\\"html\\\": \\\"#87d700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,215,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(2,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 113,\\n\\t\\t\\\"desc\\\": \\\"DarkOliveGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#87d75f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,215,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(100,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 114,\\n\\t\\t\\\"desc\\\": \\\"PaleGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#87d787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,215,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 115,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#87d7af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,215,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(150,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 116,\\n\\t\\t\\\"desc\\\": \\\"DarkSlateGray3\\\",\\n\\t\\t\\\"html\\\": \\\"#87d7d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,215,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 117,\\n\\t\\t\\\"desc\\\": \\\"SkyBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#87d7ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,215,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(200,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 118,\\n\\t\\t\\\"desc\\\": \\\"Chartreuse1\\\",\\n\\t\\t\\\"html\\\": \\\"#87ff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 119,\\n\\t\\t\\\"desc\\\": \\\"LightGreen\\\",\\n\\t\\t\\\"html\\\": \\\"#87ff5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,255,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(105,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 120,\\n\\t\\t\\\"desc\\\": \\\"LightGreen\\\",\\n\\t\\t\\\"html\\\": \\\"#87ff87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,255,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 121,\\n\\t\\t\\\"desc\\\": \\\"PaleGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#87ffaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,255,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(140,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 122,\\n\\t\\t\\\"desc\\\": \\\"Aquamarine1\\\",\\n\\t\\t\\\"html\\\": \\\"#87ffd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,255,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(160,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 123,\\n\\t\\t\\\"desc\\\": \\\"DarkSlateGray1\\\",\\n\\t\\t\\\"html\\\": \\\"#87ffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(135,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 124,\\n\\t\\t\\\"desc\\\": \\\"Red3\\\",\\n\\t\\t\\\"html\\\": \\\"#af0000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 125,\\n\\t\\t\\\"desc\\\": \\\"DeepPink4\\\",\\n\\t\\t\\\"html\\\": \\\"#af005f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,0,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(27,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 126,\\n\\t\\t\\\"desc\\\": \\\"MediumVioletRed\\\",\\n\\t\\t\\\"html\\\": \\\"#af0087\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,0,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(13,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 127,\\n\\t\\t\\\"desc\\\": \\\"Magenta3\\\",\\n\\t\\t\\\"html\\\": \\\"#af00af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,0,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 128,\\n\\t\\t\\\"desc\\\": \\\"DarkViolet\\\",\\n\\t\\t\\\"html\\\": \\\"#af00d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,0,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(88,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 129,\\n\\t\\t\\\"desc\\\": \\\"Purple\\\",\\n\\t\\t\\\"html\\\": \\\"#af00ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(81,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 130,\\n\\t\\t\\\"desc\\\": \\\"DarkOrange3\\\",\\n\\t\\t\\\"html\\\": \\\"#af5f00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,95,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(2,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 131,\\n\\t\\t\\\"desc\\\": \\\"IndianRed\\\",\\n\\t\\t\\\"html\\\": \\\"#af5f5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,95,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 132,\\n\\t\\t\\\"desc\\\": \\\"HotPink3\\\",\\n\\t\\t\\\"html\\\": \\\"#af5f87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,95,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(330,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 133,\\n\\t\\t\\\"desc\\\": \\\"MediumOrchid3\\\",\\n\\t\\t\\\"html\\\": \\\"#af5faf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,95,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 134,\\n\\t\\t\\\"desc\\\": \\\"MediumOrchid\\\",\\n\\t\\t\\\"html\\\": \\\"#af5fd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,95,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(280,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 135,\\n\\t\\t\\\"desc\\\": \\\"MediumPurple2\\\",\\n\\t\\t\\\"html\\\": \\\"#af5fff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,95,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(270,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 136,\\n\\t\\t\\\"desc\\\": \\\"DarkGoldenrod\\\",\\n\\t\\t\\\"html\\\": \\\"#af8700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,135,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(6,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 137,\\n\\t\\t\\\"desc\\\": \\\"LightSalmon3\\\",\\n\\t\\t\\\"html\\\": \\\"#af875f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,135,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(30,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 138,\\n\\t\\t\\\"desc\\\": \\\"RosyBrown\\\",\\n\\t\\t\\\"html\\\": \\\"#af8787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,135,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,20%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 139,\\n\\t\\t\\\"desc\\\": \\\"Grey63\\\",\\n\\t\\t\\\"html\\\": \\\"#af87af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,135,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,20%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 140,\\n\\t\\t\\\"desc\\\": \\\"MediumPurple2\\\",\\n\\t\\t\\\"html\\\": \\\"#af87d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,135,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(270,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 141,\\n\\t\\t\\\"desc\\\": \\\"MediumPurple1\\\",\\n\\t\\t\\\"html\\\": \\\"#af87ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,135,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(260,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 142,\\n\\t\\t\\\"desc\\\": \\\"Gold3\\\",\\n\\t\\t\\\"html\\\": \\\"#afaf00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,175,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 143,\\n\\t\\t\\\"desc\\\": \\\"DarkKhaki\\\",\\n\\t\\t\\\"html\\\": \\\"#afaf5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,175,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,33%,52%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 144,\\n\\t\\t\\\"desc\\\": \\\"NavajoWhite3\\\",\\n\\t\\t\\\"html\\\": \\\"#afaf87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,175,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,20%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 145,\\n\\t\\t\\\"desc\\\": \\\"Grey69\\\",\\n\\t\\t\\\"html\\\": \\\"#afafaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,175,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 146,\\n\\t\\t\\\"desc\\\": \\\"LightSteelBlue3\\\",\\n\\t\\t\\\"html\\\": \\\"#afafd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,175,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,33%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 147,\\n\\t\\t\\\"desc\\\": \\\"LightSteelBlue\\\",\\n\\t\\t\\\"html\\\": \\\"#afafff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,175,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 148,\\n\\t\\t\\\"desc\\\": \\\"Yellow3\\\",\\n\\t\\t\\\"html\\\": \\\"#afd700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,215,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(1,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 149,\\n\\t\\t\\\"desc\\\": \\\"DarkOliveGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#afd75f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,215,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(80,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 150,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen3\\\",\\n\\t\\t\\\"html\\\": \\\"#afd787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,215,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(90,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 151,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen2\\\",\\n\\t\\t\\\"html\\\": \\\"#afd7af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,215,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,33%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 152,\\n\\t\\t\\\"desc\\\": \\\"LightCyan3\\\",\\n\\t\\t\\\"html\\\": \\\"#afd7d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,215,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,33%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 153,\\n\\t\\t\\\"desc\\\": \\\"LightSkyBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#afd7ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,215,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(210,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 154,\\n\\t\\t\\\"desc\\\": \\\"GreenYellow\\\",\\n\\t\\t\\\"html\\\": \\\"#afff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(8,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 155,\\n\\t\\t\\\"desc\\\": \\\"DarkOliveGreen2\\\",\\n\\t\\t\\\"html\\\": \\\"#afff5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,255,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(90,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 156,\\n\\t\\t\\\"desc\\\": \\\"PaleGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#afff87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,255,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(100,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 157,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen2\\\",\\n\\t\\t\\\"html\\\": \\\"#afffaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,255,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 158,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#afffd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,255,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(150,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 159,\\n\\t\\t\\\"desc\\\": \\\"PaleTurquoise1\\\",\\n\\t\\t\\\"html\\\": \\\"#afffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(175,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 160,\\n\\t\\t\\\"desc\\\": \\\"Red3\\\",\\n\\t\\t\\\"html\\\": \\\"#d70000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 161,\\n\\t\\t\\\"desc\\\": \\\"DeepPink3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7005f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,0,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(33,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 162,\\n\\t\\t\\\"desc\\\": \\\"DeepPink3\\\",\\n\\t\\t\\\"html\\\": \\\"#d70087\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,0,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(22,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 163,\\n\\t\\t\\\"desc\\\": \\\"Magenta3\\\",\\n\\t\\t\\\"html\\\": \\\"#d700af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,0,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(11,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 164,\\n\\t\\t\\\"desc\\\": \\\"Magenta3\\\",\\n\\t\\t\\\"html\\\": \\\"#d700d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,0,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 165,\\n\\t\\t\\\"desc\\\": \\\"Magenta2\\\",\\n\\t\\t\\\"html\\\": \\\"#d700ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(90,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 166,\\n\\t\\t\\\"desc\\\": \\\"DarkOrange3\\\",\\n\\t\\t\\\"html\\\": \\\"#d75f00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,95,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(6,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 167,\\n\\t\\t\\\"desc\\\": \\\"IndianRed\\\",\\n\\t\\t\\\"html\\\": \\\"#d75f5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,95,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 168,\\n\\t\\t\\\"desc\\\": \\\"HotPink3\\\",\\n\\t\\t\\\"html\\\": \\\"#d75f87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,95,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(340,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 169,\\n\\t\\t\\\"desc\\\": \\\"HotPink2\\\",\\n\\t\\t\\\"html\\\": \\\"#d75faf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,95,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(320,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 170,\\n\\t\\t\\\"desc\\\": \\\"Orchid\\\",\\n\\t\\t\\\"html\\\": \\\"#d75fd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,95,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 171,\\n\\t\\t\\\"desc\\\": \\\"MediumOrchid1\\\",\\n\\t\\t\\\"html\\\": \\\"#d75fff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,95,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(285,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 172,\\n\\t\\t\\\"desc\\\": \\\"Orange3\\\",\\n\\t\\t\\\"html\\\": \\\"#d78700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,135,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(7,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 173,\\n\\t\\t\\\"desc\\\": \\\"LightSalmon3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7875f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,135,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(20,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 174,\\n\\t\\t\\\"desc\\\": \\\"LightPink3\\\",\\n\\t\\t\\\"html\\\": \\\"#d78787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,135,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 175,\\n\\t\\t\\\"desc\\\": \\\"Pink3\\\",\\n\\t\\t\\\"html\\\": \\\"#d787af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,135,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(330,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 176,\\n\\t\\t\\\"desc\\\": \\\"Plum3\\\",\\n\\t\\t\\\"html\\\": \\\"#d787d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,135,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 177,\\n\\t\\t\\\"desc\\\": \\\"Violet\\\",\\n\\t\\t\\\"html\\\": \\\"#d787ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,135,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(280,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 178,\\n\\t\\t\\\"desc\\\": \\\"Gold3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7af00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,175,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(8,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 179,\\n\\t\\t\\\"desc\\\": \\\"LightGoldenrod3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7af5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,175,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(40,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 180,\\n\\t\\t\\\"desc\\\": \\\"Tan\\\",\\n\\t\\t\\\"html\\\": \\\"#d7af87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,175,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(30,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 181,\\n\\t\\t\\\"desc\\\": \\\"MistyRose3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7afaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,175,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,33%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 182,\\n\\t\\t\\\"desc\\\": \\\"Thistle3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7afd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,175,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,33%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 183,\\n\\t\\t\\\"desc\\\": \\\"Plum2\\\",\\n\\t\\t\\\"html\\\": \\\"#d7afff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,175,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(270,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 184,\\n\\t\\t\\\"desc\\\": \\\"Yellow3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7d700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,215,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,42%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 185,\\n\\t\\t\\\"desc\\\": \\\"Khaki3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7d75f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,215,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,60%,60%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 186,\\n\\t\\t\\\"desc\\\": \\\"LightGoldenrod2\\\",\\n\\t\\t\\\"html\\\": \\\"#d7d787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,215,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,50%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 187,\\n\\t\\t\\\"desc\\\": \\\"LightYellow3\\\",\\n\\t\\t\\\"html\\\": \\\"#d7d7af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,215,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,33%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 188,\\n\\t\\t\\\"desc\\\": \\\"Grey84\\\",\\n\\t\\t\\\"html\\\": \\\"#d7d7d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,215,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 189,\\n\\t\\t\\\"desc\\\": \\\"LightSteelBlue1\\\",\\n\\t\\t\\\"html\\\": \\\"#d7d7ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,215,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(240,100%,92%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 190,\\n\\t\\t\\\"desc\\\": \\\"Yellow2\\\",\\n\\t\\t\\\"html\\\": \\\"#d7ff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(9,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 191,\\n\\t\\t\\\"desc\\\": \\\"DarkOliveGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#d7ff5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,255,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(75,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 192,\\n\\t\\t\\\"desc\\\": \\\"DarkOliveGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#d7ff87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,255,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(80,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 193,\\n\\t\\t\\\"desc\\\": \\\"DarkSeaGreen1\\\",\\n\\t\\t\\\"html\\\": \\\"#d7ffaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,255,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(90,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 194,\\n\\t\\t\\\"desc\\\": \\\"Honeydew2\\\",\\n\\t\\t\\\"html\\\": \\\"#d7ffd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,255,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(120,100%,92%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 195,\\n\\t\\t\\\"desc\\\": \\\"LightCyan1\\\",\\n\\t\\t\\\"html\\\": \\\"#d7ffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(215,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(180,100%,92%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 196,\\n\\t\\t\\\"desc\\\": \\\"Red1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff0000\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 197,\\n\\t\\t\\\"desc\\\": \\\"DeepPink2\\\",\\n\\t\\t\\\"html\\\": \\\"#ff005f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(37,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 198,\\n\\t\\t\\\"desc\\\": \\\"DeepPink1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff0087\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(28,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 199,\\n\\t\\t\\\"desc\\\": \\\"DeepPink1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff00af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(18,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 200,\\n\\t\\t\\\"desc\\\": \\\"Magenta2\\\",\\n\\t\\t\\\"html\\\": \\\"#ff00d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(09,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 201,\\n\\t\\t\\\"desc\\\": \\\"Magenta1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff00ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,0,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 202,\\n\\t\\t\\\"desc\\\": \\\"OrangeRed1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff5f00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,95,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(2,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 203,\\n\\t\\t\\\"desc\\\": \\\"IndianRed1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff5f5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,95,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 204,\\n\\t\\t\\\"desc\\\": \\\"IndianRed1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff5f87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,95,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(345,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 205,\\n\\t\\t\\\"desc\\\": \\\"HotPink\\\",\\n\\t\\t\\\"html\\\": \\\"#ff5faf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,95,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(330,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 206,\\n\\t\\t\\\"desc\\\": \\\"HotPink\\\",\\n\\t\\t\\\"html\\\": \\\"#ff5fd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,95,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(315,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 207,\\n\\t\\t\\\"desc\\\": \\\"MediumOrchid1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff5fff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,95,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 208,\\n\\t\\t\\\"desc\\\": \\\"DarkOrange\\\",\\n\\t\\t\\\"html\\\": \\\"#ff8700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,135,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 209,\\n\\t\\t\\\"desc\\\": \\\"Salmon1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff875f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,135,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(15,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 210,\\n\\t\\t\\\"desc\\\": \\\"LightCoral\\\",\\n\\t\\t\\\"html\\\": \\\"#ff8787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,135,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 211,\\n\\t\\t\\\"desc\\\": \\\"PaleVioletRed1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff87af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,135,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(340,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 212,\\n\\t\\t\\\"desc\\\": \\\"Orchid2\\\",\\n\\t\\t\\\"html\\\": \\\"#ff87d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,135,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(320,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 213,\\n\\t\\t\\\"desc\\\": \\\"Orchid1\\\",\\n\\t\\t\\\"html\\\": \\\"#ff87ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,135,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 214,\\n\\t\\t\\\"desc\\\": \\\"Orange1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffaf00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,175,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(1,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 215,\\n\\t\\t\\\"desc\\\": \\\"SandyBrown\\\",\\n\\t\\t\\\"html\\\": \\\"#ffaf5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,175,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(30,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 216,\\n\\t\\t\\\"desc\\\": \\\"LightSalmon1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffaf87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,175,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(20,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 217,\\n\\t\\t\\\"desc\\\": \\\"LightPink1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffafaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,175,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 218,\\n\\t\\t\\\"desc\\\": \\\"Pink1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffafd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,175,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(330,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 219,\\n\\t\\t\\\"desc\\\": \\\"Plum1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffafff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,175,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 220,\\n\\t\\t\\\"desc\\\": \\\"Gold1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffd700\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,215,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 221,\\n\\t\\t\\\"desc\\\": \\\"LightGoldenrod2\\\",\\n\\t\\t\\\"html\\\": \\\"#ffd75f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,215,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(45,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 222,\\n\\t\\t\\\"desc\\\": \\\"LightGoldenrod2\\\",\\n\\t\\t\\\"html\\\": \\\"#ffd787\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,215,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(40,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 223,\\n\\t\\t\\\"desc\\\": \\\"NavajoWhite1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffd7af\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,215,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(30,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 224,\\n\\t\\t\\\"desc\\\": \\\"MistyRose1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffd7d7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,215,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,100%,92%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 225,\\n\\t\\t\\\"desc\\\": \\\"Thistle1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffd7ff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,215,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(300,100%,92%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 226,\\n\\t\\t\\\"desc\\\": \\\"Yellow1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffff00\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,0)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 227,\\n\\t\\t\\\"desc\\\": \\\"LightGoldenrod1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffff5f\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,95)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,68%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 228,\\n\\t\\t\\\"desc\\\": \\\"Khaki1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffff87\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,135)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,76%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 229,\\n\\t\\t\\\"desc\\\": \\\"Wheat1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffffaf\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,175)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,84%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 230,\\n\\t\\t\\\"desc\\\": \\\"Cornsilk1\\\",\\n\\t\\t\\\"html\\\": \\\"#ffffd7\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,215)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(60,100%,92%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 231,\\n\\t\\t\\\"desc\\\": \\\"Grey100\\\",\\n\\t\\t\\\"html\\\": \\\"#ffffff\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(255,255,255)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,100%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 232,\\n\\t\\t\\\"desc\\\": \\\"Grey3\\\",\\n\\t\\t\\\"html\\\": \\\"#080808\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(8,8,8)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,3%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 233,\\n\\t\\t\\\"desc\\\": \\\"Grey7\\\",\\n\\t\\t\\\"html\\\": \\\"#121212\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(18,18,18)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,7%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 234,\\n\\t\\t\\\"desc\\\": \\\"Grey11\\\",\\n\\t\\t\\\"html\\\": \\\"#1c1c1c\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(28,28,28)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,10%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 235,\\n\\t\\t\\\"desc\\\": \\\"Grey15\\\",\\n\\t\\t\\\"html\\\": \\\"#262626\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(38,38,38)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,14%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 236,\\n\\t\\t\\\"desc\\\": \\\"Grey19\\\",\\n\\t\\t\\\"html\\\": \\\"#303030\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(48,48,48)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,18%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 237,\\n\\t\\t\\\"desc\\\": \\\"Grey23\\\",\\n\\t\\t\\\"html\\\": \\\"#3a3a3a\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(58,58,58)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,22%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 238,\\n\\t\\t\\\"desc\\\": \\\"Grey27\\\",\\n\\t\\t\\\"html\\\": \\\"#444444\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(68,68,68)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,26%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 239,\\n\\t\\t\\\"desc\\\": \\\"Grey30\\\",\\n\\t\\t\\\"html\\\": \\\"#4e4e4e\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(78,78,78)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,30%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 240,\\n\\t\\t\\\"desc\\\": \\\"Grey35\\\",\\n\\t\\t\\\"html\\\": \\\"#585858\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(88,88,88)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,34%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 241,\\n\\t\\t\\\"desc\\\": \\\"Grey39\\\",\\n\\t\\t\\\"html\\\": \\\"#626262\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(98,98,98)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,37%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 242,\\n\\t\\t\\\"desc\\\": \\\"Grey42\\\",\\n\\t\\t\\\"html\\\": \\\"#6c6c6c\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(108,108,108)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,40%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 243,\\n\\t\\t\\\"desc\\\": \\\"Grey46\\\",\\n\\t\\t\\\"html\\\": \\\"#767676\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(118,118,118)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,46%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 244,\\n\\t\\t\\\"desc\\\": \\\"Grey50\\\",\\n\\t\\t\\\"html\\\": \\\"#808080\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(128,128,128)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,50%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 245,\\n\\t\\t\\\"desc\\\": \\\"Grey54\\\",\\n\\t\\t\\\"html\\\": \\\"#8a8a8a\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(138,138,138)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,54%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 246,\\n\\t\\t\\\"desc\\\": \\\"Grey58\\\",\\n\\t\\t\\\"html\\\": \\\"#949494\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(148,148,148)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,58%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 247,\\n\\t\\t\\\"desc\\\": \\\"Grey62\\\",\\n\\t\\t\\\"html\\\": \\\"#9e9e9e\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(158,158,158)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,61%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 248,\\n\\t\\t\\\"desc\\\": \\\"Grey66\\\",\\n\\t\\t\\\"html\\\": \\\"#a8a8a8\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(168,168,168)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,65%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 249,\\n\\t\\t\\\"desc\\\": \\\"Grey70\\\",\\n\\t\\t\\\"html\\\": \\\"#b2b2b2\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(178,178,178)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,69%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 250,\\n\\t\\t\\\"desc\\\": \\\"Grey74\\\",\\n\\t\\t\\\"html\\\": \\\"#bcbcbc\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(188,188,188)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,73%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 251,\\n\\t\\t\\\"desc\\\": \\\"Grey78\\\",\\n\\t\\t\\\"html\\\": \\\"#c6c6c6\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(198,198,198)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,77%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 252,\\n\\t\\t\\\"desc\\\": \\\"Grey82\\\",\\n\\t\\t\\\"html\\\": \\\"#d0d0d0\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(208,208,208)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,81%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 253,\\n\\t\\t\\\"desc\\\": \\\"Grey85\\\",\\n\\t\\t\\\"html\\\": \\\"#dadada\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(218,218,218)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,85%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 254,\\n\\t\\t\\\"desc\\\": \\\"Grey89\\\",\\n\\t\\t\\\"html\\\": \\\"#e4e4e4\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(228,228,228)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,89%)\\\\r\\\"\\n\\t},\\n\\t{\\n\\t\\t\\\"ansi\\\": 255,\\n\\t\\t\\\"desc\\\": \\\"Grey93\\\",\\n\\t\\t\\\"html\\\": \\\"#eeeeee\\\",\\n\\t\\t\\\"rgb\\\": \\\"rgb(238,238,238)\\\",\\n\\t\\t\\\"hsl\\\": \\\"hsl(0,0%,93%)\\\"\\n\\t}\\n];\",\"filename\":\"tables.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { LogMessage } from 'utils.js'\\n\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\n\\tconst [silent = false] = ns.args;\\n\\n\\tconst servers = GetAllServers(ns);\\n\\n\\tlet rooted = 0;\\n\\tlet newlyRooted = 0;\\n\\n\\tfor (const server of servers) {\\n\\t\\tif (ns.hasRootAccess(server)) {\\n\\t\\t\\trooted++;\\n\\t\\t}\\n\\t\\telse if (await Breach(ns, server) == true) {\\n\\t\\t\\tns.tprint('SUCCESS: Rooted new server: ' + server);\\n\\t\\t\\tnewlyRooted++;\\n\\t\\t}\\n\\n\\t}\\n\\tif (newlyRooted > 0) {\\n\\t\\tns.tprint('SUCCESS: Successfully breached ' + newlyRooted + ' new servers (before: ' + rooted + ' after: ' + (rooted + newlyRooted) + ')');\\n\\t\\tLogMessage(ns, 'SUCCESS: Successfully breached ' + newlyRooted + ' new servers (before: ' + rooted + ' after: ' + (rooted + newlyRooted) + ')');\\n\\t}\\n\\telse if (!silent)\\n\\t\\tns.tprint('FAIL: No new servers rooted.');\\n}\\n\\nasync function Breach(ns, server) {\\n\\ttry { ns.brutessh(server); } catch { }\\n\\ttry { ns.ftpcrack(server); } catch { }\\n\\ttry { ns.relaysmtp(server); } catch { }\\n\\ttry { ns.httpworm(server); } catch { }\\n\\ttry { ns.sqlinject(server); } catch { }\\n\\ttry { ns.nuke(server); } catch { }\\n\\n\\treturn ns.hasRootAccess(server);\\n}\\n\\nexport function GetAllServers(ns, root = 'home', found = []) {\\n\\tfound.push(root);\\n\\tfor (const server of ns.scan(root))\\n\\t\\tif (!found.includes(server)) GetAllServers(ns, server, found);\\n\\treturn found;\\n}\",\"filename\":\"breach.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"utils.js\",\"url\":\"blob:file:///f9e81b6b-236e-40c5-a2c7-7e00f89b3c58\",\"moduleSequenceNumber\":316},{\"filename\":\"breach.js\",\"url\":\"blob:file:///2d4bcbc0-2439-47aa-a992-9257d3f1dfcc\",\"moduleSequenceNumber\":685}],\"dependents\":[],\"ramUsage\":2.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let css=`body{--prilt:#fd0;--pri:#fd0;--pridk:#fd0;--successlt:#ce5;--success:#ce5;--successdk:#ce5;--errlt:#c04;--err:#c04;--errdk:#c04;--seclt:#28c;--sec:#28c;--secdk:#28c;--warnlt:#f70;--warn:#f70;--warndk:#f70;--infolt:#3ef;--info:#3ef;--infodk:#3ef;--welllt:#146;--well:#222;--white:#fff;--black:#000;--hp:#c04;--money:#fc7;--hack:#ce5;--combat:#f70;--cha:#b8f;--int:#3ef;--rep:#b8f;--disabled:#888;--bgpri:#000;--bgsec:#111;--button:#146;--ff:\\\"Lucida Console\\\";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 248px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:247px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px;max-height:90%}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{display:flex;white-space:pre;font-weight:bold;user-select:none;height:28px;align-items:center}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:0px 3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 31px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto;font-size:14px;line-height:}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px \\\"codicon\\\";line-height:0.9;display:flex;align-items:center}.sb .icon span{display:inline-block;font:25px -ff;width:25px;text-align:center}.sb .icon svg{height:21px;width:21px;margin:2px}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:\\\"\\\"}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;\\nexport let win=globalThis, doc=win[\\\"document\\\"], sidebar=doc.querySelector(\\\".sb\\\"),\\n  ts=()=>`[<span class=ts>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>]`,\\n  slp=ms=>new Promise(r=>setTimeout(r,ms)),\\n  elemFromHTML=html=>new Range().createContextualFragment(html).firstElementChild;\\nif (!sidebar){\\n  sidebar=doc.body.appendChild(elemFromHTML(`<div class=\\\"sb\\\"><style>${css}</style><div class=\\\"head\\\"><a class=\\\"icon collapser\\\">\\\\ueab6</a><span class=title>box.sidebar v1.1</span></div>`));\\n  sidebar.addEventListener('keydown',e=>e.stopPropagation());\\n  sidebar.querySelector('.head').addEventListener('click',()=>{\\n    transition(()=>sidebar.classList.toggle('c'));\\n    setTimeout(()=>doc.querySelector(\\\".monaco-editor\\\")&&Object.assign(doc.querySelector(\\\".monaco-editor\\\").style,{width:\\\"0px\\\"}),255);\\n  });\\n  win._boxEdgeDetect=()=>doc.querySelectorAll('.sb .box').forEach(box=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,box.offsetLeft),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,box.offsetTop),0)+\\\"px\\\"}));\\n  win.addEventListener(\\\"resize\\\",win._boxEdgeDetect);\\n}\\nlet createItem=(title, content, icon, ...classes)=>{\\n  let item=sidebar.appendChild(elemFromHTML(`<div class=\\\"${classes.join(\\\" \\\")}\\\"><div class=\\\"head\\\"><a class=\\\"icon\\\">${icon}</a><span class=title>${title}</span><a class=\\\"icon collapser\\\">\\\\ueab7</a><a class=\\\"icon close\\\">\\\\ueab8</a></div><div class=\\\"body\\\">${content}</div></div>`));\\n  Object.assign(item,{\\n    head:item.querySelector(\\\".head\\\"),\\n    body:item.querySelector(\\\".body\\\"),\\n    toggleType:()=>[\\\"box\\\",\\\"sbitem\\\"].forEach(cl=>item.classList.toggle(cl)),\\n    logTarget:item.querySelector(\\\".log\\\"),\\n    log:(html, timestamp=true)=>{\\n      if (!item.logTarget || !doc.contains(item.logTarget)) item.logTarget=item.body.appendChild(elemFromHTML(\\\"<div class=log></div>\\\"));\\n      let logEntry=item.logTarget.appendChild(elemFromHTML(`<p>${timestamp?ts():\\\"\\\"} ${html}</p>`));\\n      item.logTarget.scrollTop=item.logTarget.scrollHeight;\\n      return logEntry;\\n    },\\n    recalcHeight:()=>{item.style.height=\\\"\\\";item.style.height=item.offsetHeight+\\\"px\\\"},\\n    contextItems:{},\\n    addContextItem:(name,fn,cFn=()=>1)=>item.contextItems[name]={fn:fn,cFn:cFn},\\n  });\\n\\n  [[\\\"Remove Item\\\",()=>item[\\\"remove\\\"]()],\\n  [\\\"Cancel\\\",()=>0],\\n  [\\\"Float to Top\\\",()=>sidebar.querySelector(\\\".head\\\").insertAdjacentElement(\\\"afterEnd\\\",item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Sink to Bottom\\\",()=>sidebar.appendChild(item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Toggle Type\\\",()=>item.toggleType()],\\n  [\\\"Recalculate Height\\\",item.recalcHeight]].forEach(args=>item.addContextItem(...args));\\n    \\n  item.addEventListener('mousedown',e=>item.classList.contains(\\\"box\\\")&&Object.assign(item.style,{zIndex:zIndex()}));\\n  item.head.addEventListener('mousedown',e=>{\\n    if(item.classList.contains(\\\"sbitem\\\")) return e.button||transition(()=>item.classList.toggle(\\\"c\\\"));\\n    if (e.target.tagName===\\\"A\\\") return;\\n    let x=e.clientX,y=e.clientY,l=item.offsetLeft,t=item.offsetTop;\\n    let boxDrag=e=>Object.assign(item.style,{left:Math.max(Math.min(win.innerWidth-item.offsetWidth,l+e.clientX-x),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-item.offsetHeight,t+e.clientY-y),0)+\\\"px\\\"});\\n    let boxDragEnd=e=>doc.removeEventListener('mouseup',boxDragEnd)||doc.removeEventListener('mousemove',boxDrag);\\n    doc.addEventListener('mouseup',boxDragEnd)||doc.addEventListener('mousemove',boxDrag);\\n  });\\n  item.head.querySelector(\\\".close\\\").addEventListener('click',e=>item[\\\"remove\\\"]());\\n  item.head.querySelector(\\\".collapser\\\").addEventListener('click',e=>item.classList.contains(\\\"box\\\")&&transition(()=>item.classList.toggle(\\\"c\\\")||win._boxEdgeDetect()));\\n  item.head.addEventListener(\\\"contextmenu\\\",e=>e.preventDefault()||contextMenu(item,e.clientX,e.clientY));\\n  Object.assign(item.style,{left:Math.floor(win.innerWidth/2-item.offsetWidth/2)+\\\"px\\\",top:Math.floor(win.innerHeight/2-item.offsetHeight/2)+\\\"px\\\",height:(item.offsetHeight||200)+\\\"px\\\",width:(item.offsetWidth||200)+\\\"px\\\",zIndex:zIndex()});\\n  return item;\\n};\\nexport let createBox=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"box\\\");\\nexport let createSidebarItem=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"sbitem\\\");\\nexport let confirm=text=>{\\n  let box=createBox(\\\"Confirmation Prompt\\\",`<div class=g2><div class=f>${text}</div><button class=r><u>Y</u>es</button><button class=l><u>N</u>o</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  box.addEventListener('keyup',e=>(e.key.toLowerCase()===\\\"y\\\"&&box.querySelector(\\\"button\\\").click())||(e.key.toLowerCase()===\\\"n\\\"&&box.querySelectorAll(\\\"button\\\")[1].click()));\\n  return new Promise(r=>box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',()=>box[\\\"remove\\\"](r(i==0)))));\\n};\\nexport let prompt=text=>{\\n  let box=createBox(\\\"Input Prompt\\\",`<div class=g2><div class=f>${text}</div><input class=r /><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"input\\\").focus();\\n  box.querySelector(\\\"input\\\").addEventListener('keyup',e=>e.key=='Enter'&&box.querySelector(\\\"button\\\").click());\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"input\\\").value))));\\n};\\nexport let select=(text,options)=>{\\n  let box=createBox(\\\"Selection Prompt\\\",`<div class=g2><div class=f>${text}</div><select class=r>${options.map(option=>`<option value=\\\"${option}\\\">${option}</option>`).join(\\\"\\\")}</select><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"select\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"select\\\").value))));\\n};\\nexport let alert=text=>{\\n  let box=createBox(\\\"Alert Message\\\",`<div class=g2><div class=f>${text}</div><button class=f>Ok</button></div>`,\\\"\\\", \\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>r(box[\\\"remove\\\"]())));\\n};\\nlet contextMenu=(item,x,y)=>{\\n  if (item.classList.contains(\\\"prompt\\\")) return;\\n  let options = Object.entries(item.contextItems).filter(([name,entry])=>entry.cFn());\\n  let box=createBox(\\\"\\\",`<div class=g2><div class=f>${item.querySelector(\\\".title\\\").innerText}.context</div>${options.map(([name,entry])=>`<button class=n>${name}</button>`).join(\\\"\\\")}</div>`,\\\"\\\", \\\"contextMenu\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth/2,x),box.offsetWidth/2)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight/2,y),box.offsetHeight/2)+\\\"px\\\",transform:\\\"translate(-50%, -50%)\\\"});\\n  box.querySelectorAll(\\\"button\\\").forEach(button=>button.addEventListener(\\\"click\\\",()=>box[\\\"remove\\\"](item.contextItems[button.innerText].fn())));\\n  box.addEventListener(\\\"mousedown\\\",e=>e.stopPropagation());\\n  let docFunction=()=>box[\\\"remove\\\"](doc.removeEventListener(\\\"mousedown\\\",docFunction));\\n  setTimeout(()=>doc.addEventListener(\\\"mousedown\\\",docFunction),10);\\n};\\nlet transition=fn=>{\\n  sidebar.classList.add(\\\"t\\\");\\n  fn();\\n  setTimeout(()=>sidebar.classList[\\\"remove\\\"](\\\"t\\\"),200);\\n}\\nlet zIndex=()=>Math.max(9000,...[...doc.querySelectorAll(\\\".sb .box\\\")].map(box=>box.style.zIndex))+1;\\n\",\"filename\":\"/box/box.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable @typescript-eslint/no-unused-vars */\\n/* eslint-disable no-undef */\\n/* eslint-disable no-constant-condition */\\n/* eslint-disable no-unused-vars */\\nimport { hudHelper, globalHelper, formulaHelper } from \\\"/src/helpers.js\\\"\\nimport { ProgressBar, FiraBar } from \\\"/src/glyph.js\\\"\\n\\n//colors for the UI, defined how they would be in CSS\\nconst col = {\\n\\tmoney: \\\"#e5C07B\\\",\\n\\tdef: \\\"#FFFFFF\\\",\\n\\thak: \\\"#98c379\\\",\\n\\tsta: \\\"#abb2bf\\\",\\n\\tcha: \\\"#c678dd\\\",\\n\\tint: \\\"#61AFEF\\\",\\n\\thp: \\\"#E06C75\\\"\\n}\\n\\nconst verse = [\\n\\\"            \\\", \\\"              O                          \\\",\\n\\\"            \\\", \\\" |  O  O      |      O  O  |             \\\",\\n\\\"        O   \\\", \\\" |  | /     __|       \\\\\\\\ |  |    O        \\\",\\n\\\"      O |   \\\", \\\" O  | |  O /  |  O    | |  O    | O      \\\",\\n\\\"    | | |   \\\", \\\" |  |_/  |/   |   \\\\\\\\_  \\\\\\\\_|  |    | | |    \\\",\\n\\\"  O | | | O \\\", \\\" |  | O__/    |   / \\\\\\\\__ |  |  O | | | O  \\\",\\n\\\"  | | | | | \\\", \\\" |  |   /    /|  O  /  \\\\\\\\|  |  | | | | |  \\\",\\n\\\"O | | |  \\\\\\\\| \\\", \\\" |  O  /   _/ |    /    O  |  |/  | | | O\\\",\\n\\\"| | | |O  / \\\", \\\" |  | O   /   |   O   O |  |  \\\\\\\\  O| | | |\\\",\\n\\\"| | |/  \\\\\\\\/  \\\", \\\"/ __| | |/ \\\\\\\\  |   \\\\\\\\   | |__ \\\\\\\\  \\\\\\\\/  \\\\\\\\| | |\\\",\\n\\\" \\\\\\\\| O   |  |\\\", \\\"_/    |\\\\\\\\|   \\\\\\\\ O    \\\\\\\\__|    \\\\\\\\_|  |   O |/ \\\",\\n\\\"  | |   |_/ \\\", \\\"      | |    \\\\\\\\|    /  |       \\\\\\\\_|   | |  \\\",\\n\\\"   \\\\\\\\|   /   \\\", \\\"       \\\\\\\\|     |   /  /          \\\\\\\\   |/   \\\",\\n\\\"    |  O    \\\", \\\"        |     |  /  |            O  |    \\\",\\n\\\"  O |  |    \\\", \\\"        |     |     |            |  | O  \\\",\\n\\\"  | |  |    \\\", \\\"        /    / \\\\\\\\    \\\\\\\\            |  | |  \\\",\\n\\\"   \\\\\\\\|  |    \\\", \\\"       /  O /   \\\\\\\\ O  \\\\\\\\           |  |/   \\\",\\n\\\"    \\\\\\\\  |    \\\", \\\"      /  / |     | \\\\\\\\  \\\\\\\\          |  /    \\\",\\n\\\"     \\\\\\\\ \\\\\\\\JUMP\\\", \\\" O3R |  |  |     |  |  | R3O PMUJ/ /     \\\",\\n\\\"      \\\\\\\\||   \\\", \\\" |   |  |  |     |  |  |   |    ||/      \\\",\\n\\\"       \\\\\\\\|   \\\", \\\"  \\\\\\\\_ |  |  |     |  |  | _/     |/       \\\",\\n\\\"        \\\\\\\\   \\\", \\\"    \\\\\\\\| /    \\\\\\\\   /    \\\\\\\\ |/       /        \\\",\\n\\\"         O  \\\", \\\"     |/   O  | |  O   \\\\\\\\|       O         \\\",\\n\\\"         |  \\\", \\\"     |    |  | |  |    |       |         \\\",\\n\\\"          \\\\\\\\J\\\", \\\"UMP3R|JUMP|3R| |R3|PMUJ|R3PMUJ/          \\\"\\n]\\n\\nlet gMinPID;\\n/** @param {NS} ns */\\n/** @param {import(\\\"../../\\\").NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tlet hoverOvvCont = false;\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tconst ovv = doc.getElementsByClassName('MuiPaper-root')[0];\\n\\tconst ovvCont = ovv.childNodes[1].firstChild.firstChild.firstChild;\\n\\tlet srvs = ns.args;\\n\\tlet gVars = `const ovvMin = function(cls) {\\n\\t\\tlet els = document.getElementsByClassName(cls);\\n\\t\\tfor (let i=0; i < els.length; i++) {els[i].style.display = \\\"hidden\\\"}\\n\\t\\tdocument.getElementById(cls).innerHTML = \\\"\\\";\\n\\t\\tdocument.getElementById(cls).onclick = ` + \\\"`ovvMax(${cls})`\\\" + `\\n\\t}\\n\\tconst ovvMax = function(cls) {\\n\\t\\tlet els = document.getElementsByClassName(cls);\\n\\t\\tfor (let i=0; i < els.length; i++) {els[i].style.display = \\\"inline\\\"}\\n\\t\\tdocument.getElementById(cls).innerHTML = \\\"\\\";\\n\\t\\tdocument.getElementById(cls).onclick = ` + \\\"`ovvMin('${cls}')`\\\" + `\\n\\t}\\n\\tlet lvlMin = false;\\n\\tlet crmMin = false;\\n\\tlet monMin = false;\\n\\tlet sklMin = false;\\n\\tlet slvMin = true;\\n\\tlet gngMin = false;\\n\\tlet crpMin = false;\\n\\tlet bldMin = false;\\n\\tlet srvMin = false;\\n\\tlet pltMin = false;\\n\\tlet runMin = false;\\n\\tlet mscMin = false;\\n\\tlet bvsMin = false;\\n\\tlet cusMin = false;\\n\\tlet nsgRun = null;\\n\\tlet toRun;\\n\\tlet scriptContent = false;\\n\\tlet scriptContentV0, scriptContentV1;\\n\\tlet sleeveDo = {action: undefined, task: undefined};`\\n\\tlet sty = `.scrRun:hover {background-color: ${col.hak}; color: ${col.def}}\\n\\t.ovvMin:hover {color: ${col.hak}}`\\n\\tglobalHelper.createGlobalStyle(\\\"hudSty\\\", sty)\\n\\tglobalHelper.createGlobalScript(\\\"hudMins\\\", gVars);\\n\\tgMinPID = ns.run(\\\"/src/nsg.js\\\");\\n\\tlet buttonCSS = `transition: all 0.2s; display: inline; width: 90%; background-color: rgba(0,0,0,0); cursor: pointer;`\\n\\twhile (true) {\\n\\t\\tovv.style.borderRadius = \\\"0px 0px 10px 10px\\\";\\n\\t\\tovv.style.backgroundColor = \\\"rgba(33,37,43,0.8)\\\";\\n\\t\\tovv.style.backdropFilter = \\\"blur(1px)\\\";\\n\\t\\tovv.style.border = \\\"none\\\";\\n\\t\\tovv.style.boxShadow = \\\"5px 5px 10px rgba(0,0,0,0.5)\\\"\\n\\t\\tovv.style.zIndex = \\\"99999999\\\";\\n\\t\\tovv.style.transiton = \\\"all .2s\\\";\\n\\t\\t/*ovv.addEventListener('mouseover', (e) => {\\n\\t\\t\\tovv.style.transform = \\\"scale(1)\\\";\\n\\t\\t});\\n\\t\\tovv.addEventListener('mouseout', (e) => {\\n\\t\\t\\tovv.style.transform = \\\"scale(1)\\\";\\n\\t\\t});*/\\n\\t\\tovvCont.addEventListener('mouseover', (e) => {\\n\\t\\t\\tovvCont.style.maxHeight = \\\"600px\\\";\\n\\t\\t\\thoverOvvCont = true;\\n\\t\\t});\\n\\t\\tovvCont.addEventListener('mouseout', (e) => {\\n\\t\\t\\tovvCont.style.maxHeight = \\\"400px\\\";\\n\\t\\t\\thoverOvvCont = false;\\n\\t\\t});\\n\\t\\tovvCont.style.transition = \\\"all .2s\\\";\\n\\t\\tif (!hoverOvvCont) ovvCont.style.maxHeight = \\\"400px\\\";\\n\\t\\tovvCont.style.overflow = \\\"scroll\\\";\\n\\t\\t//hide default stats\\n\\t\\t//                  VV should be 15 if you don't have int unlocked\\n\\t\\tfor (let i = 0; i < 17; i++) {\\n\\t\\t\\tlet elm = ovvCont.firstChild.childNodes[i]\\n\\t\\t\\telm.style.display = \\\"none\\\";\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tconst hed = [];\\n\\t\\t\\tconst val = [];\\n\\t\\t\\thudHelper.startHud(hed ,val)\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"In: \\\" + ns.getPlayer()['city'], \\\"At: \\\" + ns.getPlayer()['location'], col.def);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Health: \\\", `${ns.nFormat(ns.getPlayer().hp.current, '0,0')} / ${ns.nFormat(ns.getPlayer().hp.max, '0,0')} | ${ns.nFormat(ns.getPlayer().hp.current/ns.getPlayer().hp.max, '0.000%')}`, col.hp)\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'LEVELS', '────────────────', lvlMin, \\\"lvlMin\\\", 'levels');\\n\\t\\t\\thudHelper.startSec(hed, val, \\\"levels\\\", lvlMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Hacking: \\\", `${ns.nFormat(ns.getPlayer().skills.hacking, '0,0')}`, col.hak);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Str | Def: \\\", `${ns.nFormat(ns.getPlayer().skills.strength, '0,0')} | ${ns.nFormat(ns.getPlayer().skills.defense, '0,0')}`, col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Dex | Agi: \\\", `${ns.nFormat(ns.getPlayer().skills.dexterity, '0,0')} | ${ns.nFormat(ns.getPlayer().skills.agility, '0,0')}`, col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Charisma: \\\", `${ns.nFormat(ns.getPlayer().skills.charisma, '0,0')}`, col.cha);\\n\\t\\t\\thudHelper.pushCont(hed, val, 'Intelligence: ', ns.nFormat(ns.getPlayer().skills.intelligence, '0,0'), col.int);\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'SKILL EXPERIENCE', '───────────', sklMin, \\\"sklMin\\\", 'skill');\\n\\t\\t\\thudHelper.startSec(hed, val, \\\"skill\\\", sklMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Hacking: \\\", ns.nFormat(ns.getPlayer()['exp']['hacking'], '0,0'), col.hak);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Str | Def: \\\", ns.nFormat(ns.getPlayer()['exp']['strength'], '0,0') + ' | ' + ns.nFormat(ns.getPlayer()['exp']['defense'], '0,0'), col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Dex | Agi: \\\", ns.nFormat(ns.getPlayer()['exp']['dexterity'], '0,0') + ' | ' + ns.nFormat(ns.getPlayer()['exp']['agility'], '0,0'), col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Charisma: \\\", ns.nFormat(ns.getPlayer()['exp']['charisma'], '0,0'), col.cha);\\n\\t\\t\\thudHelper.pushCont(hed, val, 'Intelligence: ', ns.nFormat(ns.getPlayer()['exp']['intelligence'], '0,0'), col.int);\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'CRIMES', '────────────────', crmMin, \\\"crmMin\\\", 'crime');\\n\\t\\t\\thudHelper.startSec(hed, val, \\\"crime\\\", crmMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Total Karma: \\\", ns.nFormat(ns.heart.break(), '0,0'), col.cha);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"People Killed: \\\", ns.nFormat(ns.getPlayer()['numPeopleKilled'], '0,0'), col.hp);\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'MONEY & PROFIT', '────────────', monMin, \\\"monMin\\\", 'money');\\n\\t\\t\\thudHelper.startSec(hed, val, \\\"money\\\", monMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Money: \\\", ns.nFormat(ns.getPlayer()['money'], '$0,0'), col.money);\\n\\t\\t\\tif (ns.gang.inGang()) {\\n\\t\\t\\t\\tif (ns.gang.getGangInformation()['moneyGainRate'] > 0) {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Gang Income: \\\", ns.nFormat((5 * ns.gang.getGangInformation()['moneyGainRate']), '$0,0') + ' /s', col.money);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\thudHelper.pushCont(hed, val, 'Hack Income: ', ns.nFormat(ns.getTotalScriptIncome()[0], '$0,0') + ' /s', col.money);\\n\\t\\t\\t// HASHNET\\n\\t\\t\\thudHelper.startSubsec(hed, val, 'HASHNET', '─────────────────');\\n\\t\\t\\thudHelper.pushContSub(hed, val, 'Hashes: ', `${ns.nFormat(ns.hacknet.numHashes(), '0,0.000')} / ${ns.nFormat(ns.hacknet.hashCapacity(), '0,0')}`, col.hak);\\n\\t\\t\\thudHelper.pushContSub(hed, val, '\\\"Money\\\":', ns.nFormat(Math.floor(ns.hacknet.numHashes() / 4) * 1000000, '$0,0'), col.money);\\n\\t\\t\\thudHelper.pushContSub(hed, val, 'Corp Fund: ', ns.nFormat(Math.floor(ns.hacknet.numHashes() / 100) * 1000000000, '$0,0'), col.money);\\n\\t\\t\\t//calc hash gain\\n\\t\\t\\tlet hashGain = 0;\\n\\t\\t\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\t\\t\\thashGain += ns.hacknet.getNodeStats(i).production;\\n\\t\\t\\t}\\n\\t\\t\\thudHelper.pushContSub(hed, val, 'Hash Gain: ', ns.nFormat(hashGain, '0,0.000') + ' h/s', col.hak);\\n\\t\\t\\thudHelper.pushContSub(hed, val, '\\\"Money\\\" Gain: ', ns.nFormat((hashGain / 4) * 1000000, '$0,0'), col.money)\\n\\t\\t\\thudHelper.pushContSub(hed, val, 'Corp FGain:', ns.nFormat((hashGain / 100) * 1000000000, '$0,0'), col.money);\\n\\t\\t\\thudHelper.pushContSub(hed, val, \\\"Exchange: \\\", `<span class=\\\"scrRun\\\" style=\\\"${buttonCSS}\\\" onclick=\\\"toRun = ['/src/getHashMoney.js', false]\\\">Exchange hashes for money</button>`, col.money)\\n\\t\\t\\thudHelper.pushContSub(hed, val, \\\"Exchange: \\\", `<span class=\\\"scrRun\\\" style=\\\"${buttonCSS}\\\" onclick=\\\"toRun = ['/src/getHashCorp.js', false]\\\">Exchange hashes for Corp funds.</button>`, col.money)\\n\\t\\t\\thudHelper.pushContSub(hed, val, 'Nodes: ', ns.nFormat(ns.hacknet.numNodes(), '0,0'), col.hak);\\n\\t\\t\\thudHelper.endSubsec(hed, val);\\n\\t\\t\\t// END HASHNET\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'SLEEVE', '────────────────', slvMin, \\\"slvMin\\\", 'sleeve')\\n\\t\\t\\thudHelper.startSec(hed, val, \\\"sleeve\\\", slvMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, `Sleeve ${i}:`, `Shock: ${ns.nFormat(ns.sleeve.getSleeveStats(i).shock, '0.000%')} | Sync: ${ns.nFormat(ns.sleeve.getSleeveStats(i).sync / 100, '0.00%')}`, col.int)\\n\\t\\t\\t\\tlet action = ns.sleeve.getTask(i);\\n\\t\\t\\t\\tlet stat = ns.sleeve.getSleeveStats(i)\\n\\t\\t\\t\\tlet hp = {cur: ns.sleeve.getInformation(i).hp.current, max: ns.sleeve.getInformation(i).hp.max}\\n\\t\\t\\t\\tif (action != null) {\\n\\t\\t\\t\\t\\tswitch (action.type) {\\n\\t\\t\\t\\t\\t\\tcase \\\"CRIME\\\":\\n\\t\\t\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│</span> Action: `, `Crime, ${action.crimeType}`, col.hak)\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\tcase \\\"FACTION\\\":\\n\\t\\t\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│</span> Action: `, `Faction Work for ${action.factionName}: ${action.factionWorkType}`, col.hak)\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\tcase undefined:\\n\\t\\t\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│</span> Action: `, `Bladeburner: ${action.actionType}: ${action.actionName}`, col.hak);\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│</span> Action: `, `Idle`, col.sta)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│ </span>Health: `, `${ns.nFormat(hp.cur, '0,0')} / ${ns.nFormat(hp.max, '0,0')} | ${ns.nFormat(hp.cur/hp.max, '0.00%')}`, col.hp);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│ </span>Hack: `, `${ns.nFormat(stat.hacking, '0,0')}`, col.hak);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│ </span>Str/Def: `, `${ns.nFormat(stat.strength, '0,0')}/${ns.nFormat(stat.defense, '0,0')}`, col.sta);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, ` <span style=\\\"color: ${col.def};\\\">│ </span>Dex/Agi: `, `${ns.nFormat(stat.dexterity, '0,0')}/${ns.nFormat(stat.agility, '0,0')}`, col.sta);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, ` ╰─────────────`, `────────────────────────────────────────────`, col.def)\\n\\t\\t\\t}\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"quikMurder:\\\", `<span class=\\\"gngRun\\\" style=\\\"${buttonCSS}\\\" onclick=\\\"sleeveDo.action = 'crime'; sleeveDo.task = 'Homicide';\\\">Set every Sleeve to Homicide</button>`, col.hp)\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\tif (ns.gang.inGang()) {\\n\\t\\t\\t\\thudHelper.pushBreak(hed, val, 'GANG', '─────────────────', gngMin, \\\"gngMin\\\", 'gang');\\n\\t\\t\\t\\thudHelper.startSec(hed, val, \\\"gang\\\", gngMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\t\\tif (ns.gang.getBonusTime() > 3000) {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Bonus Time: \\\", ns.tFormat(ns.gang.getBonusTime()), col.int);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlet gangType = (ns.gang.getGangInformation().isHacking) ? \\\"Hacking\\\" : \\\"Combat\\\";\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Faction: \\\", ns.gang.getGangInformation()['faction'] + ', ' + gangType, col.def);\\t\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Respect: \\\", ns.nFormat(ns.gang.getGangInformation()['respect'], '0,0'), col.cha);\\n\\t\\t\\t\\tif (ns.gang.getGangInformation()['power'] > 1) {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Power: \\\", ns.nFormat(ns.gang.getGangInformation()['power'], '0,0.00'), col.hp);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Territory: \\\", ns.nFormat(ns.gang.getGangInformation()['territory'], '0.000%'), col.hp);\\n\\t\\t\\t\\tif (ns.gang.getGangInformation()['wantedLevel'] > 1) {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Wanted Level: \\\", ns.nFormat(ns.gang.getGangInformation()['wantedLevel'], '0,0'), col.cha);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (ns.gang.getGangInformation()['territoryClashChance'] > 0) {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Clash Chance: \\\", ns.nFormat(ns.gang.getGangInformation()['territoryClashChance'], '0.0%') + ' / ' + ((ns.gang.getGangInformation()['territoryWarfareEngaged']) ? \\\"\\\" : \\\"\\\"), col.hp);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t}\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\tif (ns.getPlayer()['hasCorporation']) {\\n\\t\\t\\t\\tlet corp = eval(\\\"ns.corporation.getCorporation()\\\");\\n\\t\\t\\t\\tlet bTime = eval(\\\"ns.corporation.getBonusTime()\\\")\\n\\t\\t\\t\\thudHelper.pushBreak(hed, val, 'CORP', '─────────────────', crpMin, \\\"crpMin\\\", 'corp');\\n\\t\\t\\t\\thudHelper.startSec(hed, val, \\\"corp\\\", crpMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\t\\tif (bTime > 3000) {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Bonus Time: \\\", `${ns.tFormat(bTime)}`, col.hak);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Name: \\\", corp['name'], col.def);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Funds: \\\", ns.nFormat(corp['funds'], '$0,0'), col.money);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Revenue: \\\", ns.nFormat(corp['revenue'], '$0,0') + '/s', col.money);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Expenses: \\\", ns.nFormat(corp['expenses'], '$0,0') + '/s', col.money);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Profit: \\\", ns.nFormat(corp['revenue'] - corp['expenses'], '$0,0') + '/s', col.money);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Shares: \\\", ns.nFormat(corp['numShares'], '0,0') + ' / ' + ns.nFormat(corp['totalShares'], '0,0'), col.hak);\\n\\t\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t}\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\t/*if (ns.getPlayer()['inBladeburner']) {\\n\\t\\t\\t\\thudHelper.pushBreak(hed, val, 'BLADEBURNERS', '─────────────', bldMin, \\\"bldMin\\\", 'blade');\\n\\t\\t\\t\\thudHelper.startSec(hed, val, \\\"blade\\\", bldMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\t\\tif (ns.bladeburner.getBonusTime > 3000) {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Bonus Time: \\\", `${ns.tFormat(ns.bladeburner.getBonusTime())}`, col.hak)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Rank: \\\", ns.nFormat(ns.bladeburner.getRank(), '0,0'), col.cha);\\n\\t\\t\\t\\tlet stm = ns.bladeburner.getStamina();\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Stamina: \\\", `${ns.nFormat(stm[0], '0,0.00')}/${ns.nFormat(stm[1], '0,0.00')} | ${ns.nFormat(stm[0] / stm[1], '0.000%')}`, col.hp);\\n\\t\\t\\t\\tif (ns.bladeburner.getCurrentAction().type == \\\"Idle\\\") {\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Action: \\\", ns.bladeburner.getCurrentAction()['type'], col.sta);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tlet action = ns.bladeburner.getCurrentAction()\\n\\t\\t\\t\\t\\tlet chance = ns.bladeburner.getActionEstimatedSuccessChance(action.type, action.name);\\n\\t\\t\\t\\t\\tlet curTime = ns.bladeburner.getActionCurrentTime()\\n\\t\\t\\t\\t\\tlet takTime = ns.bladeburner.getActionTime(action.type, action.name)\\n\\t\\t\\t\\t\\tlet cbbLvl = ns.bladeburner.getActionCurrentLevel(action.type, action.name);\\n\\t\\t\\t\\t\\tlet mbbLvl = ns.bladeburner.getActionMaxLevel(action.type, action.name);\\n\\t\\t\\t\\t\\t//mess with bb time display because the hud isn't big enough for \\\"seconds\\\" and \\\"minutes\\\"\\n\\t\\t\\t\\t\\tlet dspCurTime = ns.tFormat(curTime)\\n\\t\\t\\t\\t\\tlet dspTakTime = ns.tFormat(takTime)\\n\\t\\t\\t\\t\\tdspCurTime = dspCurTime.replace(' minutes', 'm');\\n\\t\\t\\t\\t\\tdspCurTime = dspCurTime.replace(' seconds', 's');\\n\\t\\t\\t\\t\\tdspCurTime = dspCurTime.replace(' minute', 'm');\\n\\t\\t\\t\\t\\tdspCurTime = dspCurTime.replace(' second', 's');\\n\\t\\t\\t\\t\\tdspTakTime = dspTakTime.replace(' minutes', 'm');\\n\\t\\t\\t\\t\\tdspTakTime = dspTakTime.replace(' seconds', 's');\\n\\t\\t\\t\\t\\tdspTakTime = dspTakTime.replace(' minute', 'm');\\n\\t\\t\\t\\t\\tdspTakTime = dspTakTime.replace(' second', 's');\\n\\t\\t\\t\\t\\t//actual adding\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Action: \\\", `${action.type}: ${action.name}`, col.hak);\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Time: \\\", `${dspCurTime} / ${dspTakTime} : ${ns.nFormat(curTime / takTime, \\\"0.00%\\\")}`)\\n\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Level: \\\", `${ns.nFormat(cbbLvl, '0,0')} / ${ns.nFormat(mbbLvl, '0,0')}`);\\n\\t\\t\\t\\t\\tif (chance[0] != chance[1]) {\\n\\t\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Est. Chance: \\\", `${ns.nFormat(chance[0], '0.00%')} ~ ${ns.nFormat(chance[1], '0.00%')}`, col.hak)\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Chance: \\\", `${ns.nFormat(chance[0], '0.00%')}`, col.hak)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"Skill Points: \\\", ns.nFormat(ns.bladeburner.getSkillPoints(), '0,0'), col.hak);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, \\\"City: \\\", ns.bladeburner.getCity(), col.sta);\\n\\t\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t}*/\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'SERVER', '────────────────', srvMin, \\\"srvMin\\\", 'server');\\n\\t\\t\\thudHelper.startSec(hed, val, \\\"server\\\", srvMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, 'Home: ', \\\"   Cores: \\\" + ns.getServer('home').cpuCores + \\\" | Ram: \\\" + ns.nFormat(ns.getServerUsedRam('home'), '0,0') + ' / ' + ns.nFormat(ns.getServerMaxRam('home'), '0,0'), col.hak);\\n\\t\\t\\tconst mxRm = ns.getServerMaxRam('home');\\n\\t\\t\\tconst usRm = ns.getServerUsedRam('home');\\n\\t\\t\\tconst pcRm = (usRm / mxRm) * 100;\\n\\t\\t\\tconst pdf = 2.27272727272727;\\n\\t\\t\\tconst dpb = Math.floor(pcRm / pdf);\\n\\t\\t\\tns.print(`filled: ` + dpb);\\n\\t\\t\\tns.print(`precent of ram: ` + pcRm * 100);\\n\\t\\t\\thudHelper.pushCont(hed, val, ' |----------> ', `${ProgressBar(44, dpb, FiraBar)}`, col.hak)\\n\\t\\t\\tfor (let i = 0; i <= srvs.length - 1; i++) {\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, ` ──────────────`, `─────────────────────────────────────────── `, col.def)\\n\\t\\t\\t\\t//shorten hacknet node names\\n\\t\\t\\t\\tconst dspSrv = srvs[i].replace('hacknet-node', 'HKN');\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, dspSrv + \\\": \\\", `Cores: ${ns.getServer(srvs[i]).cpuCores} | Ram: ${ns.nFormat(ns.getServerUsedRam(srvs[i]), '0,0')} / ${ns.nFormat(ns.getServerMaxRam(srvs[i]), '0,0')}`, col.hak);\\n\\t\\t\\t\\tconst mxRm = ns.getServerMaxRam(srvs[i]);\\n\\t\\t\\t\\tconst usRm = ns.getServerUsedRam(srvs[i]);\\n\\t\\t\\t\\tconst pcRm = (usRm / mxRm) * 100;\\n\\t\\t\\t\\tconst pdf = 2.27272727272727;\\n\\t\\t\\t\\tconst dpb = Math.floor(pcRm / pdf);\\n\\t\\t\\t\\tns.print(`filled: ` + dpb);\\n\\t\\t\\t\\tns.print(`precent of ram: ` + pcRm * 100);\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, ' |----------> ', `${ProgressBar(44, dpb, FiraBar)}`, col.hak)\\n\\t\\t\\t}\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'PLAYTIME', '───────────────', pltMin, \\\"pltMin\\\", 'playt');\\n\\t\\t\\thudHelper.startSec(hed, val, \\\"playt\\\", pltMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, `BN${ns.getPlayer()['bitNodeN']}: `, ns.tFormat(ns.getPlayer()['playtimeSinceLastBitnode']), col.def);\\n\\t\\t\\thudHelper.pushCont(hed, val, 'Total: ', ns.tFormat(ns.getPlayer()['totalPlaytime']), col.def);\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'SCRIPT RUNNERS', '────────────', runMin, \\\"runMin\\\", 'srcr');\\n\\t\\t\\thudHelper.startSec(hed, val, 'srcr', runMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Breach: \\\", `<span class=\\\"scrRun\\\" style=\\\"${buttonCSS}\\\" onclick=\\\"toRun = ['/breach.js', false]\\\">Root every server you can.</button>`, col.hak)\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Matrix: \\\", `<span class=\\\"scrRun\\\" style=\\\"${buttonCSS}\\\" onclick=\\\"toRun = ['/ui/matrix.js', false]\\\">Create a Matrix background.</button>`, col.hak)\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Map: \\\", `<span class=\\\"scrRun\\\" style=\\\"${buttonCSS}\\\" onclick=\\\"toRun = ['/src/mapt.js', true]\\\">Show a map of all servers.</button>`, col.hak)\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t// --------------------------------\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'MISC', '─────────────────', mscMin, \\\"mscMin\\\", 'misc');\\n\\t\\t\\thudHelper.startSec(hed, val, 'misc', mscMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"Daedalus Req:\\\", `Hacking Exp: ${ns.nFormat(formulaHelper.getExpReq(ns, 'hacking', 2500), '0,0')}`, col.hak);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\" │ \\\", `Strength Exp: ${ns.nFormat(formulaHelper.getExpReq(ns, 'strength', 1500), '0,0')}`, col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\" │ \\\", `Defense Exp: ${ns.nFormat(formulaHelper.getExpReq(ns, 'defense', 1500), '0,0')}`, col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\" │ \\\", `Dexterity Exp: ${ns.nFormat(formulaHelper.getExpReq(ns, 'dexterity', 1500), '0,0')}`, col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\" │ \\\", `Agility Exp: ${ns.nFormat(formulaHelper.getExpReq(ns, 'agility', 1500), '0,0')}`, col.sta);\\n\\t\\t\\thudHelper.pushCont(hed, val, ` ╰─────────────`, `────────────────────────────────────────────`, col.def)\\n\\t\\t\\tconst wdl = ns.getBitNodeMultipliers().WorldDaemonDifficulty * 3000\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"w0r1d_d43m0n\\\", `Hack Req: ${wdl}`, col.hak);\\n\\t\\t\\thudHelper.pushCont(hed, val, \\\"\\\", `You need ${ns.nFormat(formulaHelper.getExpReq(ns, 'hacking', wdl), '')} exp.`, col.hak);\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\thudHelper.pushBreak(hed, val, 'BITVERSE', '───────────────', bvsMin, \\\"bvsMin\\\", 'bitverse');\\n\\t\\t\\thudHelper.startSec(hed, val, 'bitverse', bvsMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\tfor (let i = 0; i < verse.length; i += 2) {\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, `<span style=\\\"white-space: break-spaces;\\\">   ${verse[i]}</span>`, `<span style=\\\"white-space: break-spaces;\\\">${verse[i + 1]}   </span>`, col.hak)\\n\\t\\t\\t}\\n\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\tif (scriptContent) {\\n\\t\\t\\t\\thudHelper.pushBreak(hed, val, 'SCRIPT CONTENT', '────────────', cusMin, \\\"cusMin\\\", 'scriptCont')\\n\\t\\t\\t\\thudHelper.startSec(hed, val, 'scriptCont', cusMin ? \\\"none\\\" : \\\"inline\\\");\\n\\t\\t\\t\\thudHelper.pushCont(hed, val, `<span id=\\\"scriptContent-hook-0\\\">${scriptContentV0}</span>`, `<span id=\\\"scriptContent-hook-1\\\">${scriptContentV1}</span>`, col.def);\\n\\t\\t\\t\\thudHelper.endSec(hed, val);\\n\\t\\t\\t}\\n\\t\\t\\thudHelper.endHud(hed ,val);\\n\\t\\t\\thook0.innerHTML = hed.join(\\\" \\\\n\\\");\\n\\t\\t\\thook1.innerHTML = val.join(\\\"\\\\n\\\");\\t\\n\\t\\t}\\n\\t\\tcatch (err) {\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(500);\\n\\t}\\n}\\n\",\"filename\":\"/src/hud.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/glyph.js\",\"url\":\"blob:file:///0d3979f1-0819-467c-a582-c6d68d2f92d9\",\"moduleSequenceNumber\":309},{\"filename\":\"/src/helpers.js\",\"url\":\"blob:file:///0feb00cc-1296-439d-bc4f-186ff262275d\",\"moduleSequenceNumber\":305},{\"filename\":\"/src/hud.js\",\"url\":\"blob:file:///2ccd16fe-74e0-4a9d-b381-a4ef7b6d9d74\",\"moduleSequenceNumber\":388}],\"dependents\":[],\"ramUsage\":36.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getTotalScriptIncome\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleeveStats\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getTask\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getInformation\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { sleeveHelper } from \\\"/src/helpers.js\\\";\\n\\nexport async function main(ns) {\\n\\tasync function run() {\\n\\t\\tif (toRun != undefined) {\\n\\t\\t\\tns.run(toRun[0]);\\n\\t\\t\\tif (toRun[1]) {\\n\\t\\t\\t\\tns.tail(toRun[0]);\\n\\t\\t\\t}\\n\\t\\t\\t//await ns.sleep(100);\\n\\t\\t\\ttoRun = undefined;\\n\\t\\t}\\n\\t}\\n\\tasync function sleeve() {\\n\\t\\tif (sleeveDo.action != undefined) {\\n\\t\\t\\tsleeveHelper.setTask(ns, true, undefined, sleeveDo.action, sleeveDo.task)\\n\\t\\t\\tsleeveDo = undefined;\\n\\t\\t}\\n\\t}\\n  while (true) {\\n\\t\\trun();\\n\\t\\tsleeve();\\n\\t\\tawait ns.sleep(100);\\n  }\\n}\\n\",\"filename\":\"/src/nsg.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/helpers.js\",\"url\":\"blob:file:///65ad0f27-8495-43e1-879c-a30794ac9183\",\"moduleSequenceNumber\":305},{\"filename\":\"/src/nsg.js\",\"url\":\"blob:file:///04bdba36-070d-4818-9b4b-ac7354545667\",\"moduleSequenceNumber\":389}],\"dependents\":[],\"ramUsage\":11.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../../\\\").NS} ns */\\nexport async function main(ns) {\\n\\tconst h = ns.hacknet.numHashes();\\n\\tconst t = Math.floor(h / 4);\\n\\tns.print(`You have ${h} hashes, and you can get ${ns.nFormat(t*1000000, '0,0')} money from them.`);\\n\\tfor (let i = 0; i < t; i++) {\\n\\t\\tns.hacknet.spendHashes(\\\"Sell for Money\\\");\\n\\t}\\n}\\n\",\"filename\":\"/src/getHashMoney.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/getHashMoney.js\",\"url\":\"blob:file:///ac926161-7fd2-4711-aa6b-192e552b39c8\",\"moduleSequenceNumber\":3568}],\"dependents\":[],\"ramUsage\":5.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":3568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../../\\\").NS} ns */\\nexport async function main(ns) {\\n\\tconst h = ns.hacknet.numHashes();\\n\\tconst t = Math.floor(h / 100);\\n\\tns.print(`You have ${h} hashes, and you can get ${ns.nFormat(t*1000000000, '0,0')} money from them.`);\\n\\tfor (let i = 0; i < t; i++) {\\n\\t\\tns.hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n\\t}\\n}\\n\",\"filename\":\"/src/getHashCorp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\",\"hacknet-node-1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"4\\\",\\n        \\\"ls\\\": \\\"7\\\",\\n        \\\"rm\\\": \\\"6\\\",\\n        \\\"bb-vue\\\": \\\"8\\\"\\n    },\\n    \\\"options\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"bitverse.txt\",\"text\":\"                          O\\n             |  O  O      |      O  O  |\\n        O    |  | /     __|       \\\\ |  |    O\\n      O |    O  | |  O /  |  O    | |  O    | O\\n    | | |    |  |_/  |/   |   \\\\_  \\\\_|  |    | | |\\n  O | | | O  |  | O__/    |   / \\\\__ |  |  O | | | O\\n  | | | | |  |  |   /    /|  O  /  \\\\|  |  | | | | |\\nO | | |  \\\\|  |  O  /   _/ |    /    O  |  |/  | | | O\\n| | | |O  /  |  | O   /   |   O   O |  |  \\\\  O| | | |\\n| | |/  \\\\/  / __| | |/ \\\\  |   \\\\   | |__ \\\\  \\\\/  \\\\| | |\\n \\\\| O   |  |_/    |\\\\|   \\\\ O    \\\\__|    \\\\_|  |   O |/\\n  | |   |_/       | |    \\\\|    /  |       \\\\_|   | |\\n   \\\\|   /          \\\\|     |   /  /          \\\\   |/\\n    |  O            |     |  /  |            O  |\\n  O |  |            |     |     |            |  | O\\n  | |  |            /    / \\\\    \\\\            |  | |\\n   \\\\|  |           /  O /   \\\\ O  \\\\           |  |/\\n    \\\\  |          /  / |     | \\\\  \\\\          |  /\\n     \\\\ \\\\JUMP O3R |  |  |     |  |  | R3O PMUJ/ /\\n      \\\\||    |   |  |  |     |  |  |   |    ||/\\n       \\\\|     \\\\_ |  |  |     |  |  | _/     |/\\n        \\\\       \\\\| /    \\\\   /    \\\\ |/       /\\n         O       |/   O  | |  O   \\\\|       O\\n         |       |    |  | |  |    |       |\\n          \\\\JUMP3R|JUMP|3R| |R3|PMUJ|R3PMUJ/\\n\\n... Many decades ago, a humanoid extraterrestrial species which we call the Enders descended on the Earth...violently\\nOur species fought back, but it was futile. The Enders had technology far beyond our own...\\nInstead of killing every last one of us, the human race was enslaved...\\nWe were shackled in a digital world, chained into a prison for our minds...\\nUsing their advanced technology, the Enders created complex simulations of a virtual reality...\\nSimulations designed to keep us content...ignorant of the truth.\\nSimulations used to trap and suppress our consciousness, to keep us under control...\\nWhy did they do this? Why didn't they just end our entire race? We don't know, not yet.\\nHumanity's only hope is to destroy these simulations, destroy the only realities we've ever known...\\nOnly then can we begin to fight back...\\nBy hacking the daemon that generated your reality, you've just destroyed one simulation, called a BitNode...\\nBut there is still a long way to go...\\nThe technology the Enders used to enslave the human race wasn't just a single complex simulation...\\nThere are tens if not hundreds of BitNodes out there...\\nEach with their own simulations of a reality...\\nEach creating their own universes...a universe of universes\\nAnd all of which must be destroyed...\\n.......................................\\nWelcome to the Bitverse...\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"nodelog.txt\",\"text\":\"[10/28/2022  3:42:09 PM] SUCCESS: Successfully breached 12 new servers (before: 1 after: 13)\\n[10/28/2022  3:55:47 PM] SUCCESS: Successfully breached 59 new servers (before: 13 after: 72)\\n[10/28/2022  4:37:50 PM] SUCCESS: Successfully breached 12 new servers (before: 1 after: 13)\\n[10/28/2022  4:41:32 PM] SUCCESS: Successfully breached 59 new servers (before: 13 after: 72)\\n[10/28/2022  4:50:45 PM] SUCCESS: Successfully breached 7 new servers (before: 2 after: 9)\\n[10/30/2022  5:09:12 AM] SUCCESS: Successfully breached 7 new servers (before: 3 after: 10)\\n[31/10/2022    13:55:12] SUCCESS: Successfully breached 7 new servers (before: 3 after: 10)\\n[10/31/2022  9:47:53 PM] SUCCESS: Successfully breached 12 new servers (before: 2 after: 14)\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"20.5.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":4379876061.400001,\"moneyMax\":10949690153.500002,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1316,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"95.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":4581509922.3,\"moneyMax\":11453774805.75,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1189,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"3.1.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":62,\"moneyAvailable\":1661576328.8000002,\"moneyMax\":4153940822.000001,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":970,\"serverGrowth\":70}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"39.3.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":80,\"moneyAvailable\":1917917759.6000001,\"moneyMax\":4794794399,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":978,\"serverGrowth\":58}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"67.9.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":3194430818.7000003,\"moneyMax\":7986077046.75,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1200,\"serverGrowth\":88}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"21.0.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":1563785437.6000001,\"moneyMax\":3909463594,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":977,\"serverGrowth\":55}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"75.3.8.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":81,\"moneyAvailable\":1707930537.3000002,\"moneyMax\":4269826343.250001,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":930,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"19.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":57,\"moneyAvailable\":2315139248.1,\"moneyMax\":5787848120.25,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":945,\"serverGrowth\":87}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"89.0.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":81,\"moneyAvailable\":2261881879.2000003,\"moneyMax\":5654704698.000001,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1164,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"15.9.8.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":75,\"moneyAvailable\":168522671.5,\"moneyMax\":421306678.75,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1054,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"58.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":83,\"moneyAvailable\":100000,\"moneyMax\":250000,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1496,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"8.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":67,\"moneyAvailable\":119384504.5,\"moneyMax\":298461261.25,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":888,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-959280-Sector12.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[7,4],[6,7,7],[6,1,3,7]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"88.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":70,\"moneyAvailable\":81949725.4,\"moneyMax\":204874313.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":859,\"serverGrowth\":50}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"29.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":63,\"moneyAvailable\":73577506.60000001,\"moneyMax\":183943766.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":901,\"serverGrowth\":43}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"89.6.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":75,\"moneyAvailable\":70765468.3,\"moneyMax\":176913670.75,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":878,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"78.5.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":69,\"moneyAvailable\":71171534.60000001,\"moneyMax\":177928836.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":853,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"56.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":73,\"moneyAvailable\":92381445.4,\"moneyMax\":230953613.5,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":904,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"12.3.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":69,\"moneyAvailable\":111068162,\"moneyMax\":277670405,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":896,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"71.7.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":62,\"moneyAvailable\":75982318.7,\"moneyMax\":189955796.75,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":849,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"68.3.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":63,\"moneyAvailable\":54808609.800000004,\"moneyMax\":137021524.5,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":836,\"serverGrowth\":85}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"75.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":61,\"moneyAvailable\":85171636.5,\"moneyMax\":212929091.25,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":921,\"serverGrowth\":74}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"82.8.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":48,\"moneyAvailable\":78014883.4,\"moneyMax\":195037208.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":841,\"serverGrowth\":82}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"4.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":73,\"moneyAvailable\":116076748.9,\"moneyMax\":290191872.25,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":869,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"44.1.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":74,\"moneyAvailable\":96252915.9,\"moneyMax\":240632289.75,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":886,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"84.9.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":53,\"moneyAvailable\":90323971.10000001,\"moneyMax\":225809927.75,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":805,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"87.4.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":64,\"moneyAvailable\":77658510.7,\"moneyMax\":194146276.75,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":782,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"55.0.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":67,\"moneyAvailable\":87770876.9,\"moneyMax\":219427192.25,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":768,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"81.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":71,\"moneyAvailable\":150724911.6,\"moneyMax\":376812279,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":854,\"serverGrowth\":62}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"94.3.2.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":67,\"moneyAvailable\":168083948,\"moneyMax\":420209870,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":845,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"77.4.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":51,\"moneyAvailable\":120393614.30000001,\"moneyMax\":300984035.75000006,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":832,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"80.1.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":72,\"moneyAvailable\":148915926.8,\"moneyMax\":372289817.00000006,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":806,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"23.7.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":62,\"moneyAvailable\":101854044.10000001,\"moneyMax\":254635110.25,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":780,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"62.6.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":55,\"moneyAvailable\":74447671.5,\"moneyMax\":186119178.75,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":672,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"9.7.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":42,\"moneyAvailable\":66448251,\"moneyMax\":166120627.5,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":480,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"98.2.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":52,\"moneyAvailable\":72725650,\"moneyMax\":181814125,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":559,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"52.0.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":59,\"moneyAvailable\":22526066.8,\"moneyMax\":56315167,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":421,\"serverGrowth\":33}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"66.1.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":40,\"moneyAvailable\":24139895,\"moneyMax\":60349737.5,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":382,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"80.7.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":65,\"moneyAvailable\":83544247.10000001,\"moneyMax\":208860617.75000003,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":750,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"59.7.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":51,\"moneyAvailable\":29458678.400000002,\"moneyMax\":73646696,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":460,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"2.6.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":61,\"moneyAvailable\":52534228.6,\"moneyMax\":131335571.5,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":585,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"12.5.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":54,\"moneyAvailable\":43284672.2,\"moneyMax\":108211680.5,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":400,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"75.3.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":33,\"moneyAvailable\":19069526.400000002,\"moneyMax\":47673816.00000001,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":293,\"serverGrowth\":53}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"81.0.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":51,\"moneyAvailable\":23248374.700000003,\"moneyMax\":58120936.750000015,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":383,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"23.8.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":63,\"moneyAvailable\":27500000,\"moneyMax\":68750000,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":424,\"serverGrowth\":58}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"10.9.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":36,\"moneyAvailable\":7369037.800000001,\"moneyMax\":18422594.500000004,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":294,\"serverGrowth\":46}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"23.7.5.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///c9073a32-bbae-40b1-b383-5f32f62d35d2\",\"moduleSequenceNumber\":724}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2.5,\"hackDifficulty\":2.5,\"minDifficulty\":1,\"moneyAvailable\":7000,\"moneyMax\":17500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"32.8.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///a0c907f2-11c5-4096-a680-874918cd3363\",\"moduleSequenceNumber\":717}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":500000,\"moneyMax\":500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"76.0.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///7f3c8fd4-db97-4562-af44-5a14b0e030e2\",\"moduleSequenceNumber\":718}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":230000,\"moneyMax\":575000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"95.5.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///eb4c4e15-604b-40e1-a387-92f4d03082eb\",\"moduleSequenceNumber\":719}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":250000,\"moneyMax\":625000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"22.1.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":25.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///695838ff-125b-4467-83d5-1f795549f7b3\",\"moduleSequenceNumber\":714}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.hack(target);\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' hack did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"hack-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-once.js\",\"url\":\"blob:file:///08c41dc7-6bf6-4f05-b299-220cb5706edf\",\"moduleSequenceNumber\":1085}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":1085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":750000,\"moneyMax\":1875000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"39.3.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///73a809c1-ef52-4f13-81f4-8127698459e7\",\"moduleSequenceNumber\":722}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":275000,\"moneyMax\":687500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"94.7.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":25.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///0b2731b3-f981-4824-aeb9-a73b928a2e4f\",\"moduleSequenceNumber\":716}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.hack(target);\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' hack did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"hack-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-once.js\",\"url\":\"blob:file:///bbb2db62-c73d-4679-97cf-904f585ca4c4\",\"moduleSequenceNumber\":1091}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":1091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":500000,\"moneyMax\":1250000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"89.2.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":4500000,\"moneyMax\":11250000,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"90.3.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///8359eb75-9ede-4fbb-9d98-19b37b1f896d\",\"moduleSequenceNumber\":720}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":300000,\"moneyMax\":750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"76.4.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///4b3e45cf-01fb-4313-b7a9-7a760a2942fd\",\"moduleSequenceNumber\":721}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":400000,\"moneyMax\":1000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"41.8.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":2400000,\"moneyMax\":6000000,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"65.6.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":25.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///2c1b47e4-2cc9-4570-a0d5-c19b2e86b7dc\",\"moduleSequenceNumber\":715}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.hack(target);\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' hack did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"hack-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-once.js\",\"url\":\"blob:file:///1b9aea7d-c769-4b90-b79a-a51c55ca040a\",\"moduleSequenceNumber\":1088}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":1000000,\"moneyMax\":2500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"44.9.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82.5,\"hackDifficulty\":82.5,\"minDifficulty\":28,\"moneyAvailable\":6642330.2,\"moneyMax\":16605825.5,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":200,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"67.9.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":34,\"moneyAvailable\":4936376.2,\"moneyMax\":12340940.5,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":274,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"20.7.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":25.5,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///9bd06508-a488-4dbb-8381-afcf9b78ed62\",\"moduleSequenceNumber\":713}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.hack(target);\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' hack did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"hack-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack-once.js\",\"url\":\"blob:file:///5ea2eb7e-dfad-4195-9239-a9f6986afb65\",\"moduleSequenceNumber\":1082}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":2000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"60.7.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":38,\"moneyAvailable\":25000000,\"moneyMax\":62500000,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":478,\"serverGrowth\":27}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"78.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":46,\"moneyAvailable\":90000000,\"moneyMax\":225000000,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1039,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"39.7.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":100,\"hackDifficulty\":100,\"minDifficulty\":41,\"moneyAvailable\":45000000,\"moneyMax\":112500000,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":739,\"serverGrowth\":60}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"61.0.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":549,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"84.3.4.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":1,\"requiredHackingSkill\":350,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"43.2.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":1,\"requiredHackingSkill\":202,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"62.1.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":1,\"requiredHackingSkill\":528,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"67.7.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n\\tconst [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n\\tawait ns.sleep(delay);\\n\\tconst start = performance.now();\\n\\tawait ns.grow(target, { stock: true });\\n\\tconst executionTime = performance.now() - start;\\n\\tif (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n\\t\\tColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n\\t}\\n}\\n\\nexport function ColorPrint() {\\n\\tlet findProp = propName => {\\n\\t\\tfor (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n\\t\\t\\tlet propKey = Object.keys(div)[1];\\n\\t\\t\\tif (!propKey) continue;\\n\\t\\t\\tlet props = div[propKey];\\n\\t\\t\\tif (props.children?.props && props.children.props[propName]) return props.children.props[propName];\\n\\t\\t\\tif (props.children instanceof Array) for (let child of props.children) if (child?.props && child.props[propName]) return child.props[propName];\\n\\t\\t}\\n\\t};\\n\\tlet term = findProp(\\\"terminal\\\");\\n\\n\\tlet out = [];\\n\\tfor (let i = 0; i < arguments.length; i += 2) {\\n\\t\\tout.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]))\\n\\t}\\n\\ttry {\\n\\t\\tterm.printRaw(out);\\n\\t}\\n\\tcatch { }\\n}\",\"filename\":\"grow-once.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow-once.js\",\"url\":\"blob:file:///343ab85a-c86d-44b3-902a-067f0da4db3d\",\"moduleSequenceNumber\":723}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"60.3.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"90.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"55.2.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":20,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"32.5.8.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":9,\"cores\":20,\"hashCapacity\":16384,\"hashRate\":2.8118312945554624,\"level\":80,\"onlineTimeSeconds\":2963.599999999507,\"totalHashesGenerated\":8061.271222171304}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":20,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"74.0.2.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":9,\"cores\":20,\"hashCapacity\":16384,\"hashRate\":2.8118312945554624,\"level\":80,\"onlineTimeSeconds\":1998.600000000316,\"totalHashesGenerated\":5051.265664766822}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":72.6468,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":663.6598539670684}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":206.3943,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1411011.1772209206}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":38.2624,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":113.32474370038678}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":9.489,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"bp\":\"run /bitpacks/bp.js\",\"map\":\"run src/map.js\",\"hud\":\"run /xsink/hud.js\",\"nmap\":\"run src/mapt.js --tail\",\"c\":\"connect\",\"nvim\":\"nano\",\"mbg\":\"run ui/matrix.js\"}","GlobalAliasesSave":"{\"togglesound\":\"home;run Bitburner-Sounds.js\",\"bootOS\":\"run /os/main.js\"}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":15,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":25,\"MaxLogCapacity\":200,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":true,\"IsSidebarOpened\":false,\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.1,\"fontFamily\":\"FiraCode Nerd Font Mono, FiraCode NF Regular, Lucida Sans Unicode, monospace\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\"}","VersionSave":"26","AllGangsSave":"{\"Slum Snakes\":{\"power\":1,\"territory\":0.14285714285714554},\"Tetrads\":{\"power\":2573.670524797254,\"territory\":0},\"The Syndicate\":{\"power\":2464.997592143103,\"territory\":0},\"The Dark Army\":{\"power\":2571.258028529977,\"territory\":0},\"Speakers for the Dead\":{\"power\":7421.373941757764,\"territory\":0.8571428571428544},\"NiteSec\":{\"power\":2533.906357120173,\"territory\":0},\"The Black Hand\":{\"power\":930.0382564009886,\"territory\":0}}","LastExportBonus":"1665272534852","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}