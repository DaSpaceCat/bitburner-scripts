{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":328,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":4041592.7529607355,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.299410101595062,\"hacking_speed\":1.3517763286893432,\"hacking_money\":1.299410101595062,\"hacking_grow\":1.299410101595062,\"hacking\":1.4325996370085559,\"strength\":1.299410101595062,\"defense\":1.299410101595062,\"dexterity\":1.3643806066748154,\"agility\":1.4325996370085559,\"charisma\":1.611268525977877,\"hacking_exp\":1.643753778517753,\"strength_exp\":1.972504534221304,\"defense_exp\":1.972504534221304,\"dexterity_exp\":1.972504534221304,\"agility_exp\":1.972504534221304,\"charisma_exp\":1.643753778517753,\"company_rep\":1.299410101595062,\"faction_rep\":1.299410101595062,\"crime_money\":1.7723953785756645,\"crime_success\":1.611268525977877,\"hacknet_node_money\":1.494321616834321,\"hacknet_node_purchase_cost\":0.6164600319433636,\"hacknet_node_ram_cost\":0.7252470964039572,\"hacknet_node_core_cost\":0.7252470964039572,\"hacknet_node_level_cost\":0.7252470964039572,\"work_money\":1.299410101595062,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":174475492012.57974,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Slum Snakes\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":4,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":2,\"n\":1},{\"lvl\":1,\"n\":2},{\"lvl\":1,\"n\":10}],\"numPeopleKilled\":0,\"karma\":-613857.0600000736,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Vigilante Justice\",\"earnedRespect\":0,\"hack\":76,\"str\":7089,\"def\":7089,\"dex\":7089,\"agi\":7089,\"cha\":1,\"hack_exp\":5066.2133333328375,\"str_exp\":425188.02184402285,\"def_exp\":425188.02184402285,\"dex_exp\":425188.02184402285,\"agi_exp\":425188.02184402285,\"cha_exp\":0,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":2179029.018255287,\"def_asc_points\":2179029.018255287,\"dex_asc_points\":2179029.018255287,\"agi_asc_points\":2179029.018255287,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"00\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":10439682.706424015,\"hack\":188,\"str\":8560,\"def\":8560,\"dex\":10296,\"agi\":6863,\"cha\":188,\"hack_exp\":188854.89810247914,\"str_exp\":1383073.9610425525,\"def_exp\":1383073.9610425525,\"dex_exp\":6853558.960299727,\"agi_exp\":288976.96119143313,\"cha_exp\":188854.89810247914,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":2298943.8220390137,\"def_asc_points\":2298943.8220390137,\"dex_asc_points\":2298943.8220390137,\"agi_asc_points\":2298943.8220390137,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"01\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":10441148.017303316,\"hack\":188,\"str\":8573,\"def\":8573,\"dex\":10310,\"agi\":6880,\"cha\":188,\"hack_exp\":188666.2147804109,\"str_exp\":1385596.7414038114,\"def_exp\":1385596.7414038114,\"dex_exp\":6857672.39435304,\"agi_exp\":291181.6108137218,\"cha_exp\":188666.2147804109,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":2304887.501170936,\"def_asc_points\":2304887.501170936,\"dex_asc_points\":2304887.501170936,\"agi_asc_points\":2304887.501170936,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"02\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5350112.9321542885,\"hack\":164,\"str\":9706,\"def\":9706,\"dex\":11593,\"agi\":8317,\"cha\":164,\"hack_exp\":88212.22042234252,\"str_exp\":926946.1947470403,\"def_exp\":926946.1947470403,\"dex_exp\":3976672.8848212333,\"agi_exp\":317000.85673198884,\"cha_exp\":88212.22042234252,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3280213.7146535655,\"def_asc_points\":3280213.7146535655,\"dex_asc_points\":3280213.7146535655,\"agi_asc_points\":3280213.7146535655,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"03\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5340336.13259698,\"hack\":164,\"str\":9683,\"def\":9683,\"dex\":11580,\"agi\":8266,\"cha\":164,\"hack_exp\":88197.12575657705,\"str_exp\":915450.0908532278,\"def_exp\":915450.0908532278,\"dex_exp\":3962369.1843952085,\"agi_exp\":306066.27214471396,\"cha_exp\":88197.12575657705,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3275299.459892276,\"def_asc_points\":3275299.459892276,\"dex_asc_points\":3275299.459892276,\"agi_asc_points\":3275299.459892276,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"04\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5330075.26552174,\"hack\":164,\"str\":9656,\"def\":9656,\"dex\":11577,\"agi\":8173,\"cha\":164,\"hack_exp\":88186.05633501572,\"str_exp\":893762.9447335661,\"def_exp\":893762.9447335661,\"dex_exp\":3941496.3869197243,\"agi_exp\":284216.256296581,\"cha_exp\":88186.05633501572,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3277874.46798785,\"def_asc_points\":3277874.46798785,\"dex_asc_points\":3277874.46798785,\"agi_asc_points\":3277874.46798785,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"05\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5317532.183168912,\"hack\":164,\"str\":9628,\"def\":9628,\"dex\":11558,\"agi\":8116,\"cha\":164,\"hack_exp\":88160.39540321444,\"str_exp\":882694.2806807343,\"def_exp\":882694.2806807343,\"dex_exp\":3925723.1077884133,\"agi_exp\":274088.51525922155,\"cha_exp\":88160.39540321444,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3269668.014819844,\"def_asc_points\":3269668.014819844,\"dex_asc_points\":3269668.014819844,\"agi_asc_points\":3269668.014819844,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"06\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5305594.7982513765,\"hack\":164,\"str\":9599,\"def\":9599,\"dex\":11538,\"agi\":8056,\"cha\":164,\"hack_exp\":88149.82913717862,\"str_exp\":871503.478386876,\"def_exp\":871503.478386876,\"dex_exp\":3910234.338491325,\"agi_exp\":263757.3063658653,\"cha_exp\":88149.82913717862,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3261221.2708732286,\"def_asc_points\":3261221.2708732286,\"dex_asc_points\":3261221.2708732286,\"agi_asc_points\":3261221.2708732286,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"07\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5284153.517536471,\"hack\":164,\"str\":9549,\"def\":9549,\"dex\":11493,\"agi\":7976,\"cha\":164,\"hack_exp\":88128.19344958145,\"str_exp\":858491.145761447,\"def_exp\":858491.145761447,\"dex_exp\":3886755.946211991,\"agi_exp\":252838.1856714662,\"cha_exp\":88128.19344958145,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3240388.1103376094,\"def_asc_points\":3240388.1103376094,\"dex_asc_points\":3240388.1103376094,\"agi_asc_points\":3240388.1103376094,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"08\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5273810.264345755,\"hack\":164,\"str\":9523,\"def\":9523,\"dex\":11482,\"agi\":7902,\"cha\":164,\"hack_exp\":88117.62718354563,\"str_exp\":844795.4166968013,\"def_exp\":844795.4166968013,\"dex_exp\":3871188.8564261366,\"agi_exp\":239516.7287505762,\"cha_exp\":88117.62718354563,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3237161.84250823,\"def_asc_points\":3237161.84250823,\"dex_asc_points\":3237161.84250823,\"agi_asc_points\":3237161.84250823,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"09\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5221229.212528238,\"hack\":164,\"str\":9397,\"def\":9397,\"dex\":11348,\"agi\":7754,\"cha\":164,\"hack_exp\":88107.56407303532,\"str_exp\":826188.7557283805,\"def_exp\":826188.7557283805,\"dex_exp\":3821226.902400521,\"agi_exp\":227181.12639387016,\"cha_exp\":88107.56407303532,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":3171156.7213352704,\"def_asc_points\":3171156.7213352704,\"dex_asc_points\":3171156.7213352704,\"agi_asc_points\":3171156.7213352704,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"10\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":3695272.4815771403,\"hack\":164,\"str\":5950,\"def\":5950,\"dex\":7264,\"agi\":4825,\"cha\":164,\"hack_exp\":88096.9978069995,\"str_exp\":547986.23781123,\"def_exp\":547986.23781123,\"dex_exp\":2555739.6687202533,\"agi_exp\":146435.55162952247,\"cha_exp\":88096.9978069995,\"hack_mult\":1,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":0,\"str_asc_points\":1425404.327817419,\"def_asc_points\":1425404.327817419,\"dex_asc_points\":1425404.327817419,\"agi_asc_points\":1425404.327817419,\"cha_asc_points\":0,\"upgrades\":[],\"augmentations\":[],\"name\":\"11\"}}],\"wanted\":1,\"respect\":66998725.462424405,\"isHackingGang\":false,\"respectGainRate\":336.27502090459916,\"wantedGainRate\":-0.18066270334961032,\"moneyGainRate\":929073.1390044311,\"storedCycles\":4,\"storedTerritoryAndPowerCycles\":5,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Big Gay\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"Aggrivating Straights\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":10708.695816885715,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"AutoPartyManager\":true,\"AutoBrew\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":3.0300000000000002,\"popularity\":0,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":528.6078099226817,\"state\":\"PRODUCTION\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":true,\"autoParty\":true,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JXOlW47\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":53,\"exp\":147.73899999990854,\"cre\":77,\"eff\":80,\"sal\":1080,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"byflyTN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":79,\"exp\":124.73900000000204,\"cre\":54,\"eff\":81,\"sal\":1005,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UAE8ioM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":93,\"exp\":123.73900000000204,\"cre\":76,\"eff\":87,\"sal\":1248,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nd64F2Z\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":94,\"exp\":113.51800000000199,\"cre\":97,\"eff\":65,\"sal\":1191,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"71PQTpJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":62,\"exp\":111.51800000000199,\"cre\":68,\"eff\":100,\"sal\":1017,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AixwdWg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":80,\"exp\":150.51799999989532,\"cre\":83,\"eff\":91,\"sal\":1329,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fkEg3Xq\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":93,\"exp\":107.51800000000199,\"cre\":100,\"eff\":57,\"sal\":1188,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kxv236e\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":74,\"exp\":103.51800000000199,\"cre\":98,\"eff\":80,\"sal\":1131,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SufkIjk\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":62,\"exp\":120.51800000000199,\"cre\":84,\"eff\":76,\"sal\":1044,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1443.7569999999105,\"Engineer\":1484.4855000000061,\"Business\":1216.0875000000028,\"Management\":1799.5159999998973,\"Research & Development\":0,\"total\":5943.845999999817},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":9}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":true,\"autoParty\":true,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NJDCPVE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":70,\"exp\":128.73899999999853,\"cre\":98,\"eff\":64,\"sal\":1140,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VeyfX5Q\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":91,\"exp\":148.7389999999038,\"cre\":55,\"eff\":87,\"sal\":1185,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kr22Xeo\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":62,\"exp\":108.73900000000204,\"cre\":90,\"eff\":67,\"sal\":990,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6xY0iwe\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":96,\"exp\":115.53000000000199,\"cre\":98,\"eff\":61,\"sal\":1182,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"l6jlWlw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":63,\"exp\":138.52699999995212,\"cre\":84,\"eff\":94,\"sal\":1260,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"droih38\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":91,\"exp\":152.52699999988582,\"cre\":90,\"eff\":76,\"sal\":1230,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0334DRL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":93,\"exp\":124.52700000000199,\"cre\":98,\"eff\":95,\"sal\":1239,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oQHvVrj\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":59,\"exp\":123.52700000000199,\"cre\":80,\"eff\":93,\"sal\":1098,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xQ23Cgx\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":62,\"exp\":132.52699999998055,\"cre\":91,\"eff\":100,\"sal\":1212,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1420.6690000000006,\"Engineer\":1804.8989999997839,\"Business\":1035.3964999999923,\"Management\":1948.7139999998876,\"Research & Development\":0,\"total\":6209.678499999664,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":9}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":true,\"autoParty\":true,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uXQZ66C\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":95,\"exp\":146.78099999991306,\"cre\":71,\"eff\":82,\"sal\":1302,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tfRCnnK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":53,\"exp\":128.78099999999833,\"cre\":100,\"eff\":98,\"sal\":1143,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PLDxOe0\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":66,\"exp\":110.78100000000204,\"cre\":75,\"eff\":73,\"sal\":1047,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E76bk0C\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":80,\"exp\":116.53900000000199,\"cre\":52,\"eff\":77,\"sal\":1047,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SMBgQvU\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":92,\"exp\":123.53600000000199,\"cre\":51,\"eff\":59,\"sal\":1035,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iG8n9e2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":73,\"exp\":146.5359999999142,\"cre\":52,\"eff\":97,\"sal\":1125,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cIIqEV2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":60,\"exp\":118.53600000000199,\"cre\":56,\"eff\":70,\"sal\":969,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"f28KI96\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":70,\"exp\":132.5359999999805,\"cre\":70,\"eff\":92,\"sal\":1131,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VYoYqzg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":64,\"exp\":136.53599999996155,\"cre\":85,\"eff\":78,\"sal\":1176,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1510.119999999915,\"Engineer\":1526.5755000000006,\"Business\":1148.3264999999722,\"Management\":1572.0919999999164,\"Research & Development\":0,\"total\":5757.113999999803,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":9}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":true,\"autoParty\":true,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GL31kQW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":74,\"exp\":118.74200000000204,\"cre\":93,\"eff\":53,\"sal\":1134,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pvCFphg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":100,\"cha\":53,\"exp\":105.74200000000204,\"cre\":91,\"eff\":55,\"sal\":1053,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E1BVL6N\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":52,\"exp\":118.74200000000204,\"cre\":53,\"eff\":82,\"sal\":1047,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"90B20W1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":92,\"exp\":140.51199999994273,\"cre\":96,\"eff\":73,\"sal\":1317,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RhkahlF\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":95,\"cha\":91,\"exp\":127.51200000000199,\"cre\":60,\"eff\":57,\"sal\":1134,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RSEDcZf\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":91,\"exp\":140.51199999994273,\"cre\":76,\"eff\":57,\"sal\":1110,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Xd9aFiN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":69,\"cha\":63,\"exp\":116.51200000000199,\"cre\":98,\"eff\":81,\"sal\":1125,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"o8RwuTV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":73,\"exp\":108.51200000000199,\"cre\":80,\"eff\":78,\"sal\":1029,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gwkReEN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":65,\"exp\":142.51199999993324,\"cre\":99,\"eff\":66,\"sal\":1203,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}}],\"employeeProd\":{\"Operations\":1494.923999999945,\"Engineer\":1591.580999999903,\"Business\":1236.7979999999734,\"Management\":1570.764000000004,\"Research & Development\":0,\"total\":5894.066999999825,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":9}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":true,\"autoParty\":true,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DUIndZO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":64,\"exp\":147.74499999990852,\"cre\":54,\"eff\":89,\"sal\":1104,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yRcojqZ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":61,\"exp\":139.7449999999464,\"cre\":81,\"eff\":51,\"sal\":1128,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ybycoiE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":51,\"cha\":74,\"exp\":120.74500000000204,\"cre\":94,\"eff\":81,\"sal\":1101,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TBFYmVA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":87,\"exp\":106.50300000000199,\"cre\":72,\"eff\":57,\"sal\":996,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6wvZNOV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":85,\"exp\":118.50300000000199,\"cre\":72,\"eff\":63,\"sal\":1146,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"99BRRGd\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":70,\"exp\":114.50300000000199,\"cre\":85,\"eff\":74,\"sal\":1149,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XVz9VGL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":64,\"exp\":113.50300000000199,\"cre\":89,\"eff\":83,\"sal\":1107,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"e062JJH\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":54,\"exp\":137.50299999995698,\"cre\":61,\"eff\":58,\"sal\":993,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"i03j0M0\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":67,\"exp\":137.50299999995698,\"cre\":81,\"eff\":86,\"sal\":1215,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1327.806000000004,\"Engineer\":1656.7349999997825,\"Business\":1118.875499999958,\"Management\":1554.026000000004,\"Research & Development\":0,\"total\":5657.442499999748},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":9}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":true,\"autoParty\":true,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zeJe6mS\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":94,\"exp\":152.7479999998848,\"cre\":78,\"eff\":59,\"sal\":1236,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rHLOq90\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":80,\"exp\":108.74800000000204,\"cre\":89,\"eff\":66,\"sal\":1020,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9TPkqqN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":97,\"exp\":141.74799999993692,\"cre\":57,\"eff\":78,\"sal\":1242,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KLCDiYO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":75,\"exp\":118.50000000000199,\"cre\":92,\"eff\":70,\"sal\":1203,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4TvULq6\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":95,\"cha\":87,\"exp\":124.50000000000199,\"cre\":56,\"eff\":89,\"sal\":1197,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"e9sY7rR\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":87,\"exp\":137.499999999957,\"cre\":85,\"eff\":94,\"sal\":1296,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XjdvfRH\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":66,\"exp\":118.50000000000199,\"cre\":84,\"eff\":75,\"sal\":1059,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"S5jScGu\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":68,\"exp\":129.49999999999488,\"cre\":89,\"eff\":82,\"sal\":1227,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XwhqCDY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":62,\"exp\":119.50000000000199,\"cre\":88,\"eff\":95,\"sal\":1146,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":1499.147999999887,\"Engineer\":1568.9720000000061,\"Business\":1287.5739999999669,\"Management\":1724.9399999999591,\"Research & Development\":0,\"total\":6080.633999999819,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":3,\"Management\":2,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":9}}},\"numAdVerts\":1,\"lastCycleRevenue\":30783436.654750735,\"lastCycleExpenses\":7770873.535422878,\"thisCycleRevenue\":0,\"thisCycleExpenses\":77514268.40453136,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":3799.979355591271,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":920.6,\"loc\":\"Aevum\",\"size\":3800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":6.5,\"qlt\":0,\"dmd\":74.34678728638782,\"dmdR\":[65,85],\"cmp\":56.23960319855296,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":460.95,\"sll\":0,\"prd\":-460.3,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1483.1192051203655,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":6.5,\"qlt\":7.037861111111127,\"dmd\":83.75402087020672,\"dmdR\":[80,99],\"cmp\":66.00735068586471,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":460.95,\"sll\":0,\"prd\":-460.3,\"imp\":8.054090873354282,\"exp\":[],\"totalExp\":0,\"bCost\":2076.1603917311763,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":13629.531552600656,\"qlt\":119.97848972339408,\"dmd\":77.53174287111625,\"dmdR\":[70,90],\"cmp\":37.710365389433015,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":918.240749158861,\"prd\":920.6,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7607.436503712254,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":918.240749158861}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":13814.068180265025,\"qlt\":119.97848972339408,\"dmd\":84.23967740424236,\"dmdR\":[20,90],\"cmp\":63.83203930947101,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":459.95,\"prd\":920.6,\"imp\":0,\"exp\":[{\"ind\":\"Big Tobacco\",\"city\":\"Aevum\",\"amt\":\"MAX/2\"}],\"totalExp\":460.8068180265024,\"bCost\":2278.3409632979906,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD/2\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":591.5095382966099}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":9300,\"qlt\":0,\"dmd\":88.53794361841723,\"dmdR\":[80,90],\"cmp\":78.15989671998227,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8396.909634333742,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":726,\"qlt\":0,\"dmd\":84.87971228513398,\"dmdR\":[80,99],\"cmp\":91.16190591035458,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68298.55908281228,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":6270,\"qlt\":0,\"dmd\":83.03268434126461,\"dmdR\":[80,99],\"cmp\":90.14308052383785,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12432.768874806803,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":230400,\"qlt\":0,\"dmd\":55.97724870327287,\"dmdR\":[5,99],\"cmp\":54.178863245009865,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":174085.3819788277,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":3799.961545394309,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":732,\"loc\":\"Chongqing\",\"size\":3800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":11.5,\"qlt\":0,\"dmd\":80.97055715062575,\"dmdR\":[65,85],\"cmp\":46.596239157759385,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":367.15,\"sll\":0,\"prd\":-366,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1640.660724443362,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":11.5,\"qlt\":9.174027777777795,\"dmd\":89.15468972035404,\"dmdR\":[80,99],\"cmp\":73.00158488990941,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":367.15,\"sll\":0,\"prd\":-366,\"imp\":8.134837727052421,\"exp\":[],\"totalExp\":0,\"bCost\":2066.467297883896,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":18278.77880298323,\"qlt\":123.53863972339161,\"dmd\":85.14934472599343,\"dmdR\":[70,90],\"cmp\":55.35647113444043,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":714.5058750795561,\"prd\":732,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3774.802105601772,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":714.5058750795561}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":11018.16362609624,\"qlt\":123.53863972339161,\"dmd\":83.37655468812405,\"dmdR\":[20,90],\"cmp\":42.896474210415896,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":367.15,\"prd\":732,\"imp\":0,\"exp\":[{\"ind\":\"Big Tobacco\",\"city\":\"Chongqing\",\"amt\":\"MAX/2\"}],\"totalExp\":369.816362609624,\"bCost\":3112.8777672444257,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD/2\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":896.5312134718797}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":9300,\"qlt\":0,\"dmd\":81.95405711618622,\"dmdR\":[80,90],\"cmp\":92.6505698781799,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9120.632969917428,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":726,\"qlt\":0,\"dmd\":98.62528887778213,\"dmdR\":[80,99],\"cmp\":94.97741952512287,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":67133.84509730121,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":6270,\"qlt\":0,\"dmd\":89.99182967825202,\"dmdR\":[80,99],\"cmp\":82.6866771946031,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12568.056743876077,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":230400,\"qlt\":0,\"dmd\":40.999117412448626,\"dmdR\":[5,99],\"cmp\":53.373560537636074,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":79305.56587720783,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":3799.4945127421342,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":683.4,\"loc\":\"Sector-12\",\"size\":3800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":73.63993117270707,\"dmdR\":[65,85],\"cmp\":54.97087662770573,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":341.2,\"sll\":0,\"prd\":-341.2,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1333.6615853636022,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":3.860844327921505,\"dmd\":87.1319300546609,\"dmdR\":[80,99],\"cmp\":76.652586250615,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":341.2,\"sll\":0,\"prd\":-341.2,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2034.1284142107804,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":19626.111083361844,\"qlt\":120.44615639006068,\"dmd\":82.3893365532664,\"dmdR\":[70,90],\"cmp\":56.359966578685125,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":683.3915687077975,\"prd\":682.4,\"imp\":0,\"exp\":[{\"ind\":\"n00dles\",\"city\":\"Sector-12\",\"amt\":\"MAX\"}],\"totalExp\":0,\"bCost\":3510.157277630717,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":683.3915687077975}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":10214.223604825582,\"qlt\":120.44615639006068,\"dmd\":51.326719715854146,\"dmdR\":[20,90],\"cmp\":33.16664845707607,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":338.65,\"prd\":682.4,\"imp\":0,\"exp\":[{\"ind\":\"Big Tobacco\",\"city\":\"Sector-12\",\"amt\":\"MAX/2\"}],\"totalExp\":339.02236048255816,\"bCost\":3459.8275809640913,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD/2\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":647.7612283109206}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":9300,\"qlt\":0,\"dmd\":83.47913747298469,\"dmdR\":[80,90],\"cmp\":68.66900189365599,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9955.402250527595,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":726,\"qlt\":0,\"dmd\":87.17987075304866,\"dmdR\":[80,99],\"cmp\":93.85908194378891,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69580.78346967796,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":6270,\"qlt\":0,\"dmd\":91.01245598886632,\"dmdR\":[80,99],\"cmp\":88.47430126341841,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12532.010711638968,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":230400,\"qlt\":0,\"dmd\":11.94693135757495,\"dmdR\":[5,99],\"cmp\":66.35859432555091,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":43879.41943605814,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":3799.9849999999997,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":685.7,\"loc\":\"New Tokyo\",\"size\":3800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":83.53803360529876,\"dmdR\":[65,85],\"cmp\":49.48254833975093,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":342.85,\"sll\":0,\"prd\":-342.85,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1701.8385499421458,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":8.954788888888904,\"dmd\":81.16059513881517,\"dmdR\":[80,99],\"cmp\":80.2227544801573,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":342.85,\"sll\":0,\"prd\":-342.85,\"imp\":7.94400127385521,\"exp\":[],\"totalExp\":0,\"bCost\":1960.8149830842547,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":6857,\"qlt\":121.16843972339294,\"dmd\":78.36668078869116,\"dmdR\":[70,90],\"cmp\":40.001545245655095,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":685.7,\"prd\":685.7,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4314.403918113858,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":915.0045268238406}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":10285.5,\"qlt\":121.16843972339294,\"dmd\":89.40657608409879,\"dmdR\":[20,90],\"cmp\":45.685652460164924,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":342.85,\"prd\":685.7,\"imp\":0,\"exp\":[{\"ind\":\"Big Tobacco\",\"city\":\"New Tokyo\",\"amt\":\"MAX/2\"}],\"totalExp\":342.85,\"bCost\":3075.6834833381276,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD/2\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":939.9027357019851}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":9300,\"qlt\":0,\"dmd\":85.26239171366723,\"dmdR\":[80,90],\"cmp\":82.55388341455044,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8860.353239890732,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":726,\"qlt\":0,\"dmd\":91.41471614997977,\"dmdR\":[80,99],\"cmp\":97.54528959266014,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66781.76004820729,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":6270,\"qlt\":0,\"dmd\":97.34639948138589,\"dmdR\":[80,99],\"cmp\":85.5121302117527,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13201.293310252198,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":306400,\"qlt\":0,\"dmd\":25.55556548865691,\"dmdR\":[5,99],\"cmp\":56.16979200060335,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":65782.91719466288,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":3799.9756512098156,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":612.2,\"loc\":\"Ishima\",\"size\":3800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":18,\"qlt\":0,\"dmd\":78.05915392702397,\"dmdR\":[65,85],\"cmp\":42.06403739483294,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":307.9,\"sll\":0,\"prd\":-306.1,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1590.1870105249452,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":18,\"qlt\":9.734588888888906,\"dmd\":84.96656743818853,\"dmdR\":[80,99],\"cmp\":86.39591782327658,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":307.9,\"sll\":0,\"prd\":-306.1,\"imp\":8.510408524607953,\"exp\":[],\"totalExp\":0,\"bCost\":1874.2672423158942,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":8681.649951127814,\"qlt\":121.89237305672492,\"dmd\":81.76821131712965,\"dmdR\":[70,90],\"cmp\":60.56225460873595,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":610.4136650495618,\"prd\":612.2,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7704.926545755746,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":610.4136650495618}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":9168.923053519626,\"qlt\":121.89237305672492,\"dmd\":81.02245865377137,\"dmdR\":[20,90],\"cmp\":38.237347563318856,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":305.1,\"prd\":612.2,\"imp\":0,\"exp\":[{\"ind\":\"Big Tobacco\",\"city\":\"Ishima\",\"amt\":\"MAX/2\"}],\"totalExp\":304.69230535196255,\"bCost\":4063.7716790786894,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD/2\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":945.5488632148788}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":9300,\"qlt\":0,\"dmd\":81.2375071846227,\"dmdR\":[80,90],\"cmp\":80.12381642842104,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6180.010356720318,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":726,\"qlt\":0,\"dmd\":95.04243136144618,\"dmdR\":[80,99],\"cmp\":86.29677896234568,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":90180.17822743866,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":5430407694.641469}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":6270,\"qlt\":0,\"dmd\":83.45653114154054,\"dmdR\":[80,99],\"cmp\":86.53668566951822,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13399.135089486066,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":306400,\"qlt\":0,\"dmd\":38.37036829781096,\"dmdR\":[5,99],\"cmp\":75,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":45133.05908538631,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":19,\"sizeUsed\":3799.985130431961,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":757.3,\"loc\":\"Volhaven\",\"size\":3800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":2,\"qlt\":0,\"dmd\":71.56851623049988,\"dmdR\":[65,85],\"cmp\":46.00798657292491,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":378.85,\"sll\":0,\"prd\":-378.65,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1560.3324363614424,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":2,\"qlt\":10.05893333333335,\"dmd\":83.94502279964395,\"dmdR\":[80,99],\"cmp\":81.5884882146738,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":378.85,\"sll\":0,\"prd\":-378.65,\"imp\":8.493985948316602,\"exp\":[],\"totalExp\":0,\"bCost\":1944.1061086408845,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":17719.092529035974,\"qlt\":120.91722861228297,\"dmd\":75.49179569641952,\"dmdR\":[70,90],\"cmp\":49.177375341236555,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":751.7353464989508,\"prd\":757.3,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5922.205317789266,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":751.7353464989508}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":11365.84709121763,\"qlt\":120.91722861228297,\"dmd\":76.0771436374051,\"dmdR\":[20,90],\"cmp\":66.39139511432083,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":378.85,\"prd\":757.3,\"imp\":0,\"exp\":[{\"ind\":\"Big Tobacco\",\"city\":\"Volhaven\",\"amt\":\"MAX/2\"}],\"totalExp\":379.28470912176306,\"bCost\":2567.204515747687,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"PROD/2\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":502.53605575307756}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":9300,\"qlt\":0,\"dmd\":81.79755382231815,\"dmdR\":[80,90],\"cmp\":70.57693510661544,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5714.801343240219,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":726,\"qlt\":0,\"dmd\":82.30054536080232,\"dmdR\":[80,99],\"cmp\":97.87257662701529,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":87994.64054066583,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":6270,\"qlt\":0,\"dmd\":99,\"dmdR\":[80,99],\"cmp\":93.47702623834584,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12204.48236014042,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":230400,\"qlt\":0,\"dmd\":23.793251184197096,\"dmdR\":[5,99],\"cmp\":50.86202062187192,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75570.18259484367,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"name\":\"Big Tobacco\",\"type\":\"Tobacco\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":65289.396694642244,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"uPgrade: Fulcrum\":true,\"uPgrade: Dashboard\":true,\"uPgrade: Capacity.I\":true,\"Market-TA.I\":true,\"Market-TA.II\":true},\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prodMats\":[],\"products\":{\"UwU\":{\"ctor\":\"Product\",\"data\":{\"name\":\"UwU\",\"dmd\":90.7250485683641,\"cmp\":48.66079999999846,\"mku\":0.3994532499024195,\"pCost\":26599.557423124334,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":10000000000,\"advCost\":10000000000,\"creationProd\":{\"Operations\":23135.104124224774,\"Engineer\":25546.040686337077,\"Business\":12629.233497741794,\"Management\":22025.411866743114,\"Research & Development\":172105.19548730185,\"total\":255440.98566234848,\"Unassigned\":null},\"rat\":89051.20958719266,\"qlt\":91417.95468638411,\"per\":59387.370409765615,\"dur\":121697.2079893112,\"rel\":55529.191258126164,\"aes\":85193.73931575773,\"fea\":59003.207918721644,\"data\":{\"Aevum\":[198.12995245001227,19.812995245001133,19.81296450178452],\"Chongqing\":[72.58176627912646,7.258176627912631,7.258165795977165],\"Ishima\":[73.40459382614809,7.340459382614718,7.340448596518246],\"New Tokyo\":[73.57090166471482,7.357090166471477,7.357079557091867],\"Sector-12\":[72.63888261283745,7.2638882612836735,7.263877420703357],\"Volhaven\":[72.92177386162429,7.292177386162419,7.292166500174568]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":255860026.35701442,\"Chongqing\":255325465.0089426,\"Ishima\":252984003.8402104,\"New Tokyo\":252239964.08459976,\"Sector-12\":259048574.96976253,\"Volhaven\":258850819.9834945},\"maxsll\":7.292166500174568}},\"OwO II\":{\"ctor\":\"Product\",\"data\":{\"name\":\"OwO II\",\"dmd\":90.8774255114924,\"cmp\":0.5084000000000016,\"mku\":0.38717318388154015,\"pCost\":26599.557423124334,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":10000000000,\"advCost\":10000000000,\"creationProd\":{\"Operations\":23160.641968947606,\"Engineer\":25584.3474534213,\"Business\":12641.228546020699,\"Management\":22047.85421513588,\"Research & Development\":172224.06254637544,\"total\":255658.13472990095,\"Unassigned\":null},\"rat\":93408.31629790447,\"qlt\":95895.49775078388,\"per\":62309.064554360884,\"dur\":127644.84082216957,\"rel\":58249.689808703486,\"aes\":89356.05535708148,\"fea\":61899.93388707196,\"data\":{\"Aevum\":[198.12995245001187,19.812995245001133,19.812964501784528],\"Chongqing\":[72.58176627912692,7.258176627912631,7.258165795977165],\"Ishima\":[73.40459382614763,7.340459382614718,7.340448596518246],\"New Tokyo\":[73.5709016647158,7.357090166471477,7.357079557091865],\"Sector-12\":[72.63888261283721,7.2638882612836735,7.263877420703357],\"Volhaven\":[72.92177386162503,7.292177386162419,7.292166500174568]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":391813611.7316992,\"Chongqing\":390994333.32857966,\"Ishima\":387410635.535193,\"New Tokyo\":386271008.86847365,\"Sector-12\":396694451.58672726,\"Volhaven\":396388801.5053881},\"maxsll\":7.292166500174568}},\"UwU II\":{\"ctor\":\"Product\",\"data\":{\"name\":\"UwU II\",\"dmd\":91.19098163194197,\"cmp\":40.194799999999546,\"mku\":0.3666725677287847,\"pCost\":26599.557423124334,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Aevum\",\"designCost\":10000000000,\"advCost\":10000000000,\"creationProd\":{\"Operations\":23209.243071621786,\"Engineer\":25657.249107432603,\"Business\":12664.056336670685,\"Management\":22090.56427506173,\"Research & Development\":172450.2785879138,\"total\":256071.39137870056,\"Unassigned\":0},\"rat\":101510.90565452164,\"qlt\":104223.39913347906,\"per\":67746.96168993246,\"dur\":138703.24622437928,\"rel\":63309.833253256555,\"aes\":97094.65052801419,\"fea\":67289.60839053542,\"data\":{\"Aevum\":[198.12903015351475,19.81290301535131,19.812872271889656],\"Chongqing\":[72.58144132106298,7.258144132106231,7.258133300085047],\"Ishima\":[73.40427024325346,7.340427024325301,7.340416238139033],\"New Tokyo\":[73.57058338332696,7.357058338332649,7.357047728870637],\"Sector-12\":[72.63855739542754,7.26385573954272,7.2638448988753],\"Volhaven\":[72.92144728198897,7.292144728198869,7.292133842120276]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":358757647.7139833,\"Chongqing\":358007564.0145262,\"Ishima\":354725893.6142977,\"New Tokyo\":353682436.1818715,\"Sector-12\":363226988.9772366,\"Volhaven\":362947572.93886065},\"maxsll\":7.2921338421202755}},\"OwO\":{\"ctor\":\"Product\",\"data\":{\"name\":\"OwO\",\"dmd\":0.001,\"cmp\":0.09040000000000001,\"mku\":0,\"pCost\":0,\"sCost\":\"MP\",\"fin\":false,\"prog\":74.26357221665468,\"createCity\":\"Aevum\",\"designCost\":10000000000,\"advCost\":10000000000,\"creationProd\":{\"Operations\":17264.154596633885,\"Engineer\":19096.202130506885,\"Business\":9417.998650766027,\"Management\":16429.972656774946,\"Research & Development\":128198.7235668392,\"total\":190407.05160152094,\"Unassigned\":null},\"rat\":0,\"qlt\":0,\"per\":0,\"dur\":0,\"rel\":0,\"aes\":0,\"fea\":0,\"data\":{\"Aevum\":[0,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[0,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0,\"reqMats\":{},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":true,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":0}}},\"makesProducts\":true,\"awareness\":123086.95718250982,\"popularity\":102258.12613473446,\"startingCost\":20000000000,\"reFac\":0.15,\"sciFac\":0.75,\"hwFac\":0.15,\"robFac\":0.2,\"aiFac\":0.15,\"advFac\":0.2,\"prodMult\":6,\"state\":\"PRODUCTION\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fDOR7Cv\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":50,\"exp\":135.83399999996485,\"cre\":50,\"eff\":86,\"sal\":990,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eMfDLAJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":57,\"exp\":122.83400000000196,\"cre\":60,\"eff\":73,\"sal\":1080,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"y7xpD0s\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":98,\"exp\":143.83399999992696,\"cre\":76,\"eff\":62,\"sal\":1158,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KfMbIY0\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":65,\"exp\":116.83400000000196,\"cre\":72,\"eff\":79,\"sal\":1056,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SegMti2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":62,\"exp\":111.83400000000196,\"cre\":70,\"eff\":77,\"sal\":996,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sBEMBCv\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":69,\"cha\":59,\"exp\":142.8339999999317,\"cre\":88,\"eff\":90,\"sal\":1191,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OitfHJD\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":67,\"exp\":125.83400000000196,\"cre\":84,\"eff\":64,\"sal\":1059,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9WOmGQz\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":86,\"exp\":120.83400000000196,\"cre\":91,\"eff\":88,\"sal\":1251,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0RVhrWw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":78,\"exp\":133.83399999997434,\"cre\":83,\"eff\":77,\"sal\":1233,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7nUJr1A\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":88,\"cha\":80,\"exp\":108.83400000000196,\"cre\":69,\"eff\":89,\"sal\":1149,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HghZlIm\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":88,\"cha\":62,\"exp\":115.83400000000196,\"cre\":54,\"eff\":65,\"sal\":999,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Z15hRG9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":76,\"exp\":141.83399999993642,\"cre\":52,\"eff\":52,\"sal\":1005,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DFME50k\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":96,\"exp\":135.83399999996485,\"cre\":59,\"eff\":99,\"sal\":1287,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iavUPju\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":85,\"exp\":135.83399999996485,\"cre\":72,\"eff\":97,\"sal\":1287,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rQwTuXd\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":88,\"exp\":133.83399999997434,\"cre\":82,\"eff\":52,\"sal\":1092,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"aYFvgWx\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":86,\"exp\":142.8339999999317,\"cre\":74,\"eff\":59,\"sal\":1125,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9gKcE3z\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":88,\"exp\":126.83400000000196,\"cre\":81,\"eff\":77,\"sal\":1212,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ofCDLSQ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":80,\"exp\":147.833999999908,\"cre\":100,\"eff\":90,\"sal\":1365,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Yh9QOIM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":67,\"exp\":125.83400000000196,\"cre\":78,\"eff\":51,\"sal\":1077,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OtpUFfA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":90,\"exp\":148.83399999990328,\"cre\":52,\"eff\":70,\"sal\":1092,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bhwFV0d\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":76,\"exp\":138.83399999995063,\"cre\":90,\"eff\":76,\"sal\":1242,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ixcSBFn\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":94,\"exp\":105.83400000000196,\"cre\":59,\"eff\":63,\"sal\":993,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sl3aoOK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":50,\"exp\":139.83399999994592,\"cre\":90,\"eff\":62,\"sal\":1035,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VDHeTtn\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":57,\"exp\":113.83400000000196,\"cre\":61,\"eff\":64,\"sal\":924,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"G0bRCWM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":84,\"cha\":90,\"exp\":147.833999999908,\"cre\":85,\"eff\":97,\"sal\":1356,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4kZXe9h\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":82,\"exp\":109.83400000000196,\"cre\":79,\"eff\":97,\"sal\":1143,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4JK5QIx\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":80,\"exp\":125.83400000000196,\"cre\":88,\"eff\":88,\"sal\":1272,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HY8S8BH\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":84,\"exp\":104.83400000000196,\"cre\":67,\"eff\":99,\"sal\":1167,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iejNyGW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":60,\"exp\":114.83400000000196,\"cre\":50,\"eff\":56,\"sal\":981,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zjticiE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":60,\"exp\":109.83400000000196,\"cre\":70,\"eff\":80,\"sal\":1029,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UISsAjv\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":70,\"exp\":103.90800000000189,\"cre\":98,\"eff\":53,\"sal\":990,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Pvbr6Vk\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":91,\"exp\":120.90800000000189,\"cre\":66,\"eff\":96,\"sal\":1158,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"n64vLjF\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":88,\"exp\":149.90799999989812,\"cre\":81,\"eff\":96,\"sal\":1350,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ommtchk\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":91,\"exp\":126.90800000000189,\"cre\":54,\"eff\":86,\"sal\":1221,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dQsmBsM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":83,\"exp\":144.9079999999218,\"cre\":80,\"eff\":74,\"sal\":1221,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9CPm7i9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":69,\"cha\":96,\"exp\":102.90800000000189,\"cre\":60,\"eff\":60,\"sal\":1014,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ClLsjqU\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":58,\"exp\":108.90800000000189,\"cre\":79,\"eff\":88,\"sal\":1044,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7BDowQt\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":88,\"exp\":149.90799999989812,\"cre\":57,\"eff\":86,\"sal\":1236,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5aHQ3Gm\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":86,\"exp\":139.90799999994547,\"cre\":85,\"eff\":92,\"sal\":1251,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"i7PJ5cJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":88,\"exp\":110.90800000000189,\"cre\":75,\"eff\":71,\"sal\":1119,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EOGEpv5\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":63,\"exp\":135.90799999996443,\"cre\":51,\"eff\":67,\"sal\":966,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LwKSUHJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":68,\"exp\":103.90800000000189,\"cre\":67,\"eff\":60,\"sal\":978,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sVPHqLh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":97,\"exp\":128.9049999999976,\"cre\":57,\"eff\":78,\"sal\":1128,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"igbl8Ry\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":68,\"exp\":139.9049999999455,\"cre\":84,\"eff\":65,\"sal\":1188,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HemflPW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":79,\"exp\":140.90499999994077,\"cre\":64,\"eff\":60,\"sal\":1059,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u6RsO42\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":64,\"exp\":144.08599999992566,\"cre\":84,\"eff\":85,\"sal\":1254,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KNchGFV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":77,\"exp\":115.08600000000186,\"cre\":93,\"eff\":58,\"sal\":1047,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pVXZHXb\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":83,\"exp\":107.08600000000186,\"cre\":74,\"eff\":76,\"sal\":1104,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"H2xRcBg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":59,\"exp\":124.08600000000186,\"cre\":54,\"eff\":76,\"sal\":1080,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OajXdKe\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":90,\"exp\":135.0859999999683,\"cre\":92,\"eff\":61,\"sal\":1176,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9au848c\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":51,\"exp\":147.08599999991145,\"cre\":67,\"eff\":61,\"sal\":1041,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GrK1B8e\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":93,\"exp\":105.08600000000186,\"cre\":97,\"eff\":87,\"sal\":1182,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"v14pkNW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":75,\"exp\":121.08600000000186,\"cre\":68,\"eff\":89,\"sal\":1074,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iYdnPp6\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":51,\"exp\":100.08600000000186,\"cre\":94,\"eff\":88,\"sal\":1131,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qx9mH4V\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":95,\"exp\":148.0859999999067,\"cre\":80,\"eff\":80,\"sal\":1335,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GxoJFTT\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":88,\"exp\":131.08599999998725,\"cre\":71,\"eff\":58,\"sal\":1113,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E7kGPnM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":75,\"exp\":112.08600000000186,\"cre\":83,\"eff\":52,\"sal\":1005,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Y3qPR4Y\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":72,\"exp\":122.08600000000186,\"cre\":71,\"eff\":65,\"sal\":1062,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Dw8ZwiU\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":54,\"exp\":118.08600000000186,\"cre\":92,\"eff\":72,\"sal\":1119,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TnuTH3Y\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":96,\"exp\":119.08600000000186,\"cre\":68,\"eff\":55,\"sal\":1113,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tx8J3Ix\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":73,\"exp\":115.08600000000186,\"cre\":63,\"eff\":70,\"sal\":1071,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WQtlgFs\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":64,\"exp\":130.08599999999197,\"cre\":96,\"eff\":78,\"sal\":1248,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8Kh0MIU\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":65,\"exp\":112.08600000000186,\"cre\":55,\"eff\":51,\"sal\":975,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4RYHHB1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":58,\"exp\":146.0859999999162,\"cre\":77,\"eff\":51,\"sal\":1077,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7nczt3P\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":73,\"exp\":121.08600000000186,\"cre\":67,\"eff\":83,\"sal\":1086,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wrL4oQ4\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":92,\"exp\":132.0859999999825,\"cre\":80,\"eff\":75,\"sal\":1158,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZzBKxig\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":76,\"exp\":113.08600000000186,\"cre\":70,\"eff\":80,\"sal\":1098,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZnouA1p\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":70,\"exp\":133.08599999997776,\"cre\":93,\"eff\":58,\"sal\":1182,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ldeelDK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":81,\"exp\":146.0859999999162,\"cre\":61,\"eff\":53,\"sal\":1071,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1oGpu9s\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":51,\"exp\":102.90400000000182,\"cre\":54,\"eff\":53,\"sal\":813,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xnjazCt\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":67,\"exp\":143.90399999992647,\"cre\":63,\"eff\":60,\"sal\":1077,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LgSVpX3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":84,\"exp\":97.90400000000182,\"cre\":81,\"eff\":54,\"sal\":990,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dEeMzDM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":87,\"cha\":52,\"exp\":101.90400000000182,\"cre\":75,\"eff\":71,\"sal\":1017,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IWFOred\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":95,\"cha\":51,\"exp\":126.90400000000182,\"cre\":90,\"eff\":74,\"sal\":1167,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"EKmZAbw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":65,\"exp\":109.90400000000182,\"cre\":66,\"eff\":84,\"sal\":1068,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0KMLMdA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":62,\"exp\":138.90399999995017,\"cre\":72,\"eff\":50,\"sal\":1026,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"H0r0FQW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":100,\"exp\":136.90399999995964,\"cre\":93,\"eff\":95,\"sal\":1305,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IwV7fQ3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":81,\"exp\":120.90400000000182,\"cre\":69,\"eff\":61,\"sal\":1023,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KI422IN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":81,\"exp\":146.90399999991226,\"cre\":91,\"eff\":76,\"sal\":1203,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tweWclW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":60,\"exp\":129.9039999999928,\"cre\":89,\"eff\":85,\"sal\":1188,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AgqEQ48\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":61,\"exp\":135.90399999996438,\"cre\":88,\"eff\":50,\"sal\":1020,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4IZ0NjX\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":57,\"exp\":145.903999999917,\"cre\":98,\"eff\":82,\"sal\":1215,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pr1Lxrr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":54,\"exp\":117.90400000000182,\"cre\":65,\"eff\":91,\"sal\":1083,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WtnO1Qj\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":55,\"exp\":132.9039999999786,\"cre\":96,\"eff\":67,\"sal\":1080,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WWgkEYp\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":76,\"exp\":116.24100000000179,\"cre\":80,\"eff\":96,\"sal\":1206,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8cgv1jA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":81,\"exp\":98.24100000000179,\"cre\":80,\"eff\":89,\"sal\":1086,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jkQ6IbY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":72,\"exp\":108.24100000000179,\"cre\":70,\"eff\":77,\"sal\":1098,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FcNauOD\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":88,\"exp\":129.24099999999592,\"cre\":94,\"eff\":59,\"sal\":1188,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gNynbJa\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":96,\"exp\":135.2409999999675,\"cre\":72,\"eff\":59,\"sal\":1185,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"INfcfZV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":87,\"exp\":124.24100000000179,\"cre\":61,\"eff\":81,\"sal\":1074,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Mz3XJLQ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":82,\"exp\":104.61600000000169,\"cre\":87,\"eff\":99,\"sal\":1152,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dKcD8mu\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":59,\"exp\":96.61600000000169,\"cre\":93,\"eff\":84,\"sal\":1044,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rOEOcV5\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":50,\"exp\":97.61600000000169,\"cre\":60,\"eff\":100,\"sal\":960,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VoB9o3T\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":74,\"exp\":136.61599999996088,\"cre\":98,\"eff\":88,\"sal\":1230,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RUBgRnY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":89,\"exp\":109.61600000000169,\"cre\":93,\"eff\":76,\"sal\":1152,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"isfmDSO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":81,\"exp\":103.61600000000169,\"cre\":98,\"eff\":93,\"sal\":1260,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9n1SVij\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":68,\"exp\":138.6159999999514,\"cre\":74,\"eff\":57,\"sal\":1089,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4k7PFIm\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":62,\"exp\":108.61600000000169,\"cre\":71,\"eff\":92,\"sal\":1083,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kSaH9LL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":76,\"exp\":130.6159999999893,\"cre\":52,\"eff\":59,\"sal\":969,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fhUQNgL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":62,\"exp\":141.6159999999372,\"cre\":93,\"eff\":63,\"sal\":1221,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C2u13On\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":72,\"exp\":114.61600000000169,\"cre\":100,\"eff\":96,\"sal\":1185,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MHlCiuh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":60,\"exp\":109.61600000000169,\"cre\":50,\"eff\":95,\"sal\":1041,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9Iv7Ehn\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":100,\"exp\":143.6159999999277,\"cre\":70,\"eff\":78,\"sal\":1308,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Kd10XaT\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":65,\"exp\":116.61600000000169,\"cre\":96,\"eff\":62,\"sal\":1044,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zVLIcYf\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":92,\"exp\":117.61600000000169,\"cre\":50,\"eff\":80,\"sal\":1119,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VXD8yEj\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":86,\"exp\":116.97200000000151,\"cre\":60,\"eff\":66,\"sal\":1113,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uKrSkvh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":98,\"exp\":100.97200000000151,\"cre\":76,\"eff\":75,\"sal\":1146,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NqXhHZM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":60,\"exp\":105.97200000000151,\"cre\":65,\"eff\":77,\"sal\":966,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nIxYWrH\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":51,\"cha\":81,\"exp\":114.4740000000015,\"cre\":65,\"eff\":89,\"sal\":1083,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"evKSaaL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":92,\"exp\":98.4740000000015,\"cre\":70,\"eff\":72,\"sal\":1104,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sJfirZK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":51,\"exp\":90.4740000000015,\"cre\":71,\"eff\":95,\"sal\":1044,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qbmXBWK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":62,\"exp\":126.49700000000131,\"cre\":86,\"eff\":74,\"sal\":1164,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CDfMZhD\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":96,\"exp\":98.49700000000131,\"cre\":57,\"eff\":73,\"sal\":1113,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ceHRRkD\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":67,\"exp\":87.49700000000131,\"cre\":98,\"eff\":72,\"sal\":1167,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oar72CN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":97,\"exp\":132.49699999998,\"cre\":75,\"eff\":66,\"sal\":1245,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FYA20En\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":94,\"exp\":134.49699999997054,\"cre\":56,\"eff\":55,\"sal\":1134,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Yl1TxLA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":96,\"exp\":124.49700000000131,\"cre\":66,\"eff\":82,\"sal\":1215,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cY5UHyy\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":92,\"exp\":110.49700000000131,\"cre\":59,\"eff\":88,\"sal\":1200,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"08qCDzs\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":97,\"exp\":110.49700000000131,\"cre\":68,\"eff\":70,\"sal\":1107,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5jt282b\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":88,\"cha\":96,\"exp\":86.49700000000131,\"cre\":68,\"eff\":74,\"sal\":1134,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qd6hnFw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":63,\"exp\":132.49699999998,\"cre\":55,\"eff\":76,\"sal\":1125,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PbOaczl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":51,\"exp\":105.49700000000131,\"cre\":72,\"eff\":60,\"sal\":1059,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dqPXElL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":51,\"exp\":84.49700000000131,\"cre\":77,\"eff\":75,\"sal\":909,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SYFTtYA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":90,\"exp\":118.49700000000131,\"cre\":75,\"eff\":65,\"sal\":1131,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4Tcm2pl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":61,\"exp\":107.49700000000131,\"cre\":95,\"eff\":64,\"sal\":1041,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XExex2I\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":76,\"exp\":94.49700000000131,\"cre\":100,\"eff\":67,\"sal\":1206,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"O5OpGbN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":71,\"exp\":108.33600000000126,\"cre\":65,\"eff\":89,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mNbFPX5\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":52,\"exp\":83.33600000000126,\"cre\":91,\"eff\":84,\"sal\":1074,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fNBVjot\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":89,\"exp\":104.33600000000126,\"cre\":82,\"eff\":87,\"sal\":1245,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9UDflZV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":77,\"exp\":106.33600000000126,\"cre\":98,\"eff\":58,\"sal\":1155,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Gtu4onr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":51,\"exp\":119.33600000000126,\"cre\":86,\"eff\":72,\"sal\":1113,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Vqicy38\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":69,\"exp\":94.33600000000126,\"cre\":92,\"eff\":80,\"sal\":1176,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZfLeGZi\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":63,\"exp\":120.9740000000011,\"cre\":73,\"eff\":69,\"sal\":1062,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"m0L7DiN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":95,\"cha\":98,\"exp\":112.9740000000011,\"cre\":100,\"eff\":90,\"sal\":1401,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MXn4gwh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":84,\"cha\":86,\"exp\":115.9740000000011,\"cre\":96,\"eff\":55,\"sal\":1224,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YLNPZR3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":87,\"exp\":123.9740000000011,\"cre\":94,\"eff\":72,\"sal\":1239,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eNiZnAQ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":87,\"cha\":88,\"exp\":99.9740000000011,\"cre\":71,\"eff\":89,\"sal\":1218,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7wCTXAT\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":52,\"exp\":98.9710000000011,\"cre\":50,\"eff\":90,\"sal\":954,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yWaWZ0p\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":84,\"cha\":51,\"exp\":92.9710000000011,\"cre\":90,\"eff\":60,\"sal\":1047,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"h7ocBoy\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":85,\"exp\":96.9710000000011,\"cre\":99,\"eff\":80,\"sal\":1170,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"B7qjVCz\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":58,\"exp\":79.9710000000011,\"cre\":63,\"eff\":58,\"sal\":873,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tzMax3R\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":51,\"exp\":120.78300000000105,\"cre\":78,\"eff\":66,\"sal\":1104,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mWERJgj\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":97,\"exp\":83.78300000000105,\"cre\":80,\"eff\":55,\"sal\":1155,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"STruaTr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":69,\"exp\":84.78300000000105,\"cre\":50,\"eff\":77,\"sal\":1035,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Pp242g6\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":61,\"exp\":109.17300000000095,\"cre\":77,\"eff\":67,\"sal\":1161,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2Vo2mWK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":72,\"exp\":106.17300000000095,\"cre\":75,\"eff\":68,\"sal\":1164,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eI7fLb0\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":58,\"exp\":115.17300000000095,\"cre\":85,\"eff\":92,\"sal\":1203,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WkMtfb7\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":72,\"exp\":102.17300000000095,\"cre\":90,\"eff\":85,\"sal\":1143,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Ov1dquu\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":66,\"exp\":99.17300000000095,\"cre\":82,\"eff\":93,\"sal\":1212,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"k2vUJY8\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":67,\"exp\":123.17300000000095,\"cre\":80,\"eff\":67,\"sal\":1173,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1RTnyFe\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":77,\"exp\":121.17300000000095,\"cre\":96,\"eff\":86,\"sal\":1347,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"q0xpDxH\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":100,\"cha\":79,\"exp\":88.17300000000095,\"cre\":63,\"eff\":99,\"sal\":1212,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"J8uELGY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":51,\"exp\":93.17300000000095,\"cre\":52,\"eff\":96,\"sal\":966,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"v4FsYLq\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":86,\"exp\":110.17300000000095,\"cre\":78,\"eff\":51,\"sal\":1056,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KWiBwXa\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":90,\"exp\":77.17300000000095,\"cre\":66,\"eff\":94,\"sal\":1155,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9i8jJzF\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":69,\"cha\":60,\"exp\":124.17300000000095,\"cre\":88,\"eff\":90,\"sal\":1218,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BlaPR6a\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":85,\"exp\":103.17300000000095,\"cre\":72,\"eff\":54,\"sal\":1044,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fo2MGXm\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":56,\"exp\":95.17300000000095,\"cre\":64,\"eff\":54,\"sal\":921,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"q6yWjO1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":57,\"exp\":85.17300000000095,\"cre\":81,\"eff\":94,\"sal\":1119,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2QCEmgn\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":78,\"exp\":103.17300000000095,\"cre\":72,\"eff\":100,\"sal\":1197,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mGI2ihc\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":62,\"exp\":124.17300000000095,\"cre\":87,\"eff\":95,\"sal\":1215,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tzCggKl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":62,\"exp\":102.17300000000095,\"cre\":74,\"eff\":51,\"sal\":1083,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ieTIqCf\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":54,\"exp\":86.17300000000095,\"cre\":80,\"eff\":86,\"sal\":1080,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nAVXriL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":98,\"exp\":99.17300000000095,\"cre\":77,\"eff\":91,\"sal\":1233,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Br8EUj9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":100,\"cha\":64,\"exp\":92.17300000000095,\"cre\":88,\"eff\":62,\"sal\":1143,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XjKqcKV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":86,\"exp\":125.17300000000095,\"cre\":58,\"eff\":96,\"sal\":1302,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4S5dfxE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":66,\"exp\":124.17300000000095,\"cre\":90,\"eff\":56,\"sal\":1095,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Yq1t64B\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":83,\"exp\":103.17300000000095,\"cre\":88,\"eff\":98,\"sal\":1230,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1isE2Fh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":69,\"exp\":85.17300000000095,\"cre\":79,\"eff\":64,\"sal\":1014,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"irmaOxv\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":90,\"exp\":98.17300000000095,\"cre\":83,\"eff\":74,\"sal\":1215,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YxdJcNC\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":85,\"exp\":120.17300000000095,\"cre\":76,\"eff\":94,\"sal\":1209,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5pXpvJT\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":67,\"exp\":90.17300000000095,\"cre\":84,\"eff\":90,\"sal\":1200,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Qtiai2Z\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":61,\"exp\":84.17300000000095,\"cre\":52,\"eff\":68,\"sal\":999,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Zix1MWZ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":51,\"exp\":96.17300000000095,\"cre\":72,\"eff\":85,\"sal\":1119,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3KhLPIE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":77,\"exp\":95.17300000000095,\"cre\":91,\"eff\":65,\"sal\":1176,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YCDeIGc\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":57,\"exp\":80.17300000000095,\"cre\":68,\"eff\":67,\"sal\":918,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"v8ZaLTa\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":99,\"exp\":118.17300000000095,\"cre\":56,\"eff\":54,\"sal\":1200,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Rac7KWd\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":52,\"exp\":90.17300000000095,\"cre\":100,\"eff\":77,\"sal\":1137,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Hp7WIZu\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":65,\"exp\":81.17300000000095,\"cre\":82,\"eff\":69,\"sal\":984,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IpINawq\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":53,\"exp\":81.17300000000095,\"cre\":67,\"eff\":67,\"sal\":909,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eqQkw4t\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":96,\"exp\":102.17300000000095,\"cre\":82,\"eff\":75,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"daPf1sA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":99,\"exp\":100.17300000000095,\"cre\":85,\"eff\":92,\"sal\":1284,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"aCWL7Ll\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":83,\"exp\":81.17300000000095,\"cre\":54,\"eff\":54,\"sal\":939,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dpcOsEn\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":73,\"exp\":91.05900000000038,\"cre\":68,\"eff\":54,\"sal\":1119,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fGi1Wlt\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":90,\"exp\":107.05900000000038,\"cre\":60,\"eff\":67,\"sal\":1200,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PXExySL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":89,\"exp\":92.05600000000038,\"cre\":57,\"eff\":56,\"sal\":1107,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NmaP57m\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":68,\"cha\":70,\"exp\":105.05600000000038,\"cre\":80,\"eff\":96,\"sal\":1227,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2h2kCAP\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":91,\"exp\":99.05600000000038,\"cre\":75,\"eff\":100,\"sal\":1347,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7NNZkwQ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":67,\"exp\":107.05600000000038,\"cre\":80,\"eff\":78,\"sal\":1149,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OhetPbv\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":79,\"exp\":71.05600000000038,\"cre\":85,\"eff\":72,\"sal\":1107,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nLPMBKR\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":86,\"exp\":93.05600000000038,\"cre\":53,\"eff\":61,\"sal\":1086,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Hef0yV7\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":84,\"exp\":109.05600000000038,\"cre\":58,\"eff\":95,\"sal\":1257,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AUvRkQ8\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":72,\"exp\":81.05600000000038,\"cre\":68,\"eff\":92,\"sal\":1134,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DJSxZHd\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":61,\"exp\":74.05600000000038,\"cre\":90,\"eff\":77,\"sal\":1134,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"m356Riw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":76,\"exp\":98.05600000000038,\"cre\":97,\"eff\":73,\"sal\":1185,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WxJVjtW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":69,\"exp\":98.05600000000038,\"cre\":60,\"eff\":66,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"R76ZnIq\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":92,\"exp\":98.05600000000038,\"cre\":82,\"eff\":67,\"sal\":1212,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vEqWKU1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":60,\"exp\":68.05600000000038,\"cre\":58,\"eff\":79,\"sal\":936,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DqQLH1w\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":81,\"exp\":63.05600000000038,\"cre\":61,\"eff\":81,\"sal\":1125,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Uny7DW1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":62,\"exp\":105.05600000000038,\"cre\":61,\"eff\":77,\"sal\":1059,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WStylkE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":68,\"cha\":87,\"exp\":76.05600000000038,\"cre\":50,\"eff\":90,\"sal\":1083,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"I0wmfHw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":64,\"exp\":62.05600000000038,\"cre\":78,\"eff\":86,\"sal\":1122,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4H4Ldpz\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":100,\"exp\":101.05600000000038,\"cre\":90,\"eff\":84,\"sal\":1281,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0gmcltx\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":51,\"exp\":76.05600000000038,\"cre\":51,\"eff\":86,\"sal\":1035,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8DJqbch\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":63,\"exp\":72.05600000000038,\"cre\":100,\"eff\":65,\"sal\":1143,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LKukgUO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":94,\"exp\":78.05600000000038,\"cre\":54,\"eff\":99,\"sal\":1170,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6h3nSOg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":55,\"exp\":90.05600000000038,\"cre\":58,\"eff\":66,\"sal\":1050,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E7NgnBq\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":78,\"exp\":71.05600000000038,\"cre\":84,\"eff\":85,\"sal\":1098,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7pg0PM9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":61,\"exp\":71.05600000000038,\"cre\":77,\"eff\":62,\"sal\":996,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nPCtmyK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":89,\"exp\":87.05600000000038,\"cre\":65,\"eff\":95,\"sal\":1215,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bDjbgIy\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":72,\"exp\":93.05600000000038,\"cre\":77,\"eff\":95,\"sal\":1137,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qoS05e5\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":56,\"exp\":77.05600000000038,\"cre\":95,\"eff\":51,\"sal\":1017,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"apDyMs4\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":80,\"exp\":91.05600000000038,\"cre\":80,\"eff\":80,\"sal\":1200,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3KFV0XD\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":92,\"exp\":90.05600000000038,\"cre\":59,\"eff\":86,\"sal\":1107,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3ozQIqP\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":77,\"exp\":63.05600000000038,\"cre\":90,\"eff\":58,\"sal\":1128,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yjd0EQf\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":83,\"exp\":73.05600000000038,\"cre\":73,\"eff\":87,\"sal\":1206,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4ELDFA9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":97,\"exp\":95.05600000000038,\"cre\":70,\"eff\":96,\"sal\":1239,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7coSYod\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":62,\"exp\":95.05600000000038,\"cre\":57,\"eff\":96,\"sal\":1134,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ljwAWS2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":72,\"exp\":61.05600000000038,\"cre\":94,\"eff\":84,\"sal\":1197,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"J9mFd69\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":84,\"cha\":75,\"exp\":77.05600000000038,\"cre\":75,\"eff\":75,\"sal\":1128,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0WEMyIP\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":85,\"exp\":70.05600000000038,\"cre\":59,\"eff\":72,\"sal\":996,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jDn5Mft\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":53,\"exp\":98.05600000000038,\"cre\":62,\"eff\":77,\"sal\":1116,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9W4AYq3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":67,\"exp\":72.05600000000038,\"cre\":56,\"eff\":77,\"sal\":984,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QVO3VhA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":68,\"cha\":77,\"exp\":69.05600000000038,\"cre\":93,\"eff\":67,\"sal\":1092,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NCdga1G\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":95,\"cha\":93,\"exp\":77.05600000000038,\"cre\":52,\"eff\":83,\"sal\":1170,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xptWcAJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":50,\"exp\":68.05600000000038,\"cre\":59,\"eff\":100,\"sal\":1089,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rNoRThh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":68,\"cha\":66,\"exp\":103.05600000000038,\"cre\":98,\"eff\":69,\"sal\":1182,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xGTnEvr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":64,\"exp\":96.05300000000038,\"cre\":64,\"eff\":55,\"sal\":972,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HtOLyd1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":85,\"exp\":98.05300000000038,\"cre\":97,\"eff\":65,\"sal\":1200,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8QCe7mz\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":77,\"exp\":69.05300000000038,\"cre\":58,\"eff\":79,\"sal\":1110,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RlRxaJN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":52,\"exp\":105.05300000000038,\"cre\":58,\"eff\":66,\"sal\":1071,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dd3d7u2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":60,\"exp\":72.05300000000038,\"cre\":56,\"eff\":99,\"sal\":1005,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pVzM4s0\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":58,\"exp\":95.05300000000038,\"cre\":67,\"eff\":84,\"sal\":1104,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"msQt8eV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":67,\"exp\":80.05300000000038,\"cre\":50,\"eff\":92,\"sal\":1104,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vpKowPI\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":91,\"exp\":96.05300000000038,\"cre\":88,\"eff\":52,\"sal\":1128,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6osQvwM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":73,\"exp\":61.05300000000038,\"cre\":98,\"eff\":70,\"sal\":1041,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"s40qBt0\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":68,\"exp\":100.05300000000038,\"cre\":77,\"eff\":82,\"sal\":1110,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FfOz5mB\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":97,\"exp\":99.87300000000037,\"cre\":69,\"eff\":68,\"sal\":1227,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7iisOky\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":76,\"exp\":75.87300000000037,\"cre\":78,\"eff\":54,\"sal\":1119,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0dMC9Xc\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":61,\"exp\":93.87300000000037,\"cre\":61,\"eff\":53,\"sal\":1005,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2ityEbO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":78,\"exp\":95.87300000000037,\"cre\":70,\"eff\":96,\"sal\":1203,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FjWtY05\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":76,\"cha\":98,\"exp\":67.87300000000037,\"cre\":80,\"eff\":98,\"sal\":1230,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0RiFr7b\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":96,\"exp\":105.87300000000037,\"cre\":74,\"eff\":98,\"sal\":1335,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RI29m46\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":55,\"exp\":100.90700000000034,\"cre\":82,\"eff\":50,\"sal\":1113,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LMvnOy2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":88,\"exp\":70.90700000000034,\"cre\":50,\"eff\":85,\"sal\":1011,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rc3uw1t\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":97,\"exp\":80.90700000000034,\"cre\":80,\"eff\":52,\"sal\":1059,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5EiCwaY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":75,\"exp\":64.90700000000034,\"cre\":69,\"eff\":85,\"sal\":1125,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sjqNwrF\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":74,\"exp\":81.90700000000034,\"cre\":60,\"eff\":81,\"sal\":1056,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OSa7y94\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":95,\"cha\":75,\"exp\":66.90400000000034,\"cre\":98,\"eff\":80,\"sal\":1218,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QKmAV30\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":61,\"exp\":75.90400000000034,\"cre\":97,\"eff\":64,\"sal\":1164,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WcFQ3WM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":52,\"exp\":83.90400000000034,\"cre\":94,\"eff\":91,\"sal\":1149,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PPmssyq\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":52,\"exp\":77.90400000000034,\"cre\":81,\"eff\":98,\"sal\":1149,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"D2JZXVa\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":79,\"exp\":58.90400000000034,\"cre\":89,\"eff\":56,\"sal\":1104,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Coa8aYk\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":51,\"exp\":74.90400000000034,\"cre\":67,\"eff\":50,\"sal\":948,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Y9CYizb\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":98,\"exp\":59.90100000000034,\"cre\":100,\"eff\":77,\"sal\":1137,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Ua50Kbo\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":92,\"exp\":101.90100000000034,\"cre\":66,\"eff\":78,\"sal\":1161,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"14zTFYe\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":57,\"exp\":71.90100000000034,\"cre\":95,\"eff\":80,\"sal\":1071,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LuHV0Yk\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":53,\"exp\":73.90100000000034,\"cre\":94,\"eff\":91,\"sal\":1059,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"x0oRGZi\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":59,\"exp\":82.90100000000034,\"cre\":69,\"eff\":57,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bO6A51u\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":87,\"exp\":73.90100000000034,\"cre\":77,\"eff\":55,\"sal\":1140,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"j7KLgwS\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":89,\"exp\":106.89800000000034,\"cre\":100,\"eff\":82,\"sal\":1305,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CMizb0a\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":87,\"cha\":64,\"exp\":77.89800000000034,\"cre\":67,\"eff\":51,\"sal\":1014,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RF33mPx\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":91,\"exp\":89.89800000000034,\"cre\":70,\"eff\":61,\"sal\":1107,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"T65nHXI\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":61,\"exp\":74.89800000000034,\"cre\":85,\"eff\":86,\"sal\":1176,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"O9Zw0Jd\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":88,\"exp\":87.9290000000003,\"cre\":80,\"eff\":85,\"sal\":1173,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1cPXPa3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":61,\"exp\":105.9290000000003,\"cre\":75,\"eff\":80,\"sal\":1179,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9CFDjrF\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":63,\"exp\":93.9290000000003,\"cre\":73,\"eff\":87,\"sal\":1170,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eGEwhGA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":62,\"exp\":74.9260000000003,\"cre\":93,\"eff\":73,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qTQyvuK\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":59,\"exp\":81.9260000000003,\"cre\":60,\"eff\":95,\"sal\":1026,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZwKeA4G\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":61,\"exp\":74.9260000000003,\"cre\":67,\"eff\":69,\"sal\":1038,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C5VfDlw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":79,\"exp\":64.9260000000003,\"cre\":91,\"eff\":100,\"sal\":1236,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"odPgEJg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":91,\"exp\":93.9260000000003,\"cre\":73,\"eff\":75,\"sal\":1149,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OUlxeMZ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":75,\"exp\":67.9230000000003,\"cre\":59,\"eff\":86,\"sal\":1071,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cY3TxDQ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":54,\"exp\":78.9230000000003,\"cre\":94,\"eff\":84,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"76mrDTC\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":53,\"exp\":57.9230000000003,\"cre\":64,\"eff\":90,\"sal\":981,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0M1strA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":51,\"exp\":78.9230000000003,\"cre\":90,\"eff\":77,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eOnBtXQ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":53,\"exp\":90.25700000000016,\"cre\":98,\"eff\":99,\"sal\":1206,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vsBN3Qa\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":57,\"exp\":89.25700000000016,\"cre\":82,\"eff\":61,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8ARfU8o\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":82,\"exp\":100.25700000000016,\"cre\":62,\"eff\":53,\"sal\":1146,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Yz0CkVw\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":99,\"exp\":66.25700000000016,\"cre\":77,\"eff\":58,\"sal\":1131,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9CjkPY9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":50,\"exp\":62.25400000000016,\"cre\":98,\"eff\":77,\"sal\":1041,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Os2OiBP\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":73,\"exp\":94.25400000000016,\"cre\":71,\"eff\":68,\"sal\":1137,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HBBjGGG\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":64,\"exp\":97.25400000000016,\"cre\":59,\"eff\":61,\"sal\":996,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"T9fLEbm\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":97,\"exp\":72.25400000000016,\"cre\":70,\"eff\":82,\"sal\":1233,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OtAwKKh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":72,\"cha\":67,\"exp\":93.25400000000016,\"cre\":85,\"eff\":87,\"sal\":1200,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yIIr9QC\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":83,\"exp\":61.25100000000016,\"cre\":59,\"eff\":90,\"sal\":1107,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wh3war0\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":88,\"exp\":99.25100000000016,\"cre\":89,\"eff\":64,\"sal\":1284,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6UEp0CO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":53,\"exp\":76.25100000000016,\"cre\":59,\"eff\":51,\"sal\":885,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Xq7Nvsj\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":95,\"cha\":99,\"exp\":63.25100000000016,\"cre\":62,\"eff\":71,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kjqx6Xh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":81,\"exp\":91.25100000000016,\"cre\":81,\"eff\":86,\"sal\":1230,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"c2FUvUl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":87,\"cha\":91,\"exp\":55.25100000000016,\"cre\":74,\"eff\":51,\"sal\":1062,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Gy6x5W9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":72,\"exp\":80.24800000000016,\"cre\":84,\"eff\":73,\"sal\":1185,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ki7dx24\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":60,\"exp\":99.24800000000016,\"cre\":84,\"eff\":76,\"sal\":1113,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VzeDVv7\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":98,\"exp\":100.24800000000016,\"cre\":90,\"eff\":64,\"sal\":1290,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ab3DGFr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":86,\"exp\":89.24800000000016,\"cre\":70,\"eff\":72,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qxhyeAg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":60,\"exp\":74.24800000000016,\"cre\":66,\"eff\":98,\"sal\":1062,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"TxZCJwJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":66,\"exp\":84.24500000000016,\"cre\":50,\"eff\":84,\"sal\":1059,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RpXqPqj\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":99,\"exp\":80.24500000000016,\"cre\":58,\"eff\":94,\"sal\":1254,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vHTshUD\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":99,\"exp\":64.24500000000016,\"cre\":71,\"eff\":88,\"sal\":1185,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cW3Uv48\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":78,\"exp\":104.24500000000016,\"cre\":95,\"eff\":99,\"sal\":1362,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yncJAlF\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":57,\"exp\":75.24500000000016,\"cre\":83,\"eff\":61,\"sal\":1011,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ieYZhrO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":75,\"exp\":54.24500000000016,\"cre\":84,\"eff\":55,\"sal\":1041,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BR8SxuY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":55,\"exp\":104.24200000000016,\"cre\":82,\"eff\":70,\"sal\":1194,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"H7HnTV2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":78,\"exp\":84.24200000000016,\"cre\":74,\"eff\":88,\"sal\":1242,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rFJoQT6\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":82,\"exp\":88.24200000000016,\"cre\":51,\"eff\":52,\"sal\":999,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"N5QVbKr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":74,\"exp\":77.24200000000016,\"cre\":86,\"eff\":65,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZwgQ2d7\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":65,\"exp\":54.24200000000016,\"cre\":65,\"eff\":64,\"sal\":942,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MDAzx3x\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":84,\"cha\":52,\"exp\":84.23900000000016,\"cre\":93,\"eff\":97,\"sal\":1218,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6l4Bs0B\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":64,\"exp\":70.23900000000016,\"cre\":77,\"eff\":53,\"sal\":936,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"amr6It1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":77,\"exp\":69.23900000000016,\"cre\":59,\"eff\":93,\"sal\":1041,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KIPr6IU\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":84,\"exp\":93.23900000000016,\"cre\":72,\"eff\":90,\"sal\":1245,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"914whGQ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":66,\"exp\":75.23900000000016,\"cre\":97,\"eff\":99,\"sal\":1164,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xCypuHu\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":64,\"exp\":70.23600000000016,\"cre\":97,\"eff\":70,\"sal\":1050,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VRVq3an\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":100,\"cha\":91,\"exp\":64.23600000000016,\"cre\":54,\"eff\":88,\"sal\":1179,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jjKRqKk\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":70,\"cha\":84,\"exp\":82.23600000000016,\"cre\":80,\"eff\":74,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3VVHjak\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":96,\"exp\":104.23600000000016,\"cre\":95,\"eff\":98,\"sal\":1338,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ozvQLvA\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":78,\"exp\":60.23600000000016,\"cre\":79,\"eff\":75,\"sal\":1038,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XkAhVC7\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":83,\"exp\":74.23600000000016,\"cre\":93,\"eff\":75,\"sal\":1146,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":23254.561999999565,\"Engineer\":25725.22749999925,\"Business\":12685.342499999628,\"Management\":22130.389999999796,\"Research & Development\":172661.21759999968,\"total\":256456.7395999979,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":33,\"Engineer\":33,\"Business\":31,\"Management\":29,\"Research & Development\":192,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":33,\"Engineer\":33,\"Business\":31,\"Management\":29,\"Research & Development\":192,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":318}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"B67IVoD\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":97,\"exp\":112.78000000000196,\"cre\":94,\"eff\":87,\"sal\":1239,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SafAv7U\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":90,\"exp\":124.78000000000196,\"cre\":56,\"eff\":79,\"sal\":1164,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"429Q7j4\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":68,\"exp\":140.77999999994142,\"cre\":54,\"eff\":89,\"sal\":1122,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jrIL3qf\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":62,\"exp\":101.78000000000196,\"cre\":83,\"eff\":89,\"sal\":1119,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"lO9EJfb\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":79,\"exp\":104.78000000000196,\"cre\":52,\"eff\":73,\"sal\":936,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ukE1cq2\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":56,\"exp\":123.78000000000196,\"cre\":88,\"eff\":91,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XfZAD8e\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":55,\"exp\":111.78000000000196,\"cre\":62,\"eff\":83,\"sal\":1053,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"U8dMML4\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":83,\"exp\":123.78000000000196,\"cre\":72,\"eff\":58,\"sal\":1149,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C9pzhyC\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":70,\"exp\":138.7799999999509,\"cre\":99,\"eff\":69,\"sal\":1143,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":1543.060000000004,\"Engineer\":1731.2399999999152,\"Business\":377.390000000001,\"Management\":1454.4000000000037,\"Research & Development\":1888.3479999999624,\"total\":6994.437999999887},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":9}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FX5Qd9b\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":57,\"exp\":112.77700000000196,\"cre\":81,\"eff\":74,\"sal\":1053,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NMbQL6O\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":100,\"exp\":146.77699999991302,\"cre\":83,\"eff\":54,\"sal\":1263,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2AJUYQ5\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":86,\"exp\":135.7769999999651,\"cre\":90,\"eff\":58,\"sal\":1242,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xV5iUSZ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":84,\"cha\":52,\"exp\":134.77699999996986,\"cre\":88,\"eff\":54,\"sal\":1083,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pM3xFlz\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":78,\"exp\":137.77699999995565,\"cre\":87,\"eff\":79,\"sal\":1236,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"P0ksU1f\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":64,\"exp\":135.7769999999651,\"cre\":88,\"eff\":71,\"sal\":1119,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Xfut3Ar\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":90,\"exp\":130.77699999998882,\"cre\":59,\"eff\":80,\"sal\":1212,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1ecFjSi\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":54,\"exp\":132.77699999997932,\"cre\":73,\"eff\":67,\"sal\":1059,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OBNxGYz\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":57,\"exp\":141.7769999999367,\"cre\":93,\"eff\":73,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C0iMH34\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":71,\"exp\":124.57900000000195,\"cre\":61,\"eff\":86,\"sal\":1050,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zKubKyW\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":78,\"exp\":118.57900000000195,\"cre\":68,\"eff\":67,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bV4wvCl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":74,\"exp\":142.5789999999329,\"cre\":99,\"eff\":69,\"sal\":1170,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OdFFNaO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":68,\"cha\":72,\"exp\":146.57899999991395,\"cre\":95,\"eff\":59,\"sal\":1167,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"xhjPpKg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":51,\"exp\":138.57899999995183,\"cre\":71,\"eff\":61,\"sal\":981,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SWEEcwg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":77,\"exp\":147.5789999999092,\"cre\":91,\"eff\":51,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bkIPySR\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":80,\"cha\":90,\"exp\":149.57899999989974,\"cre\":77,\"eff\":65,\"sal\":1230,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Dg1QyLl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":84,\"exp\":133.57899999997554,\"cre\":56,\"eff\":77,\"sal\":1194,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HQjueUy\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":58,\"cha\":64,\"exp\":102.57900000000195,\"cre\":97,\"eff\":80,\"sal\":1050,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"c8k0kzN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":88,\"exp\":114.57900000000195,\"cre\":83,\"eff\":91,\"sal\":1134,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"orZyw1J\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":84,\"exp\":150.578999999895,\"cre\":86,\"eff\":80,\"sal\":1284,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dDF6bXn\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":95,\"exp\":117.57900000000195,\"cre\":97,\"eff\":87,\"sal\":1284,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rD5KjGg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":53,\"exp\":135.57899999996604,\"cre\":96,\"eff\":85,\"sal\":1200,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wZf2Uc4\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":81,\"exp\":142.5789999999329,\"cre\":86,\"eff\":75,\"sal\":1185,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HUplWZy\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":52,\"exp\":114.57900000000195,\"cre\":51,\"eff\":60,\"sal\":897,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iStJzEO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":97,\"exp\":142.5789999999329,\"cre\":57,\"eff\":98,\"sal\":1221,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vIDIB7y\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":85,\"exp\":103.57900000000195,\"cre\":87,\"eff\":77,\"sal\":1095,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CueDfrN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":92,\"exp\":115.57900000000195,\"cre\":83,\"eff\":50,\"sal\":1062,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RBp2S1Y\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":50,\"exp\":115.57900000000195,\"cre\":82,\"eff\":95,\"sal\":1110,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QXbGFCM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":68,\"exp\":120.57900000000195,\"cre\":94,\"eff\":55,\"sal\":1026,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"j5Y0VPJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":89,\"cha\":53,\"exp\":104.57900000000195,\"cre\":56,\"eff\":78,\"sal\":987,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DQGzSj4\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":65,\"exp\":145.5789999999187,\"cre\":51,\"eff\":70,\"sal\":1119,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"41WRi55\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":72,\"exp\":143.57899999992816,\"cre\":77,\"eff\":64,\"sal\":1086,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YGFY0Ms\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":54,\"exp\":143.57899999992816,\"cre\":72,\"eff\":68,\"sal\":1029,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wT4Wccr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":96,\"exp\":127.57900000000195,\"cre\":57,\"eff\":66,\"sal\":1071,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zFWLLDU\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":75,\"exp\":140.57599999994238,\"cre\":88,\"eff\":98,\"sal\":1236,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5PCs2EH\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":88,\"exp\":142.57599999993292,\"cre\":89,\"eff\":79,\"sal\":1191,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mP27npO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":88,\"cha\":62,\"exp\":135.57599999996606,\"cre\":85,\"eff\":56,\"sal\":1125,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"R0DhXOJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":77,\"cha\":54,\"exp\":143.57599999992817,\"cre\":65,\"eff\":51,\"sal\":1017,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bwgTjPh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":100,\"exp\":125.57600000000195,\"cre\":68,\"eff\":65,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dSwqAB8\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":87,\"cha\":84,\"exp\":136.57599999996134,\"cre\":93,\"eff\":78,\"sal\":1281,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"8hMht7S\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":61,\"exp\":125.57600000000195,\"cre\":91,\"eff\":85,\"sal\":1146,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"KvGddeO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":87,\"exp\":148.5759999999045,\"cre\":76,\"eff\":52,\"sal\":1116,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"K5Tmtj9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":93,\"exp\":121.57600000000195,\"cre\":95,\"eff\":79,\"sal\":1254,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SWzpqdh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":87,\"cha\":85,\"exp\":118.57600000000195,\"cre\":74,\"eff\":59,\"sal\":1116,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AKTpoBG\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":50,\"exp\":118.57600000000195,\"cre\":91,\"eff\":51,\"sal\":972,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pOTxcS5\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":79,\"exp\":105.57600000000195,\"cre\":52,\"eff\":86,\"sal\":1026,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ek3tuWq\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":67,\"exp\":123.57600000000195,\"cre\":62,\"eff\":57,\"sal\":1008,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OOXsF2n\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":81,\"exp\":151.57599999989029,\"cre\":75,\"eff\":57,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bTWhKcJ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":57,\"exp\":105.57600000000195,\"cre\":84,\"eff\":74,\"sal\":1080,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"X1YpHzt\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":91,\"exp\":139.57599999994713,\"cre\":96,\"eff\":98,\"sal\":1302,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZkNYDYY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":86,\"cha\":78,\"exp\":112.57600000000195,\"cre\":72,\"eff\":79,\"sal\":1128,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jEUxMz7\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":76,\"exp\":136.57599999996134,\"cre\":72,\"eff\":50,\"sal\":1125,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ZDhhj32\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":92,\"exp\":108.57600000000195,\"cre\":56,\"eff\":52,\"sal\":939,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jnnnh8c\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":78,\"exp\":112.57600000000195,\"cre\":90,\"eff\":56,\"sal\":1080,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DEaF7D3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":74,\"exp\":135.57599999996606,\"cre\":100,\"eff\":90,\"sal\":1266,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"hbrwZH3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":90,\"exp\":104.57600000000195,\"cre\":62,\"eff\":92,\"sal\":1185,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Ibz5e1x\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":86,\"exp\":145.5759999999187,\"cre\":93,\"eff\":63,\"sal\":1287,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DsWDE8J\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":96,\"cha\":91,\"exp\":121.57600000000195,\"cre\":92,\"eff\":62,\"sal\":1233,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"QdEKRA9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":78,\"exp\":102.57600000000195,\"cre\":78,\"eff\":52,\"sal\":1071,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UKbEUR9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":69,\"cha\":93,\"exp\":124.57600000000195,\"cre\":78,\"eff\":98,\"sal\":1233,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wOjLkr1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":74,\"exp\":116.57600000000195,\"cre\":54,\"eff\":68,\"sal\":933,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jMwuj7c\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":88,\"cha\":50,\"exp\":109.57600000000195,\"cre\":64,\"eff\":65,\"sal\":975,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Mfrtach\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":52,\"exp\":103.57600000000195,\"cre\":95,\"eff\":51,\"sal\":1047,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VXvApjj\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":69,\"cha\":72,\"exp\":124.57600000000195,\"cre\":75,\"eff\":52,\"sal\":1023,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qA14pFL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":69,\"exp\":146.57599999991396,\"cre\":50,\"eff\":98,\"sal\":1128,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PFItaLi\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":59,\"exp\":146.57599999991396,\"cre\":92,\"eff\":63,\"sal\":1083,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"JsqgdBO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":98,\"exp\":137.5759999999566,\"cre\":79,\"eff\":86,\"sal\":1272,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IuknLvy\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":56,\"exp\":101.57600000000195,\"cre\":72,\"eff\":95,\"sal\":1113,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u5iAF04\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":85,\"exp\":125.57600000000195,\"cre\":96,\"eff\":91,\"sal\":1272,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"plNj8tN\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":59,\"exp\":119.57600000000195,\"cre\":95,\"eff\":96,\"sal\":1152,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3srJbC1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":85,\"cha\":73,\"exp\":110.57600000000195,\"cre\":72,\"eff\":96,\"sal\":1155,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RoJFKVP\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":88,\"cha\":91,\"exp\":149.57599999989975,\"cre\":79,\"eff\":68,\"sal\":1272,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PgxpwdV\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":64,\"exp\":101.57600000000195,\"cre\":93,\"eff\":69,\"sal\":993,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"dxrJWAI\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":51,\"cha\":95,\"exp\":113.57600000000195,\"cre\":52,\"eff\":63,\"sal\":969,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oyaPhfg\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":100,\"cha\":85,\"exp\":118.57600000000195,\"cre\":99,\"eff\":97,\"sal\":1344,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"tbRvx03\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":98,\"cha\":67,\"exp\":137.5759999999566,\"cre\":59,\"eff\":86,\"sal\":1188,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IEZnch1\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":57,\"exp\":112.57600000000195,\"cre\":82,\"eff\":64,\"sal\":984,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gcLYRbF\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":56,\"exp\":142.57599999993292,\"cre\":71,\"eff\":81,\"sal\":1059,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"FO5kbRc\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":81,\"cha\":89,\"exp\":140.57599999994238,\"cre\":99,\"eff\":69,\"sal\":1281,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yVX7e6j\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":56,\"cha\":96,\"exp\":141.57599999993764,\"cre\":73,\"eff\":79,\"sal\":1182,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"eMrHF5O\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":94,\"exp\":110.57600000000195,\"cre\":91,\"eff\":95,\"sal\":1167,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HiWfupP\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":97,\"cha\":83,\"exp\":102.57600000000195,\"cre\":55,\"eff\":82,\"sal\":1104,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RIIkgSk\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":67,\"exp\":142.57599999993292,\"cre\":75,\"eff\":83,\"sal\":1230,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PdGulIB\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":91,\"exp\":128.57599999999923,\"cre\":95,\"eff\":52,\"sal\":1104,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AyA8fx4\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":78,\"exp\":115.80300000000166,\"cre\":98,\"eff\":94,\"sal\":1248,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qMCdd4R\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":53,\"exp\":133.80299999997416,\"cre\":93,\"eff\":51,\"sal\":1038,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"mHZvjsf\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":79,\"cha\":61,\"exp\":103.80300000000166,\"cre\":91,\"eff\":50,\"sal\":1023,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"V8Qd8Zt\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":78,\"cha\":93,\"exp\":127.80300000000166,\"cre\":50,\"eff\":91,\"sal\":1188,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"u8qxlj9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":94,\"exp\":129.80299999999312,\"cre\":64,\"eff\":75,\"sal\":1158,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Tnbq7Yd\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":95,\"exp\":128.80299999999787,\"cre\":77,\"eff\":88,\"sal\":1221,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":1428.351999999899,\"Engineer\":1551.027999999874,\"Business\":422.0879999999996,\"Management\":1655.4319999999584,\"Research & Development\":76584.2431999982,\"total\":81641.14319999792,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":83,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":83,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":90}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LU7CkCR\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":70,\"exp\":111.77400000000196,\"cre\":94,\"eff\":53,\"sal\":1110,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zgOtc2t\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":82,\"cha\":83,\"exp\":112.77400000000196,\"cre\":62,\"eff\":100,\"sal\":1164,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pZe6akT\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":70,\"exp\":102.77400000000196,\"cre\":69,\"eff\":97,\"sal\":1158,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"U4CsVSr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":63,\"cha\":53,\"exp\":121.77400000000196,\"cre\":58,\"eff\":54,\"sal\":894,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"qUkr7xH\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":68,\"exp\":108.77400000000196,\"cre\":72,\"eff\":81,\"sal\":1029,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2bugFud\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":83,\"cha\":67,\"exp\":127.77400000000196,\"cre\":81,\"eff\":77,\"sal\":1152,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rnKgdWy\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":91,\"exp\":124.77400000000196,\"cre\":84,\"eff\":64,\"sal\":1113,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LMq8y6I\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":65,\"exp\":134.77399999996987,\"cre\":56,\"eff\":52,\"sal\":951,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9WnFVCM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":100,\"exp\":140.77399999994145,\"cre\":56,\"eff\":96,\"sal\":1224,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":1505.848000000004,\"Engineer\":1595.5220000000058,\"Business\":362.38700000000097,\"Management\":1674.6080000000038,\"Research & Development\":1605.638399999929,\"total\":6744.003399999943},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":9}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9ovYHTa\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":71,\"cha\":81,\"exp\":102.77100000000196,\"cre\":86,\"eff\":82,\"sal\":1113,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"W2B28Pl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":64,\"cha\":67,\"exp\":148.77099999990358,\"cre\":93,\"eff\":100,\"sal\":1263,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"BDNrB21\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":96,\"exp\":114.77100000000196,\"cre\":71,\"eff\":67,\"sal\":1056,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rARwfxE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":65,\"exp\":136.77099999996042,\"cre\":69,\"eff\":60,\"sal\":1023,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"msbp7H8\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":55,\"cha\":74,\"exp\":114.77100000000196,\"cre\":52,\"eff\":54,\"sal\":894,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OvxVK2G\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":90,\"cha\":50,\"exp\":113.77100000000196,\"cre\":65,\"eff\":52,\"sal\":957,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vTTDX26\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":99,\"exp\":126.77100000000196,\"cre\":65,\"eff\":88,\"sal\":1158,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6xl6Kf6\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":57,\"cha\":99,\"exp\":111.77100000000196,\"cre\":76,\"eff\":61,\"sal\":1059,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oyg5L9t\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":99,\"cha\":65,\"exp\":139.7709999999462,\"cre\":79,\"eff\":62,\"sal\":1179,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":1580.0419999999056,\"Engineer\":1376.2129999999438,\"Business\":367.385500000001,\"Management\":1584.942000000004,\"Research & Development\":1835.9335999999585,\"total\":6744.516099999813},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":9}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OJvFCnx\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":68,\"cha\":74,\"exp\":150.7709999998941,\"cre\":85,\"eff\":93,\"sal\":1257,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5RoWkyO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":53,\"cha\":96,\"exp\":129.77099999999356,\"cre\":97,\"eff\":88,\"sal\":1236,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"biKBKkX\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":75,\"exp\":106.77100000000196,\"cre\":93,\"eff\":72,\"sal\":1104,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wCOxwNX\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":65,\"cha\":93,\"exp\":129.77099999999356,\"cre\":79,\"eff\":50,\"sal\":1095,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XyuUVv9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":84,\"cha\":73,\"exp\":144.7709999999225,\"cre\":78,\"eff\":53,\"sal\":1143,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"d0GGRs9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":94,\"cha\":71,\"exp\":139.7709999999462,\"cre\":98,\"eff\":88,\"sal\":1317,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CzSKrJE\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":60,\"cha\":52,\"exp\":115.77100000000196,\"cre\":90,\"eff\":61,\"sal\":981,\"loc\":\"\",\"pos\":\"Management\",\"nextPos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ldQM2WG\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":67,\"cha\":59,\"exp\":124.77100000000196,\"cre\":60,\"eff\":96,\"sal\":1065,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"z9VXTbr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":92,\"cha\":68,\"exp\":124.77100000000196,\"cre\":64,\"eff\":83,\"sal\":1140,\"loc\":\"\",\"pos\":\"Research & Development\",\"nextPos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":1582.7419999998879,\"Engineer\":1420.8129999999933,\"Business\":425.78549999996125,\"Management\":1502.6819999999482,\"Research & Development\":1865.7336000000032,\"total\":6797.756099999794,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":2,\"Engineer\":2,\"Business\":1,\"Management\":2,\"Research & Development\":2,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":9}}},\"numAdVerts\":115,\"lastCycleRevenue\":56667784417.83179,\"lastCycleExpenses\":550325.7331234892,\"thisCycleRevenue\":0,\"thisCycleExpenses\":5503326.697574629,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":17,\"sizeUsed\":236.34729836378676,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":59.4389857350034,\"loc\":\"Aevum\",\"size\":3400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":71.36464757669916,\"dmdR\":[65,85],\"cmp\":48.21612453911084,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":11.887778701070715,\"sll\":0,\"prd\":-11.887778701070715,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1535.2425020910111,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":4013.679245211489,\"qlt\":119.97838972339409,\"dmd\":63.24511819673899,\"dmdR\":[20,90],\"cmp\":57.26465636050567,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":59.438893505353576,\"sll\":402.22483477754616,\"prd\":-59.438893505353576,\"imp\":460.8068180265024,\"exp\":[],\"totalExp\":0,\"bCost\":3169.5827105289522,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX/10\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":2202966.494889617}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.57017794694119,\"dmdR\":[80,90],\"cmp\":75.15103718904022,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9255.790851693011,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":85.54643483305063,\"dmdR\":[80,99],\"cmp\":80.30352671500508,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66594.45328856618,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":3.5316132622740777}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":98.70899859710536,\"dmdR\":[80,99],\"cmp\":89.35260873746475,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":19703.68822869306,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":70.29231134101647,\"dmdR\":[5,99],\"cmp\":45.06542161980097,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":246650.71269650105,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":17,\"sizeUsed\":187.0856310436052,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":21.77452988373789,\"loc\":\"Chongqing\",\"size\":3400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":78.06263185082382,\"dmdR\":[65,85],\"cmp\":43.08221138344338,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":4.3548994775863,\"sll\":0,\"prd\":-4.354899477586299,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1641.4700360789648,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":3480.4186522169243,\"qlt\":123.53853972339161,\"dmd\":43.9093965306961,\"dmdR\":[20,90],\"cmp\":36.23890212742913,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":21.774497387931497,\"sll\":350.7082603272085,\"prd\":-21.774497387931493,\"imp\":369.816362609624,\"exp\":[],\"totalExp\":0,\"bCost\":3382.3841852266487,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX/10\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":861291.6660746605}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":81.90994027148892,\"dmdR\":[80,90],\"cmp\":84.68595400542117,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10201.094674771271,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":82.97494412628652,\"dmdR\":[80,99],\"cmp\":83.53966832792334,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":55874.162922929485,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":84.62252498562631,\"dmdR\":[80,99],\"cmp\":88.25619632619753,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":19404.072118818054,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":56.976248940075,\"dmdR\":[5,99],\"cmp\":29.531585699860404,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86578.36656947627,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":17,\"sizeUsed\":171.69034346749024,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":21.79166478385102,\"loc\":\"Sector-12\",\"size\":3400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":77.55531242466606,\"dmdR\":[65,85],\"cmp\":53.69447031877504,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":4.358326452422014,\"sll\":0,\"prd\":-4.3583264524220136,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1370.9997556351532,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":3172.307282204481,\"qlt\":120.44605639006068,\"dmd\":59.683723160906204,\"dmdR\":[20,90],\"cmp\":47.450388964839455,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":21.79163226211007,\"sll\":317.6031212248344,\"prd\":-21.791632262110067,\"imp\":339.02236048255816,\"exp\":[],\"totalExp\":0,\"bCost\":3974.2455045972415,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":null,\"maxsll\":970889.7235266211}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.20468327606514,\"dmdR\":[80,90],\"cmp\":74.6884820451527,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9835.074351189522,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":93.85883157529801,\"dmdR\":[80,99],\"cmp\":82.17787721712737,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":96431.16203176563,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":83.21393739065661,\"dmdR\":[80,99],\"cmp\":93.0888267852937,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":11961.422986995552,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":65.79318938152014,\"dmdR\":[5,99],\"cmp\":51.256634523960045,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":96561.26471356302,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":17,\"sizeUsed\":173.63212386712766,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":22.07127049941443,\"loc\":\"New Tokyo\",\"size\":3400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":71.48236917137005,\"dmdR\":[65,85],\"cmp\":41.60422325460129,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":4.41424773425512,\"sll\":0,\"prd\":-4.41424773425512,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1448.2674226236718,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":3207.7876132872443,\"qlt\":121.16833972339293,\"dmd\":29.039399250626794,\"dmdR\":[20,90],\"cmp\":39.130881668831684,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":22.0712386712756,\"sll\":320.77879315694565,\"prd\":-22.0712386712756,\"imp\":342.85,\"exp\":[],\"totalExp\":0,\"bCost\":2748.4144013816367,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX/10\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":528642.6936055506}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.88500446448772,\"dmdR\":[80,90],\"cmp\":89.7677013402244,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9131.063340246346,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":92.99798695337944,\"dmdR\":[80,99],\"cmp\":91.77512722057662,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":108229.69905395048,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":98.30708632177803,\"dmdR\":[80,99],\"cmp\":84.39742914977442,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":19863.280050693753,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":19.293268822997383,\"dmdR\":[5,99],\"cmp\":30.899188700192443,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":97918.67969330063,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":17,\"sizeUsed\":154.5482872549369,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":22.021378147844153,\"loc\":\"Ishima\",\"size\":3400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":83.28401640297152,\"dmdR\":[65,85],\"cmp\":46.79397765239574,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":4.404269157910948,\"sll\":0,\"prd\":-4.404269157910948,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1511.1283064501067,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":2826.7095956240787,\"qlt\":121.89227305672493,\"dmd\":29.678029429996734,\"dmdR\":[20,90],\"cmp\":38.45491869205469,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":22.021345789554736,\"sll\":282.2632972727496,\"prd\":-22.021345789554736,\"imp\":304.69230535196255,\"exp\":[],\"totalExp\":0,\"bCost\":2669.969940092619,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX/10\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":545202.5870897239}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":82.49469673043689,\"dmdR\":[80,90],\"cmp\":66.79769372851375,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10536.719017715894,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":95.64028092073369,\"dmdR\":[80,99],\"cmp\":81.10754965062206,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":53903.62395056587,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":81.70911971417372,\"dmdR\":[80,99],\"cmp\":91.12026881306052,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":23819.586221279937,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":30.627044903142806,\"dmdR\":[5,99],\"cmp\":39.628163343468486,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":54058.32258482642,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":12,\"sizeUsed\":191.830004510934,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":21.876532158487258,\"loc\":\"Volhaven\",\"size\":2400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":84.16425150276748,\"dmdR\":[65,85],\"cmp\":54.54294308799715,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":4.375299900104742,\"sll\":0,\"prd\":-4.375299900104742,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1534.961787069042,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":3574.0820962123935,\"qlt\":120.91712861228297,\"dmd\":47.94239870572174,\"dmdR\":[20,90],\"cmp\":33.67435345169762,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":21.876499500523707,\"sll\":357.8429514010568,\"prd\":-21.876499500523707,\"imp\":379.28470912176306,\"exp\":[],\"totalExp\":0,\"bCost\":5012.919127211058,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX/10\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":982484.0245482635}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.7985026220793,\"dmdR\":[80,90],\"cmp\":90.71756588361222,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7077.226819415377,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":92.74149852772857,\"dmdR\":[80,99],\"cmp\":86.87751898632855,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":88747.11903996668,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":88.3825781542523,\"dmdR\":[80,99],\"cmp\":94.58918602078248,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":18216.291357194794,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":44.96536693413665,\"dmdR\":[5,99],\"cmp\":74.85428170047979,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40911.69960928157,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"name\":\"wooter\",\"type\":\"Utilities\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":0,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{},\"reqMats\":{\"Hardware\":0.1,\"Metal\":0.1},\"prodMats\":[\"Water\"],\"products\":{},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":150000000000,\"reFac\":0.5,\"sciFac\":0.6,\"hwFac\":0,\"robFac\":0.4,\"aiFac\":0.4,\"advFac\":0.08,\"prodMult\":6,\"state\":\"PRODUCTION\",\"newInd\":true,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":3}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":3}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":3}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":3}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":3}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":3}}},\"numAdVerts\":0,\"lastCycleRevenue\":0,\"lastCycleExpenses\":0,\"thisCycleRevenue\":0,\"thisCycleExpenses\":0,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Aevum\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":83.28785301504098,\"dmdR\":[65,85],\"cmp\":43.53880138520603,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1665.7977820048798,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":75.87072093891479,\"dmdR\":[75,85],\"cmp\":74.2998396165273,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1985.476781061089,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.64726086695718,\"dmdR\":[80,90],\"cmp\":80.94373366184023,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6758.843459576072,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":98.47680701187852,\"dmdR\":[80,99],\"cmp\":83.88782813331588,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":92318.34862045219,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":84.09488359525344,\"dmdR\":[80,99],\"cmp\":93.57925805375771,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10250.539123303406,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":55.58810923504895,\"dmdR\":[5,99],\"cmp\":35.83425566845105,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":91703.41463120209,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Chongqing\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":71.5988071901941,\"dmdR\":[65,85],\"cmp\":50.3871248132952,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1432.72277022879,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":76.25465475903373,\"dmdR\":[75,85],\"cmp\":67.50149424375894,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2931.89640826499,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.34932714493188,\"dmdR\":[80,90],\"cmp\":85.44771087419959,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6930.827322245072,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":86.06637430637345,\"dmdR\":[80,99],\"cmp\":80.46920501444039,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":97714.45865571394,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":94.23392579161255,\"dmdR\":[80,99],\"cmp\":97.28978838867533,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14074.97072920699,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":36.18788165093083,\"dmdR\":[5,99],\"cmp\":42.74032759177759,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":58174.72821541853,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Sector-12\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":81.0123091490181,\"dmdR\":[65,85],\"cmp\":52.14149944509596,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1577.9877684846829,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":77.93160253800087,\"dmdR\":[75,85],\"cmp\":71.13521829110496,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2565.663576343298,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":81.83732919473053,\"dmdR\":[80,90],\"cmp\":70.49372425679466,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8782.501274930073,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":82.34676261327482,\"dmdR\":[80,99],\"cmp\":83.867078729188,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72859.46150556408,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":81.9876279673161,\"dmdR\":[80,99],\"cmp\":98.27947696294196,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10821.739071297645,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":41.71343736940511,\"dmdR\":[5,99],\"cmp\":32.19412331688455,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":109372.14117962499,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"New Tokyo\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":73.46011436210094,\"dmdR\":[65,85],\"cmp\":48.81514304608849,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1506.9933655884802,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":75.41847687163713,\"dmdR\":[75,85],\"cmp\":68.2684342150999,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2444.112956656477,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":89.38506725079368,\"dmdR\":[80,90],\"cmp\":82.27788029257499,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8894.807768175062,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":89.5991203507858,\"dmdR\":[80,99],\"cmp\":86.41071350469106,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":84138.88708469432,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":94.623870855221,\"dmdR\":[80,99],\"cmp\":94.5823858948687,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":18864.256956174202,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":59.536397098572444,\"dmdR\":[5,99],\"cmp\":57.38582626150338,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":58154.83457366018,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Ishima\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":72.25239956350553,\"dmdR\":[65,85],\"cmp\":56.30074973254254,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1439.8446500265131,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":79.68614004831151,\"dmdR\":[75,85],\"cmp\":61.19332965917162,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2517.679959420227,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":80.73778868921207,\"dmdR\":[80,90],\"cmp\":73.9849080445021,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10329.583993746322,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":98.43218565252488,\"dmdR\":[80,99],\"cmp\":83.67784474594443,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":84361.02226143927,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":84.38247178597119,\"dmdR\":[80,99],\"cmp\":85.76080393893908,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12125.926978026959,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":56.9905041399024,\"dmdR\":[5,99],\"cmp\":57.686493559620715,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":51810.02269882258,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Volhaven\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":69.68222822422115,\"dmdR\":[65,85],\"cmp\":43.341447825913164,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1557.385785441966,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":79.13138318232957,\"dmdR\":[75,85],\"cmp\":65.67588483156484,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3016.5060451335653,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":87.69153014282115,\"dmdR\":[80,90],\"cmp\":73.1429169110149,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8067.817158114914,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":90.4908052739091,\"dmdR\":[80,99],\"cmp\":85.10939411904035,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69055.6432103857,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":85.98987906952995,\"dmdR\":[80,99],\"cmp\":95.47038144411462,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14568.806315252099,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":29.425805412357526,\"dmdR\":[5,99],\"cmp\":71.85728193175922,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68802.11687841298,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"name\":\"Big Energy\",\"type\":\"Energy\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":0,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{},\"reqMats\":{\"Hardware\":0.1,\"Metal\":0.2},\"prodMats\":[\"Energy\"],\"products\":{},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":225000000000,\"reFac\":0.65,\"sciFac\":0.7,\"hwFac\":0,\"robFac\":0.05,\"aiFac\":0.3,\"advFac\":0.08,\"prodMult\":6,\"state\":\"PRODUCTION\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Hzw1dpv\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":74,\"cha\":99,\"exp\":121.60800000000097,\"cre\":56,\"eff\":75,\"sal\":1200,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4gPI1dL\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":54,\"cha\":64,\"exp\":85.60800000000097,\"cre\":60,\"eff\":71,\"sal\":927,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OksALdM\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":52,\"exp\":111.60800000000097,\"cre\":58,\"eff\":80,\"sal\":1107,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":697.908000000001,\"Engineer\":633.4120000000014,\"Business\":360.6040000000005,\"Management\":0,\"Research & Development\":0,\"total\":1691.924000000003,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":3}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Ym8Wf3n\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":75,\"cha\":58,\"exp\":99.57800000000097,\"cre\":57,\"eff\":71,\"sal\":1005,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kkpVqnl\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":74,\"exp\":120.57800000000097,\"cre\":70,\"eff\":87,\"sal\":1197,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"m0udCSY\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":51,\"cha\":96,\"exp\":99.57800000000097,\"cre\":80,\"eff\":91,\"sal\":1176,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":652.2780000000009,\"Engineer\":825.6670000000015,\"Business\":419.3890000000005,\"Management\":0,\"Research & Development\":0,\"total\":1897.334000000003,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":3}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"DhSXb4Y\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":62,\"cha\":52,\"exp\":91.62000000000097,\"cre\":78,\"eff\":56,\"sal\":942,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CJR4sWr\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":73,\"cha\":97,\"exp\":104.62000000000097,\"cre\":88,\"eff\":77,\"sal\":1242,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"2SpQyHh\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":61,\"cha\":82,\"exp\":120.62000000000097,\"cre\":73,\"eff\":58,\"sal\":1107,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":585.820000000001,\"Engineer\":770.6300000000015,\"Business\":403.91000000000054,\"Management\":0,\"Research & Development\":0,\"total\":1760.360000000003,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":3}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"s17X3b6\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":59,\"cha\":93,\"exp\":123.55700000000097,\"cre\":58,\"eff\":58,\"sal\":1098,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"x3nI3ka\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":91,\"cha\":66,\"exp\":101.55700000000097,\"cre\":73,\"eff\":71,\"sal\":1131,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Vvakmp9\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":50,\"cha\":76,\"exp\":104.55700000000097,\"cre\":84,\"eff\":96,\"sal\":1155,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":600.457000000001,\"Engineer\":805.9355000000014,\"Business\":360.27850000000046,\"Management\":0,\"Research & Development\":0,\"total\":1766.671000000003},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":3}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cWOhdnm\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":52,\"cha\":82,\"exp\":125.54500000000097,\"cre\":84,\"eff\":94,\"sal\":1236,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gzVDA1Y\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":93,\"cha\":89,\"exp\":110.54500000000097,\"cre\":73,\"eff\":82,\"sal\":1266,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"uW7SDcZ\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":75,\"exp\":101.54500000000097,\"cre\":53,\"eff\":55,\"sal\":975,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":758.145000000001,\"Engineer\":876.1175000000014,\"Business\":381.3725000000005,\"Management\":0,\"Research & Development\":0,\"total\":2015.635000000003,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":3}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zi7tMr3\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":66,\"cha\":72,\"exp\":89.53900000000097,\"cre\":100,\"eff\":85,\"sal\":1161,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Ildh7sO\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":100,\"cha\":70,\"exp\":107.53900000000097,\"cre\":100,\"eff\":85,\"sal\":1311,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"jZaie6Q\",\"mor\":100,\"hap\":100,\"ene\":100,\"int\":100,\"cha\":55,\"exp\":83.53900000000097,\"cre\":80,\"eff\":58,\"sal\":1053,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":742.5390000000009,\"Engineer\":905.3085000000015,\"Business\":366.7695000000005,\"Management\":0,\"Research & Development\":0,\"total\":2014.617000000003},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":3}}},\"numAdVerts\":0,\"lastCycleRevenue\":15995.916880980552,\"lastCycleExpenses\":89188.02447301685,\"thisCycleRevenue\":0,\"thisCycleExpenses\":891160.1086953976,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0.8054105834516316,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":8.05412079562598,\"loc\":\"Aevum\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":80.54105834516317,\"qlt\":7.037911111111127,\"dmd\":89.6413186112595,\"dmdR\":[80,99],\"cmp\":76.50828530888683,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":8.054105834516317,\"imp\":0,\"exp\":[{\"ind\":\"Aggrivating Straights\",\"city\":\"Aevum\",\"amt\":\"MAX\"}],\"totalExp\":8.054090873354282,\"bCost\":2151.860691923783,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0.00036471298664841374}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":81.67219852748786,\"dmdR\":[75,85],\"cmp\":68.76338308109855,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":1.6108211669032635,\"sll\":0,\"prd\":-1.6108211669032635,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2219.237624855072,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":89.80972746132166,\"dmdR\":[80,90],\"cmp\":94.23720198950596,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.8054105834516317,\"sll\":0,\"prd\":-0.8054105834516317,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7980.265319427146,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80.30351433718025,\"dmdR\":[80,99],\"cmp\":87.32119196599649,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70373.28191147989,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":96.2687000246089,\"dmdR\":[80,99],\"cmp\":94.04157291110748,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14369.324885899183,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":27.09891465526681,\"dmdR\":[5,99],\"cmp\":25,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":94639.42437639443,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0.8134852094268377,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":8.134866461439639,\"loc\":\"Chongqing\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":81.34852094268376,\"qlt\":9.174077777777795,\"dmd\":91.3489816966227,\"dmdR\":[80,99],\"cmp\":75.30522348227572,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":8.134852094268377,\"imp\":0,\"exp\":[{\"ind\":\"Aggrivating Straights\",\"city\":\"Chongqing\",\"amt\":\"MAX\"}],\"totalExp\":8.134837727052421,\"bCost\":2083.183619849388,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":84.64474979328627,\"dmdR\":[75,85],\"cmp\":77.75761825180915,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":1.6269704188536753,\"sll\":0,\"prd\":-1.6269704188536753,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3398.332169466824,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":81.34582060718655,\"dmdR\":[80,90],\"cmp\":88.91924077346948,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.8134852094268377,\"sll\":0,\"prd\":-0.8134852094268377,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8009.122679354138,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":83.82211101389703,\"dmdR\":[80,99],\"cmp\":93.02860046030551,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69363.63688999704,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":94.15722500284816,\"dmdR\":[80,99],\"cmp\":97.00259688708137,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16595.675727817634,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":30.717348224775126,\"dmdR\":[5,99],\"cmp\":61.45047930210958,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75735.67156410828,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0.7855744916258859,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":7.855760158369462,\"loc\":\"Sector-12\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":78.55744916258858,\"qlt\":8.562555555555573,\"dmd\":96.68898121294454,\"dmdR\":[80,99],\"cmp\":84.6453953962548,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":7.8557296740963265,\"prd\":7.855744916258859,\"imp\":0,\"exp\":[{\"ind\":\"Aggrivating Straights\",\"city\":\"Sector-12\",\"amt\":\"MAX\"}],\"totalExp\":0,\"bCost\":2035.458792817967,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":14.498484962211283}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":81.50520898180345,\"dmdR\":[75,85],\"cmp\":60.95453899680689,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":1.5711489832517718,\"sll\":0,\"prd\":-1.5711489832517718,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2713.3138530264123,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":89.39597358665209,\"dmdR\":[80,90],\"cmp\":67.04157189996894,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.7855744916258859,\"sll\":0,\"prd\":-0.7855744916258859,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12204.453057994104,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":96.37189779645524,\"dmdR\":[80,99],\"cmp\":84.14665946440819,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":62205.60750369778,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":96.16172410061928,\"dmdR\":[80,99],\"cmp\":91.9465257971415,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":17621.59271119712,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":44.273892143921,\"dmdR\":[5,99],\"cmp\":30.678593603531606,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":150431.6423956801,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0.7944016210819282,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":7.9440311477341465,\"loc\":\"New Tokyo\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":79.44016210819282,\"qlt\":8.954838888888904,\"dmd\":92.91569092409986,\"dmdR\":[80,99],\"cmp\":66.61697793794177,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":7.944016210819282,\"imp\":0,\"exp\":[{\"ind\":\"Aggrivating Straights\",\"city\":\"New Tokyo\",\"amt\":\"MAX\"}],\"totalExp\":7.94400127385521,\"bCost\":2127.032431612089,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":78.30975705095535,\"dmdR\":[75,85],\"cmp\":62.78457469618298,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":1.5888032421638565,\"sll\":0,\"prd\":-1.5888032421638565,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4293.481443440857,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.04028647896867,\"dmdR\":[80,90],\"cmp\":75.64900815934145,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.7944016210819282,\"sll\":0,\"prd\":-0.7944016210819282,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8108.468669305736,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":84.81065470694828,\"dmdR\":[80,99],\"cmp\":83.52034469149542,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":67142.67406854645,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":96.37116369321389,\"dmdR\":[80,99],\"cmp\":81.17902402446532,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13477.517713863854,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":76.98566392115042,\"dmdR\":[5,99],\"cmp\":66.40534032110764,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":102078.33317898137,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0.8510421870255732,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":8.510435215866224,\"loc\":\"Ishima\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":85.10421870255732,\"qlt\":9.734638888888904,\"dmd\":96.7124359350226,\"dmdR\":[80,99],\"cmp\":82.16658935069098,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":8.510421870255731,\"imp\":0,\"exp\":[{\"ind\":\"Aggrivating Straights\",\"city\":\"Ishima\",\"amt\":\"MAX\"}],\"totalExp\":8.510408524607953,\"bCost\":2065.126863103234,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":82.98565286137185,\"dmdR\":[75,85],\"cmp\":64.09500125705034,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":1.7020843740511464,\"sll\":0,\"prd\":-1.7020843740511462,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2955.3991804739157,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":80.45778452093892,\"dmdR\":[80,90],\"cmp\":82.33914592129007,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.8510421870255732,\"sll\":0,\"prd\":-0.8510421870255731,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6288.695308431979,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":83.30709935960759,\"dmdR\":[80,99],\"cmp\":86.27789721153192,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66327.69250171012,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":88.54553311251553,\"dmdR\":[80,99],\"cmp\":87.42429595830663,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14518.14219089424,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":39.62621367362419,\"dmdR\":[5,99],\"cmp\":67.8594380290342,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":99244.02582437595,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":0.849399929988309,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":8.494012651412477,\"loc\":\"Volhaven\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":84.9399929988309,\"qlt\":10.05898333333335,\"dmd\":95.4860953770116,\"dmdR\":[80,99],\"cmp\":83.81613215426667,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":8.49399929988309,\"imp\":0,\"exp\":[{\"ind\":\"Aggrivating Straights\",\"city\":\"Volhaven\",\"amt\":\"MAX\"}],\"totalExp\":8.493985948316602,\"bCost\":2039.628594630568,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":79.59410070431474,\"dmdR\":[75,85],\"cmp\":77.65124573861132,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":1.698799859976618,\"sll\":0,\"prd\":-1.6987998599766179,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1951.1919277298773,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":81.84369272294212,\"dmdR\":[80,90],\"cmp\":78.85433888576966,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0.849399929988309,\"sll\":0,\"prd\":-0.8493999299883089,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7028.683745312031,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":92.2980516484095,\"dmdR\":[80,99],\"cmp\":98.80321572059728,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71234.91755847723,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":97.49779302904933,\"dmdR\":[80,99],\"cmp\":84.26924836012662,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":20038.762311254402,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":26.455436710796153,\"dmdR\":[5,99],\"cmp\":64.10559896467582,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72008.04795614215,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"name\":\"n00dles\",\"type\":\"Food\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":0,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{},\"reqMats\":{\"Food\":0.5,\"Water\":0.5,\"Energy\":0.2},\"prodMats\":[],\"products\":{\"big gay resturant\":{\"ctor\":\"Product\",\"data\":{\"name\":\"big gay resturant\",\"dmd\":17.960799999998684,\"cmp\":38.03919999999525,\"mku\":39.67972672882949,\"pCost\":18453.046169189925,\"sCost\":\"MP\",\"fin\":true,\"prog\":100,\"createCity\":\"Sector-12\",\"designCost\":1000000000,\"advCost\":1000000000,\"creationProd\":{\"Operations\":271.54491340967206,\"Engineer\":633.8365281398218,\"Business\":123.09990502910064,\"Management\":0,\"Research & Development\":0,\"total\":1028.4813465785937,\"Unassigned\":null},\"rat\":79.3803148670417,\"qlt\":96.57822277838204,\"per\":139.51998000543665,\"dur\":69.67852803773665,\"rel\":48.91740705190273,\"aes\":24.038530592003074,\"fea\":95.44358237396942,\"data\":{\"Aevum\":[0,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[0,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0.042,\"reqMats\":{\"Food\":0.5,\"Water\":0.5,\"Energy\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0},\"maxsll\":2.2498391172713865}}},\"makesProducts\":true,\"awareness\":0,\"popularity\":0,\"startingCost\":10000000000,\"reFac\":0.05,\"sciFac\":0.12,\"hwFac\":0.15,\"robFac\":0.3,\"aiFac\":0.25,\"advFac\":0.25,\"prodMult\":6,\"state\":\"PRODUCTION\",\"newInd\":true,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":3}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Chongqing\",\"size\":3}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WV3Cbiw\",\"mor\":64,\"hap\":86.51951058873594,\"ene\":65.51951058873594,\"int\":50,\"cha\":65,\"exp\":103.82800000000049,\"cre\":70,\"eff\":81,\"sal\":1071,\"loc\":\"\",\"pos\":\"Operations\",\"nextPos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Gel6iZa\",\"mor\":84,\"hap\":91.52883862170764,\"ene\":87.52883862170764,\"int\":92,\"cha\":70,\"exp\":77.82500000000049,\"cre\":81,\"eff\":90,\"sal\":1194,\"loc\":\"\",\"pos\":\"Engineer\",\"nextPos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"3sZxhuI\",\"mor\":78,\"hap\":50.57096625861135,\"ene\":65.57096625861112,\"int\":79,\"cha\":76,\"exp\":87.82500000000049,\"cre\":98,\"eff\":57,\"sal\":1155,\"loc\":\"\",\"pos\":\"Business\",\"nextPos\":\"Business\"}}],\"employeeProd\":{\"Operations\":238.04181025188836,\"Engineer\":570.4923152393687,\"Business\":103.02233140795283,\"Management\":0,\"Research & Development\":0,\"total\":911.5564568992099,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Sector-12\",\"size\":3}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"New Tokyo\",\"size\":3}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Ishima\",\"size\":3}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"minHap\":0,\"minMor\":0,\"maxEne\":100,\"maxHap\":100,\"maxMor\":100,\"autoCoffee\":false,\"autoParty\":false,\"coffeeMult\":0,\"partyMult\":0,\"coffeeEmployees\":0,\"partyEmployees\":0,\"employees\":[],\"employeeProd\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"total\":0},\"employeeJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":0,\"Engineer\":0,\"Business\":0,\"Management\":0,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0},\"loc\":\"Volhaven\",\"size\":3}}},\"numAdVerts\":0,\"lastCycleRevenue\":0,\"lastCycleExpenses\":3420,\"thisCycleRevenue\":0,\"thisCycleExpenses\":34200,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Aevum\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75.64566182226356,\"dmdR\":[65,85],\"cmp\":40.41105953004649,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1572.0972650510623,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":97.44541583257092,\"dmdR\":[80,99],\"cmp\":74.15585005374109,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2081.729769970391,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":84.2136159173151,\"dmdR\":[70,90],\"cmp\":43.36785675537051,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5959.042375849214,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.33668649351225,\"dmdR\":[80,90],\"cmp\":65.63758077935714,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9131.215590923144,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":98.68948635592915,\"dmdR\":[80,99],\"cmp\":89.93032801469464,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71983.82413783431,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":95.09947501838741,\"dmdR\":[80,99],\"cmp\":88.20146403200847,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16697.117895130876,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":39.2818263606981,\"dmdR\":[5,99],\"cmp\":70.1987853071738,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":60591.94457395843,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Chongqing\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":71.24840326177927,\"dmdR\":[65,85],\"cmp\":52.839508907545536,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500.1637470052408,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":91.35577649198248,\"dmdR\":[80,99],\"cmp\":94.22060841477953,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1891.3506521631077,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":79.68989045234662,\"dmdR\":[70,90],\"cmp\":72.60181356596179,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6047.285993975703,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.65853810110299,\"dmdR\":[80,90],\"cmp\":88.5872925035456,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7680.913240615659,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":92.89680077218775,\"dmdR\":[80,99],\"cmp\":84.59358346365669,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66310.15601223097,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":95.41819846348623,\"dmdR\":[80,99],\"cmp\":86.45681035203862,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14857.615987737041,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":73.4855136730728,\"dmdR\":[5,99],\"cmp\":25.3453061804024,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":146853.97639682883,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":1999.9912430454235,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":3.049496987977874,\"loc\":\"Sector-12\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":73.16419072545787,\"dmdR\":[65,85],\"cmp\":49.65847038620916,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":1.5247482973845903,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1505.0157512520314,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":94.46923017159801,\"dmdR\":[80,99],\"cmp\":67.94460533440459,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0.6098993189538362,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2145.522450400157,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":66666.37476818079,\"qlt\":120.44605639006068,\"dmd\":79.731107726866,\"dmdR\":[70,90],\"cmp\":72.46517760744533,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":1.5247482973845903,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3874.9564509765546,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.50802036943618,\"dmdR\":[80,90],\"cmp\":78.49286712664289,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7554.7738777667,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":83.27002962882997,\"dmdR\":[80,99],\"cmp\":92.63622602469268,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68795.95362854867,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":86.15574751421913,\"dmdR\":[80,99],\"cmp\":85.59761341848834,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13636.462358006755,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":39.5466606620781,\"dmdR\":[5,99],\"cmp\":62.64426073667619,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":42889.58662502405,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"New Tokyo\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":76.25184791780657,\"dmdR\":[65,85],\"cmp\":49.79498091155588,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1530.9873033739218,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":98.19249135801985,\"dmdR\":[80,99],\"cmp\":82.80956258255661,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2074.977724101417,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":75.90718168074717,\"dmdR\":[70,90],\"cmp\":79.22891405250196,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4054.6674344102753,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.35122907684242,\"dmdR\":[80,90],\"cmp\":66.51125640908552,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7939.149875557041,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":82.67319602181628,\"dmdR\":[80,99],\"cmp\":84.22215644713556,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":67503.02903823469,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.35070536065672,\"dmdR\":[80,99],\"cmp\":98.15868113866408,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":11761.4197464389,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":81.04061612060977,\"dmdR\":[5,99],\"cmp\":36.24634657791391,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":101091.55645767988,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Ishima\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":71.6274663080124,\"dmdR\":[65,85],\"cmp\":47.23294453649123,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1468.6882299367287,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":92.1553954580776,\"dmdR\":[80,99],\"cmp\":82.93581364947613,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2032.4568938246737,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":81.46881127552435,\"dmdR\":[70,90],\"cmp\":63.78173873898429,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4932.905567644899,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":80.1005574769959,\"dmdR\":[80,90],\"cmp\":91.57061144899592,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7098.247540442456,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":98.18436172704496,\"dmdR\":[80,99],\"cmp\":87.24745011043059,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":83535.97807681591,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":95.09674411042253,\"dmdR\":[80,99],\"cmp\":85.62830546671155,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":19778.961076336822,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":64.6960007748276,\"dmdR\":[5,99],\"cmp\":35.0267334989562,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":84156.93500701214,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":10,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":0,\"loc\":\"Volhaven\",\"size\":2000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":73.74079738834301,\"dmdR\":[65,85],\"cmp\":50.849913509026266,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1468.2747834783413,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":80.32250324337642,\"dmdR\":[80,99],\"cmp\":77.21470665628487,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1951.596985112962,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":85.8439735228682,\"dmdR\":[70,90],\"cmp\":50.60900888757612,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5160.399096336556,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.96710284534664,\"dmdR\":[80,90],\"cmp\":65.25804113587454,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8631.827731381449,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":83.76020961306965,\"dmdR\":[80,99],\"cmp\":88.50808338655634,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":70250.80420165783,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":81.4632709353236,\"dmdR\":[80,99],\"cmp\":90.88128681819718,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10160.880401562745,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":73.97640167600537,\"dmdR\":[5,99],\"cmp\":28.020242682992816,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":121556.29924718406,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}}}}}],\"funds\":335202104892420.7,\"revenue\":56698583850.40341,\"expenses\":8413807.293019384,\"fundingRound\":2,\"public\":true,\"totalShares\":2160000000,\"numShares\":100000000,\"shareSalesUntilPriceUpdate\":900000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":95960,\"dividendRate\":0.5,\"dividendTax\":0.15,\"issuedShares\":1083750000,\"sharePrice\":1066825.6852304002,\"storedCycles\":2,\"cycleValuation\":4419643486157026,\"valuationsList\":[4417967043596826,4418374066452001.5,4418801451889036,4419231525265724.5,4419643486157026],\"valuation\":4418803514672123,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":3}},\"unlockUpgrades\":[1,1,0,0,0,0,0,0,0],\"upgrades\":[10,10,0,12,20,20,30,28,18,0],\"upgradeMultipliers\":[1.3,2,1,1.06,3,3,4,3.8000000000000003,1.18,1]}},\"bladeburner\":null,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":39,\"max\":39},\"skills\":{\"hacking\":92,\"strength\":290,\"defense\":290,\"dexterity\":291,\"agility\":291,\"charisma\":265,\"intelligence\":0},\"exp\":{\"hacking\":18990,\"strength\":4573893.5,\"defense\":4573893.5,\"dexterity\":4701423.5,\"agility\":4701423.5,\"charisma\":2088570,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":100,\"storedCycles\":10510,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":39,\"max\":39},\"skills\":{\"hacking\":92,\"strength\":290,\"defense\":290,\"dexterity\":291,\"agility\":291,\"charisma\":265,\"intelligence\":0},\"exp\":{\"hacking\":18990,\"strength\":4573893.5,\"defense\":4573893.5,\"dexterity\":4701423.5,\"agility\":4701423.5,\"charisma\":2088570,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":100,\"storedCycles\":10510,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":39,\"max\":39},\"skills\":{\"hacking\":92,\"strength\":290,\"defense\":290,\"dexterity\":291,\"agility\":291,\"charisma\":265,\"intelligence\":0},\"exp\":{\"hacking\":18990,\"strength\":4573893.5,\"defense\":4573893.5,\"dexterity\":4701423.5,\"agility\":4701423.5,\"charisma\":2088570,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":100,\"storedCycles\":10510,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":39,\"max\":39},\"skills\":{\"hacking\":92,\"strength\":290,\"defense\":290,\"dexterity\":291,\"agility\":291,\"charisma\":265,\"intelligence\":0},\"exp\":{\"hacking\":18990,\"strength\":4573893.5,\"defense\":4573893.5,\"dexterity\":4701423.5,\"agility\":4701423.5,\"charisma\":2088570,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":100,\"storedCycles\":10510,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":39,\"max\":39},\"skills\":{\"hacking\":92,\"strength\":290,\"defense\":290,\"dexterity\":291,\"agility\":291,\"charisma\":265,\"intelligence\":0},\"exp\":{\"hacking\":18990,\"strength\":4573893.5,\"defense\":4573893.5,\"dexterity\":4701423.5,\"agility\":4701423.5,\"charisma\":2088570,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":100,\"storedCycles\":10510,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":39,\"max\":39},\"skills\":{\"hacking\":92,\"strength\":290,\"defense\":290,\"dexterity\":291,\"agility\":291,\"charisma\":265,\"intelligence\":0},\"exp\":{\"hacking\":18990,\"strength\":4573893.5,\"defense\":4573893.5,\"dexterity\":4701423.5,\"agility\":4701423.5,\"charisma\":2088570,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"city\":\"Sector-12\",\"currentWork\":null,\"memory\":100,\"shock\":100,\"storedCycles\":10510,\"sync\":100}}],\"sleevesFromCovenant\":5,\"bitNodeN\":3,\"entropy\":0,\"lastUpdate\":1665606963023,\"lastSave\":1665606961288,\"totalPlaytime\":4570548400,\"playtimeSinceLastAug\":2104800,\"playtimeSinceLastBitnode\":179380600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":164912637985.95923,\"crime\":0,\"gang\":9760665153.979666,\"hacking\":2187842.6406061305,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-200000000,\"total\":174475490982.57974,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":201817093296.36597,\"crime\":989900883.9065413,\"gang\":185187451433.74057,\"hacking\":183345541.93172827,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":27121451250,\"stock\":-200000000,\"total\":257338186037.00845,\"work\":0,\"servers\":-133360680212.31665,\"other\":-7700000,\"augmentations\":-24392676156.620667}},\"scriptProdSinceLastAug\":2187842.6406061305,\"exploits\":[\"N00dles\",\"UndocumentedFunctionCall\",\"INeedARainbow\",\"Bypass\",\"TimeCompression\",\"Unclickable\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1661036704531},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1661036824535},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1661040544546},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1661046629934},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1661054446149},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1661055646165},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1661105911685},{\"ID\":\"NITESEC\",\"unlockedOn\":1661570929855},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1662028753348},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1662233703541},{\"ID\":\"TRAVEL\",\"unlockedOn\":1662318836513},{\"ID\":\"WORKOUT\",\"unlockedOn\":1662473150968},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1662517781325},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1662730176689},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1662730236691},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1662817842214},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1662921656843},{\"ID\":\"DONATION\",\"unlockedOn\":1663334565460},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1663359919211},{\"ID\":\"TOR\",\"unlockedOn\":1663449685403},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1663449805414},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1663610433243},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1663701902429},{\"ID\":\"SF1.1\",\"unlockedOn\":1663721462088},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":16637214620810},{\"ID\":\"N00DLES\",\"unlockedOn\":1663770010192},{\"ID\":\"UNDOCUMENTEDFUNCTIONCALL\",\"unlockedOn\":1663774422768},{\"ID\":\"RAINBOW\",\"unlockedOn\":1663775383823},{\"ID\":\"BYPASS\",\"unlockedOn\":1663775503779},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1663776224353},{\"ID\":\"UNCLICKABLE\",\"unlockedOn\":1663799882384},{\"ID\":\"GANG\",\"unlockedOn\":1663800363575},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1663883114329},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1663895977060},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1664132325429},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1664141581640},{\"ID\":\"SF2.1\",\"unlockedOn\":1664153947228},{\"ID\":\"DEVMENU\",\"unlockedOn\":1664162800647},{\"ID\":\"UNACHIEVABLE\",\"unlockedOn\":1664162842523},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1664752808061},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1664765065118},{\"ID\":\"FROZE\",\"unlockedOn\":1664797481999},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1664863061759},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1664914958788},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1664931460739},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1664933442055},{\"ID\":\"SF10.1\",\"unlockedOn\":1665045848287},{\"ID\":\"KARMA_1000000\",\"unlockedOn\":1665366958799},{\"ID\":\"CORPORATION\",\"unlockedOn\":1665415475594}],\"terminalCommandHistory\":[\"scp matrix/geopts.js sigma-cosmetics\",\"connect sigma-cosmetics\",\"mbg -R 10\",\"clear\",\"run b1t_flum3.exe\",\"run xsink/breach.js\",\"scp xsink/hud.js sigma-cosmetics\",\"connect sigma-cosmetics\",\"run xsink/hud.js\",\"home\",\"run src/brain.js n00dles 25 1\",\"clear\",\"run rnd.js\",\"ls\",\"run test.js\",\"cat src/hud.js\",\"nano src/hud.js\",\"scp src/hud.js sigma-cosmetics\",\"connect sigma-cosmetics\",\"run src/hud.js\",\"home\",\"nano src/hud.js\",\"scp src/hud.js sigma-cosmetics\",\"connect sigma-cosmetics\",\"run src/hud.js\",\"nano src/hud.js\",\"home\",\"connect sigma-cosmetics\",\"run src/hud.js\",\"home\",\"ls\",\"killall\",\"buy -l\",\"buy BruteSSH.exe\",\"buy FTPCrack.exe\",\"buy relaySMTP.exe\",\"buy DeepscanV1.exe\",\"clear\",\"run xsink/breach.js\",\"mapt\",\"run src/brain.js nectar-net 124 1\",\"run src/brain.js nectar-net 500 1\",\"run src/brain.js nectar-net 1000 1 --tail\",\"mapt\",\"run src/brain.js silver-helix 2035 1 --tail\",\"mapt\",\"run src/brain.js silver-helix 8180 1 --tail\",\"run xsink/b\",\"run xsink/breach.js\",\"run src/brain.js foodnstuff 8180 1 --tail\"],\"focus\":false,\"currentWork\":null,\"identifier\":\"6e2455d958bea\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"5.5.6.3\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\"],\"ramUsed\":6488.9,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",8180,1],\"dataMap\":{},\"filename\":\"/src/brain.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4041592.7529607355,\"onlineMoneyMade\":2187842.6406061305,\"onlineRunningTime\":2072.210000000116,\"pid\":2,\"ramUsage\":8.65,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/src/brain.js\",\"url\":\"blob:file:///9da027d6-c8f7-4d28-97f1-b6081f3bab73\",\"moduleSequenceNumber\":370}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/src/weak.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":254,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1558,\"dependencies\":[{\"filename\":\"/src/weak.js\",\"url\":\"blob:file:///22555f8d-56ed-474d-9f1c-8e1d909b2ad0\",\"moduleSequenceNumber\":742}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"/src/grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999997,\"pid\":255,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2145,\"dependencies\":[{\"filename\":\"/src/grow.js\",\"url\":\"blob:file:///79f2e32f-9b55-49e4-ba71-854d896402ac\",\"moduleSequenceNumber\":743}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar sv = ns.args[0];\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\")\\n\\t//await eval(\\\"ns.weaken(sv)\\\")\\n\\tawait ns.weaken(sv)\\n}\",\"filename\":\"/src/weak.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/weak.js\",\"url\":\"blob:file:///22555f8d-56ed-474d-9f1c-8e1d909b2ad0\",\"moduleSequenceNumber\":742}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar sv = ns.args[0];\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\");\\n\\t//await eval(\\\"ns.grow(sv)\\\")\\n\\tawait ns.grow(sv)\\n}\",\"filename\":\"/src/grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/grow.js\",\"url\":\"blob:file:///79f2e32f-9b55-49e4-ba71-854d896402ac\",\"moduleSequenceNumber\":743}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar sv = ns.args[0];\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\")\\n\\t//await eval(\\\"ns.hack(sv)\\\");\\n\\tawait ns.hack(sv);\\n}\",\"filename\":\"/src/heck.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/heck.js\",\"url\":\"blob:file:///7d151643-8115-4ca6-aea0-264bebf398bc\",\"moduleSequenceNumber\":2018}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n/*\\nthis script is called with [server name] and [ram usable (in gigabytes)]\\nram MUST be at least 5.2g, excluding the ram required to run the script\\nfor best results, fully grow (this step may be negated) & weaken whatever server you're hacking BEFORE running this program.\\nyou should also probably have enough cores & ram on HOME to run this with enough ram to fully grow, weaken, and hack the target server every cycle\\n*/\\n\\nexport async function WaitPids(ns, pids) {\\n\\tif (!Array.isArray(pids)) pids = [pids];\\n\\twhile (pids.some(p => ns.getRunningScript(p) != undefined)) { await ns.sleep(5); }\\n}\\n\\nconst col = {\\n  \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n  \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n  \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n  \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n  \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n  \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n  \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n  \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n  \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n}\\n\\nlet doc = eval(\\\"document\\\");\\nlet cycles = 0;\\nexport async function main(ns) {\\n  const hook0 = doc.getElementById('overview-extra-hook-0');\\n  const hook1 = doc.getElementById('overview-extra-hook-1');\\n\\tlet hs = ns.args[0];\\n\\tlet ram = ns.args[1];\\n\\t//let coH = Math.floor((ram/3)/1.6);\\n\\t//let coG = Math.floor((ram/3)/1.6);\\n\\tlet coH = Math.floor((ram/3)/1.7);\\n\\tlet coG = Math.floor((ram/3)/1.75);\\n\\tlet coW = coG;\\n\\tlet wag = ns.weakenAnalyze(coG, ns.getServer().cpuCores);\\n\\tif (wag >  100) {\\n\\t\\twhile (wag > 100) {\\n\\t\\t\\tcoW -= 1;\\n\\t\\t\\twag = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n\\t\\t}\\n\\t}\\n\\n\\tcoG = Math.floor(((ram-(coW*1.75))/2)/1.75);\\n\\tcoH = Math.floor(((ram-(coW*1.75))/2)/1.7);\\n\\n\\teval(\\\"ns.bypass(document);\\\")\\n\\twhile (true) {\\n\\t\\t//let gt = eval(\\\"ns.getGrowTime(hs);\\\")\\n\\t\\tlet gt = ns.getGrowTime(hs)\\n\\t\\t//let ht = eval(\\\"ns.getHackTime(hs);\\\")\\n\\t\\tlet ht = ns.getHackTime(hs);\\n\\t\\t//let wt = eval(\\\"ns.getWeakenTime(hs);\\\")\\n\\t\\tlet wt = ns.getWeakenTime(hs);\\n\\t\\tlet time = 0;\\n\\t\\t//eval(\\\"ns.run('src/weak.js', coG, hs);\\\")\\n\\t\\tns.run('src/weak.js', coW, hs);\\n\\t\\t//eval(\\\"ns.run('src/grow.js', coG, hs);\\\")\\n\\t\\tns.run('src/grow.js', coG, hs);\\n\\t\\tfor (let i = 0; i < Math.ceil((gt - (ht + 1))/1000) + 1; i++) {\\n\\t\\t\\t//ns.tprint(`I = ${i}, and it will execute grow when it is greater than ${Math.ceil((gt - (ht+1))/10)}`)\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t//gt = eval(\\\"ns.getGrowTime(hs);\\\")\\n\\t\\t\\tgt = ns.getGrowTime(hs)\\n\\t\\t\\t//ht = eval(\\\"ns.getHackTime(hs);\\\")\\n\\t\\t\\tht = ns.getHackTime(hs);\\n\\t\\t\\t//wt = eval(\\\"ns.getWeakenTime(hs);\\\")\\n\\t\\t\\twt = ns.getWeakenTime(hs);\\n\\t\\t\\ttime++;\\n\\t\\t\\thud(ns, hook0, hook1);\\n\\t\\t\\tconsole(ns, hs, coH, coG, coW);\\n\\t\\t}\\n\\t\\t//eval(\\\"ns.run ('src/heck.js', coH, hs);\\\")\\n\\t\\tns.run ('src/heck.js', coH, hs);\\n\\t\\t//ns.tprint(\\\"hacking!!\\\");\\n\\t\\tfor (let i = 0; i < (wt - Math.ceil((gt - (ht+1))))/1000 + 1; i++) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t//gt = eval(\\\"ns.getGrowTime(hs);\\\")\\n\\t\\t\\tgt = ns.getGrowTime(hs)\\n\\t\\t\\t//ht = eval(\\\"ns.getHackTime(hs);\\\")\\n\\t\\t\\tht = ns.getHackTime(hs);\\n\\t\\t\\t//wt = eval(\\\"ns.getWeakenTime(hs);\\\")\\n\\t\\t\\twt = ns.getWeakenTime(hs);\\n\\t\\t\\ttime++;\\n\\t\\t\\thud(ns, hook0, hook1);\\n\\t\\t\\tconsole(ns, hs, coH, coG, coW);\\n\\t\\t}\\n\\t\\tcycles++\\n\\t\\t//this is here so we don't end up calling the scripts again before they finish\\n\\t\\t//while (ns.scriptRunning(\\\"src/weak.js\\\", \\\"home\\\")) {await ns.sleep(1000); ns.tprint(\\\"\\\")}\\n\\t}\\n}\\n\\nfunction hud(ns, hook0, hook1) {\\n\\ttry {\\n\\t\\tlet header;\\n\\t\\tlet val;\\n\\n\\t\\t//add wether or not we're hacking, growing, weakening\\n\\t\\theader = \\\"Hk/Gw/Wk\\\\n\\\";\\n\\t\\tif (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {val = \\\"/\\\"} else {val = \\\"/\\\"}\\n\\t\\tif (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {val += \\\"/\\\"} else {val += \\\"/\\\"}\\n\\t\\tif (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {val += \\\"\\\\n\\\"} else {val += \\\"\\\\n\\\"}\\n\\t\\t/*if (eval('ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])')) {val = \\\"✓/\\\"} else {val = \\\"✗/\\\"}\\n\\t\\tif (eval('ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])')) {val += \\\"✓/\\\"} else {val += \\\"✗/\\\"}\\n\\t\\tif (eval('ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])')) {val += \\\"✓\\\\n\\\"} else {val += \\\"✗\\\\n\\\"}*/\\n\\t\\tns.print(val);\\n\\t\\t// Now drop it into the placeholder elements\\n\\t\\thook0.innerText = header\\n\\t\\thook1.innerText = val\\n\\t\\t//let wam = eval('ns.getServerMaxRam(\\\"home\\\")')\\n\\t\\t//let wamU = eval('ns.getServerUsedRam(\\\"home\\\")')\\n\\t\\tlet wam = ns.getServerMaxRam(\\\"home\\\")\\n\\t\\tlet wamU = ns.getServerUsedRam(\\\"home\\\")\\n\\n\\t\\t//other stats\\n\\t\\tconst headers = []\\n\\t\\tconst values = [];\\n\\t\\t// Add allowed ram usage\\n\\t\\theaders.push(\\\"Brain Ram\\\");\\n\\t\\tvalues.push(ns.args[1])\\n\\t\\t//add current server hacking\\n\\t\\theaders.push(\\\"Server Target\\\")\\n\\t\\tvalues.push(\\\" \\\" + ns.args[0])\\n\\t\\t//add cycles\\n\\t\\theaders.push(\\\"Cycles\\\")\\n\\t\\tvalues.push(cycles);\\n\\t\\t// Add ram\\n\\t\\theaders.push(\\\"Home Ram\\\");\\n\\t\\tvalues.push(wam);\\n\\t\\t// add free ram\\n\\t\\theaders.push(\\\"Home Ram Free\\\");\\n\\t\\tvalues.push(Math.round((wam - wamU) * 100) / 100);\\n\\n\\t\\t// Now drop those into the placeholder elements\\n\\t\\thook0.innerText += headers.join(\\\" \\\\n\\\");\\n\\t\\thook1.innerText += values.join(\\\"\\\\n\\\");\\t\\n\\t} catch (err) { // This might come in handy later\\n\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t}\\n}\\n\\nfunction console(ns, sv, coH, coG, coW) {\\n\\tlet gt = Math.ceil(ns.getGrowTime(sv)/1000);\\n\\tlet ht = Math.ceil(ns.getHackTime(sv)/1000);\\n\\tlet wt = Math.ceil(ns.getWeakenTime(sv)/1000);\\n\\tlet sl = ns.getServerSecurityLevel(sv);\\n\\tlet sml = ns.getServerMinSecurityLevel(sv);\\n\\tlet mm = ns.getServerMaxMoney(sv);\\n\\tlet ma = ns.getServerMoneyAvailable(sv);\\n\\tlet hm = ns.hackAnalyze(sv) * coH;\\n\\tlet wa = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n\\tlet ga = ns.growthAnalyze(sv, 100, ns.getServer().cpuCores);\\n\\tlet gaa = (100/ga)*coG;\\n\\tns.clearLog();\\n\\tns.print(\\\"╭┐Hack Brain┌──────────────────────────────────╮\\\\n\\\");\\n\\tns.print(`│╰──────────╯      Hack/Grow/Weak | ${isHacking(ns)}${col.d}/${isGrowing(ns)}${col.d}/${isWeakening(ns)}${col.d}      │\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Hack Time : ${Math.floor(ht/60)}m ${ht % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Grow Time : ${Math.floor(gt/60)}m ${gt % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Weaken Time : ${Math.floor(wt/60)}m ${wt % 60}s\\\\n`);\\n\\tns.print(`${col.d}│ ${col.c}Security Level : ${sl}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.c}Min Security Level : ${sml}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Max Money : ${mm}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Money Available : ${ma}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Hack Money : ${hm}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.g}Weaken Amount : ${wa}\\\\n`);\\n\\tns.print(`${col.d}│ ${col.y}Grow Amount : ${gaa}\\\\n`);\\n\\tns.print(`${col.d}╰──────────────────────────────────────────────╯`);\\n}\\n\\n/*alt log, with whitespace?\\n\\tns.print(`│ Hack Time : ${ht}${calcWhitespace(ht.length + 14, 48)} │\\\\n`);\\n\\tns.print(`│ Grow Time : ${gt}${calcWhitespace(gt.length + 14, 48)} │\\\\n`);\\n\\tns.print(`│ Weaken Time : ${wt}${calcWhitespace(wt.length + 16, 48)} │\\\\n`);\\n\\tns.print(`│ Security Level : ${sl}${calcWhitespace(sl.length + 19, 48)} │\\\\n`);\\n\\tns.print(`│ Min Security Level : ${sml} ${calcWhitespace(sml.length + 23, 48)} │\\\\n`);\\n\\tns.print(`│ Max Money : ${mm}${calcWhitespace(mm.length + 14, 48)} │\\\\n`);\\n\\tns.print(`│ Money Available : ${ma} ${calcWhitespace(ma.length + 20, 48)} │\\\\n`);\\n\\tns.print(`│ Hack Money : ${hm}${calcWhitespace(hm.length + 15, 48)} │\\\\n`);\\n\\tns.print(`│ Weaken Amount : ${wa}${calcWhitespace(wa.length + 18, 48)} │\\\\n`);\\n\\tns.print(`│ Grow Amount : ${gaa}${calcWhitespace(ga.length + 16, 48)} │\\\\n`);\\n*/ \\n\\nfunction calcWhitespace(sl, bl) {\\n\\tlet ws = \\\"\\\";\\n\\tfor (let i = 0; i < sl - bl; i++) {\\n\\t\\tws += \\\" \\\";\\n\\t}\\n\\treturn ws;\\n}\\n\\nfunction isWeakening(ns) {if (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\nfunction isHacking(ns) {if (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\nfunction isGrowing(ns) {if (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {return col.g + \\\"\\\"} else {return col.r + \\\"\\\"}}\\n\\n//check Xmark\\n//       \",\"filename\":\"/src/brain.old.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/brain.js\",\"url\":\"blob:file:///d9513b4e-a2f0-4b2f-93f5-fd4074aa5705\",\"moduleSequenceNumber\":6694}],\"dependents\":[],\"ramUsage\":8.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n//used for resetting the running brains AFTER a period of offline\\nexport async function main(ns) {\\n\\tns.killall();\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"alpha-ent\\\", 66000)\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"infocomm\\\", 65000)\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"nova-med\\\", 65000)\\n\\tns.run(\\\"src/brain.js\\\", 1, \\\"nwo\\\", 66000)\\n}\",\"filename\":\"start.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"start.js\",\"url\":\"blob:file:///bdb53a93-3a5f-4334-ac28-53b6d7232931\",\"moduleSequenceNumber\":79}],\"dependents\":[],\"ramUsage\":3.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait console.log(\\\"your mother\\\")\\n\\t}\\n}\",\"filename\":\"/achive/bs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tfor (let i = 0; i < 1000; i++) {\\n\\t\\tns.run(\\\"achive/bs.js\\\");\\n\\t}\\n}\",\"filename\":\"/achive/run.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/achive/run.js\",\"url\":\"blob:file:///909e4049-7757-483c-b63e-fe31b682bc08\",\"moduleSequenceNumber\":25}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t//ns.rainbow(\\\"noodles\\\");\\n    ns.tprint(ns.heart.break());\\n\\tns.tprint(ns.getPlayer());\\n\\tns.tprint(ns.gang.getGangInformation());\\n\\t//eval(\\\"window.performance.now = function() {return 0;}\\\");\\n\\t//eval('document.getElementById(\\\"unclickable\\\").style = \\\"display: block;position: absolute;top: 50%;left: 50%;width: 100px;height: 100px;z-index: 10000;background: red;\\\";')\\n    //eval('document.getElementById(\\\"unclickable\\\").parentNode.addEventListener(\\\"click\\\", () => {document.getElementById(\\\"unclickable\\\").style = \\\"display: none; visibility: hidden;\\\";}, true);')\\n\\t//ns.bypass(document);\\n}\",\"filename\":\"rnd.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"rnd.js\",\"url\":\"blob:file:///e288c3aa-6683-42f8-9d27-a834fd8e4ae4\",\"moduleSequenceNumber\":13967}],\"dependents\":[],\"ramUsage\":4.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  ns.tprint(\\\"that's gay\\\");\\n}\",\"filename\":\"gay.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"gay.js\",\"url\":\"blob:file:///e1ccbad2-bd90-42db-9048-0601f2aace71\",\"moduleSequenceNumber\":3270}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    if (commandKey !== 'update-bp')\\n        await CheckUpdate(ns, options);\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/bitpacks/bp.js\",\"url\":\"blob:file:///83397e65-1c80-4786-9d21-f8cf9a75fe35\",\"moduleSequenceNumber\":405}],\"dependents\":[],\"ramUsage\":3.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.59'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-a48308fa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-a48308fa]{resize:both}.app-container.app--is-minimised .app[data-v-a48308fa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-a48308fa]{display:none}.app-container *[data-v-a48308fa]{box-sizing:border-box}.app-container .app[data-v-a48308fa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-a48308fa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-a48308fa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-a48308fa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-a48308fa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-a48308fa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-a48308fa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-a48308fa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-a48308fa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-a48308fa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-a48308fa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-a48308fa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-a48308fa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-a48308fa]{background:var(--backgroundsecondary, #171A22);flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-a48308fa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-a48308fa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-a48308fa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-a48308fa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-80c6898e]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-80c6898e],.theme-browser__header button[data-v-80c6898e],.theme-browser__header span[data-v-80c6898e]{flex:0 0 auto}.theme-browser__header button[data-v-80c6898e]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-80c6898e]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-375d43b4] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-375d43b4]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-375d43b4],.theme-browser button[data-v-375d43b4]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-375d43b4]:focus,.theme-browser input[data-v-375d43b4]:hover,.theme-browser input[data-v-375d43b4]:active,.theme-browser button[data-v-375d43b4]:focus,.theme-browser button[data-v-375d43b4]:hover,.theme-browser button[data-v-375d43b4]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-375d43b4]{display:block;width:100%}.theme-browser button[data-v-375d43b4]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-375d43b4]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-375d43b4]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-375d43b4],.pagination-details[data-v-375d43b4]{flex:0 1 auto;margin:0}.title[data-v-375d43b4]{margin-right:20px}.pagination-wrapper[data-v-375d43b4]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-375d43b4]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-375d43b4]{color:#cecece;margin-left:auto}.themes[data-v-375d43b4]{flex:1 0 100%;margin-top:16px}.loader[data-v-375d43b4]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-375d43b4]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-375d43b4]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-375d43b4]{flex-direction:row}form div label[data-v-375d43b4]{margin-bottom:.4em}.app__content[data-v-375d43b4]{overflow-y:scroll}.preview__ctas[data-v-375d43b4]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-375d43b4]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-375d43b4]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-375d43b4]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-375d43b4]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-375d43b4]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-375d43b4]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-375d43b4]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-375d43b4{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var W=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,f,_)=>f in e?xt(e,f,{enumerable:!0,configurable:!0,writable:!0,value:_}):e[f]=_,A=(e,f)=>{for(var _ in f||(f={}))jt.call(f,_)&&J(e,_,f[_]);if(W)for(var _ of W(f))Pt.call(f,_)&&J(e,_,f[_]);return e},q=(e,f)=>It(e,Lt(f));(function(e){\\\"use strict\\\";function f(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function _(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const s=await fetch(t).then(o=>o.text());return Q(s,n)?s:null},Q=(n,t)=>{const s=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let l=0;l<s.length;++l){if(s[l]>o[l])return!0;if(o[l]>s[l])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var se={render:ne};const ae={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},ie=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function le(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ae,ie)}var re={render:le};const de={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},ce=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",de,ce)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const s=n.__vccOpts||n;for(const[o,l]of t)s[o]=l;return s};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:se,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),s=e.ref(!1),o=e.ref(),l=e.ref(),h=e.ref(),a=e.ref(),c=e.ref(),p=e.ref(),d=e.ref();let u={},B={};const S=e.ref(!1),$=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),T=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;a.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,p.value=a.value/2-g/2,d.value=c.value/2-N/2};e.onMounted(()=>{$.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{s.value&&!S.value&&(o.value=g,l.value=N),s.value=!0}).observe(t.value):s.value=!0,$.canDrag&&T()});const I=({x:g,y:N,button:b})=>{if(!$.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,l.value=t.value.offsetHeight,B={x:p.value,y:d.value},a.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",v),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",v),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const v=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,K=b+o.value>a.value;(L||K)&&(L?b=0:b=a.value-o.value,B.x=b,u.x=Math.max(Math.min(g,a.value-5),5));const j=w<0,H=w+l.value>c.value;(j||H)&&(j?w=0:w=c.value-l.value,B.y=w,u.y=Math.max(Math.min(N,c.value),5)),p.value=b,d.value=w};return{isMinimised:S,left:p,process:t,processHeight:l,processWidth:o,top:d,windowOptions:$,beginGrabbing:I,setPosition:T,toggleMinimise:()=>{S.value||(h.value=l.value),S.value=!S.value,S.value||(l.value=h.value)}}}},fe={class:\\\"app__title\\\"},_e={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,s,o,l,h){const a=e.resolveComponent(\\\"icon-update\\\"),c=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),d=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",fe,e.toDisplayString(s.title),1),e.createElementVNode(\\\"div\\\",_e,[s.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${s.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(a,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(c,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(d,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-a48308fa\\\"]]),Kt=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const s=e.ref(null),o=e.ref(!1);return{element:s,hasUpdated:o,doUpdate:()=>_(`app:update:${t}`,{element:s.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,s,o,l,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(a=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...a)=>o.updateComplete&&o.updateComplete(...a))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=a=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(s.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=a=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...a)=>o.doUpdate&&o.doUpdate(...a))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Ht=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:s}){const o=e.ref(!1),l=e.ref(null);return e.onMounted(async()=>{n&&s&&(l.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",s))}),{availableUpdate:l,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},$e={class:\\\"app-wrapper\\\"};function Te(n,t,s,o,l,h){const a=e.resolveComponent(\\\"app-container\\\"),c=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",$e,[e.createVNode(a,e.mergeProps({title:s.title,availableUpdate:o.availableUpdate,options:s.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(c,e.mergeProps({key:0},{appFilePath:s.appFilePath,id:s.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var ve=M(Me,[[\\\"render\\\",Te],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Wt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,l)=>{fetch(`${V}/api/themes/${o.id}/${l}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],Ke={key:1};function He(n,t,s,o,l,h){return s.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(s.themes,(a,c)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:c,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=a.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:d=>n.$emit(\\\"theme:preview\\\",a.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(a.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(a.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":s.user,class:e.normalizeClass({voting:!0,hasActive:a.user_vote!==null&&a.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:a.user_vote===-1}),onClick:d=>o.onClickVote(a,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(a.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:a.user_vote===1}),onClick:d=>o.onClickVote(a,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",Ke,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var We=M(je,[[\\\"render\\\",He],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-80c6898e\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,s,o,l,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(s.title),1),!s.user||!s.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=a=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),s.user&&s.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(s.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-80c6898e\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:s}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:s}}var Xt=\\\"\\\";const nt={components:{AppWrapper:ve,ThemeList:We,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),s=e.ref(!0),o=e.ref(!1),l=e.ref([]),h=e.ref({}),a=e.ref(!1),c=e.ref(!1),p=e.ref(!1),d=e.ref({}),u=e.computed(()=>s.value?\\\"Loading...\\\":l.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),$=e.computed(()=>h.value.total_items),T={canDrag:!1,canMinimise:!1,canResize:!1},I=i=>{_(\\\"theme:cancel-preview\\\",i),o.value=!1},C=i=>{_(\\\"theme:preview\\\",i),o.value=!0},v=async()=>{s.value=!0;const i=b(),r=tt(i),{data:E,meta:m}=await ot(r);h.value=m,l.value=E,s.value=!1},O=async i=>{i.preventDefault();let r={email:null,password:null};for(let m=0;m<i.target.length;m++)i.target[m].nodeName===\\\"INPUT\\\"&&(r[i.target[m].name]=i.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),c.value=!1,p.value=!1,a.value=!1,w()},g=async i=>{i.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<i.target.length;y++)i.target[y].nodeName===\\\"INPUT\\\"&&(r[i.target[y].name]=i.target[y].value);if(!r.name)return;_(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),c.value=!1,p.value=!1,a.value=!1},N=async i=>{i.preventDefault();let r={email:null,password:null};for(let m=0;m<i.target.length;m++)i.target[m].nodeName===\\\"INPUT\\\"&&(r[i.target[m].name]=i.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),c.value=!1,p.value=!1,a.value=!1,w()};e.onMounted(async()=>{const i=Number(winnerdow[`${n}-theme-id`]);if(i)try{const{json:r}=await et(i);return C(r),f(n)}catch(r){console.log(r)}await w(),t.value=!1,await v()});const b=()=>{let i=localStorage.getItem(\\\"token\\\");if(i)try{i=JSON.parse(i).token}catch{i=!1}return i},w=async()=>{const i=b();i&&(d.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${i}`}}).then(r=>r.json()).then(r=>(r.token=i,r)))};return{cancelForm:()=>{a.value=!1,c.value=!1,p.value=!1},isApplying:t,isLoading:s,isPreviewing:o,showingFrom:B,showingTo:S,themes:l,title:u,totalItems:$,windowOptions:T,cancelPreview:I,closeApp:()=>f(n),showPreview:C,user:d,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:a,showLogin:c,showRegister:p,triggerLoginRegister:()=>{c.value||p.value?(c.value=!1,p.value=!1):c.value=!0},toggleLoginRegister:()=>{c.value?(c.value=!1,p.value=!0):p.value&&(p.value=!1,c.value=!0)},toggleSubmitTheme:()=>{a.value=!a.value},reloadTheme:async i=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${i}`,{headers:r}).then(y=>y.json());for(let y=0;y<l._rawValue.length;y++)l.value[y].id===m.id&&(l.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-375d43b4\\\"),n=n(),e.popScopeId(),n),st={class:\\\"theme-browser\\\"},at=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),it={class:\\\"buttons\\\"},lt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),dt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),ct={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),ft=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),gt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\",-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,s,o,l,h){const a=e.resolveComponent(\\\"tb-header\\\"),c=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[30]||(t[30]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[31]||(t[31]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[32]||(t[32]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",st,[e.createVNode(a,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[4]||(t[4]=(...d)=>o.onThemeSubmit&&o.onThemeSubmit(...d))},[e.createElementVNode(\\\"div\\\",null,[at,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeyup:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeydown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[2]||(t[2]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",it,[lt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[3]||(t[3]=(...d)=>o.cancelForm&&o.cancelForm(...d))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[13]||(t[13]=(...d)=>o.onLogin&&o.onLogin(...d))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeyup:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeydown:t[6]||(t[6]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[7]||(t[7]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[dt,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeyup:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[10]||(t[10]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",ct,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[11]||(t[11]=(...d)=>o.cancelForm&&o.cancelForm(...d))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[12]||(t[12]=(...d)=>o.toggleLoginRegister&&o.toggleLoginRegister(...d))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[28]||(t[28]=(...d)=>o.onRegister&&o.onRegister(...d))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeyup:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeydown:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ft,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeyup:t[17]||(t[17]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeydown:t[18]||(t[18]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[19]||(t[19]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeyup:t[20]||(t[20]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeydown:t[21]||(t[21]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[22]||(t[22]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[gt,e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeyup:t[23]||(t[23]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeydown:t[24]||(t[24]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[25]||(t[25]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[26]||(t[26]=(...d)=>o.cancelForm&&o.cancelForm(...d))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[27]||(t[27]=(...d)=>o.toggleLoginRegister&&o.toggleLoginRegister(...d))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[29]||(t[29]=(...d)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...d))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(c,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[33]||(t[33]=(...d)=>o.cancelPreview&&o.cancelPreview(...d))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[34]||(t[34]=(...d)=>o.closeApp&&o.closeApp(...d))},Bt)],2)],64)}var $t=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-375d43b4\\\"]]),Tt={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=Tt,z=\\\"theme-browser\\\";var vt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},vt),Ie);e.createApp($t,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/bitpacks/theme-browser/main.js\",\"url\":\"blob:file:///8d0efb4d-9c83-47fe-b022-b33ee582278d\",\"moduleSequenceNumber\":500}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.55'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-18a02012]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-18a02012],.theme-browser__header button[data-v-18a02012],.theme-browser__header span[data-v-18a02012]{flex:0 0 auto}.theme-browser__header button[data-v-18a02012]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-18a02012]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-9f4bd1a0] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-9f4bd1a0]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-9f4bd1a0],.theme-browser button[data-v-9f4bd1a0]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-9f4bd1a0]:focus,.theme-browser input[data-v-9f4bd1a0]:hover,.theme-browser input[data-v-9f4bd1a0]:active,.theme-browser button[data-v-9f4bd1a0]:focus,.theme-browser button[data-v-9f4bd1a0]:hover,.theme-browser button[data-v-9f4bd1a0]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-9f4bd1a0]{display:block;width:100%}.theme-browser button[data-v-9f4bd1a0]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-9f4bd1a0]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-9f4bd1a0]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-9f4bd1a0],.pagination-details[data-v-9f4bd1a0]{flex:0 1 auto;margin:0}.title[data-v-9f4bd1a0]{margin-right:20px}.pagination-wrapper[data-v-9f4bd1a0]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-9f4bd1a0]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-9f4bd1a0]{color:#cecece;margin-left:auto}.themes[data-v-9f4bd1a0]{flex:1 0 100%;margin-top:16px}.loader[data-v-9f4bd1a0]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-9f4bd1a0]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-9f4bd1a0]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-9f4bd1a0]{flex-direction:row}form div label[data-v-9f4bd1a0]{margin-bottom:.4em}.app__content[data-v-9f4bd1a0]{overflow-y:scroll}.preview__ctas[data-v-9f4bd1a0]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-9f4bd1a0]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-9f4bd1a0]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-9f4bd1a0]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-9f4bd1a0]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-9f4bd1a0]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-9f4bd1a0]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-9f4bd1a0]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-9f4bd1a0{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,_,f)=>_ in e?xt(e,_,{enumerable:!0,configurable:!0,writable:!0,value:f}):e[_]=f,A=(e,_)=>{for(var f in _||(_={}))jt.call(_,f)&&J(e,f,_[f]);if(K)for(var f of K(_))Pt.call(_,f)&&J(e,f,_[f]);return e},q=(e,_)=>It(e,Lt(_));(function(e){\\\"use strict\\\";function _(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function f(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return Q(a,n)?a:null},Q=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let i=0;i<a.length;++i){if(a[i]>o[i])return!0;if(o[i]>a[i])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var ae={render:ne};const se={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},le=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function ie(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",se,le)}var re={render:ie};const ce={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},de=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ce,de)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const a=n.__vccOpts||n;for(const[o,i]of t)a[o]=i;return a};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:ae,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),i=e.ref(),h=e.ref(),s=e.ref(),d=e.ref(),p=e.ref(),c=e.ref();let u={},B={};const S=e.ref(!1),v=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),$=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,p.value=s.value/2-g/2,c.value=d.value/2-N/2};e.onMounted(()=>{v.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{a.value&&!S.value&&(o.value=g,i.value=N),a.value=!0}).observe(t.value):a.value=!0,v.canDrag&&$()});const I=({x:g,y:N,button:b})=>{if(!v.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,i.value=t.value.offsetHeight,B={x:p.value,y:c.value},s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",T),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",T),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const T=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,H=b+o.value>s.value;(L||H)&&(L?b=0:b=s.value-o.value,B.x=b,u.x=Math.max(Math.min(g,s.value-5),5));const j=w<0,W=w+i.value>d.value;(j||W)&&(j?w=0:w=d.value-i.value,B.y=w,u.y=Math.max(Math.min(N,d.value),5)),p.value=b,c.value=w};return{isMinimised:S,left:p,process:t,processHeight:i,processWidth:o,top:c,windowOptions:v,beginGrabbing:I,setPosition:$,toggleMinimise:()=>{S.value||(h.value=i.value),S.value=!S.value,S.value||(i.value=h.value)}}}},_e={class:\\\"app__title\\\"},fe={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,a,o,i,h){const s=e.resolveComponent(\\\"icon-update\\\"),d=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),c=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",_e,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",fe,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(s,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(d,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(c,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),Ht=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>f(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(s=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...s)=>o.updateComplete&&o.updateComplete(...s))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...s)=>o.doUpdate&&o.doUpdate(...s))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Wt=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),i=e.ref(null);return e.onMounted(async()=>{n&&a&&(i.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:i,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ve={class:\\\"app-wrapper\\\"};function $e(n,t,a,o,i,h){const s=e.resolveComponent(\\\"app-container\\\"),d=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ve,[e.createVNode(s,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(d,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var Te=M(Me,[[\\\"render\\\",$e],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Kt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,i)=>{fetch(`${V}/api/themes/${o.id}/${i}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],He={key:1};function We(n,t,a,o,i,h){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(s,d)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:d,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=s.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:c=>n.$emit(\\\"theme:preview\\\",s.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(s.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(s.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":a.user,class:e.normalizeClass({voting:!0,hasActive:s.user_vote!==null&&s.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===-1}),onClick:c=>o.onClickVote(s,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(s.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===1}),onClick:c=>o.onClickVote(s,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",He,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ke=M(je,[[\\\"render\\\",We],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-18a02012\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(a.title),1),!a.user||!a.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=s=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),a.user&&a.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(a.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-18a02012\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:a}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:a}}var Xt=\\\"\\\";const nt={components:{AppWrapper:Te,ThemeList:Ke,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),i=e.ref([]),h=e.ref({}),s=e.ref(!1),d=e.ref(!1),p=e.ref(!1),c=e.ref({}),u=e.computed(()=>a.value?\\\"Loading...\\\":i.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),v=e.computed(()=>h.value.total_items),$={canDrag:!1,canMinimise:!1,canResize:!1},I=l=>{f(\\\"theme:cancel-preview\\\",l),o.value=!1},C=l=>{f(\\\"theme:preview\\\",l),o.value=!0},T=async()=>{a.value=!0;const l=b(),r=tt(l),{data:E,meta:m}=await ot(r);h.value=m,i.value=E,a.value=!1},O=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()},g=async l=>{l.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<l.target.length;y++)l.target[y].nodeName===\\\"INPUT\\\"&&(r[l.target[y].name]=l.target[y].value);if(!r.name)return;f(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),d.value=!1,p.value=!1,s.value=!1},N=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()};e.onMounted(async()=>{const l=Number(winnerdow[`${n}-theme-id`]);if(l)try{const{json:r}=await et(l);return C(r),_(n)}catch(r){console.log(r)}await w(),t.value=!1,await T()});const b=()=>{let l=localStorage.getItem(\\\"token\\\");if(l)try{l=JSON.parse(l).token}catch{l=!1}return l},w=async()=>{const l=b();l&&(c.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${l}`}}).then(r=>r.json()).then(r=>(r.token=l,r)))};return{cancelForm:()=>{s.value=!1,d.value=!1,p.value=!1},isApplying:t,isLoading:a,isPreviewing:o,showingFrom:B,showingTo:S,themes:i,title:u,totalItems:v,windowOptions:$,cancelPreview:I,closeApp:()=>_(n),showPreview:C,user:c,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:s,showLogin:d,showRegister:p,triggerLoginRegister:()=>{d.value||p.value?(d.value=!1,p.value=!1):d.value=!0},toggleLoginRegister:()=>{d.value?(d.value=!1,p.value=!0):p.value&&(p.value=!1,d.value=!0)},toggleSubmitTheme:()=>{s.value=!s.value},reloadTheme:async l=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${l}`,{headers:r}).then(y=>y.json());for(let y=0;y<i._rawValue.length;y++)i.value[y].id===m.id&&(i.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-9f4bd1a0\\\"),n=n(),e.popScopeId(),n),at={class:\\\"theme-browser\\\"},st=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),lt={class:\\\"buttons\\\"},it=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ct=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),dt={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ft=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),gt=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,a,o,i,h){const s=e.resolveComponent(\\\"tb-header\\\"),d=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",at,[e.createVNode(s,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[2]||(t[2]=(...c)=>o.onThemeSubmit&&o.onThemeSubmit(...c))},[e.createElementVNode(\\\"div\\\",null,[st,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeydown:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",lt,[it,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[1]||(t[1]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[7]||(t[7]=(...c)=>o.onLogin&&o.onLogin(...c))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ct,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeydown:t[4]||(t[4]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",dt,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[5]||(t[5]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[6]||(t[6]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[12]||(t[12]=(...c)=>o.onRegister&&o.onRegister(...c))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeydown:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),ft,gt,e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[10]||(t[10]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[11]||(t[11]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[13]||(t[13]=(...c)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...c))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(d,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[17]||(t[17]=(...c)=>o.cancelPreview&&o.cancelPreview(...c))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[18]||(t[18]=(...c)=>o.closeApp&&o.closeApp(...c))},Bt)],2)],64)}var vt=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-9f4bd1a0\\\"]]),$t={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=$t,z=\\\"theme-browser\\\";var Tt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},Tt),Ie);e.createApp(vt,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n// Import terminal wrapper library from https://gitlab.com/talamond/bitburner-terminal-library\\nimport * as termlib from 'https://cdn.statically.io/gl/talamond/bitburner-terminal-library/main/terminal.js'\\n\\n// Simple list of the possible extensions used by scripts\\nconst scriptExtensions = [\\n\\t\\\"js\\\",\\n\\t\\\"ns\\\",\\n\\t\\\"script\\\"\\n]\\n\\n// Function used to print the spaced out block of entries rather than list\\nfunction printLine(items, color=null) {\\n\\tconst term = new termlib.terminal();\\n\\n\\t// Check that there are items left to print\\n\\twhile (items.length > 0) {\\n\\t\\tlet line = '';\\n\\t\\t// Add items to the lin until up until the max line length of 80\\n\\t\\twhile (items.length > 0 && (line.length + items[0].length + 1) < 80) {\\n\\t\\t\\tline = line + (items.shift() + ' ').padEnd(10);\\n\\t\\t}\\n\\t\\tif (line.trim().length > 0) {\\n\\t\\t\\t// Check if a color was set, and if so use the fancy print option\\n\\t\\t\\t// to set it\\n\\t\\t\\tif (color == null) {\\n\\t\\t\\t\\tterm.print(line)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlet fancyLine = term.setColor(line, color);\\n\\t\\t\\t\\tterm.fancyPrint(fancyLine);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n// Function to print the list output, expecting a single character prefix\\n// for each file in the list.\\nfunction printWithPrefix (items, prefix, color=null) {\\n\\tconst term = new termlib.terminal();\\n\\n\\twhile (items.length > 0) {\\n\\t\\tlet line = `${prefix}  ${items.shift()}`;\\n\\n\\t\\tif (color == null) {\\n\\t\\t\\tterm.print(line)\\n\\t\\t} else {\\n\\t\\t\\tlet fancyLine = term.setColor(line, color);\\n\\t\\t\\tterm.fancyPrint(fancyLine);\\n\\t\\t}\\n\\t}\\n}\\n\\nexport async function main(ns) {\\n\\tconst switches = ns.flags([\\n\\t\\t[\\\"h\\\", false],\\n\\t\\t[\\\"a\\\", false],\\n\\t\\t[\\\"l\\\", false]\\n\\t])\\n\\n\\t// Grab the terminal, do this early because might as well have pretty\\n\\t// help output.\\n\\tconst term = new termlib.terminal();\\n\\n\\tif (switches.h) {\\n\\t\\tterm.print(\\\"Usage: ls -hal <files>\\\");\\n\\t\\tterm.print(\\\"  -h show this output\\\");\\n\\t\\tterm.print(\\\"  -a show All files, including system and hidden files ('.')\\\");\\n\\t\\tterm.print(\\\"  -l show output in list mode\\\");\\n\\t\\tns.exit()\\n\\t}\\n\\n\\t// Grab the current working directory for relative listings\\t\\n\\tlet target = term.cwd();\\n\\n\\t// If an argument was passed then set it to the current target\\n\\tif (switches._.length > 0) {\\n\\t\\ttarget = switches._[0]\\n\\t}\\n\\n\\t// Sanitize the input\\n\\t// If there's no leading /, presume it's a relative listing, and prepend\\n\\t// the current working directory\\n\\tif (target[0] != '/') {\\n\\t\\tif (term.cwd() == '/') {\\n\\t\\t\\ttarget = '/' + target;\\n\\t\\t} else {\\n\\t\\t\\ttarget = term.cwd() + '/' + target;\\n\\t\\t}\\n\\t}\\n\\n\\t// Add a trailing slash if there isn't one.\\n\\t// This is mostly to avoid false positives if a directory name partial\\n\\t// matches a filename.\\n\\tif (target.slice(-1)[0] != '/') {\\n\\t\\ttarget = target + '/'\\n\\t}\\n\\n\\t// If the target is just root(/) then empty it out because otherwise\\n\\t// later matching will exclude files in root\\n\\tif (target == '/') {\\n\\t\\ttarget = '';\\n\\t}\\n\\n\\t// Get all files on the server\\n\\tlet fileList = ns.ls(ns.getHostname());\\n\\n\\t// Create arrays to split files into types\\n\\tlet directories = [];\\n\\tlet textFiles = [];\\n\\tlet scriptFiles = [];\\n\\tlet special = [];\\n\\tlet messages = [];\\n\\tlet litFiles = [];\\n\\n\\t// Time to work and split all the files up\\n\\tfor (let i = 0; i < fileList.length; i++) {\\n\\t\\tlet item = fileList[i];\\n\\n\\t\\t// Check for false matches from ls\\n\\t\\tif (target.length > 0) {\\n\\t\\t\\tlet test = item.slice(0, target.length);\\n\\t\\t\\tif (test != target) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\titem = item.slice(target.length);\\n\\t\\t}\\n\\n\\t\\t// Split filenames off of directory separators\\n\\t\\titem = item.split('/',3);\\n\\n\\t\\t// if there was a leading /, just drop the first empty entry\\n\\t\\tif (item[0] == '') {item.shift()}\\n\\n\\t\\t// If the list is longer than 1, then it's clearly a directory\\n\\t\\tif (item.length > 1) {\\n\\t\\t\\t// Since directories come up multiple times, check for\\n\\t\\t\\t// duplicates\\n\\t\\t\\tif (!directories.includes(item[0])) {\\n\\t\\t\\t\\t// Skip entries with leading '.' unless -a is set\\n\\t\\t\\t\\tif (item[0][0] != '.') {\\n\\t\\t\\t\\t\\tdirectories.push(item[0]);\\n\\t\\t\\t\\t} else if (switches.a) {\\n\\t\\t\\t\\t\\tdirectories.push(item[0]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\t// Now that we know it's not a directory, get the file extension\\n\\t\\t// Using split with 100 splits just because we need to get the last\\n\\t\\t// and there could be multiple.\\n\\t\\tlet itemext = fileList[i].split('.', 100).pop();\\n\\n\\t\\t// Check for script files, and add with same logic as directories\\n\\t\\tif (scriptExtensions.includes(itemext)) {\\n\\t\\t\\t// Check for blank because I've been getting these?\\n\\t\\t\\tif (item[0] != '') {\\n\\t\\t\\t\\tif (item[0][0] != '.') {\\n\\t\\t\\t\\t\\tscriptFiles.push(item[0]);\\n\\t\\t\\t\\t} else if (switches.a) {\\n\\t\\t\\t\\t\\tscriptFiles.push(item[0]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif (item[0] != '') {\\n\\t\\t\\t\\t// Because there's a bunch of different items, using hide\\n\\t\\t\\t\\t// to avoid repeating the check code over and over again\\n\\t\\t\\t\\t// TODO? Put the hide check early in the loop\\n\\t\\t\\t\\tlet hide = false;\\n\\t\\t\\t\\tif (item[0][0] == '.' && !switches.a) {\\n\\t\\t\\t\\t\\thide = true\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!hide) {\\n\\t\\t\\t\\t\\t// Split files off of type, if type is unknown then\\n\\t\\t\\t\\t\\t// put it in general special field (exe/cct)\\n\\t\\t\\t\\t\\tif (itemext == \\\"txt\\\") {\\n\\t\\t\\t\\t\\t\\ttextFiles.push(item[0]);\\n\\t\\t\\t\\t\\t} else if (itemext == \\\"lit\\\") {\\n\\t\\t\\t\\t\\t\\tlitFiles.push(item[0]);\\n\\t\\t\\t\\t\\t} else if (itemext == \\\"msg\\\") {\\n\\t\\t\\t\\t\\t\\tmessages.push(item[0]);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tspecial.push(item[0]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Check for list flag\\n\\tif (!switches.l) {\\n\\t\\t// Directories get pretty colors to match vanilla ls\\n\\t\\tprintLine(directories, 'cyan');\\n\\t\\t// Show hidden file types if set\\n\\t\\tif (switches.a) {\\n\\t\\t\\tprintLine(special);\\n\\t\\t\\tprintLine(litFiles);\\n\\t\\t\\tprintLine(messages);\\n\\t\\t}\\n\\t\\tprintLine(textFiles);\\n\\t\\tprintLine(scriptFiles);\\n\\t} else if (switches.l) {\\n\\t\\t// Directories get pretty colors to match vanilla ls\\n\\t\\tprintWithPrefix(directories, 'd', 'cyan');\\n\\t\\t// Show hidden file types if set\\n\\t\\tif (switches.a) { \\n\\t\\t\\tprintWithPrefix(special, 's');\\n\\t\\t\\tprintWithPrefix(litFiles, 'l');\\n\\t\\t\\tprintWithPrefix(messages, 'm');\\n\\t\\t}\\n\\t\\tprintWithPrefix(textFiles, 't');\\n\\t\\tprintWithPrefix(scriptFiles, 'x');\\n\\t}\\n\\t\\n}\",\"filename\":\"/bitpacks/ls/ls.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/bitpacks/ls/ls.js\",\"url\":\"blob:file:///f215a89b-cafd-4555-9072-311d8c3cfbb3\",\"moduleSequenceNumber\":356}],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    var flags = ns.flags([\\n        ['v', false],\\n        ['verbose', false],\\n        ['f', false],\\n        ['force', false],\\n        ['r', false],\\n        ['R', false],\\n        ['recursive', false],\\n        ['h', ''],\\n        ['host', ''],\\n        ['help', false],\\n        ['test', true]\\n    ]);\\n    var verbose = flags.verbose || flags.v;\\n    var force = flags.force || flags.f;\\n    var recursive = flags.r || flags.R || flags.recursive;\\n    var host = flags.h || flags.host || ns.getHostname();\\n    var paths = flags._;\\n    if (paths.length === 0 || flags.help) {\\n        var currentScript = ns.getScriptName();\\n        var manualPath = currentScript.substring(0, currentScript.lastIndexOf('/') + 1) + 'manual.txt';\\n        var manual = ns.read(manualPath);\\n        ns.tprint(`\\\\n${manual}\\\\n`);\\n        ns.exit();\\n    }\\n    var cwd = GetCWD(ns);\\n    if (cwd === '/')\\n        cwd = '';\\n    for (var index in paths) {\\n        var oldPath = paths[index];\\n        if (oldPath.startsWith('/'))\\n            continue;\\n        if (oldPath.endsWith('/'))\\n            paths[index] = `${cwd}${paths[index]}`;\\n        else\\n            paths[index] = `${cwd}/${paths[index]}`;\\n    }\\n    return await rm_command(ns, paths, verbose, force, recursive, host);\\n}\\nfunction GetCWD(ns) {\\n    var doc = eval('document');\\n    var terminalInput = doc.getElementById('terminal-input');\\n    var cwdElement = terminalInput?.previousSibling;\\n    if (cwdElement) {\\n        var cwd = cwdElement.innerText;\\n        return cwd.substring(cwd.indexOf('/'), cwd.lastIndexOf(']'));\\n    }\\n    if (ns) {\\n        ns.tprint(`Error: Couldn't determine working directory. Aborting.`);\\n        ns.exit();\\n    }\\n    return '';\\n}\\nasync function rm_command(ns, paths, verbose, force, recursive, host) {\\n    var pathsToDelete = [];\\n    for (var path of paths) {\\n        if (path.endsWith('.msg')) {\\n            ns.tprint(`Cannot delete .msg files. Skipping ${path}`);\\n            continue;\\n        }\\n        GatherFiles(ns, host, path, recursive, pathsToDelete);\\n    }\\n    if ((recursive || pathsToDelete.length >= 3) && !force) {\\n        var output = 'Preparing to delete:\\\\n';\\n        for (var file of pathsToDelete)\\n            output += `${file}\\\\n`;\\n        ns.tprint(output);\\n        var decision = await ns.prompt(`Proceed to delete files listed in terminal?`);\\n        if (!decision)\\n            ns.exit();\\n    }\\n    for (var file of pathsToDelete) {\\n        DeleteFile(ns, file, verbose, host);\\n    }\\n}\\nexport function rm(ns, paths, options) {\\n    var pathsToDelete = [];\\n    for (var path of paths) {\\n        GatherFiles(ns, options.host, path, !!options.recursive, pathsToDelete);\\n    }\\n    for (var file of pathsToDelete) {\\n        DeleteFile(ns, file, false, options.host);\\n    }\\n}\\nfunction DeleteFile(ns, fullpath, verbose, host) {\\n    var fileNoLeadingSlash = fullpath.slice(1);\\n    var slashIndex = fileNoLeadingSlash.indexOf('/');\\n    var fileToDelete = slashIndex === -1 ? fileNoLeadingSlash : fullpath;\\n    if (verbose)\\n        ns.tprint(`Deleting ${fileToDelete}...`);\\n    ns.rm(fileToDelete, host);\\n}\\nfunction GatherFiles(ns, host, path, recursive, paths) {\\n    if (IsDeletableFile(path)) {\\n        paths.push(path);\\n    }\\n    else if (recursive) {\\n        var dirPath = path.endsWith('/') ? path : `${path}/`;\\n        if (!dirPath.startsWith('/'))\\n            dirPath = `/${dirPath}`;\\n        var fullpaths = ns.ls(host, dirPath);\\n        for (var fullpath of fullpaths) {\\n            if (fullpath.startsWith(dirPath) && IsDeletableFile(fullpath))\\n                paths.push(fullpath);\\n        }\\n    }\\n    else {\\n        ns.tprint(`${path} is a directory. Pass -r -R or --recursive to delete directories.`);\\n        ns.exit();\\n    }\\n}\\nfunction IsDeletableFile(file) {\\n    return (file.endsWith('.txt') ||\\n        file.endsWith('.lit') ||\\n        file.endsWith('.js') ||\\n        file.endsWith('.ns') ||\\n        file.endsWith('.script') ||\\n        file.endsWith('.cct') ||\\n        file.endsWith('.exe') ||\\n        file.endsWith('INC'));\\n}\\nexport function autocomplete(data, args) {\\n    var cwd = GetCWD();\\n    if (cwd !== '/')\\n        cwd += '/';\\n    var candidates = [...data.txts, ...data.scripts];\\n    var autos = {};\\n    for (var path of candidates) {\\n        var fullpath = path.startsWith('/') ? path : `/${path}`;\\n        if (fullpath.startsWith(cwd)) {\\n            var relativePath = fullpath.substring(cwd.length);\\n            var slashIndex = relativePath.indexOf('/');\\n            var auto = slashIndex === -1 ? relativePath : relativePath.substring(0, slashIndex + 1);\\n            autos[auto] = auto;\\n        }\\n    }\\n    return Object.keys(autos);\\n}\",\"filename\":\"/bitpacks/rm/rm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/bitpacks/rm/rm.js\",\"url\":\"blob:file:///0921763d-27f4-4e38-89fa-c23d6cb6cf83\",\"moduleSequenceNumber\":1091}],\"dependents\":[],\"ramUsage\":2.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var _ns;\\nconst col = {\\n  \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n  \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n  \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n  \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n  \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n  \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n  \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n  \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n  \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n}\\nvar doc = eval(\\\"document\\\");\\nconst term = doc.getElementById(\\\"terminal\\\")\\n//why do you hate me? I\\n//if the script isn't working just edit and save it that should fix it\\nexport async function main(ns) {\\n\\tvar seenList = [];\\n\\t_ns = ns;\\n\\tns.tprint(\\\"╭┐Map ┌──────────────────────────────────────────────────────────────────╮\\\");\\n\\tns.tprint(`│${col.g}R: Home ${col.d}[1]                                                             │`);\\n\\t//appterm(\\\"<span>╭─Map──<span>\\\")\\n\\t//appterm('<span>│</span><span style=\\\"color: green;\\\">R:✓ </span><span>Home [1]</span>')\\n\\tScanServer(\\\"home\\\", seenList, 0, \\\"\\\");\\n\\tns.tprint(\\\"╰──────────────────────────────────────────────────────────────────┘Map └╯\\\");\\n}\\n\\nfunction ScanServer(serverName, seenList, indent, prefix) {\\n\\tif (seenList.includes(serverName)) return;\\n\\tseenList.push(serverName);\\n\\t\\n\\tvar serverList = _ns.scan(serverName);\\n\\tserverList = serverList.filter(function (item) { return seenList.indexOf(item) === -1; });\\n\\tserverList = serverList.sort(ChildCountCompare);\\n\\n\\tfor (var i = 0; i < serverList.length; i++) {\\n\\t\\tvar newServer = serverList[i];\\n\\t\\tif (seenList.includes(newServer)) continue;\\n\\t\\tif (i != serverList.length - 1) {\\n\\t\\t\\tPrintServerInfo(newServer, prefix + \\\"├─\\\")\\n\\t\\t\\tScanServer(newServer, seenList, indent + 1, prefix + \\\"│ \\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tPrintServerInfo(newServer, prefix + \\\"╰─\\\")\\n\\t\\t\\tScanServer(newServer, seenList, indent + 1, prefix + \\\"  \\\");\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction ChildCountCompare(a, b) {\\n\\tvar ax = ChildCount(a);\\n\\tvar bx = ChildCount(b);\\n\\treturn ChildCount(a) > ChildCount(b) ? 1 : -1;\\n}\\n\\nfunction ChildCount(serverName) {\\n\\tvar count = 0;\\n\\tvar serverList = _ns.scan(serverName);\\n\\tfor (var i = 1; i < serverList.length; i++) {\\n\\t\\tcount += ChildCount(serverList[i]) + 1;\\n\\t}\\n\\treturn count;\\n}\\n\\nfunction PrintServerInfo(serverName, prefix) {\\n\\tvar hacked = (_ns.hasRootAccess(serverName)) ? \\\"\\\" : \\\"\\\";\\n\\tvar serverHackingLevel = _ns.getServerRequiredHackingLevel(serverName);\\n\\tvar canhack = false;\\n\\tvar dfstring = `│${prefix}R:${hacked} ${serverName} [${serverHackingLevel}]`\\n\\tlet dfl = dfstring.length\\n\\tlet spa = 74 - dfl;\\n\\tlet sp = \\\"\\\";\\n\\tfor (let i = 0; i < spa; i++) {\\n\\t\\tsp += \\\" \\\"\\n\\t}\\n\\tif (_ns.getHackingLevel() >= serverHackingLevel && !_ns.hasRootAccess(serverName)) {canhack = true}\\n\\tif (_ns.hasRootAccess(serverName)) {\\n\\t\\t_ns.tprint(`│${prefix}${col.g}R:${hacked} ${serverName}${col.d} [${serverHackingLevel}]${sp}│`)\\n\\t\\t//appterm(`<span>│${prefix}</span><span style=\\\"color: green;\\\">R:${hacked} </span><span>${serverName} [${serverHackingLevel}]</span>`);\\n\\t} else {\\n\\t\\tif (canhack) {\\n\\t\\t\\t_ns.tprint(`│${prefix}${col.r}R:${hacked}${col.y} ${serverName}${col.d} [${serverHackingLevel}]${sp}│`)\\n\\t\\t} else {\\n\\t\\t\\t_ns.tprint(`│${prefix}${col.r}R:${hacked} ${serverName}${col.d} [${serverHackingLevel}]${sp}│`)\\n\\t\\t}\\n\\t\\t//appterm(`<span>│${prefix}</span><span style=\\\"color: red;\\\">R:${hacked} </span><span>${serverName} [${serverHackingLevel}]</span>`);\\n\\t}\\n}\\n\\nfunction appterm(str) {\\n\\tlet dv = doc.createElement(\\\"div\\\");\\n\\tdv.innerHTML = '<li style=\\\"padding: 0px;\\\" class=\\\"jss14 MuiListItem-root MuiListItem-gutters MuiListItem-padding css-17eb3a9\\\"><p style=\\\"white-space: break-spaces;\\\" class=\\\"jss19 MuiTypography-root MuiTypography-body1 css-8twwy\\\">' + str + '</p></li>'\\n\\tterm.append(dv)\\n}\",\"filename\":\"/src/map.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/map.js\",\"url\":\"blob:file:///83963803-cb70-4dd5-b505-7036c10e9bc8\",\"moduleSequenceNumber\":4039}],\"dependents\":[],\"ramUsage\":2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const doc = eval(\\\"document\\\");\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    hook0.innerText = \\\"\\\"\\n    hook1.innerText = \\\"\\\"\\n}\",\"filename\":\"/src/clearHud.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/clearHud.js\",\"url\":\"blob:file:///0b5d8735-49f0-477a-a312-1d37b1a00702\",\"moduleSequenceNumber\":12342}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n    const col = {\\n        \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n        \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n        \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n        \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n        \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n        \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n        \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n        \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n        \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n    }\\n    ns.tprint(col.bk + \\\"black \\\" + col.r + \\\"red \\\" + col.g + \\\"green \\\" + col.y + \\\"yellow \\\"\\n        + col.b + \\\"blue \\\" + col.m + \\\"magenta \\\" + col.c + \\\"cyan \\\" + col.w + \\\"white \\\" + col.d + \\\"default\\\")\\n\\n}\",\"filename\":\"/src/colors.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/colors.js\",\"url\":\"blob:file:///4ef4beb9-a4ee-438b-96da-d919e833daa3\",\"moduleSequenceNumber\":163}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/21.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/20.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/19.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/18.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/17.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/16.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/15.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/14.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/13.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/12.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/11.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/10.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/9.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/8.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/7.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/6.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/5.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/4.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"/achive/1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n/*\\nthis script is called with [server name], [ram usable (in gigabytes)], and [instance] (starts at 0)\\n*/\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function WaitPids(ns, pids, hooks, vars, instance, cycles) {\\n    if (!Array.isArray(pids))\\n        pids = [pids];\\n    while (pids.some(p => ns.getRunningScript(p) != undefined)) {\\n        await ns.sleep(5);\\n        hud(ns, hooks[0], hooks[1], instance, cycles);\\n        console(ns, vars[0], vars[1], vars[2], vars[3], vars[4], vars[5], vars[6], instance, cycles);\\n    }\\n}\\nconst col = {\\n    \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n    \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n    \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n    \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n    \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n    \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n    \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n    \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n    \\\"d\\\": \\\"\\\\x1b[0m\\\"\\n};\\nlet doc = eval(\\\"document\\\");\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    let instance = ns.args[2];\\n    let cycles = 0;\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    let hs = ns.args[0];\\n    let ram = ns.args[1];\\n    //let coH = Math.floor((ram/3)/1.6);\\n    //let coG = Math.floor((ram/3)/1.6);\\n    let coH = Math.floor((ram / 3) / 1.7);\\n    let coG = Math.floor((ram / 3) / 1.75);\\n    let coW = coG;\\n    let wag = ns.weakenAnalyze(coG, ns.getServer().cpuCores);\\n    if (wag > 100) {\\n        while (wag > 100) {\\n            coW -= 1;\\n            wag = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n        }\\n    }\\n    coG = Math.floor(((ram - (coW * 1.75)) / 2) / 1.75);\\n    coH = Math.floor(((ram - (coW * 1.75)) / 2) / 1.7);\\n    let ht = Math.ceil(ns.getHackTime(hs) / 1000);\\n    let gt = Math.ceil(ns.getGrowTime(hs) / 1000);\\n    let wt = Math.ceil(ns.getWeakenTime(hs) / 1000);\\n    if (ns.getServerMinSecurityLevel(hs) < ns.getServerSecurityLevel(hs) || ns.getServerMaxMoney(hs) > ns.getServerMoneyAvailable(hs)) {\\n        while (ns.getServerMinSecurityLevel(hs) < ns.getServerSecurityLevel(hs) || ns.getServerMaxMoney(hs) > ns.getServerMoneyAvailable(hs)) {\\n            let prep = [ns.run('src/weak.js', coW, hs), ns.run('src/grow.js', coG * 2, hs)];\\n            await WaitPids(ns, prep, [hook0, hook1], [hs, coH, coG, coW, gt, ht, wt], instance, cycles);\\n        }\\n    }\\n    let ha = ns.hackAnalyze(hs) * coH;\\n    if (ha > 1.05) {\\n        while (ha > 1.05) {\\n            coH -= 1;\\n            ha = ns.hackAnalyze(hs) * coH;\\n        }\\n    }\\n    coG = Math.floor(((ram - ((coW * 1.75) + (coH * 1.7)))) / 1.75);\\n    ht = Math.ceil(ns.getHackTime(hs) / 1000);\\n    gt = Math.ceil(ns.getGrowTime(hs) / 1000);\\n    wt = Math.ceil(ns.getWeakenTime(hs) / 1000);\\n    eval(\\\"ns.bypass(document);\\\");\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        let batch = [ns.run('src/weak.js', coW, hs), ns.run('src/grow.js', coG, hs), ns.run('src/heck.js', coH, hs)];\\n        await WaitPids(ns, batch, [hook0, hook1], [hs, coH, coG, coW, gt, ht, wt], instance, cycles);\\n        cycles++;\\n        //rerun hack calc so that leveling up dosen't cause us to hack for more than we need\\n        ha = ns.hackAnalyze(hs) * coH;\\n        if (ha > 1.05) {\\n            while (ha > 1.05) {\\n                coH -= 1;\\n                ha = ns.hackAnalyze(hs) * coH;\\n            }\\n        }\\n        coG = Math.floor(((ram - ((coW * 1.75) + (coH * 1.7)))) / 1.75);\\n    }\\n}\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction hud(ns, hook0, hook1, instance, cycles) {\\n    try {\\n        let header;\\n        let val;\\n        //add wether or not we're hacking, growing, weakening\\n        header = \\\"Hk/Gw/Wk\\\\n\\\";\\n        if (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {\\n            val = `/`;\\n        }\\n        else {\\n            val = `/`;\\n        }\\n        if (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {\\n            val += `/`;\\n        }\\n        else {\\n            val += `/`;\\n        }\\n        if (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {\\n            val += `\\\\n`;\\n        }\\n        else {\\n            val += `\\\\n`;\\n        }\\n        ns.print(val);\\n        // Now drop it into the placeholder elements\\n        if (instance > 0) {\\n            //hook0.innerText += \\\"----\\\\nInstance\\\\n\\\" + header;\\n            //hook1.innerText += \\\"----\\\\n\\\" + instance + \\\"\\\\n\\\" + val;\\n        }\\n        else {\\n            hook0.innerText = \\\"Instance\\\\n\\\" + header;\\n            hook1.innerText = \\\"0\\\\n\\\" + val;\\n        }\\n        let wam = ns.getServerMaxRam(\\\"home\\\");\\n        let wamU = ns.getServerUsedRam(\\\"home\\\");\\n        //other stats\\n        const headers = [];\\n        const values = [];\\n        // Add allowed ram usage\\n        headers.push(\\\"Brain Ram\\\");\\n        values.push(ns.args[1]);\\n        //add current server hacking\\n        headers.push(\\\"Server Target\\\");\\n        values.push(ns.args[0]);\\n        //add cycles\\n        headers.push(\\\"Cycles\\\");\\n        values.push(cycles);\\n        // Add ram\\n        headers.push(\\\"Home Ram\\\");\\n        values.push(wam);\\n        // add free ram\\n        headers.push(\\\"Home Ram Free\\\");\\n        values.push(Math.round((wam - wamU) * 100) / 100);\\n        // Now drop those into the placeholder elements\\n        if (instance == 0) {\\n            hook0.innerText += headers.join(\\\"\\\\n\\\");\\n            hook1.innerText += values.join(\\\"\\\\n\\\");\\n        }\\n    }\\n    catch (err) { // This might come in handy later\\n        ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n    }\\n}\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction console(ns, sv, coH, coG, coW, sgt, sht, swt, instance, cycles) {\\n    let gt = Math.ceil(ns.getGrowTime(sv) / 1000);\\n    let ht = Math.ceil(ns.getHackTime(sv) / 1000);\\n    let wt = Math.ceil(ns.getWeakenTime(sv) / 1000);\\n    let sl = ns.getServerSecurityLevel(sv);\\n    let sml = ns.getServerMinSecurityLevel(sv);\\n    let mm = ns.getServerMaxMoney(sv);\\n    let ma = ns.getServerMoneyAvailable(sv);\\n    let hm = ns.hackAnalyze(sv) * coH;\\n    let wa = ns.weakenAnalyze(coW, ns.getServer().cpuCores);\\n    let ga = ns.growthAnalyze(sv, 2, ns.getServer().cpuCores);\\n    let gaa = coG / ga;\\n    ns.clearLog();\\n    ns.print(\\\"╭┐Hack Brain┌──────────────────────────────────╮\\\\n\\\");\\n    ns.print(`│╰──────────╯      Hack/Grow/Weak | ${isHacking(ns)}${col.d}/${isGrowing(ns)}${col.d}/${isWeakening(ns)}${col.d}      │\\\\n`);\\n    ns.print(`│ ${col.g}Target: ${sv}\\\\n`);\\n    ns.print(`│ ${col.g}Instance: ${instance}\\\\n`);\\n    ns.print(`${col.d}│ ${col.g}Hack Time : ${Math.floor(ht / 60)}m ${ht % 60}s | At run : ${Math.floor(sht / 60)}m ${sht % 60}s\\\\n`);\\n    ns.print(`${col.d}│ ${col.y}Grow Time : ${Math.floor(gt / 60)}m ${gt % 60}s | At run : ${Math.floor(sgt / 60)}m ${sgt % 60}s\\\\n`);\\n    ns.print(`${col.d}│ ${col.g}Weaken Time : ${Math.floor(wt / 60)}m ${wt % 60}s | At run : ${Math.floor(swt / 60)}m ${swt % 60}s\\\\n`);\\n    ns.print(`${col.d}│ ${col.c}Security Level : ${sl}\\\\n`);\\n    ns.print(`${col.d}│ ${col.c}Min Security Level : ${sml}\\\\n`);\\n    ns.print(`${col.d}│ ${col.y}Max Money : ${mm}\\\\n`);\\n    ns.print(`${col.d}│ ${col.y}Money Available : ${ma}\\\\n`);\\n    ns.print(`${col.d}│ ${col.y}Hack Money : ${hm}\\\\n`);\\n    ns.print(`${col.d}│ ${col.g}Weaken Amount : ${wa}\\\\n`);\\n    ns.print(`${col.d}│ ${col.y}Grow Amount : ${gaa}\\\\n`);\\n    ns.print(`${col.d}│ ${col.b}Cycles : ${cycles}\\\\n`);\\n    ns.print(`${col.d}│ ${col.b}Live Time : ${Math.floor(ns.getRunningScript().onlineRunningTime / 60)}m ${Math.round(ns.getRunningScript().onlineRunningTime % 60)}s\\\\n`);\\n    ns.print(`${col.d}╰──────────────────────────────────────────────╯`);\\n}\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\nfunction calcWhitespace(sl, bl) {\\n    let ws = \\\"\\\";\\n    for (let i = 0; i < sl - bl; i++) {\\n        ws += \\\" \\\";\\n    }\\n    return ws;\\n}\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction isWeakening(ns) { if (ns.isRunning(\\\"/src/weak.js\\\", \\\"home\\\", ns.args[0])) {\\n    return col.g + \\\"\\\";\\n}\\nelse {\\n    return col.r + \\\"\\\";\\n} }\\nfunction isHacking(ns) { if (ns.isRunning(\\\"/src/heck.js\\\", \\\"home\\\", ns.args[0])) {\\n    return col.g + \\\"\\\";\\n}\\nelse {\\n    return col.r + \\\"\\\";\\n} }\\nfunction isGrowing(ns) { if (ns.isRunning(\\\"/src/grow.js\\\", \\\"home\\\", ns.args[0])) {\\n    return col.g + \\\"\\\";\\n}\\nelse {\\n    return col.r + \\\"\\\";\\n} }\\n//check Xmark\\n//       \\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3JjL2JyYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQjs7RUFFRTtBQUVGLGlDQUFpQztBQUNqQyxNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU07SUFDckUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFO1FBQzNELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM3RjtBQUNGLENBQUM7QUFFRCxNQUFNLEdBQUcsR0FBRztJQUNWLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFB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QUMsQ0FBQyxlQUFlLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3SCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9ILEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZELEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVELEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuRCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNyRCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxZQUFZLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDbkQsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsZUFBZSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGlCQUFpQixHQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BLLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQ3RFLENBQUM7QUFFRCw2REFBNkQ7QUFDN0QsU0FBUyxjQUFjLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDN0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsRUFBRSxJQUFJLEdBQUcsQ0FBQztLQUNWO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWCxDQUFDO0FBRUQsaUNBQWlDO0FBQ2pDLFNBQVMsV0FBVyxDQUFDLEVBQUUsSUFBRyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFBO0NBQUM7S0FBTTtJQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUE7Q0FBQyxDQUFBLENBQUM7QUFDL0gsU0FBUyxTQUFTLENBQUMsRUFBRSxJQUFHLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUE7Q0FBQztLQUFNO0lBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtDQUFDLENBQUEsQ0FBQztBQUM3SCxTQUFTLFNBQVMsQ0FBQyxFQUFFLElBQUcsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtDQUFDO0tBQU07SUFBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFBO0NBQUMsQ0FBQSxDQUFDO0FBRTdILGFBQWE7QUFDYixXQUFXIn0=\",\"filename\":\"/src/brain.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/brain.js\",\"url\":\"blob:file:///d75e0e98-4ee8-4df4-aade-6493980c04f5\",\"moduleSequenceNumber\":741}],\"dependents\":[],\"ramUsage\":8.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.tprint(\\\"Hello Remote API!\\\");\\r\\n}\\r\\n\",\"filename\":\"template.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\n  This script will print a map of the entire network, treed from the server it was run on.\\n  if you have root access to a server, it will be marked in green, otherwise red.\\n  normally, both the name and checkmark will be green, but if you have root but cannot hack (if your level is too low) the name will be yellow.\\n  if you do not have root access, but can hack, the name will be yellow.\\n  otherwise, both the name and checkmark will be red.\\n*/\\nvar _ns;\\nconst col = {\\n    \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n    \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n    \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n    \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n    \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n    \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n    \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n    \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n    \\\"d\\\": \\\"\\\\x1b[0m\\\" //default color\\n};\\nexport async function main(ns) {\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        ns.disableLog(\\\"ALL\\\");\\n        ns.clearLog();\\n        var seenList = [];\\n        _ns = ns;\\n        ns.print(\\\"╭┐Map ┌──────────────────────────────────────────────────────────────────╮\\\");\\n        ns.print(`│${col.g}R: Home ${col.d}[1]                                                             │`);\\n        ScanServer(\\\"home\\\", seenList, 0, \\\"\\\");\\n        ns.print(\\\"╰──────────────────────────────────────────────────────────────────┘Map └╯\\\");\\n        await ns.sleep(1000);\\n    }\\n}\\nfunction ScanServer(serverName, seenList, indent, prefix) {\\n    if (seenList.includes(serverName))\\n        return;\\n    seenList.push(serverName);\\n    var serverList = _ns.scan(serverName);\\n    serverList = serverList.filter(function (item) { return seenList.indexOf(item) === -1; });\\n    serverList = serverList.sort(ChildCountCompare);\\n    for (var i = 0; i < serverList.length; i++) {\\n        var newServer = serverList[i];\\n        if (seenList.includes(newServer))\\n            continue;\\n        if (i != serverList.length - 1) {\\n            PrintServerInfo(newServer, prefix + \\\"├─\\\");\\n            ScanServer(newServer, seenList, indent + 1, prefix + \\\"│ \\\");\\n        }\\n        else {\\n            PrintServerInfo(newServer, prefix + \\\"╰─\\\");\\n            ScanServer(newServer, seenList, indent + 1, prefix + \\\"  \\\");\\n        }\\n    }\\n}\\nfunction ChildCountCompare(a, b) {\\n    var ax = ChildCount(a);\\n    var bx = ChildCount(b);\\n    return ChildCount(a) > ChildCount(b) ? 1 : -1;\\n}\\nfunction ChildCount(serverName) {\\n    var count = 0;\\n    var serverList = _ns.scan(serverName);\\n    for (var i = 1; i < serverList.length; i++) {\\n        count += ChildCount(serverList[i]) + 1;\\n    }\\n    return count;\\n}\\n/** @param {import(\\\".\\\").NS} ns */\\nfunction PrintServerInfo(serverName, prefix) {\\n    var hacked = (_ns.hasRootAccess(serverName)) ? \\\"\\\" : \\\"\\\";\\n    //swap these lines from being commented if you're not using a nerd font / don't want fancy marks on root\\n    //var hacked = (_ns.hasRootAccess(serverName)) ? \\\"Y\\\" : \\\"N\\\";\\n    var serverHackingLevel = _ns.getServerRequiredHackingLevel(serverName);\\n    var serverRam = _ns.getServerMaxRam(serverName);\\n    var canhack = false;\\n    var dfstring = `│${prefix}R:${hacked} ${serverName} Ram: ${serverRam} [${serverHackingLevel}]`;\\n    let dfl = dfstring.length;\\n    let spa = 74 - dfl;\\n    let sp = \\\"\\\";\\n    for (let i = 0; i < spa; i++) {\\n        sp += \\\" \\\";\\n    }\\n    if (_ns.getHackingLevel() >= serverHackingLevel) {\\n        canhack = true;\\n    }\\n    if (_ns.hasRootAccess(serverName)) {\\n        if (canhack) {\\n            _ns.print(`│${prefix}${col.g}R:${hacked} ${serverName}${col.d} Ram: ${serverRam} [${serverHackingLevel}]${sp}│`);\\n        }\\n        else {\\n            _ns.print(`│${prefix}${col.g}R:${hacked}${col.y} ${serverName}${col.d} Ram: ${serverRam} [${serverHackingLevel}]${sp}│`);\\n        }\\n    }\\n    else {\\n        if (canhack) {\\n            _ns.print(`│${prefix}${col.r}R:${hacked}${col.y} ${serverName}${col.d} Ram: ${serverRam} [${serverHackingLevel}]${sp}│`);\\n        }\\n        else {\\n            _ns.print(`│${prefix}${col.r}R:${hacked} ${serverName}${col.d} Ram: ${serverRam} [${serverHackingLevel}]${sp}│`);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcmMvbWFwdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUFFRixJQUFJLEdBQUcsQ0FBQztBQUNSLE1BQU0sR0FBRyxHQUFHO0lBQ1YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0lBQ2YsSUFBSSxFQUFFLFVBQVU7SUFDaEIsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsU0FBUyxDQUFDLGVBQWU7Q0FDL0IsQ0FBQTtBQUNELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsaURBQWlEO0lBQ2pELE9BQU8sSUFBSSxFQUFFO1FBQ1osRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNULEVBQUUsQ0FBQyxLQUFLLENBQUMsNkVBQTZFLENBQUMsQ0FBQztRQUN4RixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1FBQ3hHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUMsS0FBSyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7UUFDeEYsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCO0FBQ0YsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxF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\",\"filename\":\"/src/mapt.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/mapt.js\",\"url\":\"blob:file:///b3a28dd2-b422-4855-8fe1-2a149eb4c15c\",\"moduleSequenceNumber\":369}],\"dependents\":[],\"ramUsage\":2.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getPurchasedServerMaxRam());\\n    ns.tprint(ns.getPurchasedServerCost(ns.getPurchasedServerMaxRam()));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2VNYXhSYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3JjL3B1cmNoYXNlTWF4UmFtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlDQUFpQztBQUNqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzNCLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLHdCQUF3QixFQUFFLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQyJ9\",\"filename\":\"/src/purchaseMaxRam.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/purchaseMaxRam.js\",\"url\":\"blob:file:///faf3a241-d5e6-4657-8344-f1ce7acb1c09\",\"moduleSequenceNumber\":17129}],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    ns.purchaseServer(ns.args[0], ns.getPurchasedServerMaxRam());\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5TWF4UmFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NyYy9idXlNYXhSYW0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDO0FBQ2pDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLENBQUM7QUFDL0QsQ0FBQyJ9\",\"filename\":\"/src/buyMaxRam.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/buyMaxRam.js\",\"url\":\"blob:file:///707fab54-f906-45ba-9c01-c3776799be85\",\"moduleSequenceNumber\":17130}],\"dependents\":[],\"ramUsage\":3.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-constant-condition */\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    while (true)\\n        await ns.share();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3JjL3NoYXJlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBDQUEwQztBQUMxQyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixPQUFNLElBQUk7UUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNqQyxDQUFDIn0=\",\"filename\":\"/src/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/share.js\",\"url\":\"blob:file:///65a2ff19-9dbd-485d-b148-61b45c1d23f0\",\"moduleSequenceNumber\":510}],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { AnyPidStillRunning, Prep, IsPrepped } from \\\"prep.js\\\";\\nimport { BATCH_SPACER, Metrics, GetBestPctForServer } from \\\"metrics.js\\\";\\nimport { MemoryMap, RunScript } from \\\"ram.js\\\";\\nimport { ServerReport } from \\\"utils.js\\\";\\nconst H = 0;\\nconst W1 = 1;\\nconst G = 2;\\nconst W2 = 3;\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    if (!ns.fileExists('Formulas.exe')) {\\n        ns.tprint('ERROR: Formulas.exe is needed to run this script.');\\n        ns.exit();\\n    }\\n    const server = ns.args[0];\\n    if (ns.args[0] == null) {\\n        ns.tprint('ERROR: No server specified');\\n        ns.exit();\\n    }\\n    // We need to prep the server before anything\\n    if (!IsPrepped(ns, server)) {\\n        ns.print('WARN: Server is not prepared, initiating Prep()...');\\n        await Prep(ns, server);\\n        ns.print('SUCCESS: Server prepped!');\\n    }\\n    // Manage the server!\\n    await ManageServer(ns, server);\\n}\\nasync function ManageServer(ns, server) {\\n    ns.print('INFO: Gathering batch metrics');\\n    let totalBatches = 0; // Total number of batches launched since start\\n    let batches = []; // Currently executing batch list\\n    // Store hack level, this is just for reporting it when we detect a desync.\\n    // Ideally, most desyncs are caused by an increase in hackLevel mid-cycle,\\n    // fudging the batch metrics to the point of throwing batches out of sync\\n    let hackLevel = ns.getHackingLevel();\\n    let pct = await GetBestPctForServer(ns, server, BATCH_SPACER, 0.05, 1, 0.05, 1);\\n    let lastEval = Date.now() - (60 * 60 * 1000);\\n    let metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1);\\n    let skipHack = 0;\\n    while (true) {\\n        const hackLevelChanged = ns.getHackingLevel() != hackLevel;\\n        const prevHackingLevel = hackLevel;\\n        hackLevel = ns.getHackingLevel();\\n        if (Date.now() - lastEval > 5 * 60 * 1000) {\\n            ns.print('WARN: Evaluating best percentage');\\n            pct = await GetBestPctForServer(ns, server, BATCH_SPACER, 0.05, 1, 0.05, 1);\\n            ns.print('WARN: Best percentage: ' + (pct * 100) + '%');\\n            lastEval = Date.now();\\n        }\\n        if (hackLevelChanged)\\n            metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1);\\n        metrics.Report(ns);\\n        ServerReport(ns, server);\\n        // Need to wait for the next window before we check prep state, otherwise we could check during a paywindow\\n        if (await WaitNextWindow(ns, metrics, batches)) {\\n            // Since we prepped in main(), the only reason why we would ever enter this is our metrics changed, something desynced, or some other external factor\\n            // changed the server state or player capacities\\n            if (!IsPrepped(ns, server)) {\\n                // let msg = (hackLevelChanged ? 'WARN: ' : 'ERROR: ') +\\n                // \\t'Desync detected, compensating... ' + server + ' batchCount= ' + batches.length + ' total batches = ' + totalBatches + ' hack= ' + ns.getHackingLevel() + ' (was ' + prevHackingLevel + ')';\\n                //ns.tprint(msg);\\n                //ns.print(msg);\\n                let killCount = 0;\\n                //let pids = new Array();\\n                for (const b of batches) {\\n                    if (b.startTime + b.metrics.delays[H] <= performance.now())\\n                        continue;\\n                    // pids = pids.concat(b.w1pids);\\n                    // pids = pids.concat(b.w2pids);\\n                    //pids = pids.concat(b.gpids);\\n                    //pids = pids.concat(b.hpids);\\n                    // Kill the hack scripts to try to salvage the situation\\n                    for (let pid of b.hpids) {\\n                        ns.kill(pid);\\n                        killCount++;\\n                    }\\n                }\\n                ns.print('WARN: Killed ' + killCount + ' hack jobs to help resync...');\\n                // Recalc metrics\\n                if (hackLevelChanged)\\n                    metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1);\\n                metrics.Report(ns);\\n                skipHack = 10;\\n            }\\n        }\\n        else {\\n            ns.print('WARN: Could not find a valid window to fit this batch.');\\n            await ns.sleep(BATCH_SPACER);\\n            if (hackLevelChanged)\\n                metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1);\\n        }\\n        for (let b = batches.length - 1; b >= 0; b--) {\\n            let batch = batches[b];\\n            let pids = new Array();\\n            pids = pids.concat(batch.w1pids);\\n            pids = pids.concat(batch.w2pids);\\n            pids = pids.concat(batch.gpids);\\n            pids = pids.concat(batch.hpids);\\n            if (!AnyPidStillRunning(ns, pids)) {\\n                batches.splice(b, 1);\\n            }\\n            //await ns.sleep(0);\\n        }\\n        let mem = new MemoryMap(ns);\\n        if (mem.available * 0.9 < metrics.batchRam) {\\n            ns.print('WARN: Not enough free memory to start batch #' + (totalBatches + 1) + ', lets take a break!');\\n            await ns.sleep(BATCH_SPACER);\\n            continue;\\n        }\\n        ns.print('INFO: Spawning batch #' + (totalBatches + 1) + ' (' + batches.length + ' are currently running)');\\n        if (!BatchFitsInMemoryBlocks(ns, metrics)) {\\n            ns.print('WARN: Not memory block configuration available to start batch #' + (totalBatches + 1) + ', lets take a break!');\\n            ServerReport(ns, server);\\n            metrics.Report(ns);\\n            await ns.sleep(BATCH_SPACER);\\n            if (hackLevelChanged)\\n                metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1);\\n            continue;\\n        }\\n        if (await WaitNextWindow(ns, metrics, batches)) {\\n            // Create batch and add it to batches\\n            const batch = await StartBatch(ns, server, metrics, ++totalBatches, skipHack);\\n            batches.push(batch);\\n            if (skipHack > 0) {\\n                ns.print('WARN: Skipped a hack job to resync!');\\n                skipHack--;\\n            }\\n        }\\n        else {\\n            ns.print('WARN: Could not find a valid window to fit this batch.');\\n            await ns.sleep(BATCH_SPACER);\\n        }\\n        ns.print('INFO: Started a total of ' + totalBatches + ' during this session.');\\n        await ns.sleep(BATCH_SPACER);\\n    }\\n}\\nfunction DumpBatches(ns, batches, newBatch) {\\n    return;\\n    let oldestBatchStart = 0;\\n    if (batches.length > 0)\\n        oldestBatchStart = batches[0].startTime;\\n    for (let batch of batches) {\\n        let offset = batch.startTime - oldestBatchStart;\\n        let sliceOffset = Math.ceil(offset / BATCH_SPACER);\\n        let prefix = '';\\n        for (let i = 0; i < sliceOffset; i++)\\n            prefix += ' ';\\n        //ns.print('oldestBatchStart: ' + oldestBatchStart + ' batch.startTime: ' + batch.startTime);\\n        ns.print(prefix + batch.metrics.Visualize());\\n    }\\n    let offset = Math.ceil((performance.now - oldestBatchStart) / BATCH_SPACER);\\n    let prefix = '';\\n    for (let i = 0; i < offset; i++)\\n        prefix += ' ';\\n    ns.print('vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv');\\n    ns.print(prefix + newBatch.Visualize());\\n    ns.print('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');\\n}\\nasync function WaitNextWindow(ns, metrics, batches, maxWait = 5000) {\\n    const start = performance.now();\\n    ns.print('batches: ' + batches.length);\\n    if (batches.length == 0)\\n        return true;\\n    let iterations = 0;\\n    for (;;) {\\n        let isValid = true;\\n        let startTime = performance.now();\\n        iterations++;\\n        for (const batch of batches) {\\n            const securityWindows = [];\\n            securityWindows.push({\\n                start: batch.startTime + batch.metrics.ends[H],\\n                end: batch.startTime + batch.metrics.ends[W1]\\n            });\\n            securityWindows.push({\\n                start: batch.startTime + batch.metrics.ends[G],\\n                end: batch.startTime + batch.metrics.ends[W2]\\n            });\\n            for (let windw of securityWindows) {\\n                for (let i = 0; i < 4; i++) {\\n                    if (IsBetween(ns, windw.start, windw.end, startTime + metrics.delays[i])) {\\n                        isValid = false;\\n                        break;\\n                    }\\n                    if (i % 2 == 0 && IsBetween(ns, windw.start, windw.end, startTime + metrics.ends[i])) {\\n                        isValid = false;\\n                        break;\\n                    }\\n                }\\n            }\\n            //await ns.sleep(0);\\n        }\\n        if (isValid) {\\n            const elapsed = Math.round(performance.now() - start);\\n            ns.print('WaitNextWindow took ' + elapsed + ' millisecond(s) in ' + iterations + ' iterations');\\n            return true;\\n        }\\n        // Could not find a window in the allocated time\\n        //if (performance.now() - start > maxWait) {\\n        //\\tns.print('FAIL: Could not start batch in the allowed time (' + maxWait + ' milliseconds) ' + batches.length);\\n        //\\treturn false;\\n        //}\\n        await ns.sleep(0);\\n    }\\n}\\nfunction IsBetween(ns, min, max, value) {\\n    let ret = true;\\n    if (value < min)\\n        ret = false;\\n    if (value > max)\\n        ret = false;\\n    // if (ret)\\n    // \\tns.tprint('min: ' + min.toFixed(0).padEnd(10) + '  max: ' + max.toFixed(0).padEnd(10) + '  value: ' + value.toFixed(0).padEnd(10) + ' isBetween: ' + ret);\\n    return ret;\\n}\\nexport function BatchFitsInMemoryBlocks(ns, metrics) {\\n    const mem = new MemoryMap(ns);\\n    const HACK_RAM = ns.getScriptRam('hack-once.js');\\n    const GROW_RAM = ns.getScriptRam('grow-once.js');\\n    const WEAKEN_RAM = ns.getScriptRam('weaken-once.js');\\n    // Failsafe, on veut pas trop taxer\\n    if (metrics.batchRam > mem.available * 0.5) {\\n        ns.print('FAIL: metrics.batchRam = ' + metrics.batchRam + ' mem.available = ' + mem.available);\\n        return false;\\n    }\\n    if (mem.ReserveBlock(metrics.threads[H] * HACK_RAM) == undefined) {\\n        ns.print('FAIL: Could not fit HACK ' + metrics.threads[H] * HACK_RAM);\\n        return false;\\n    }\\n    if (mem.ReserveBlock(metrics.threads[G] * GROW_RAM) == undefined) {\\n        ns.print('FAIL: Could not fit GROW ' + metrics.threads[G] * GROW_RAM);\\n        return false;\\n    }\\n    for (let i = 0; i < (metrics.threads[W1] + metrics.threads[W2]) * WEAKEN_RAM; i++) {\\n        if (mem.ReserveBlock(WEAKEN_RAM) == undefined) {\\n            ns.print('FAIL: Could not fit WEAKEN ' + (metrics.threads[W1] + metrics.threads[W2] * WEAKEN_RAM));\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nasync function StartBatch(ns, server, metrics, batchNumber, skipHack) {\\n    const colors = [\\n        '#9226e0', '#6b1a93', '#6754f7', '#e81284', '#dd9713', '#338fc4', '#6be84c', '#ea784b',\\n        '#1dd62a', '#ba02ed', '#4139dd', '#120087', '#4dcc53', '#8c2700', '#7f1ee8', '#2cb2ab',\\n        '#e84351', '#390b72', '#38c974', '#368293', '#e5a12b', '#4fe274', '#1230b7', '#21d392',\\n        '#9dd356', '#8c30e8', '#ed2fd3', '#d3303b', '#0dbf6f', '#e8009e', '#3799fc', '#bc3260'\\n    ];\\n    const logColor = 0; // colors[batchNumber % colors.length];\\n    const ret = new Object();\\n    ret.server = server;\\n    ret.metrics = metrics;\\n    ret.startTime = performance.now();\\n    ret.w1pids = await RunScript(ns, 'weaken-once.js', server, metrics.threads[W1], 0, metrics.times[W1], batchNumber, logColor, true, false);\\n    await ns.sleep(0);\\n    ret.w2pids = await RunScript(ns, 'weaken-once.js', server, metrics.threads[W2], metrics.delays[W2], metrics.times[W2], batchNumber, logColor, true, false);\\n    await ns.sleep(0);\\n    ret.gpids = await RunScript(ns, 'grow-once.js', server, metrics.threads[G], metrics.delays[G], metrics.times[G], batchNumber, logColor, false, false);\\n    await ns.sleep(0);\\n    if (!skipHack) {\\n        ret.hpids = await RunScript(ns, 'hack-once.js', server, metrics.threads[H], metrics.delays[H], metrics.times[H], batchNumber, logColor, false, false);\\n        await ns.sleep(0);\\n    }\\n    else\\n        ret.hpids = [];\\n    return ret;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSklUYmF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9KSVRiYXRjaGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFeEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1osTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1osTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRWIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQ25DLEVBQUUsQ0FBQyxNQUFNLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUMvRCxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDVjtJQUVELE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtRQUN2QixFQUFFLENBQUMsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ1Y7SUFFRCw2Q0FBNkM7SUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDM0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QixFQUFFLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7S0FDckM7SUFFRCxxQkFBcUI7SUFDckIsTUFBTSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxLQUFLLFVBQVUsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNO0lBQ3JDLEVBQUUsQ0FBQyxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUUxQyxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQywrQ0FBK0M7SUFDckUsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUUsaUNBQWlDO0lBRXBELDJFQUEyRTtJQUMzRSwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNyQyxJQUFJLEdBQUcsR0FBRyxNQUFNLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDN0MsSUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVELElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztJQUVqQixPQUFPLElBQUksRUFBRTtRQUNaLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxJQUFJLFNBQVMsQ0FBQztRQUMzRCxNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQztRQUNuQyxTQUFTLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRWpDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRTtZQUMxQyxFQUFFLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7WUFDN0MsR0FBRyxHQUFHLE1BQU0sbUJBQW1CLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUUsRUFBRSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN4RCxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxnQkFBZ0I7WUFDbkIsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5CLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekIsMkdBQTJHO1FBQzNHLElBQUksTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRTtZQUMvQyxxSkFBcUo7WUFDckosZ0RBQWdEO1lBQ2hELElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUMzQix3REFBd0Q7Z0JBQ3hELGdNQUFnTTtnQkFDaE0saUJBQWlCO2dCQUNqQixnQkFBZ0I7Z0JBRWhCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFFbEIseUJBQXlCO2dCQUN6QixLQUFLLE1BQU0sQ0FBQyxJQUFJLE9BQU8sRUFBRTtvQkFDeEIsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUU7d0JBQUUsU0FBUztvQkFFckUsZ0NBQWdDO29CQUNoQyxnQ0FBZ0M7b0JBQ2hDLDhCQUE4QjtvQkFDOUIsOEJBQThCO29CQUM5Qix3REFBd0Q7b0JBQ3hELEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTt3QkFDeEIsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDYixTQUFTLEVBQUUsQ0FBQztxQkFDWjtpQkFDRDtnQkFFRCxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxTQUFTLEdBQUcsOEJBQThCLENBQUMsQ0FBQztnQkFFdkUsaUJBQWlCO2dCQUNqQixJQUFJLGdCQUFnQjtvQkFDbkIsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDekQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFbkIsUUFBUSxHQUFHLEVBQUUsQ0FBQzthQUNkO1NBQ0Q7YUFDSTtZQUNKLEVBQUUsQ0FBQyxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztZQUNuRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDN0IsSUFBSSxnQkFBZ0I7Z0JBQ25CLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekQ7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXZCLElBQUksSUFBSSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7WUFDdkIsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWhDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3JCO1lBRUQsb0JBQW9CO1NBQ3BCO1FBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUIsSUFBSSxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsK0NBQStDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsc0JBQXNCLENBQUMsQ0FBQztZQUN4RyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDN0IsU0FBUztTQUNUO1FBRUQsRUFBRSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzVHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDMUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxpRUFBaUUsR0FBRyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxDQUFDO1lBRTFILFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVuQixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDN0IsSUFBSSxnQkFBZ0I7Z0JBQ25CLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekQsU0FBUztTQUNUO1FBRUQsSUFBSSxNQUFNLGNBQWMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFO1lBQy9DLHFDQUFxQztZQUNyQyxNQUFNLEtBQUssR0FBRyxNQUFNLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM5RSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtnQkFDakIsRUFBRSxDQUFDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFBO2dCQUMvQyxRQUFRLEVBQUUsQ0FBQzthQUNYO1NBQ0Q7YUFDSTtZQUNKLEVBQUUsQ0FBQyxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztZQUNuRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDN0I7UUFFRCxFQUFFLENBQUMsS0FBSyxDQUFDLDJCQUEyQixHQUFHLFlBQVksR0FBRyx1QkFBdUIsQ0FBQyxDQUFDO1FBRS9FLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUM3QjtBQUNGLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVE7SUFDekMsT0FBTztJQUNQLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQ3JCLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFekMsS0FBSyxJQUFJLEtBQUssSUFBSSxPQUFPLEVBQUU7UUFDMUIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztRQUNoRCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsQ0FBQztRQUNuRCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEdBQUcsQ0FBQztRQUVmLDZGQUE2RjtRQUU3RixFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7S0FDN0M7SUFFRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDO0lBQzVFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRTtRQUM5QixNQUFNLElBQUksR0FBRyxDQUFDO0lBRWYsRUFBRSxDQUFDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0lBQ2hFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLEVBQUUsQ0FBQyxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRUQsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEdBQUcsSUFBSTtJQUNqRSxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFaEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFckMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLFNBQVU7UUFDVCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxTQUFTLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xDLFVBQVUsRUFBRSxDQUFDO1FBRWIsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPLEVBQUU7WUFDNUIsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDO1lBQzNCLGVBQWUsQ0FBQyxJQUFJLENBQ25CO2dCQUNDLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDOUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQzdDLENBQ0QsQ0FBQztZQUNGLGVBQWUsQ0FBQyxJQUFJLENBQ25CO2dCQUNDLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDOUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQzdDLENBQ0QsQ0FBQztZQUVGLEtBQUssSUFBSSxLQUFLLElBQUksZUFBZSxFQUFFO2dCQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMzQixJQUFJLFNBQVMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ3pFLE9BQU8sR0FBRyxLQUFLLENBQUM7d0JBQ2hCLE1BQU07cUJBQ047b0JBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNyRixPQUFPLEdBQUcsS0FBSyxDQUFDO3dCQUNoQixNQUFNO3FCQUNOO2lCQUNEO2FBQ0Q7WUFFRCxvQkFBb0I7U0FDcEI7UUFFRCxJQUFJLE9BQU8sRUFBRTtZQUNaLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQ3RELEVBQUUsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEdBQUcsT0FBTyxHQUFHLHFCQUFxQixHQUFHLFVBQVUsR0FBRyxhQUFhLENBQUMsQ0FBQztZQUNoRyxPQUFPLElBQUksQ0FBQztTQUNaO1FBRUQsZ0RBQWdEO1FBQ2hELDRDQUE0QztRQUM1QyxnSEFBZ0g7UUFDaEgsZ0JBQWdCO1FBQ2hCLEdBQUc7UUFFSCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7QUFDRixDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSztJQUNyQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDZixJQUFJLEtBQUssR0FBRyxHQUFHO1FBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQztJQUM3QixJQUFJLEtBQUssR0FBRyxHQUFHO1FBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQztJQUM3QixXQUFXO0lBQ1gsOEpBQThKO0lBQzlKLE9BQU8sR0FBRyxDQUFDO0FBQ1osQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxFQUFFLEVBQUUsT0FBTztJQUNsRCxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5QixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakQsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRXJELG1DQUFtQztJQUNuQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDM0MsRUFBRSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsR0FBRyxPQUFPLENBQUMsUUFBUSxHQUFHLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMvRixPQUFPLEtBQUssQ0FBQztLQUNiO0lBRUQsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQ2pFLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUN0RSxPQUFPLEtBQUssQ0FBQztLQUNiO0lBQ0QsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQ2pFLEVBQUUsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUN0RSxPQUFPLEtBQUssQ0FBQztLQUNiO0lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xGLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxTQUFTLEVBQUU7WUFDOUMsRUFBRSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ25HLE9BQU8sS0FBSyxDQUFDO1NBQ2I7S0FDRDtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQUVELEtBQUssVUFBVSxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVE7SUFDbkUsTUFBTSxNQUFNLEdBQUc7UUFDZCxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUztRQUN0RixTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUztRQUN0RixTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUztRQUN0RixTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUztLQUN0RixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUEsdUNBQXVDO0lBRTFELE1BQU0sR0FBRyxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFDekIsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDcEIsR0FBRyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDdEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbEMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUksTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsRUFBRSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzSixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsR0FBRyxDQUFDLEtBQUssR0FBRyxNQUFNLFNBQVMsQ0FBQyxFQUFFLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0SixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNkLEdBQUcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxTQUFTLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEosTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2xCOztRQUVBLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLE9BQU8sR0FBRyxDQUFDO0FBQ1osQ0FBQyJ9\",\"filename\":\"/xsink/JITbatcher.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":602}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WaitPids } from \\\"utils.js\\\";\\n/*\\nBrainstorm of what's needed for a \\\"main brain\\\" script\\n\\n- Get all the cracker programs ASAP and nuke everything we can as they become available\\n- Increase hacking level ASAP (using personal and sleeve study free or paid, xp script and/or batching)\\n- Increase home ram to a minimal level (for faster install recovery)\\n- Buy a few personal servers\\n- Run the casino script if we aren't banned\\n- Decide what's the best use for sleeves at any given time\\n    - Focus gang acquisition if gang isn't created yet\\n    - Reduce shock if shock > 95\\n    - Trail stats? Not sure? If money allows it might increase gang speed with easier homicides?\\n    - In some cases setting them on money making tasks might be best?\\n- Factions\\n    - Chose what factions to try getting into\\n    - Chose which one to focus (personal vs sleeves if they are free/makes sense)\\n    - Mesh with augs script to see what's best\\n    - Decide if/when we need to install/reset for favor depending on current faction focus\\n- Decide when to install/soft reset and do it\\n- Decide when to close the node and do it\\n- Check for coding contracts + solve\\n- Decide what servers to hack (using starter or manager as needed/allowed)\\n- Hacknet servers\\n    - Decide if/how much we want to invest (if at all)\\n    - Spend hashes on whatever makes the most sense given current situation\\n    - Install related augs if we are going to focus/invest in hacknet as a significant node strategy\\n- Stocks\\n    - Start stock market script if/when it makes sense\\n    - Stop it or ask it to release shares if we need the money it's holding (some priorities might call for that)\\n- Install backdoors when applicable/necessary\\n- Save money for corporation\\n    - We don't have a corp script yet so for now we're just focusing on amassing the 150b investment (if node strategy calls for it)\\n- Go to Chongqing and receive the gift ASAP if it makes sense (based on node multipliers)\\n*/\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // Initial breach\\n    ns.print('INFO: Breaching servers.');\\n    await WaitPids(ns, ns.exec('breach.js', 'home'));\\n    // Set sleeves to do something other than nothing\\n    // const karma= ns.heart.break();\\n    // let job= 'homicide';\\n    // let shock= ns.sleeve.getSleeveStats(0).shock;\\n    // if (shock > 95) {\\n    // \\tjob= 'shock';\\n    // }\\n    // else if (karam > -54000) {\\n    // \\tjob= 'homicide';\\n    // }\\n    let pid = ns.exec('sleeves.js', 'home', 1, 'shock');\\n    // Get gangs going\\n    pid = ns.exec('gangman.js', 'home');\\n    // Manage personal servers if cash allows\\n    // Delete smaller servers and replace with bigger ones\\n    // TODO: ??? Upgrade home ram ???\\n    //pid = ns.exec('buyserver.js', 'home', 1, 'loop');\\n    //ns.tail(pid);\\n    // TODO: Use starter instead if we're really low on ram?\\n    //pid = ns.exec('controller.js', 'home', 1);\\n    //ns.tail(pid);\\n    while (true) {\\n        // Look for contracts and solve them\\n        //ns.print('INFO: Solving contracts');\\n        let pid = ns.exec('cct.js', 'home');\\n        if (pid != undefined) {\\n            let pids = new Array();\\n            pids.push(pid);\\n            await WaitPids(ns, pids);\\n        }\\n        ApplyRep(ns);\\n        // Buy TOR\\n        if (!ns.getPlayer().tor) {\\n            ns.print('WARN: TOR router not found.');\\n            if (ns.getPlayer().money < 200000) {\\n                ns.print('WARN: Not enough money to purchase TOR router, postponing purchase.');\\n            }\\n            else {\\n                if (ns.singularity.purchaseTor()) {\\n                    ns.print('INFO: Succesfully bought TOR router.');\\n                }\\n                else {\\n                    ns.print('ERROR: Something went wrong buying the TOR router.');\\n                }\\n            }\\n        }\\n        // Buy BruteSSH.exe\\n        if (!ns.fileExists('BruteSSH.exe')) {\\n            ns.print('INFO: Checking if we can buy BruteSSH.exe.');\\n            ns.singularity.purchaseProgram(\\\"BruteSSH.exe\\\");\\n        }\\n        // Buy FTPCrack.exe\\n        if (!ns.fileExists('FTPCrack.exe')) {\\n            ns.print('INFO: Checking if we can buy FTPCrack.exe.');\\n            ns.singularity.purchaseProgram(\\\"FTPCrack.exe\\\");\\n        }\\n        // Buy relaySMTP.exe\\n        if (!ns.fileExists('relaySMTP.exe')) {\\n            ns.print('INFO: Checking if we can buy relaySMTP.exe.');\\n            ns.singularity.purchaseProgram(\\\"relaySMTP.exe\\\");\\n        }\\n        // Buy SQLInject.exe\\n        if (!ns.fileExists('SQLInject.exe')) {\\n            ns.print('INFO: Checking if we can buy SQLInject.exe.');\\n            ns.singularity.purchaseProgram(\\\"SQLInject.exe\\\");\\n        }\\n        // Buy HTTPWorm.exe \\n        if (!ns.fileExists('HTTPWorm.exe')) {\\n            ns.print('INFO: Checking if we can buy HTTPWorm.exe.');\\n            ns.singularity.purchaseProgram(\\\"HTTPWorm.exe\\\");\\n        }\\n        // Leave 1m for travels\\n        // Auto join Tian\\n        // Auto join CSEC\\n        // Auto join NiteRunners\\n        // Auto join The Black Hand\\n        // Auto join BitRunners\\n        // Auto join Daedelus\\n        // Farm rep\\n        // if required > 300k\\n        // Reset at 100k for favor\\n        // If required > 750k\\n        // Reset at 365k for favor\\n        // Farm the rest by donations\\n        // Run share when ram allows\\n        // Breach again\\n        await WaitPids(ns, ns.exec('breach.js', 'home'));\\n        ns.print('');\\n        await ns.sleep(10000);\\n    }\\n}\\nfunction ApplyRep(ns) {\\n    let player = ns.getPlayer();\\n    if (player.workType != 'Working for Faction')\\n        return;\\n    if (player.currentWorkFactionDescription != 'carrying out hacking contracts')\\n        return;\\n    ns.singularity.workForFaction(player.currentWorkFactionName, 'Hacking Contracts', false);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3N0YXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2F1dG9zdGFydC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFpQ0U7QUFHRixzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLGlCQUFpQjtJQUNqQixFQUFFLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDckMsTUFBTSxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFakQsaURBQWlEO0lBQ2pELGlDQUFpQztJQUNqQyx1QkFBdUI7SUFDdkIsZ0RBQWdEO0lBRWhELG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsSUFBSTtJQUNKLDZCQUE2QjtJQUM3QixvQkFBb0I7SUFDcEIsSUFBSTtJQUNKLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEQsa0JBQWtCO0lBQ2xCLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVwQyx5Q0FBeUM7SUFDekMsc0RBQXNEO0lBQ3RELGlDQUFpQztJQUNqQyxtREFBbUQ7SUFDbkQsZUFBZTtJQUVmLHdEQUF3RDtJQUN4RCw0Q0FBNEM7SUFDNUMsZUFBZTtJQUVmLE9BQU8sSUFBSSxFQUFFO1FBQ1osb0NBQW9DO1FBQ3BDLHNDQUFzQztRQUN0QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFD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\",\"filename\":\"/xsink/autostart.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":603}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    GetTotalWorth(ns);\\n}\\nexport function GetTotalWorth(ns) {\\n    let money = ns.getServerMoneyAvailable('home');\\n    let stocks = GetStocksValue(ns);\\n    let total = money + stocks.total;\\n    ns.tprint('Player money  : ' + ns.nFormat(money, '0.000a').padStart(9));\\n    ns.tprint('Stocks paid   : ' + ns.nFormat(stocks.paid, '0.000a').padStart(9));\\n    ns.tprint('Stocks profit : ' + ns.nFormat(stocks.profit, '0.000a').padStart(9));\\n    ns.tprint('Stocks total  : ' + ns.nFormat(stocks.total, '0.000a').padStart(9));\\n    ns.tprint('Total money   : ' + ns.nFormat(total, '0.000a').padStart(9));\\n    return total;\\n}\\nexport function GetStocksValue(ns) {\\n    let total = 0;\\n    let paid = 0;\\n    let profit = 0;\\n    for (const sym of ns.stock.getSymbols()) {\\n        // Obtain prices and other stock metrics\\n        let askPrice = ns.stock.getAskPrice(sym);\\n        let bidPrice = ns.stock.getBidPrice(sym);\\n        // Get current position on longs and shorts\\n        const [shares, avgPx, sharesShort, avgPxShort] = ns.stock.getPosition(sym);\\n        // Short stocks sell for Ask price.\\n        // Long stocks sell for Bid price.\\n        let longValue = shares * bidPrice;\\n        let shortValue = sharesShort * askPrice;\\n        let longPaid = shares * avgPx;\\n        let shortPaid = sharesShort * avgPxShort;\\n        let longProfit = longValue - longPaid;\\n        let shortProfit = shortPaid - shortValue;\\n        total += longValue + shortValue;\\n        paid += longPaid + shortPaid;\\n        profit += longProfit + shortProfit;\\n    }\\n    return { total: total, paid: paid, profit: profit };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFuay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9iYW5rLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQUU7SUFDL0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLElBQUksTUFBTSxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUVqQyxFQUFFLENBQUMsTUFBTSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlFLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9FLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEUsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxFQUFFO0lBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVmLEtBQUssTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUN4Qyx3Q0FBd0M7UUFDeEMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFekMsMkNBQTJDO1FBQzNDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUzRSxtQ0FBbUM7UUFDbkMsa0NBQWtDO1FBQ2xDLElBQUksU0FBUyxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUM7UUFDbEMsSUFBSSxVQUFVLEdBQUcsV0FBVyxHQUFHLFFBQVEsQ0FBQztRQUV4QyxJQUFJLFFBQVEsR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksU0FBUyxHQUFHLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFFekMsSUFBSSxVQUFVLEdBQUcsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUN0QyxJQUFJLFdBQVcsR0FBRyxTQUFTLEdBQUcsVUFBVSxDQUFDO1FBRXpDLEtBQUssSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO1FBQ2hDLElBQUksSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzdCLE1BQU0sSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDO0tBQ25DO0lBRUQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDckQsQ0FBQyJ9\",\"filename\":\"/xsink/bank.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const [runCount = 0, scriptName = 'v1.js', pct = 0.25] = ns.args;\\n    let servers = GetAllServers(ns).filter(s => Weight(ns, s) > 0);\\n    servers.sort((a, b) => Weight(ns, b) - Weight(ns, a));\\n    let ran = 0;\\n    ns.tprint('Best servers: ');\\n    for (let server of servers) {\\n        ns.tprint(server.padEnd(20) + ': ' + Weight(ns, server));\\n        if (ran < runCount) {\\n            let pid = ns.run(scriptName, 1, server, pct);\\n            if (pid != 0) {\\n                ns.tprint('INFO: Started ' + scriptName + ' on ' + server);\\n                ran++;\\n            }\\n        }\\n    }\\n}\\n// Returns a weight that can be used to sort servers by hack desirability\\nfunction Weight(ns, server) {\\n    if (!server)\\n        return 0;\\n    // Don't ask, endgame stuff\\n    if (server.startsWith('hacknet-node'))\\n        return 0;\\n    // Get the player information\\n    let player = ns.getPlayer();\\n    // Get the server information\\n    let so = ns.getServer(server);\\n    // Set security to minimum on the server object (for Formula.exe functions)\\n    so.hackDifficulty = so.minDifficulty;\\n    // We cannot hack a server that has more than our hacking skill so these have no value\\n    if (so.requiredHackingSkill > player.skills.hacking)\\n        return 0;\\n    // Default pre-Formulas.exe weight. minDifficulty directly affects times, so it substitutes for min security times\\n    let weight = so.moneyMax / so.minDifficulty;\\n    // If we have formulas, we can refine the weight calculation\\n    if (ns.fileExists('Formulas.exe')) {\\n        // We use weakenTime instead of minDifficulty since we got access to it, \\n        // and we add hackChance to the mix (pre-formulas.exe hack chance formula is based on current security, which is useless)\\n        weight = so.moneyMax / ns.formulas.hacking.weakenTime(so, player) * ns.formulas.hacking.hackChance(so, player);\\n    }\\n    else \\n    // If we do not have formulas, we can't properly factor in hackchance, so we lower the hacking level tolerance by half\\n    if (so.requiredHackingSkill > player.skills.hacking / 2)\\n        return 0;\\n    return weight;\\n}\\n// Recursive network scan, compressed\\nexport function GetAllServers(ns, root = 'home', found = []) {\\n    found.push(root);\\n    for (const server of root == 'home' ? ns.scan(root) : ns.scan(root).slice(1))\\n        GetAllServers(ns, server, found);\\n    return found;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9iZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLFVBQVUsR0FBRyxPQUFPLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFFakUsSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUVaLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM1QixLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUMzQixFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLEdBQUcsR0FBRyxRQUFRLEVBQUU7WUFDbkIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM3QyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUU7Z0JBQ2IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUMzRCxHQUFHLEVBQUUsQ0FBQzthQUNOO1NBQ0Q7S0FDRDtBQUNGLENBQUM7QUFFRCx5RUFBeUU7QUFDekUsU0FBUyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU07SUFDekIsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLENBQUMsQ0FBQztJQUV0QiwyQkFBMkI7SUFDM0IsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRWhELDZCQUE2QjtJQUM3QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFNUIsNkJBQTZCO0lBQzdCLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFOUIsMkVBQTJFO0lBQzNFLEVBQUUsQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUVyQyxzRkFBc0Y7SUFDdEYsSUFBSSxFQUFFLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFFOUQsa0hBQWtIO0lBQ2xILElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUU1Qyw0REFBNEQ7SUFDNUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQ2xDLHlFQUF5RTtRQUN6RSx5SEFBeUg7UUFDekgsTUFBTSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQy9HOztJQUVBLHNIQUFzSDtJQUN0SCxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDO1FBQ3RELE9BQU8sQ0FBQyxDQUFDO0lBRVgsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBRUQscUNBQXFDO0FBQ3JDLE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxNQUFNLEVBQUUsS0FBSyxHQUFHLEVBQUU7SUFDMUQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUFFLGFBQWEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9HLE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQyJ9\",\"filename\":\"/xsink/best.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/best.js\",\"url\":\"blob:file:///43d798f4-bf08-451c-b1cf-92c11a5db26e\",\"moduleSequenceNumber\":10783}],\"dependents\":[],\"ramUsage\":5.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    if (false)\\n        ns.grow(); // bogus call to tell the static ram checker to allocate 150MB\\n    let [operation, target] = ns.args[0];\\n    switch (operation) {\\n        case \\\"H\\\":\\n            eval('await ns.hack(' + target + ')');\\n            break;\\n        case \\\"G\\\":\\n            eval('await ns.grow(' + target + ')');\\n            break;\\n        case \\\"W\\\":\\n            eval('await ns.weaken(' + target + ')');\\n            break;\\n        default:\\n            ns.tprint('You fucked up and provided an invalid operation type');\\n            break;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLWluLW9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9hbGwtaW4tb25lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLElBQUksS0FBSztRQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLDhEQUE4RDtJQUVwRixJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxHQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsUUFBUSxTQUFTLEVBQUU7UUFDbEIsS0FBSyxHQUFHO1lBQ1AsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN0QyxNQUFNO1FBQ1AsS0FBSyxHQUFHO1lBQ1AsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN0QyxNQUFNO1FBQ1AsS0FBSyxHQUFHO1lBQ1AsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN4QyxNQUFNO1FBQ1A7WUFDQyxFQUFFLENBQUMsTUFBTSxDQUFDLHNEQUFzRCxDQUFDLENBQUM7WUFDbEUsTUFBTTtLQUNQO0FBQ0YsQ0FBQyJ9\",\"filename\":\"/xsink/all-in-one.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog('ALL');\\n    const servers = GetAllServers(ns);\\n    let rooted = 0;\\n    let newlyRooted = 0;\\n    for (const server of servers) {\\n        if (ns.hasRootAccess(server)) {\\n            rooted++;\\n        }\\n        else if (await Breach(ns, server) == true) {\\n            ns.tprint('WARN: Rooted new server: ' + server);\\n            newlyRooted++;\\n        }\\n    }\\n    if (newlyRooted > 0)\\n        ns.tprint('SUCCESS: Successfully breached ' + newlyRooted + ' new servers (before: ' + rooted + ' after: ' + (rooted + newlyRooted) + ')');\\n    else\\n        ns.tprint('FAIL: No new servers rooted.');\\n}\\nasync function Breach(ns, server) {\\n    try {\\n        ns.brutessh(server);\\n    }\\n    catch { }\\n    try {\\n        ns.ftpcrack(server);\\n    }\\n    catch { }\\n    try {\\n        ns.relaysmtp(server);\\n    }\\n    catch { }\\n    try {\\n        ns.httpworm(server);\\n    }\\n    catch { }\\n    try {\\n        ns.sqlinject(server);\\n    }\\n    catch { }\\n    try {\\n        ns.nuke(server);\\n    }\\n    catch { }\\n    return ns.hasRootAccess(server);\\n}\\nexport function GetAllServers(ns, root = 'home', found = []) {\\n    found.push(root);\\n    for (const server of ns.scan(root))\\n        if (!found.includes(server))\\n            GetAllServers(ns, server, found);\\n    return found;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2JyZWFjaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxDLElBQUksTUFBTSxHQUFFLENBQUMsQ0FBQztJQUNkLElBQUksV0FBVyxHQUFFLENBQUMsQ0FBQztJQUVuQixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUM3QixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxFQUFFLENBQUM7U0FDVDthQUNJLElBQUksTUFBTSxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRTtZQUMxQyxFQUFFLENBQUMsTUFBTSxDQUFDLDJCQUEyQixHQUFHLE1BQU0sQ0FBQyxDQUFDO1lBQ2hELFdBQVcsRUFBRSxDQUFDO1NBQ2Q7S0FFRDtJQUNELElBQUksV0FBVyxHQUFHLENBQUM7UUFDbEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQ0FBaUMsR0FBRyxXQUFXLEdBQUcsd0JBQXdCLEdBQUcsTUFBTSxHQUFHLFVBQVUsR0FBRyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQzs7UUFFM0ksRUFBRSxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxLQUFLLFVBQVUsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNO0lBQy9CLElBQUk7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQUU7SUFBQyxNQUFNLEdBQUc7SUFDdEMsSUFBSTtRQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7S0FBRTtJQUFDLE1BQU0sR0FBRztJQUN0QyxJQUFJO1FBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUFFO0lBQUMsTUFBTSxHQUFHO0lBQ3ZDLElBQUk7UUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQUU7SUFBQyxNQUFNLEdBQUc7SUFDdEMsSUFBSTtRQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FBRTtJQUFDLE1BQU0sR0FBRztJQUN2QyxJQUFJO1FBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUFFO0lBQUMsTUFBTSxHQUFFO0lBQ2pDLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxHQUFHLE1BQU0sRUFBRSxLQUFLLEdBQUcsRUFBRTtJQUMxRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLEtBQUssTUFBTSxNQUFNLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0QsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDIn0=\",\"filename\":\"/xsink/breach.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/xsink/breach.js\",\"url\":\"blob:file:///a2242ade-e9fe-42f5-94ea-285d89b88cfc\",\"moduleSequenceNumber\":740}],\"dependents\":[],\"ramUsage\":2.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetAllServers } from \\\"utils.js\\\";\\nlet MAX_SERVERS = 25;\\n/*\\nUSAGES:\\n\\nbuyserver (no paramters)\\t: Shows a price list and RAM amount, up to a power of 30 (everything past the dotted line is home upgrade sizes)\\nbuyserver list\\t\\t\\t\\t: Shows a list of all purchased servers\\nbuyserver <name> <power>\\t: Buys a server of the specified name and size (size here is a power of 2, from 1-20), a confirmation will be shown\\nbuyserver * <power>\\t\\t\\t: Buys servers of the specified size until we either hit the MAX_SERVERS limit, or run out of cash. NO CONFIRMATION.\\nbuyserver loop\\t\\t\\t\\t: Will buy servers in increasing sizes, only upgrading when said server will increase total network ram by 24% or more.\\n                              Once we hit the limit, it will replace smaller servers with maximum sized servers until all servers are maxed.\\nbuyserver delete <name>\\t\\t: Delete the specified server, a confirmation will be shown.\\n*/\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    //const mults = ns.getBitNodeMultipliers();\\n    MAX_SERVERS = ns.getPurchasedServerLimit();\\n    // No parameter, we list the menu\\n    if (ns.args[0] == null && ns.args[1] == null) {\\n        for (var i = 1; i <= 20; i++) {\\n            var ram = Math.pow(2, i);\\n            var cost = ns.getPurchasedServerCost(ram);\\n            ns.tprint(i + ': ' + ns.nFormat(ram * 1000000000, '0.00b') + (i <= 20 ? ' RAM = ' + ns.nFormat(cost, \\\"$0.0a\\\") : ''));\\n        }\\n        // for (var i = 1; i <= 30; i++) {\\n        // \\tvar ram = Math.pow(2, i);\\n        // \\tvar cost = ns.singularity.getUpgradeHomeRamCost(ram);\\n        // \\tns.tprint(i + ': ' + ns.nFormat(ram * 1000000000, '0.00b') + ' RAM = ' + ns.nFormat(cost, \\\"$0.0a\\\"));\\n        // }\\n        return;\\n    }\\n    // User wants to delete a server\\n    if (ns.args[0] == 'delete') {\\n        var resp = await ns.prompt('Confirm DELETE of server named ' + ns.args[1]);\\n        if (resp == false) {\\n            ns.tprint(\\\"Transaction aborted.\\\");\\n            ns.exit();\\n        }\\n        ns.killall(ns.args[1]);\\n        ns.deleteServer(ns.args[1]);\\n        ns.tprint(\\\"Server deleted.\\\");\\n        return;\\n    }\\n    // User wants the list of owned servers\\n    if (ns.args[0] == 'list') {\\n        var servers = ns.getPurchasedServers();\\n        for (var server of servers) {\\n            ns.tprint(server + ' ' + ns.nFormat(ns.getServerMaxRam(server) * 1000000000, '0.00b'));\\n        }\\n        return;\\n    }\\n    // Auto buy servers based on gain ratio\\n    if (ns.args[0] == 'loop') {\\n        await AutoBuyPersonalServers(ns);\\n        return;\\n    }\\n    // User wants to buy a server\\n    var pow = ns.args[1];\\n    var gb = Math.pow(2, pow);\\n    var existing = ns.scan().filter(s => s.startsWith('crusher'));\\n    if (ns.args[0] == '*') {\\n        while (true) {\\n            ns.tprint('Buying multiple servers (player money= ' + ns.nFormat(ns.getPlayer().money, '0.00a') + ' server cost= ' + ns.nFormat(ns.getPurchasedServerCost(gb), '0.00a') + ')');\\n            var nbServers = existing.length;\\n            while (ns.getPurchasedServerCost(gb) < ns.getPlayer().money && nbServers < 25) {\\n                var found = false;\\n                var serverName = undefined;\\n                for (var i = 1; i <= 25; i++) {\\n                    if (!existing.find(p => p == 'crusher-' + i)) {\\n                        serverName = 'crusher-' + i;\\n                        found = true;\\n                        break;\\n                    }\\n                }\\n                if (!found) {\\n                    ns.tprint('Could not find suitable name, aborting.');\\n                    ns.exit();\\n                }\\n                ns.tprint('Buying server ' + serverName);\\n                ns.purchaseServer(serverName, gb);\\n                nbServers++;\\n                existing.push(serverName);\\n            }\\n            if (ns.args[2] != 'loop')\\n                break;\\n            await ns.sleep(1000);\\n        }\\n    }\\n    else {\\n        var resp = await ns.prompt('Confirm purchase of server named ' + ns.args[0] + ' with ' + ns.nFormat(gb * 1000000000, '0.00b') + ' RAM for ' + ns.nFormat(ns.getPurchasedServerCost(2 ** pow), '0.00a'));\\n        if (resp == false) {\\n            ns.tprint(\\\"Transaction aborted.\\\");\\n            return;\\n        }\\n        ns.tprint('Confirming transaction');\\n        ns.purchaseServer(ns.args[0], gb);\\n    }\\n}\\nexport async function AutoBuyPersonalServers(ns) {\\n    let MAX_SERVER_POW = 20;\\n    const MIN_GAIN_PCT = 0.24;\\n    let mults;\\n    try {\\n        mults = ns.getBitNodeMultipliers();\\n    }\\n    catch {\\n        mults = { PurchasedServerMaxRam: 1 };\\n    }\\n    while (Math.pow(2, MAX_SERVER_POW) > Math.pow(2, 20) * mults.PurchasedServerMaxRam)\\n        MAX_SERVER_POW--;\\n    while (true) {\\n        let networkRam = GetAllServers(ns).filter(s => ns.hasRootAccess(s) && ns.getServerMaxRam(s) > 0).reduce((sum, s) => sum + ns.getServerMaxRam(s), 0);\\n        let money = ns.getServerMoneyAvailable('home');\\n        let existingServers = ns.getPurchasedServers();\\n        for (let pow = MAX_SERVER_POW; pow > 2; pow--) {\\n            const serverRam = Math.pow(2, pow);\\n            const serverCost = ns.getPurchasedServerCost(serverRam);\\n            if (serverCost > money) {\\n                ns.print('Can\\\\'t affort shit, holding...');\\n                continue;\\n            }\\n            const gainRatio = serverRam / networkRam;\\n            ns.print('INFO: Best personal server we can buy with our money right now is ' +\\n                ns.nFormat(serverRam * 1000000000, '0.00b') + ' for ' + ns.nFormat(serverCost, '0.00a') + ' at a gain ratio of ' + Math.round(gainRatio * 100) + '%');\\n            if (gainRatio >= MIN_GAIN_PCT || pow == MAX_SERVER_POW) {\\n                ns.tprint('Buying a new personal server...');\\n                ns.print('Buying a new personal server...');\\n                // Delete smallest server if we have cash for a bigger one\\n                if (existingServers.length >= MAX_SERVERS) {\\n                    existingServers = existingServers.sort((a, b) => ns.getServerMaxRam(b) - ns.getServerMaxRam(a));\\n                    let toDelete = existingServers.pop();\\n                    let smallestSize = ns.getServerMaxRam(toDelete);\\n                    if (smallestSize < serverRam) {\\n                        ns.tprint('INFO: Server limit of ' + MAX_SERVERS + ' has been reached');\\n                        ns.print('INFO: Server limit of ' + MAX_SERVERS + ' has been reached');\\n                        ns.tprint('WARN: Deleting ' + toDelete + ' (smallest server with ' + ns.nFormat(smallestSize * 1000000000, '0.00b') + ')');\\n                        ns.print('WARN: Deleting ' + toDelete + ' (smallest server with ' + ns.nFormat(smallestSize * 1000000000, '0.00b') + ')');\\n                        ns.killall(toDelete);\\n                        await ns.sleep(10);\\n                        ns.deleteServer(toDelete);\\n                        await ns.sleep(10);\\n                        existingServers = ns.getPurchasedServers();\\n                        await ns.sleep(10);\\n                    }\\n                    else {\\n                        ns.tprint('INFO: Server limit of ' + MAX_SERVERS + ' has been reached and all servers are maxed out! Job\\\\'s done!');\\n                        ns.print('INFO: Server limit of ' + MAX_SERVERS + ' has been reached and all servers are maxed out! Job\\\\'s done!');\\n                        return;\\n                    }\\n                }\\n                // Find a name\\t\\t\\t\\t\\n                var found = false;\\n                var serverName = undefined;\\n                for (var i = 1; i <= MAX_SERVERS; i++) {\\n                    if (!existingServers.find(p => p == 'crusher-' + i)) {\\n                        serverName = 'crusher-' + i;\\n                        found = true;\\n                        break;\\n                    }\\n                }\\n                if (!found) {\\n                    ns.tprint('Could not find suitable name, aborting.');\\n                    ns.print('Could not find suitable name, aborting.');\\n                    break;\\n                }\\n                ns.tprint('Buying server ' + serverName + ' (' + ns.nFormat(serverRam * 1000000000, '0.00b') + ' for ' + ns.nFormat(serverCost, '0.00a') + ')');\\n                ns.print('Buying server ' + serverName + ' (' + ns.nFormat(serverRam * 1000000000, '0.00b') + ' for ' + ns.nFormat(serverCost, '0.00a') + ')');\\n                ns.purchaseServer(serverName, serverRam);\\n                break;\\n            }\\n            break;\\n        }\\n        await ns.sleep(500);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV5c2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2J1eXNlcnZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXpDLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUVyQjs7Ozs7Ozs7OztFQVVFO0FBRUYsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQiwyQ0FBMkM7SUFDM0MsV0FBVyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBRTNDLGlDQUFpQztJQUNqQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO1FBQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDckg7UUFFRCxr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\",\"filename\":\"/xsink/buyserver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":608}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint } from 'hack-once.js';\\nconst ALLOWED_SKILL_UPGRATES = [\\n    \\\"Hyperdrive\\\",\\n    \\\"Short-Circuit\\\",\\n    \\\"Cloak\\\",\\n    \\\"Digital Observer\\\",\\n    \\\"Blade's Intuition\\\",\\n    \\\"Overclock\\\",\\n    //\\\"Tracer\\\", \\t\\t\\t\\t// Each level of this skill increases your success chance in all Contracts by 4%\\n    \\\"Reaper\\\",\\n    \\\"Evasive System\\\", // Each level of this skill increases your effective dexterity and agility for Bladeburner actions by 4%\\n    //\\\"Datamancer\\\", \\t\\t\\t// Each level of this skill increases your effectiveness in synthoid population analysis and investigation by 5%. This affects all actions that can potentially increase the accuracy of your synthoid population/community estimates.\\n    //\\\"Cyber's Edge\\\", \\t\\t\\t// Each level of this skill increases your max stamina by 2%\\n    //\\\"Hands of Midas\\\", \\t\\t// Each level of this skill increases the amount of money you receive from Contracts by 10%\\n];\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    if (ns.args[0] == 'debug') {\\n        let bo = ns.bladeburner.getBlackOpNames();\\n        ns.tprint(bo.length);\\n        return;\\n    }\\n    for (;;) {\\n        let player = ns.getPlayer();\\n        // Spend skill points\\n        for (const skill of ALLOWED_SKILL_UPGRATES) {\\n            const points = ns.bladeburner.getSkillPoints();\\n            const cost = ns.bladeburner.getSkillUpgradeCost(skill);\\n            if (cost > points)\\n                continue;\\n            if (skill == 'Overclock' && ns.bladeburner.getSkillLevel(skill) >= 90)\\n                continue;\\n            ns.tprint('INFO: Upgrading skill : ' + skill);\\n            ns.bladeburner.upgradeSkill(skill);\\n        }\\n        // // Check health\\n        // if (player.hp < player.max_hp * 0.3) {\\n        // \\tColorPrint('yellow', 'player', 'white', ' is at ', 'red', player.hp + ' / ' + player.max_hp, 'white', ' HP, going to', 'yellow', ' hospital');\\n        // \\tns.goToLocation('Hospital');\\n        // \\tns.hospitalize();\\n        // \\tcontinue;\\n        // }\\n        // Check stamina\\n        let [currentStam, maxStam] = ns.bladeburner.getStamina();\\n        if (currentStam < maxStam * 0.55) {\\n            ColorPrint('yellow', 'Training to restore stamina: ', 'red', currentStam.toFixed(0), 'white', '/', 'red', maxStam.toFixed(0));\\n            let target = maxStam;\\n            for (; currentStam < target; [currentStam, maxStam] = ns.bladeburner.getStamina()) {\\n                const cur = ns.bladeburner.getCurrentAction();\\n                if (cur.name != 'Training') {\\n                    //ColorPrint('Stamina is not maxed, Training');\\n                    ns.stopAction();\\n                    ns.bladeburner.startAction('General', 'Training');\\n                }\\n                await ns.sleep(31000);\\n            }\\n        }\\n        // Check Chaos\\n        let chaos = ns.bladeburner.getCityChaos(ns.bladeburner.getCity());\\n        if (chaos > 50) {\\n            while (chaos > 15) {\\n                const cur = ns.bladeburner.getCurrentAction();\\n                if (cur.name != 'Diplomacy') {\\n                    ColorPrint('white', 'Setting action to ', 'yellow', 'diplomacy', 'white', ' to lower chaos');\\n                    ns.bladeburner.startAction('General', 'Diplomacy');\\n                }\\n                await ns.sleep(1000);\\n                chaos = ns.bladeburner.getCityChaos(ns.bladeburner.getCity());\\n            }\\n            ColorPrint('white', 'Done lowering', 'white', 'chaos');\\n        }\\n        // Recruit team members?\\n        // Nope they suck, fuck it.\\n        let tasks = [];\\n        // const blackOps = GetPossibleTasks(ns, 'BlackOps', ns.bladeburner.getBlackOpNames);\\n        // if (blackOps.length > 0)\\n        // \\ttasks = tasks.concat(blackOps);\\n        const operations = GetPossibleTasks(ns, 'Operations', ns.bladeburner.getOperationNames);\\n        tasks = tasks.concat(operations.sort((a, b) => b.rpm - a.rpm));\\n        const contracts = GetPossibleTasks(ns, 'Contracts', ns.bladeburner.getContractNames);\\n        tasks = tasks.concat(contracts.sort((a, b) => b.rpm - a.rpm));\\n        tasks = tasks.sort((a, b) => b.rpm - a.rpm).filter(t => t.lowChance >= 0.4);\\n        // ns.tprint('INFO: Found BlackOps   = ' + blackOps.length + ' ' + blackOps.map(s => s.name));\\n        // ns.tprint('INFO: Found Operations = ' + operations.length + ' ' + operations.map(s => s.name));\\n        // ns.tprint('INFO: Found Contracts  = ' + contracts.length + ' ' + contracts.map(s => s.name));\\n        // ns.tprint('INFO: Found Tasks  = ' + tasks.length + ' ' + tasks.map(s => s.name));\\n        ns.clearLog();\\n        ns.print('Type'.padEnd(10) + ' ' +\\n            'Name'.padEnd(30) + ' ' +\\n            'Low'.padEnd(4) + ' ' +\\n            'High'.padEnd(4) + ' ' +\\n            'Rank'.padEnd(10) + ' ' +\\n            'Time'.padEnd(20) + ' ' +\\n            'Score'.padEnd(5));\\n        ns.print('----------------------------------------------------------------------------------------');\\n        for (let task of tasks) {\\n            let rps = (task.highChance + task.lowChance / 2) * task.repGain / (task.time / 1000 / 60);\\n            ns.print(task.type.padEnd(10) + ' ' +\\n                task.name.padEnd(30) + ' ' +\\n                ((task.lowChance * 100).toFixed(0) + '%').toString().padEnd(4) + ' ' +\\n                ((task.highChance * 100).toFixed(0) + '%').toString().padEnd(4) + ' ' +\\n                task.repGain.toFixed(2).toString().padEnd(10) + ' ' +\\n                ns.tFormat(task.time).padEnd(20) + ' ' +\\n                rps.toFixed(2).padEnd(10));\\n        }\\n        // Check if our field analysis quality is good enough or not\\n        let theChosenOne = undefined;\\n        const spreaded = tasks.filter(t => t.highChance - t.lowChance > 0.05);\\n        if (spreaded.length > 0) {\\n            //ns.tprint('FAIL: We need to do some field analysis');\\n            theChosenOne = {\\n                type: 'General',\\n                name: 'Field Analysis',\\n                lowChance: 1,\\n                highChance: 1\\n            };\\n        }\\n        else {\\n            theChosenOne = tasks[0];\\n            for (const task of tasks) {\\n                // If we have at least 25% chance on a BlackOps lets take it\\n                if (task.type == 'BlackOps' && task.lowChance > 0.5) {\\n                    theChosenOne = task;\\n                    break;\\n                }\\n                // Take the highest priority task for which we have at least 50% chance\\n                if (task.lowChance > 0.6) {\\n                    theChosenOne = task;\\n                    break;\\n                }\\n            }\\n        }\\n        if (theChosenOne != undefined) {\\n            const cur = ns.bladeburner.getCurrentAction();\\n            if (cur.name != theChosenOne.name) {\\n                ColorPrint('white', 'Setting action to ', 'yellow', theChosenOne.name);\\n                ns.bladeburner.startAction(theChosenOne.type, theChosenOne.name);\\n            }\\n        }\\n        //ColorPrint('orange', '*** LOOP END ***\\\\n');\\n        await ns.sleep(1000);\\n    }\\n}\\nfunction GetPossibleTasks(ns, type, getter) {\\n    let ret = [];\\n    // Get the tasks using the getter function\\n    let tasks = getter();\\n    //ColorPrint('white', 'Found ' + tasks.length + ' total ' + type);\\n    const allowed = ['Assassination', 'Undercover Operation'];\\n    for (const task of tasks) {\\n        const remaining = ns.bladeburner.getActionCountRemaining(type, task);\\n        if (remaining < 1) {\\n            //if (type == 'BlackOps')\\n            //ColorPrint('orange', 'Cannot perform ' + task + ' because it\\\\'s already been completed');\\n            //else\\n            //ColorPrint('orange', 'Cannot perform ' + task + ' because we are out of ' + type);\\n            continue;\\n        }\\n        if (!allowed.includes(task))\\n            continue;\\n        if (type == 'BlackOps') {\\n            if (ns.bladeburner.getRank() < ns.bladeburner.getBlackOpRank(task)) {\\n                //ColorPrint('orange', 'Cannot perform ' + op + ' because rank is too low ' + reqRank + ' / ' + rank);\\n                continue;\\n            }\\n        }\\n        let [chance1, chance2] = ns.bladeburner.getActionEstimatedSuccessChance(type, task);\\n        let repGain = ns.bladeburner.getActionRepGain(type, task, ns.bladeburner.getActionCurrentLevel(type, task));\\n        let time = ns.bladeburner.getActionTime(type, task);\\n        //let level= ns.bladeburner.getActionCurrentLevel(type, task);\\n        let rpm = (chance1 + chance2) / 2 * repGain / (time / 1000 / 60); // / level;\\n        // if (task == 'Assassination') \\n        // \\trpm = rpm * 3;\\n        ret.push({\\n            type: type,\\n            name: task,\\n            lowChance: chance1,\\n            highChance: chance2,\\n            repGain: repGain,\\n            time: time,\\n            rpm: rpm\\n        });\\n    }\\n    // We only want the easiest/first BlackOps we have access to, so slash the rest\\n    if (type == 'BlackOps')\\n        ret = ret.slice(0, 1);\\n    else\\n        // For operations/contracts we prioritize the harder/more rewarding operations\\n        ret.reverse();\\n    return ret;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvYmIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxNQUFNLHNCQUFzQixHQUFHO0lBQzlCLFlBQVk7SUFDWixlQUFlO0lBQ2YsT0FBTztJQUNQLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsV0FBVztJQUNYLGdHQUFnRztJQUNoRyxRQUFRO0lBQ1IsZ0JBQWdCLEVBQUksd0dBQXdHO0lBQzVILHlQQUF5UDtJQUN6UCxpRkFBaUY7SUFDakYsaUhBQWlIO0NBQ2pILENBQUM7QUFFRixzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLEVBQUU7UUFDMUIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMxQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixPQUFPO0tBQ1A7SUFFRCxTQUFVO1FBQ1QsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTVCLHFCQUFxQjtRQUNyQixLQUFLLE1BQU0sS0FBSyxJQUFJLHNCQUFzQixFQUFFO1lBQzNDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDL0MsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2RCxJQUFJLElBQUksR0FBRyxNQUFNO2dCQUFFLFNBQVM7WUFFNUIsSUFBSSxLQUFLLElBQUksV0FBVyxJQUFJ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\",\"filename\":\"/xsink/bb.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":609}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // Go to Aevum if we aren't already there\\n    if (ns.getPlayer().city != 'Aevum') {\\n        if (ns.getPlayer().money < 200_000) {\\n            ns.tprint('ERROR: Sorry, you need at least 200k to travel to Aevum.');\\n            return;\\n        }\\n        if (!ns.singularity.travelToCity('Aevum')) {\\n            ns.tprint('ERROR: Failed to travel to Aevum.');\\n            return;\\n        }\\n        ns.tprint('INFO: Traveled to Aevum.');\\n    }\\n    if (!ns.singularity.goToLocation('Iker Molina Casino')) {\\n        ns.tprint('ERROR: Failed to travel to the casino.');\\n    }\\n    let doc = eval(\\\"document\\\");\\n    // Step 2 Try to start the coin flip game\\n    const coinflip = find(doc, \\\"//button[contains(text(), 'coin flip')]\\\");\\n    if (!coinflip) {\\n        ns.tprint('Could not enter the coin flip game!');\\n        return;\\n    }\\n    await click(coinflip);\\n    // Step 3 Find the buttons\\n    const tails = find(doc, \\\"//button[contains(text(), 'Tail!')]\\\");\\n    const heads = find(doc, \\\"//button[contains(text(), 'Head!')]\\\");\\n    //await shash(ns)\\n    // Click just so we can get the result textbox\\n    const log = [];\\n    // Step 4: Click one of the buttons\\n    for (let i = 0; i < 1024; i++) {\\n        await click(tails);\\n        const isTails = find(doc, \\\"//p[text() = 'T']\\\");\\n        const isHeads = find(doc, \\\"//p[text() = 'H']\\\");\\n        if (isTails)\\n            log.push('T');\\n        else if (isHeads)\\n            log.push('H');\\n        else {\\n            ns.print('FAIL: Something went wrong, aborting sequence!');\\n            return;\\n        }\\n        await ns.sleep(0);\\n    }\\n    ns.print('Sequence: ' + log.join(''));\\n    // // Step 5: Validate sequence\\n    // for (let i = 0; i < 1024; i++) {\\n    // \\tif (log[i] == 'T') {\\n    // \\t\\tawait click(tails);\\n    // \\t\\tconst isTails = find(doc, \\\"//p[text() = 'T']\\\");\\n    // \\t\\tif (!isTails) {\\n    // \\t\\t\\tns.print('FAIL: Something went wrong, aborting sequence!');\\n    // \\t\\t\\treturn;\\n    // \\t\\t}\\n    // \\t}\\n    // \\telse if (log[i] == 'H') {\\n    // \\t\\tawait click(heads);\\n    // \\t\\tconst isHeads = find(doc, \\\"//p[text() = 'H']\\\");\\n    // \\t\\tif (!isHeads) {\\n    // \\t\\t\\tns.print('FAIL: Something went wrong, aborting sequence!');\\n    // \\t\\t\\treturn;\\n    // \\t\\t}\\n    // \\t}\\n    // \\telse {\\n    // \\t\\tns.print('FAIL: Something went wrong, aborting sequence!');\\n    // \\t\\treturn;\\n    // \\t}\\n    // \\tawait ns.sleep(0);\\n    // }\\n    const input = await find(doc, \\\"//input[@type='number']\\\");\\n    if (!input) {\\n        ns.print('FAIL: Could not get a hold of the bet amount input!');\\n        return;\\n    }\\n    input.value = 10000;\\n    const iterations = 10_000_000_000 / 10_000;\\n    let loops = 0;\\n    // Step 5: Execute sequence\\n    while (true) {\\n        try {\\n            if (log[loops % 1024] == 'T') {\\n                await click(tails);\\n                // const isTails = find(doc, \\\"//p[text() = 'T']\\\");\\n                // if (!isTails) {\\n                // \\tns.print('FAIL: Something went wrong, aborting sequence!');\\n                // \\treturn;\\n                // }\\n            }\\n            else if (log[loops % 1024] == 'H') {\\n                await click(heads);\\n                // const isHeads = find(doc, \\\"//p[text() = 'H']\\\");\\n                // if (!isHeads) {\\n                // \\tns.print('FAIL: Something went wrong, aborting sequence!');\\n                // \\treturn;\\n                // }\\n            }\\n            // else {\\n            // \\tns.print('FAIL: Something went wrong, aborting sequence!');\\n            // \\treturn;\\n            // }\\n            if (loops % 500 == 0)\\n                await ns.sleep(0);\\n            loops++;\\n        }\\n        catch (e) {\\n            ns.tprint('FAIL: ' + e);\\n            return;\\n        }\\n    }\\n    ns.tprint('INFO: Made it to the end with ' + loops + ' loops!');\\n}\\nfunction find(doc, xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\\nasync function click(elem) {\\n    await elem[Object.keys(elem)[1]].onClick({ isTrusted: true });\\n}\\nasync function setText(input, text) {\\n    //debugger;\\n    await input[Object.keys(input)[1]].onChange({ isTrusted: true, currentTarget: { value: text } });\\n}\\nasync function findRetry(ns, xpath, expectFailure = false, retries = null) {\\n    try {\\n        return await autoRetry(ns, () => find(xpath), e => e !== undefined, () => expectFailure ? `It's looking like the element with xpath: ${xpath} isn't present...` :\\n            `Could not find the element with xpath: ${xpath}\\\\nSomething may have re-routed the UI`, retries != null ? retries : expectFailure ? 3 : 10, 1, 2);\\n    }\\n    catch (e) {\\n        if (!expectFailure)\\n            throw e;\\n    }\\n}\\nasync function shash(ns) {\\n    var doc = eval('document');\\n    var input;\\n    do {\\n        input = doc.querySelector('input[type=\\\"number\\\"]');\\n        await ns.sleep(0);\\n    } while (input == null);\\n    var buttons = doc.querySelectorAll('div#root div div div div div div button[type=\\\"button\\\"]');\\n    var heads = buttons[2], tails = buttons[3];\\n    function click(elem) {\\n        Object.values(elem)[1].onClick({ isTrusted: true, target: elem });\\n    }\\n    var seq = [];\\n    var x = 0, a = 341, b = 1, m = 1024;\\n    for (var i = 0; i < m; i++) {\\n        seq.push(x < m / 2);\\n        x = (a * x + b) % m;\\n    }\\n    function checkstart(i, v) {\\n        return v.at(-1) == seq[(i + v.length - 1) % m];\\n    }\\n    var v = [];\\n    var poss = [...Array(m).keys()];\\n    while (poss.length > 1) {\\n        click(heads);\\n        var next = doc.querySelector('div#root div div div h3').textContent.includes('win!');\\n        v.push(next);\\n        poss = poss.filter(i => checkstart(i, v));\\n    }\\n    ns.tprint(poss[0], ' ', v.length, ' ', v);\\n    var start = (poss[0] + v.length) % m;\\n    seq = [...seq.slice(start), ...seq.slice(0, start)];\\n    input.value = 1000000000000;\\n    var i = 0;\\n    while (true) {\\n        click(seq[i] ? heads : tails);\\n        // if (!doc.querySelector('div#root div div div h3').textContent.includes('win!'))\\n        //     ns.tprint('bad ', i)\\n        i = (i + 1) % m;\\n        if (!(i % 100))\\n            await ns.sleep(0);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzaW5vLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2Nhc2luby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLHlDQUF5QztJQUN6QyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLElBQUksT0FBTyxFQUFFO1FBQ25DLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssR0FBRyxPQUFPLEVBQUU7WUFDbkMsRUFBRSxDQUFDLE1BQU0sQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1lBQ3RFLE9BQU87U0FDUDtRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMxQyxFQUFFLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7WUFDL0MsT0FBTztTQUNQO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0tBQ3RDO0lBRUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7UUFDdkQsRUFBRSxDQUFDLE1BQU0sQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQ3BEO0lBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTNCLHlDQUF5QztJQUN6QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLHlDQUF5QyxDQUFDLENBQUM7SUFDdEUsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNkLEVBQUUsQ0FBQyxNQUFNLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUNqRCxPQUFPO0tBQ1A7SUFDRCxNQUFNLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FB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\",\"filename\":\"/xsink/casino.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":114.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"goToLocation\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const [x, y] = ns.args;\\n    for (let i = 0; i < 10; i++)\\n        await ns.stanek.chargeFragment(x, y);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcmdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2NoYXJnZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDekIsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkMsQ0FBQyJ9\",\"filename\":\"/xsink/charge.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { BATCH_SPACER, Metrics } from 'metrics.js';\\nimport { FormatMoney, GetAllServers } from 'utils.js';\\nimport { IsPrepped } from 'prep.js';\\n//import { MemoryMap } from 'ram.js'\\nconst QmConfig = new Object({\\n    MaxPreppingServers: 4,\\n    MaxBatchingServers: 1,\\n    MaxServers: 5,\\n    ListMaxServers: 30,\\n    EvalDelay: 120 * 1000,\\n    LoopDelay: 1000,\\n    MaxPrepingDepth: 30,\\n    MaxBatchingDepth: 30 // This is how deep from the top of the server list we can allow batching\\n});\\nconst SERVER_STATES = Object.freeze({\\n    UNPREPPED: \\\"not ready\\\",\\n    PREPARING: \\\"PREPPING\\\",\\n    PREPPED: \\\"ready\\\",\\n    BATCHING: \\\"BATCHING\\\"\\n});\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tail();\\n    const qm = new QuarterMaster(ns, QmConfig.EvalDelay); // re-eval every 2 min\\n    while (true) {\\n        await qm.Dispatch();\\n        ns.print('INFO: Loop over, sleeping ' + Math.round(QmConfig.LoopDelay / 1000) + ' second');\\n        await ns.sleep(QmConfig.LoopDelay);\\n    }\\n}\\nexport class QuarterMaster {\\n    constructor(ns, refreshTime) {\\n        this.ns = ns;\\n        this.refreshTime = refreshTime;\\n        this.lastRefresh = 0;\\n        this.topServers = undefined;\\n    }\\n    async Dispatch() {\\n        // Find top targets\\n        if (this.lastRefresh == 0 || Date.now() - this.lastRefresh > this.refreshTime) {\\n            this.ns.print('INFO: Re-evaluating top targets');\\n            this.topServers = await this.GetTopServers(QmConfig.ListMaxServers, 1);\\n            this.lastRefresh = Date.now();\\n            this.ns.print('INFO: Top targets given the current memory available are as follow: ');\\n            for (let metrics of this.topServers) {\\n                this.ns.print('WARN: x ' + metrics.cashPerSecond);\\n                this.ns.print('WARN: x ' + metrics.batchMoney);\\n                this.ns.print('WARN: x ' + metrics.maxRunnableBatches);\\n                this.ns.print('WARN: x ' + metrics.batchTime);\\n                this.ns.print('INFO: ' + metrics.server.toString().padEnd(25) +\\n                    (Math.round(metrics.pct * 100) + '%').padEnd(10) +\\n                    (FormatMoney(this.ns, metrics.cashPerSecond) + '/s').padEnd(20) +\\n                    this.ns.tFormat(metrics.batchTime).padEnd(30) +\\n                    this.ns.tFormat(metrics.currentStateWeakenTime).padEnd(30));\\n            }\\n        }\\n        // TODO:\\n        // ?? kill any manager & children not handling a top?\\n        // ?? kill any prepper & children not handling a top?\\n        // Determine the current state of all top servers\\n        for (const metrics of this.topServers) {\\n            // Check if prep is running for that server\\n            metrics.prepping = this.IsProcRunning('prep.js', metrics.server);\\n            // Check if batcher is running for that server\\n            metrics.batching = this.IsProcRunning('manager.js', metrics.server);\\n            if (metrics.batching)\\n                metrics.state = SERVER_STATES.BATCHING;\\n            else if (metrics.prepping)\\n                metrics.state = SERVER_STATES.PREPARING;\\n            else if (IsPrepped(this.ns, metrics.server))\\n                metrics.state = SERVER_STATES.PREPPED;\\n            else\\n                metrics.state = SERVER_STATES.UNPREPPED;\\n        }\\n        // Prep targets\\n        let nbPrepping = this.topServers.filter(p => p.prepping).length;\\n        let nbBatching = this.topServers.filter(p => p.batching).length;\\n        //this.ns.print('We had ' + nbPrepping + ' servers in prep and ' + nbBatching + ' servers batching');\\n        // Assign tasks\\n        let depth = 0;\\n        for (let metrics of this.topServers) {\\n            //if (metrics.server.startsWith('joes')) continue;\\n            // Check if we need to prep the target\\n            if (!metrics.batching && metrics.prepping == false && !IsPrepped(this.ns, metrics.server) && nbPrepping < QmConfig.MaxPreppingServers && nbPrepping + nbBatching < QmConfig.MaxServers && depth <= QmConfig.MaxPrepingDepth) {\\n                this.ns.print('WARN: Launched prep for ' + metrics.server);\\n                this.ns.exec('prep.js', 'home', 1, metrics.server);\\n                metrics.state = SERVER_STATES.PREPARING;\\n                nbPrepping++;\\n                continue;\\n            }\\n            if (depth > QmConfig.MaxBatchingDepth)\\n                break;\\n            // Check if we can launch a batch cycle for this target\\n            if (metrics.batching == false && IsPrepped(this.ns, metrics.server) && nbBatching < QmConfig.MaxBatchingServers && nbPrepping + nbBatching < QmConfig.MaxServers) {\\n                this.ns.print('WARN: Launched manager for ' + metrics.server);\\n                //const ram = new MemoryMap(this.ns);\\n                //const ramRatio = ram.available / ram.total;\\n                const ramRatio = 1; // / (QmConfig.MaxPreppingServers + QmConfig.MaxBatchingServers);\\n                this.ns.exec('manager.js', 'home', 1, metrics.server, ramRatio, false);\\n                metrics.state = SERVER_STATES.BATCHING;\\n                nbBatching++;\\n                continue;\\n            }\\n            depth++;\\n        }\\n        //this.ns.print('We now have ' + nbPrepping + ' servers in prep and ' + nbBatching + ' servers batching');\\n        // Display report\\n        this.ns.print('INFO: Server name'.padEnd(30) +\\n            '$'.padEnd(15) +\\n            'Security'.padEnd(25) +\\n            'State'.padEnd(15));\\n        for (let metrics of this.topServers) {\\n            let so = this.ns.getServer(metrics.server);\\n            let prefix = 'WARN: ';\\n            if (!IsPrepped(this.ns, metrics.server) && metrics.state != 'BATCHING')\\n                prefix = 'FAIL: ';\\n            this.ns.print((prefix + metrics.server).padEnd(30) +\\n                (Math.round(so.moneyAvailable / so.moneyMax * 100).toString()).padEnd(15) +\\n                (Math.round(so.hackDifficulty - so.minDifficulty).toString()).padEnd(25) +\\n                metrics.state);\\n        }\\n    }\\n    IsProcRunning(scriptName, argument = undefined) {\\n        return this.ns.ps().find(p => p.filename == scriptName && (argument != undefined ? p.args.includes(argument) : true)) != undefined;\\n    }\\n    async GetTopServers(count = QmConfig.ListMaxServers, maxNetworkRamPct = 0.5) {\\n        const data = new Array();\\n        const servers = GetAllServers(this.ns).filter(s => this.ns.getServer(s).hasAdminRights && this.ns.getServer(s).moneyMax > 0);\\n        ;\\n        for (let server of servers) {\\n            let subData = new Array();\\n            for (let pct = 0.05; pct <= 0.95; pct += 0.05) {\\n                const metrics = new Metrics(this.ns, server, Math.min(pct, 0.99), BATCH_SPACER, 1, maxNetworkRamPct);\\n                // Skip stuff we can't hack\\n                //if (metrics.hackChance >= 0.50)\\n                if (metrics.cashPerSecond == undefined)\\n                    continue;\\n                subData.push(metrics);\\n                await this.ns.sleep(0);\\n            }\\n            if (subData.length > 0) {\\n                subData = subData.sort((a, b) => b.cashPerSecond - a.cashPerSecond);\\n                data.push(subData[0]);\\n            }\\n        }\\n        let sorted = data.sort((a, b) => b.cashPerSecond - a.cashPerSecond);\\n        return sorted.slice(0, count);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFDbkMsb0NBQW9DO0FBRXBDLE1BQU0sUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDO0lBQzNCLGtCQUFrQixFQUFFLENBQUM7SUFDckIsa0JBQWtCLEVBQUUsQ0FBQztJQUNyQixVQUFVLEVBQUUsQ0FBQztJQUNiLGNBQWMsRUFBRSxFQUFFO0lBQ2xCLFNBQVMsRUFBRSxHQUFHLEdBQUcsSUFBSTtJQUNyQixTQUFTLEVBQUUsSUFBSTtJQUNmLGVBQWUsRUFBRSxFQUFFO0lBQ25CLGdCQUFnQixFQUFFLEVBQUUsQ0FBRSx5RUFBeUU7Q0FDL0YsQ0FBQyxDQUFDO0FBR0gsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxTQUFTLEVBQUUsV0FBVztJQUN0QixTQUFTLEVBQUUsVUFBVTtJQUNyQixPQUFPLEVBQUUsT0FBTztJQUNoQixRQUFRLEVBQUUsVUFBVTtDQUNwQixDQUFDLENBQUM7QUFFSCxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNWLE1BQU0sRUFBRSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7SUFDNUUsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLEVB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\",\"filename\":\"/xsink/controller.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":612}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ColorPrint } from 'hack-once.js';\\nconst CITIES = [\\n    'Aevum',\\n    'Sector-12',\\n    'Volhaven',\\n    'Chongqing',\\n    'New Tokyo',\\n    'Ishima'\\n];\\nlet corpapi;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    corpapi = eval('ns.corporation');\\n    let [count, mainCount, divisionIndex, doIt] = ns.args;\\n    if (count == 'fraud') {\\n        if (mainCount == 'fraud') {\\n            ns.tprint('FAIL: THIS IS THE REAL DEAL NOT A DRY RUN');\\n        }\\n        let corp = corpapi.getCorporation();\\n        // *** INITIAL OFFER ***\\n        let offer = corpapi.getInvestmentOffer();\\n        let prevOffer = offer;\\n        ns.tprint('WARN: Initial offer is ' + ns.nFormat(offer.funds, '$0.00a'));\\n        // *** DROP INVENTORY SOME ***\\n        ns.tprint('INFO: Lowering stocks');\\n        await SetSales(ns, corp.divisions[0], SALE_MODES.EMPTY);\\n        while (true) {\\n            let storage = await GetStorageInfo(ns, corp.divisions[0]);\\n            if (storage.sizeUsed <= storage.size * 0.6) {\\n                await SetSales(ns, corp.divisions[0], SALE_MODES.NORMAL);\\n                ns.tprint('WARN: Inventory near empty!');\\n                break;\\n            }\\n            ns.tprint('INFO: Waiting for storage to empty ' + storage.sizeUsed + ' / ' + storage.size);\\n            await ns.sleep(1000);\\n        }\\n        // *** STOCK UP ***\\n        ns.tprint('WARN: Freezing sales in preparation of fraud');\\n        await SetSales(ns, corp.divisions[0], SALE_MODES.FREEZE);\\n        while (true) {\\n            let storage = await GetStorageInfo(ns, corp.divisions[0]);\\n            if (storage.sizeUsed >= storage.size * 0.99) {\\n                ns.tprint('WARN: Inventory full!');\\n                break;\\n            }\\n            ns.tprint('INFO: Waiting for storage to fill ' + storage.sizeUsed + ' / ' + storage.size);\\n            await ns.sleep(1000);\\n        }\\n        await SetSales(ns, corp.divisions[0], SALE_MODES.FRAUD);\\n        // *** FISH FOR A BETTER OFFER ***\\n        while (true) {\\n            offer = corpapi.getInvestmentOffer();\\n            let storage = await GetStorageInfo(ns, corp.divisions[0]);\\n            ns.tprint('INFO: Waiting for storage to empty ' + storage.sizeUsed + ' / ' + storage.size + ' current offer: ' + ns.nFormat(offer.funds, '$0.00a'));\\n            if (offer.funds > prevOffer.funds * 3) {\\n                if (mainCount == 'fraud') {\\n                    ns.tprint('FAIL: Accepting current offer: ' + ns.nFormat(offer.funds, '$0.00a'));\\n                    corpapi.acceptInvestmentOffer();\\n                }\\n                else {\\n                    ns.tprint('FAIL: Best offer was: ' + ns.nFormat(offer.funds, '$0.00a'));\\n                }\\n                await SetSales(ns, corp.divisions[0], SALE_MODES.NORMAL);\\n                return;\\n            }\\n            prevOffer = offer;\\n            //corpapi.getUpgradeWarehouseCost())\\n            if (storage.sizeUsed <= storage.size * 0.6) {\\n                await SetSales(ns, corp.divisions[0], SALE_MODES.NORMAL);\\n                ns.tprint('WARN: Inventory near empty!');\\n                break;\\n            }\\n            await ns.sleep(1000);\\n        }\\n        return;\\n    }\\n    if (count == undefined)\\n        count = 3;\\n    if (mainCount == undefined)\\n        mainCount = 6;\\n    if (divisionIndex == undefined)\\n        divisionIndex = 0;\\n    if (doIt == undefined)\\n        doIt = false;\\n    // // Check if we have a corp\\n    let corp = undefined;\\n    // Try to find existing corp\\t\\n    try {\\n        ColorPrint('white', 'Getting corporation info');\\n        corp = corpapi.getCorporation();\\n    }\\n    catch {\\n        ColorPrint('orange', 'Exception getting corp, probably because we don\\\\'t have one yet');\\n    }\\n    // // Create corp if we do not have one\\n    // if (corp == undefined) {\\n    // \\tColorPrint('green', 'Creating corporation');\\n    // \\tif (corpapi.createCorporation('ACME', false)) {\\n    // \\t\\tColorPrint('lightgreen', 'Created corporation using government money');\\n    // \\t}\\n    // \\telse if (corpapi.createCorporation('ACME', true)) {\\n    // \\t\\tColorPrint('green', 'Created corporation using our own funds');\\n    // \\t}\\n    // \\telse {\\n    // \\t\\tColorPrint('red', 'Error creating corporation');\\n    // \\t}\\n    // \\t// Try to find existing corp again now that we probably created one\\n    // \\ttry {\\n    // \\t\\tColorPrint('yellow', 'Getting new corporation info');\\n    // \\t\\tcorp = corpapi.getCorporation();\\n    // \\t}\\n    // \\tcatch {\\n    // \\t\\tColorPrint('red', 'Exception getting new corp, not enough funds I guess?');\\n    // \\t}\\n    // }\\n    ColorPrint('');\\n    ColorPrint('white', 'Corporation info:');\\n    for (let key of Object.keys(corp)) {\\n        ColorPrint('white', key + ': ' + corp[key]);\\n    }\\n    // // Check divisions\\n    // if (corp.divisions.length == 0) {\\n    // \\t//corpapi.expandIndustry('Agriculture', 'ACME Farms');\\n    // \\tcorp = corpapi.getCorporation();\\n    // \\tColorPrint('green', 'Created new division: ' + corp.divisions[0].name);\\n    // }\\n    // if (corp.divisions.length == 0) {\\n    // \\tColorPrint('red', 'Could not create division?! Aborting');\\n    // \\treturn;\\n    // }\\n    await UpgradeOfficesAndHire(ns, corp.divisions[divisionIndex].name, 'Sector-12', count, mainCount, !doIt);\\n    // for (let division of corp.divisions) {\\n    // \\tColorPrint('');\\n    // \\tColorPrint('white', 'Division info:');\\n    // \\tfor (let key of Object.keys(division)) {\\n    // \\t\\tColorPrint('white', key + ': ' + division[key]);\\n    // \\t}\\n    // \\t//await UpgradeOfficesAndHire(ns, division.name, 'Sector-12', count, mainCount, !doIt);\\n    // }\\n}\\n/*\\nassignJob(divisionName, cityName, employeeName, job)\\t\\t\\t// Assign an employee to a job.\\nbuyCoffee(divisionName, cityName)\\t\\t\\t\\t\\t\\t\\t\\t// Buy coffee for your employees\\ngetEmployee(divisionName, cityName, employeeName)\\t\\t\\t\\t// Get data about an employee\\ngetHireAdVertCost(divisionName)\\t\\t\\t\\t\\t\\t\\t\\t\\t// Get the cost to Hire AdVert\\ngetHireAdVertCount(adivisionName)\\t\\t\\t\\t\\t\\t\\t\\t// Get the number of times you have Hired AdVert\\ngetOffice(divisionName, cityName)\\t\\t\\t\\t\\t\\t\\t\\t// Get data about an office\\ngetOfficeSizeUpgradeCost(divisionName, cityName, asize)\\t\\t\\t// Cost to Upgrade office size.\\ngetResearchCost(divisionName, researchName)\\t\\t\\t\\t\\t\\t// Get the cost to unlock research\\nhasResearched(divisionName, researchName)\\t\\t\\t\\t\\t\\t// Gets if you have unlocked a research\\nhireAdVert(divisionName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Hire AdVert.\\nhireEmployee(divisionName, cityName)\\t\\t\\t\\t\\t\\t\\t// Hire an employee.\\nresearch(divisionName, researchName)\\t\\t\\t\\t\\t\\t\\t// Purchase a research\\nsetAutoJobAssignment(divisionName, cityName, job, amount)\\t\\t// Set the auto job assignment for a job\\nthrowParty(divisionName, cityName, costPerEmployee)\\t\\t\\t\\t// Throw a party for your employees\\nupgradeOfficeSize(divisionName, cityName, size)\\t\\t\\t\\t\\t// Upgrade office size.\\n*/\\nasync function UpgradeOfficesAndHire(ns, division, mainCity, targetEmployeeCount, mainCount, dryRun = true) {\\n    let totalCost = 0;\\n    for (const city of CITIES) {\\n        ColorPrint('yellow', division, 'white', ' in ', 'yellow', city, 'white', ':');\\n        if (city == mainCity) {\\n            // \\t// Upgrade main office?\\n            // \\tcontinue;\\n        }\\n        let office = undefined;\\n        try {\\n            office = corpapi.getOffice(division, city);\\n        }\\n        catch {\\n            let cost = corpapi.getExpandCityCost() + corpapi.getPurchaseWarehouseCost();\\n            ColorPrint('Red', '    No office in ', 'yellow', city, 'white', ' cost of expansion would be ', 'orange', ns.nFormat(cost, '$0.00a'));\\n            totalCost += cost;\\n            if (!dryRun) {\\n                corpapi.expandCity(division, city);\\n                corpapi.purchaseWarehouse(division, city);\\n                // Update\\n                office = corpapi.getOffice(division, city);\\n            }\\n            continue;\\n        }\\n        ColorPrint('white', '    Current: ', 'yellow', office.size, 'white', ' employees');\\n        let missing = Math.ceil((city == mainCity ? mainCount : targetEmployeeCount) - office.size);\\n        if (missing > 0) {\\n            ColorPrint('white', '    Target:  ', 'yellow', office.size + missing, 'white', ' employees');\\n            ColorPrint('white', '    Missing: ', 'red', missing, 'white', ' employees');\\n            let cost = corpapi.getOfficeSizeUpgradeCost(division, city, missing);\\n            totalCost += cost;\\n            ColorPrint('white', '    Cost:    ', 'orange', ns.nFormat(cost, '$0.00a'));\\n            if (!dryRun) {\\n                ColorPrint('white', '    Upgrading ', 'yellow', city, 'white', ' office space to ', 'lightgreen', office.size + missing);\\n                corpapi.upgradeOfficeSize(division, city, missing);\\n                await HireEmployees(ns, division, city);\\n                await DistributeEmployees(ns, division, city, mainCity);\\n                //upgraded = true;\\n                // const office = corpapi.getOffice(division, city);\\n                // corpapi.hireEmployee(division, city)\\n                // corpapi.getEmployee(division, city, employee)\\n                // corpapi.assignJob(division, city, employee, job)\\n                // corpapi.setAutoJobAssignment(division, city, job, amount)\\t\\n            }\\n        }\\n    }\\n    ColorPrint('white', 'TOTAL COST:    ', 'orange', ns.nFormat(totalCost, '$0.00a'));\\n    let corp = corpapi.getCorporation();\\n    ColorPrint('white', 'CORP FUNDS:    ', 'orange', ns.nFormat(corp.funds, '$0.00a'));\\n}\\nasync function HireEmployees(ns, division, city) {\\n    const office = corpapi.getOffice(division, city);\\n    let missing = office.size - office.employees.length;\\n    for (let i = 0; i < missing; i++) {\\n        let emp = corpapi.hireEmployee(division, city);\\n        ColorPrint('white', '    Hired employee:  ', 'yellow', emp.name, 'white', ' city: ', 'yellow', city);\\n    }\\n}\\nasync function DistributeEmployees(ns, division, city, mainCity) {\\n    const office = corpapi.getOffice(division, city);\\n    let assignments = [];\\n    let jobIndex = 0;\\n    for (let empName of office.employees) {\\n        let emp = corpapi.getEmployee(division, city, empName);\\n        if (emp.pos == 'Unassigned') {\\n            let newJob = 'Research & Development';\\n            if (assignments.length > 0) {\\n                if (jobIndex > assignments.length - 1)\\n                    jobIndex = 0;\\n                newJob = assignments[jobIndex].pos;\\n                jobIndex++;\\n            }\\n            await corpapi.assignJob(division, city, emp.name, newJob);\\n            ColorPrint('white', '    Employee:  ', 'yellow', emp.name, 'white', ' new job: ', 'orange', newJob);\\n        }\\n        else {\\n            let entry = assignments.find(p => p.pos == emp.pos);\\n            if (entry == undefined) {\\n                entry = {};\\n                entry.pos = emp.pos;\\n                entry.count = 1;\\n                assignments.push(entry);\\n            }\\n            else {\\n                entry.count++;\\n            }\\n            ColorPrint('white', '    Employee:  ', 'yellow', emp.name, 'white', ' current job: ', 'yellow', emp.pos);\\n        }\\n        await ns.sleep(0);\\n    }\\n}\\n// buyMaterial(divisionName, cityName, materialName, amt)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet material buy data\\n// cancelExportMaterial(sourceDivision, sourceCity, targetDivision, targetCity, materialName, amt)\\t\\t\\tCancel material export\\n// discontinueProduct(divisionName, productName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDiscontinue a product.\\n// exportMaterial(sourceDivision, sourceCity, targetDivision, targetCity, materialName, amt)\\t\\t\\t\\tSet material export data\\n// getMaterial(divisionName, cityName, materialName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tGet material data\\n// getProduct(divisionName, productName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tGet product data\\n// getPurchaseWarehouseCost()\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tGets the cost to purchase a warehouse\\n// getUpgradeWarehouseCost(adivisionName, acityName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tGets the cost to upgrade a warehouse to the next level\\n// getWarehouse(divisionName, cityName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tGet warehouse data\\n// hasWarehouse(adivisionName, acityName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tCheck if you have a warehouse in city\\n// makeProduct(divisionName, cityName, productName, designInvest, marketingInvest)\\t\\t\\t\\t\\t\\t\\tCreate a new product\\n// purchaseWarehouse(divisionName, cityName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPurchase warehouse for a new city\\n// sellMaterial(divisionName, cityName, materialName, amt, price)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet material sell data.\\n// sellProduct(divisionName, cityName, productName, amt, price, all)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet product sell data.\\n// setMaterialMarketTA1(divisionName, cityName, materialName, on)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet market TA 1 for a material.\\n// setMaterialMarketTA2(divisionName, cityName, materialName, on)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet market TA 2 for a material.\\n// setProductMarketTA1(divisionName, productName, on)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet market TA 1 for a product.\\n// setProductMarketTA2(divisionName, productName, on)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet market TA 2 for a product.\\n// setSmartSupply(divisionName, cityName, enabled)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSet smart supply\\n// upgradeWarehouse(divisionName, cityName)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUpgrade warehouse\\nconst SALE_MODES = {\\n    FREEZE: 1,\\n    FRAUD: 2,\\n    EMPTY: 3,\\n    NORMAL: 4\\n    //SELL,\\n};\\nconst DIVISION_MATERIAL_PRODUCTS = {\\n    Agriculture: ['Plants', 'Food'],\\n    Software: ['AI Cores']\\n};\\nasync function GetStorageInfo(ns, division) {\\n    let size = 0;\\n    let sizeUsed = 0;\\n    for (let city of CITIES) {\\n        try {\\n            let wh = corpapi.getWarehouse(division.name, city);\\n            size += wh.size;\\n            sizeUsed += wh.sizeUsed;\\n        }\\n        catch {\\n            ns.tprint('Could not get access to warehouse for ' + city);\\n        }\\n    }\\n    return { size: size, sizeUsed: sizeUsed };\\n}\\nasync function SetSales(ns, division, saleMode) {\\n    let matProducts = DIVISION_MATERIAL_PRODUCTS[division.type];\\n    if (matProducts == undefined) {\\n        ns.tprint('Could not find material product information for division type: ' + division.type);\\n        return;\\n    }\\n    let products = division.products;\\n    for (let city of CITIES) {\\n        // *** MATERIAL PRODUCTS ***\\n        for (let i = 0; i < matProducts.length; i++) {\\n            switch (saleMode) {\\n                case SALE_MODES.FREEZE:\\n                    corpapi.sellMaterial(division.name, city, matProducts[i], '0', 'MP*10000', false);\\n                    break;\\n                case SALE_MODES.NORMAL:\\n                    corpapi.sellMaterial(division.name, city, matProducts[i], 'MAX', 'MP*22.5', false);\\n                    break;\\n                case SALE_MODES.EMPTY:\\n                    corpapi.sellMaterial(division.name, city, matProducts[i], 'MAX', 'MP*15', false);\\n                    break;\\n                case SALE_MODES.FRAUD:\\n                    corpapi.sellMaterial(division.name, city, matProducts[i], 'MAX', 'MP*20', false);\\n                    break;\\n            }\\n        }\\n        // *** PRODUCTS ***\\n        for (let i = 0; i < products.length; i++) {\\n            switch (saleMode) {\\n                case SALE_MODES.FREEZE:\\n                    corpapi.sellProduct(division.name, city, products[i], '0', 'MP*10000', false);\\n                    break;\\n                case SALE_MODES.NORMAL:\\n                    corpapi.sellProduct(division.name, city, products[i], 'MAX', 'MP', false);\\n                    break;\\n                case SALE_MODES.EMPTY:\\n                    corpapi.sellProduct(division.name, city, products[i], 'MAX', 'MP*0.75', false);\\n                    break;\\n                case SALE_MODES.FRAUD:\\n                    corpapi.sellProduct(division.name, city, products[i], 'MAX', 'MP', false);\\n                    break;\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9jb3JwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsTUFBTSxNQUFNLEdBQUc7SUFDZCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7Q0FDUixDQUFDO0FBRUYsSUFBSSxPQUFPLENBQUM7QUFFWixzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUVqQyxJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUV0RCxJQUFJLEtBQUssSUFBSSxPQUFPLEVBQUU7UUFDckIsSUFBSSxTQUFTLElBQUksT0FBTyxFQUFFO1lBQ3pCLEVBQUUsQ0FBQyxNQUFNLENBQUMsMkNBQTJDLENBQUMsQ0FBQztTQUN2RDtRQUVELElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVwQyx3QkFBd0I7UUFDeEIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDekMsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxNQUFNLENBQUMseUJBQXlCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFekUsOEJBQThCO1FBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNuQyxNQUFNLFFBQVEsQ0FBQyxF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\",\"filename\":\"/xsink/corp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":613}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const [target] = ns.args;\\n    const servers = GetAllServers(ns);\\n    if (target == undefined) {\\n        for (const server of servers) {\\n            let output = ''.padEnd((server.route.length - 1));\\n            ns.tprint(output + server.name);\\n        }\\n        return;\\n    }\\n    const server = servers.find(p => p.name.toLowerCase().startsWith(target.toLowerCase()));\\n    if (server == undefined) {\\n        ns.tprint('No match found for : ' + target);\\n        return;\\n    }\\n    ns.tprint(target + ' => ' + server.route);\\n    ns.tprint('Traversing the server chain to target: ' + target);\\n    for (const node of server.route) {\\n        if (!ns.singularity.connect(node)) {\\n            ns.tprint('ERROR: Could not connect to ' + node);\\n        }\\n        else {\\n            ns.tprint('INFO: Connected to ' + node);\\n        }\\n    }\\n    ns.tprint('SUCCESS: Done.');\\n}\\nexport function GetAllServers(ns, root = 'home', found = new Array(), route = new Array()) {\\n    if (!found.find(p => p.name == root)) {\\n        let entry = { name: root, route: route };\\n        entry.route.push(root);\\n        found.push(entry);\\n    }\\n    for (const server of ns.scan(root)) {\\n        if (!found.find(p => p.name == server)) {\\n            let newRoute = route.map(p => p);\\n            GetAllServers(ns, server, found, newRoute);\\n        }\\n    }\\n    return [...found];\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUV6QixNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEMsSUFBSSxNQUFNLElBQUksU0FBUyxFQUFFO1FBQ3hCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzdCLElBQUksTUFBTSxHQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztRQUNELE9BQU87S0FDUDtJQUVELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLElBQUksTUFBTSxJQUFJLFNBQVMsRUFBRTtRQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLHVCQUF1QixHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLE9BQU87S0FDUDtJQUVELEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFMUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5Q0FBeUMsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUM5RCxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2xDLEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDakQ7YUFDSTtZQUNKLEVBQUUsQ0FBQyxNQUFNLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDeEM7S0FDRDtJQUNELEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxHQUFHLE1BQU0sRUFBRSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsRUFBRSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUU7SUFDeEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQ3JDLElBQUksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDekMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNsQjtJQUVELEtBQUssTUFBTSxNQUFNLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEVBQUU7WUFDdkMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMzQztLQUNEO0lBRUQsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDbkIsQ0FBQyJ9\",\"filename\":\"/xsink/cs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.rainbow('rockyou');\\n    ns.rainbow('stanek');\\n    //ns.exploit();\\n    //ns.tprint(await ns.alterReality);\\n    // debugger;\\n    // await ns.alterReality();\\n}\\n// BYPASS\\nfunction bypass(ns) {\\n    const doc = eval('document');\\n    let url = doc.URL;\\n    ns.tprint(url);\\n    doc.completely_unused_field = 'potato';\\n    ns.bypass(doc);\\n}\\n// UNCLICKABLE\\nfunction unclickable() {\\n    let doc = eval(\\\"document\\\");\\n    const element = find(doc, \\\"//div[contains(text(), 'Click on this to')]\\\");\\n    // ns.tprint(Object.keys(element));\\n    // for (var key of Object.keys(element)) {\\n    // \\tns.tprint('key: ' + key + ' value: ' + Object.keys(element[key]));\\n    // }\\n    click(element);\\n}\\n//Number.toExponential = () => 0;\\n//ns.tampering();\\n// Some DOM helpers (partial credit to @ShamesBond)\\nfunction find(doc, xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\\nasync function click(elem) {\\n    debugger;\\n    await elem[Object.keys(elem)[1]].onClick({ target: elem, isTrusted: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2RvYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFHckIsZUFBZTtJQUNmLG1DQUFtQztJQUNuQyxZQUFZO0lBQ1osMkJBQTJCO0FBQzVCLENBQUM7QUFFRCxTQUFTO0FBQ1QsU0FBUyxNQUFNLENBQUMsRUFBRTtJQUNqQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0IsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNsQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsR0FBRyxDQUFDLHVCQUF1QixHQUFHLFFBQVEsQ0FBQztJQUN2QyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLENBQUM7QUFFRCxjQUFjO0FBQ2QsU0FBUyxXQUFXO0lBQ25CLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLDZDQUE2QyxDQUFDLENBQUM7SUFFekUsbUNBQW1DO0lBQ25DLDBDQUEwQztJQUMxQyxzRUFBc0U7SUFDdEUsSUFBSTtJQUVKLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQixDQUFDO0FBRUQsaUNBQWlDO0FBQ2pDLGlCQUFpQjtBQUdqQixtREFBbUQ7QUFDbkQsU0FBUyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssSUFBSSxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7QUFFL0gsS0FBSyxVQUFVLEtBQUssQ0FBQyxJQUFJO0lBQ3hCLFFBQVEsQ0FBQztJQUNULE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMifQ==\",\"filename\":\"/xsink/doc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let boxes = Array.from(eval(\\\"document\\\").querySelectorAll(\\\"[class*=MuiBox-root]\\\"));\\n    let box = boxes.find(s => getProps(s)?.player);\\n    if (!box)\\n        return;\\n    let props = getProps(box);\\n    props.router.toDevMenu();\\n}\\nfunction getProps(obj) {\\n    return Object.entries(obj).find(entry => entry[0].startsWith(\\\"__reactProps\\\"))[1].children.props;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2Rldi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7SUFDbEYsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxJQUFJLENBQUMsR0FBRztRQUFFLE9BQU87SUFDakIsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEdBQUc7SUFDakIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQ3BHLENBQUMifQ==\",\"filename\":\"/xsink/dev.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, DefaultStyle, ColorPrint } from 'tables.js';\\nconst FactionNames = {\\n    CyberSec: \\\"CyberSec\\\",\\n    NiteSec: \\\"NiteSec\\\",\\n    TheBlackHand: \\\"The Black Hand\\\",\\n    BitRunners: \\\"BitRunners\\\",\\n    Daedalus: \\\"Daedalus\\\",\\n    TianDiHui: \\\"Tian Di Hui\\\",\\n    Netburners: \\\"Netburners\\\",\\n    SlumSnakes: \\\"Slum Snakes\\\",\\n    Tetrads: \\\"Tetrads\\\",\\n    Sector12: \\\"Sector-12\\\",\\n    Aevum: \\\"Aevum\\\",\\n    Volhaven: \\\"Volhaven\\\",\\n    Chongqing: \\\"Chongqing\\\",\\n    Ishima: \\\"Ishima\\\",\\n    NewTokyo: \\\"New Tokyo\\\",\\n    Illuminati: \\\"Illuminati\\\",\\n    TheCovenant: \\\"The Covenant\\\",\\n    ECorp: \\\"ECorp\\\",\\n    MegaCorp: \\\"MegaCorp\\\",\\n    BachmanAssociates: \\\"Bachman & Associates\\\",\\n    BladeIndustries: \\\"Blade Industries\\\",\\n    NWO: \\\"NWO\\\",\\n    ClarkeIncorporated: \\\"Clarke Incorporated\\\",\\n    OmniTekIncorporated: \\\"OmniTek Incorporated\\\",\\n    FourSigma: \\\"Four Sigma\\\",\\n    KuaiGongInternational: \\\"KuaiGong International\\\",\\n    FulcrumSecretTechnologies: \\\"Fulcrum Secret Technologies\\\",\\n    SpeakersForTheDead: \\\"Speakers for the Dead\\\",\\n    TheDarkArmy: \\\"The Dark Army\\\",\\n    TheSyndicate: \\\"The Syndicate\\\",\\n    Silhouette: \\\"Silhouette\\\",\\n    Bladeburners: \\\"Bladeburners\\\",\\n    ChurchOfTheMachineGod: \\\"Church of the Machine God\\\",\\n    ShadowsOfAnarchy: \\\"Shadows of Anarchy\\\"\\n};\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let masterlist = GetMasterList(ns, ns.args.includes('rep'));\\n    const ownedAugs = ns.singularity.getOwnedAugmentations(true);\\n    const columns = [\\n        { header: ' Augmentation', width: 56 },\\n        { header: ' Factions', width: 30 },\\n        { header: ' Price', width: 8 },\\n        { header: ' Req.Rep', width: 19 },\\n        { header: ' Pre.Req', width: 40 },\\n        { header: ' Type', width: 13 }\\n    ];\\n    if (ns.args[0] != undefined && ns.args[0].startsWith('mil')) {\\n        for (let i = 0; i < 5; i++) {\\n            let faction = Object.values(FactionNames)[i];\\n            let list = masterlist.filter(s => s.factions.includes(faction));\\n            let data = ToColumnData(ns, list, ' No ' + faction + ' augmentations found!');\\n            let extra = '';\\n            if (faction == FactionNames.CyberSec)\\n                extra = ns.getServerRequiredHackingLevel('CSEC').toString();\\n            else if (faction == FactionNames.NiteSec)\\n                extra = ns.getServerRequiredHackingLevel('avmnite-02h').toString();\\n            else if (faction == FactionNames.TheBlackHand)\\n                extra = ns.getServerRequiredHackingLevel('I.I.I.I').toString();\\n            else if (faction == FactionNames.BitRunners)\\n                extra = ns.getServerRequiredHackingLevel('run4theh111z').toString();\\n            columns[0].header = ' ' + faction + ' ' + extra;\\n            PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n        }\\n        return;\\n    }\\n    if (ns.args[0] != 'all') {\\n        // Remove some stuff we don't want to see unless special run\\n        masterlist = masterlist.filter(s => s.type != 'Physical');\\n        masterlist = masterlist.filter(s => s.type != 'Charisma');\\n        masterlist = masterlist.filter(s => s.type != 'Company');\\n        masterlist = masterlist.filter(s => s.type != 'Shit');\\n        masterlist = masterlist.filter(s => s.type != 'Hacknet');\\n        masterlist = masterlist.filter(s => !s.factions[0].startsWith('Shadows'));\\n        masterlist = masterlist.filter(s => !s.factions[0].startsWith('Netburn'));\\n        if (!ns.getPlayer().factions.includes('Church of the Machine God'))\\n            masterlist = masterlist.filter(s => !s.factions[0].startsWith('Church'));\\n        masterlist = masterlist.filter(s => !s.factions[0].startsWith('Bladeburner'));\\n    }\\n    let desired = masterlist.filter(s => FilterDesiredAugs(ns, s));\\n    let suggested = SuggestedAugs(ns, desired);\\n    let owned = masterlist.filter(s => ownedAugs.includes(s.name) && !s.name.startsWith('NeuroFlux'));\\n    let balance = masterlist.filter(s => !desired.includes(s) && !owned.includes(s));\\n    let desiredData = ToColumnData(ns, desired, ' No desirable augmentations found!');\\n    let suggestedData = ToColumnData(ns, suggested, ' No suggested augmentations found!');\\n    let balanceData = ToColumnData(ns, balance, ' No interesting augmentations found!');\\n    let ownedData = ToColumnData(ns, owned, ' No augmentations installed yet!');\\n    if (ns.args[0] != undefined && ns.args[0].startsWith('ins')) {\\n        let hasNeufo = ns.singularity.getOwnedAugmentations(true).find(s => s.startsWith('NeuroFlux'));\\n        columns[0].header = ' Installed Augmentations (' + (owned.length + (hasNeufo ? 1 : 0)) + ')';\\n        PrintTable(ns, ownedData, columns, DefaultStyle(), ColorPrint);\\n    }\\n    else {\\n        columns[0].header = ' Suggested Buy Order';\\n        PrintTable(ns, suggestedData, columns, DefaultStyle(), ColorPrint);\\n        columns[0].header = ' Buyable';\\n        PrintTable(ns, desiredData, columns, DefaultStyle(), ColorPrint);\\n        columns[0].header = ' Wanted but locked (by faction/prereq/$/rep)';\\n        PrintTable(ns, balanceData, columns, DefaultStyle(), ColorPrint);\\n    }\\n    if (ns.args[0] == 'buy') {\\n        if (suggested.length < 1) {\\n            ns.tprint('FAIL: Cannot buy any augmentation right now');\\n            return;\\n        }\\n        for (let aug of suggested) {\\n            let faction = MeetsRepRequirement(ns, aug);\\n            if (ns.singularity.purchaseAugmentation(faction, aug.name))\\n                ns.tprint('SUCCES: Bought ' + aug.name + ' from ' + faction);\\n            else\\n                ns.tprint('FAIL: Cannot buy ' + aug.name + ' from ' + faction + ' ?!' +\\n                    ' estimated cost: ' + ns.nFormat(aug.price, '0.00a') +\\n                    ' actual cost: ' + ns.nFormat(ns.singularity.getAugmentationPrice(aug.name), '0.00a') +\\n                    ' money: ' + ns.nFormat(ns.getPlayer().money, '0.00a'));\\n            break;\\n        }\\n    }\\n}\\nfunction SuggestedAugs(ns, desired) {\\n    let neuro = desired.find(s => s.name.startsWith('NeuroFlux'));\\n    desired = desired.filter(s => !s.name.startsWith('NeuroFlux'));\\n    let mult = 1.9 * [1, .96, .94, .93][ns.singularity.getOwnedSourceFiles().filter(obj => { return obj.n === 11; })[0].lvl];\\n    for (let i = 0; i < desired.length; i++) {\\n        let budget = ns.getPlayer().money;\\n        let augs = desired.slice(i);\\n        let price = 0;\\n        let currentMult = 1;\\n        for (let j = 0; j < augs.length; j++) {\\n            price += augs[j].price * currentMult;\\n            currentMult *= mult;\\n        }\\n        if (price <= budget) {\\n            budget -= price;\\n            // Fill with NeuroFlux\\n            if (neuro != undefined && budget > neuro.price * currentMult) {\\n                augs.push(neuro);\\n                budget -= neuro.price * currentMult;\\n                currentMult *= mult;\\n            }\\n            const ret = [];\\n            currentMult = 1;\\n            for (let j = 0; j < augs.length; j++) {\\n                let price = augs[j].price * currentMult;\\n                currentMult *= mult;\\n                let entry = {\\n                    name: augs[j].name,\\n                    factions: augs[j].factions,\\n                    price: price,\\n                    rep: augs[j].rep,\\n                    prereq: augs[j].prereq,\\n                    type: augs[j].type\\n                };\\n                ret.push(entry);\\n            }\\n            return ret;\\n        }\\n    }\\n    return [];\\n}\\nfunction GetMasterList(ns, sortByRep) {\\n    const masterlist = [];\\n    for (const faction of Object.values(FactionNames)) {\\n        let augs = ns.singularity.getAugmentationsFromFaction(faction);\\n        for (const aug of augs) {\\n            let match = masterlist.find(s => s.name == aug);\\n            if (!match) {\\n                let entry = {\\n                    name: aug,\\n                    factions: [faction],\\n                    price: ns.singularity.getAugmentationPrice(aug),\\n                    rep: ns.singularity.getAugmentationRepReq(aug),\\n                    prereq: ns.singularity.getAugmentationPrereq(aug),\\n                    type: AugType(ns, aug)\\n                };\\n                masterlist.push(entry);\\n            }\\n            else {\\n                match.factions.push(faction);\\n            }\\n        }\\n    }\\n    if (sortByRep)\\n        masterlist.sort((a, b) => b.rep - a.rep);\\n    else\\n        masterlist.sort((a, b) => b.price - a.price);\\n    return masterlist;\\n}\\nfunction ToColumnData(ns, list, emptyDesc) {\\n    const playerMoney = ns.getServerMoneyAvailable('home');\\n    let ret = list.map(s => [\\n        { color: AugColor(ns, s), text: ' ' + s.name },\\n        { color: s.factions.length == 1 ? 'Fuchsia' : 'white', text: (' ' + (s.factions.length == 1 ? 'Unique: ' : '') + s.factions.join(', ')).slice(0, 29) },\\n        { color: s.price > playerMoney ? 'red' : 'white', text: ' ' + ns.nFormat(s.price, '0.0a').padStart(6) },\\n        { color: ReqRepColor(ns, s), text: ' ' + ns.nFormat(BestRep(ns, s), '0.00a').padStart(7) + ' / ' + ns.nFormat(s.rep, '0.00a').toString().padStart(7) },\\n        { color: MeetsPreReq(ns, s) ? 'white' : 'red', text: ' ' + s.prereq.toString().slice(0, 38) },\\n        { color: TypeColor(s.type), text: ' ' + s.type }\\n    ]);\\n    if (ret.length == 0) {\\n        ret.push([\\n            { color: 'yellow', text: ' ' + emptyDesc },\\n            { color: 'white', text: '' },\\n            { color: 'white', text: '' },\\n            { color: 'white', text: '' },\\n            { color: 'white', text: '' },\\n            { color: 'white', text: '' }\\n        ]);\\n    }\\n    return ret;\\n}\\nfunction ReqRepColor(ns, s) {\\n    if (MeetsRepRequirement(ns, s))\\n        return 'lime';\\n    if (BestRep(ns, s) == 0)\\n        return 'red';\\n    return 'orange';\\n}\\nfunction FilterDesiredAugs(ns, s) {\\n    // Remove factions we are not yet part of\\n    if (intersect(s.factions, ns.getPlayer().factions).length == 0) {\\n        return false;\\n    }\\n    // Remove augs we have in queue or already installed\\n    if (ns.singularity.getOwnedAugmentations(true).includes(s.name) && !s.name.startsWith('NeuroFlux')) {\\n        return false;\\n    }\\n    // Remove BladeBurner\\n    if (s.factions.length == 1 && s.factions.includes('Bladeburners')) {\\n        return false;\\n    }\\n    // Remove Physical, charisma, company, shit\\n    if (s.type == 'Physical') {\\n        return false;\\n    }\\n    if (s.type == 'Charisma') {\\n        return false;\\n    }\\n    if (s.type == 'Company') {\\n        return false;\\n    }\\n    if (s.type == 'Shit') {\\n        return false;\\n    }\\n    // Remove stuff we can't afford\\n    if (s.price > ns.getServerMoneyAvailable('home')) {\\n        return false;\\n    }\\n    // Remove stuff we don't have the rep for\\n    if (MeetsRepRequirement(ns, s) == false) {\\n        return false;\\n    }\\n    // Remove stuff we don't have the prereq for\\n    if (MeetsPreReq(ns, s) == false) {\\n        return false;\\n    }\\n    //if (s.name == 'QLink' && ns.args[1] != 'qlink') { return false; }\\n    return true;\\n}\\nfunction AugColor(ns, aug) {\\n    if (ns.singularity.getOwnedAugmentations(false).includes(aug.name))\\n        return 'lime';\\n    if (ns.singularity.getOwnedAugmentations(true).includes(aug.name))\\n        return 'green';\\n    if (intersect(ns.getPlayer().factions, aug.factions).length == 0)\\n        return '#990000';\\n    if (!MeetsRepRequirement(ns, aug))\\n        return '#0080ff';\\n    if (aug.price > ns.getServerMoneyAvailable('home'))\\n        return 'red';\\n    if (aug.type == 'Physical' || aug.type == 'Charisma' || aug.type == 'Shit' || aug.type == 'Company')\\n        return '#555555';\\n    if (!MeetsPreReq(ns, aug))\\n        return 'orange';\\n    return 'white';\\n}\\nfunction intersect(a, b) {\\n    var setB = new Set(b);\\n    return [...new Set(a)].filter(x => setB.has(x));\\n}\\nfunction BestRep(ns, aug) {\\n    let best = 0;\\n    for (let faction of aug.factions) {\\n        let rep = ns.singularity.getFactionRep(faction);\\n        if (rep > best)\\n            best = rep;\\n    }\\n    return best;\\n}\\nfunction MeetsRepRequirement(ns, aug) {\\n    for (let faction of aug.factions) {\\n        let rep = ns.singularity.getFactionRep(faction);\\n        if (rep >= aug.rep)\\n            return faction;\\n    }\\n    return false;\\n}\\nfunction MeetsPreReq(ns, aug) {\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    for (let req of aug.prereq) {\\n        if (!owned.includes(req))\\n            return false;\\n    }\\n    return true;\\n}\\nfunction AugType(ns, aug) {\\n    const stats = ns.singularity.getAugmentationStats(aug);\\n    let keys = Object.keys(stats);\\n    //ns.tprint(keys, Object.values(stats));\\n    if (aug.startsWith('NeuroFlux'))\\n        return 'NeuroFlux';\\n    if (keys.find(s => s.startsWith('bladeburner') && stats[s] != 1.0))\\n        return 'BladeBurner';\\n    if (aug == 'CashRoot Starter Kit')\\n        return 'Shit';\\n    if (keys.length == 0)\\n        return 'Special';\\n    if (keys.find(s => s.startsWith('faction_rep') && stats[s] != 1.0))\\n        return 'Faction';\\n    if (keys.find(s => s.startsWith('hacknet') && stats[s] != 1.0))\\n        return 'Hacknet';\\n    if (keys.find(s => s.startsWith('hack') && stats[s] != 1.0))\\n        return 'Hacking';\\n    if (keys.find(s => s.startsWith('charisma') && stats[s] != 1.0))\\n        return 'Charisma';\\n    if (keys.find(s => s.startsWith('str') && stats[s] != 1.0))\\n        return 'Physical';\\n    if (keys.find(s => s.startsWith('def') && stats[s] != 1.0))\\n        return 'Physical';\\n    if (keys.find(s => s.startsWith('dex') && stats[s] != 1.0))\\n        return 'Physical';\\n    if (keys.find(s => s.startsWith('agi') && stats[s] != 1.0))\\n        return 'Physical';\\n    if (keys.find(s => s.startsWith('company') && stats[s] != 1.0))\\n        return 'Company';\\n    return '???';\\n}\\nfunction TypeColor(type) {\\n    switch (type) {\\n        case 'NeuroFlux':\\n            return 'cyan';\\n        case 'Shit':\\n            return 'brown';\\n        case 'BladeBurner':\\n            return '#555555';\\n        case 'Special':\\n            return 'cyan';\\n        case 'Faction':\\n            return 'yellow';\\n        case 'Hacknet':\\n            return 'orange';\\n        case 'Hacking':\\n            return 'lime';\\n        case 'Charisma':\\n            return '#555555';\\n        case 'Physical':\\n            return '#555555';\\n        case 'Company':\\n            return '#555555';\\n        case '???':\\n            return '#555555';\\n        default:\\n            return 'red';\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvZmFjdGlvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRWhFLE1BQU0sWUFBWSxHQUFHO0lBQ3BCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFlBQVksRUFBRSxnQkFBZ0I7SUFDOUIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsU0FBUyxFQUFFLGFBQWE7SUFDeEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsVUFBVSxFQUFFLGFBQWE7SUFDekIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsUUFBUSxFQUFFLFdBQVc7SUFDckIsS0FBSyxFQUFFLE9BQU87SUFDZCxRQUFRLEVBQUUsVUFBVTtJQUNwQixTQUFTLEVBQUUsV0FBVztJQUN0QixNQUFNLEVBQUUsUUFBUTtJQUNoQixRQUFRLEVBQUUsV0FBVztJQUNyQixVQUFVLEVBQUUsWUFBWTtJQUN4QixXQUFXLEVBQUUsY0FBYztJQUMzQixLQUFLLEVBQUUsT0FBTztJQUNkLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLGlCQUFpQixFQUFFLHNCQUFzQjtJQUN6QyxlQUFlLEVBQUUsa0JBQWtCO0lBQ25DLEdBQUcsRUFBRSxLQUFLO0lBQ1Ysa0JBQWtCLEVBQUUscUJBQXFCO0lBQ3pDLG1CQUFtQixFQUFFLHNCQUFzQjtJQUMzQyxTQUFTLEVBQUUsWUFBWTtJQUN2QixxQkFBcUIsRUFBRSx3QkFBd0I7SUFDL0MseUJBQXlCLEVBQUUsNkJBQTZCO0lBQ3hELGtCQUFrQixFQUFFLHVCQUF1QjtJQUMzQyxXQUFXLEVBQUUsZUFBZTtJQUM1QixZQUFZLEVBQUUsZUFBZTtJQUM3QixVQUFVLEVBQUUsWUFBWTtJQUN4QixZQUFZLEVBQUUsY0FBYztJQUM1QixxQkFBcUIsRUFBRSwyQkFBMkI7SUFDbEQsZ0JBQWdCLEVBQUUsb0JBQW9CO0NBQ3RDLENBQUM7QUFFRixzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixJQUFJLFVBQVUsR0FBRyxhQUFhLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU3RCxNQUFNLE9BQU8sR0FBRztRQUNmLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3RDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2xDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1FBQzlCLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO0tBQzlCLENBQUM7SUFFRixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxJQUFJLElBQUksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNoRSxJQUFJLElBQUksR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEdBQUcsT0FBTyxHQUFHLHVCQUF1QixDQUFDLENBQUM7WUFFOUUsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ2YsSUFBSSxPQUFPLElBQUksWUFBWSxDQUFDLFFBQVE7Z0JBQ25DLEtBQUssR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ3hELElBQUksT0FBTyxJQUFJLFlBQVksQ0FBQyxPQUFPO2dCQUN2QyxLQUFLLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUMvRCxJQUFJLE9BQU8sSUFBSSxZQUFZLENBQUMsWUFBWTtnQkFDNUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztpQkFDM0QsSUFBSSxPQUFPLElBQUksWUFBWSxDQUFDLFVBQVU7Z0JBQzFDLEtBQUssR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsY0FBYyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFckUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7WUFFaEQsVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsT0FBTztLQUNQO0lBQ0QsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUN4Qiw0REFBNEQ7UUFDNUQsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxDQUFDO1FBQzFELFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxVQUFVLENBQUMsQ0FBQztRQUMxRCxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLENBQUM7UUFDekQsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELFVBQVUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQztRQUN6RCxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMxRSxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUM7WUFDakUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDMUUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMs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SUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFDakYsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFDOUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxVQUFVLENBQUM7SUFDbkYsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxVQUFVLENBQUM7SUFDOUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxVQUFVLENBQUM7SUFDOUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxVQUFVLENBQUM7SUFDOUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxVQUFVLENBQUM7SUFDOUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFDakYsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBSTtJQUN0QixRQUFRLElBQUksRUFBRTtRQUNiLEtBQUssV0FBVztZQUNmLE9BQU8sTUFBTSxDQUFDO1FBQ2YsS0FBSyxNQUFNO1lBQ1YsT0FBTyxPQUFPLENBQUM7UUFDaEIsS0FBSyxhQUFhO1lBQ2pCLE9BQU8sU0FBUyxDQUFDO1FBQ2xCLEtBQUssU0FBUztZQUNiLE9BQU8sTUFBTSxDQUFDO1FBQ2YsS0FBSyxTQUFTO1lBQ2IsT0FBTyxRQUFRLENBQUE7UUFDaEIsS0FBSyxTQUFTO1lBQ2IsT0FBTyxRQUFRLENBQUE7UUFDaEIsS0FBSyxTQUFTO1lBQ2IsT0FBTyxNQUFNLENBQUE7UUFDZCxLQUFLLFVBQVU7WUFDZCxPQUFPLFNBQVMsQ0FBQztRQUNsQixLQUFLLFVBQVU7WUFDZCxPQUFPLFNBQVMsQ0FBQztRQUNsQixLQUFLLFNBQVM7WUFDYixPQUFPLFNBQVMsQ0FBQztRQUNsQixLQUFLLEtBQUs7WUFDVCxPQUFPLFNBQVMsQ0FBQztRQUNsQjtZQUNDLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDRixDQUFDIn0=\",\"filename\":\"/xsink/factions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":617}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const [id, desc, type, duration, port = null] = ns.args;\\n    // Fake a hack/grow/weaken job\\n    const start = performance.now();\\n    await ns.sleep(duration);\\n    const end = performance.now();\\n    // Report back to the manager\\n    if (port != null)\\n        await ns.writePort(port, JSON.stringify({ id: id, desc: desc, type: type, start: start, end: end }));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFrZWpvYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9mYWtlam9iLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFFeEQsOEJBQThCO0lBQzlCLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNoQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekIsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRTlCLDZCQUE2QjtJQUM3QixJQUFJLElBQUksSUFBSSxJQUFJO1FBQ2YsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZHLENBQUMifQ==\",\"filename\":\"/xsink/fakejob.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetAllServers } from \\\"utils.js\\\";\\nlet blacklist = [];\\nexport async function main(ns) {\\n    if (ns.args[0] == 'debug') {\\n        ns.tprint(HammingEncode(28095708441));\\n        return;\\n    }\\n    let found = 0;\\n    const servers = GetAllServers(ns);\\n    for (let server of servers) {\\n        let contracts = ns.ls(server);\\n        //let contracts = ns.ls(server, \\\".cct\\\");\\n        for (let contract of contracts) {\\n            if (!contract.endsWith('.cct'))\\n                continue;\\n            found++;\\n            const type = ns.codingcontract.getContractType(contract, server);\\n            const data = ns.codingcontract.getData(contract, server);\\n            const didSolve = await solve(type, data, server, contract, ns);\\n            if (didSolve)\\n                ns.tprint(`INFO: ` + didSolve);\\n            else\\n                ns.tprint(`FAIL: ${server} - ${contract} - ${type} - ${didSolve || \\\"FAILED!\\\"}`);\\n            await ns.sleep(100);\\n        }\\n    }\\n    if (found > 0)\\n        ns.tprint(`Found ${found} contracts`);\\n}\\nasync function solve(type, data, server, contract, ns) {\\n    let solution = 'none';\\n    ns.tprint(type);\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            solution = maxProfit([1, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            solution = maxProfit([Math.ceil(data.length / 2), data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            solution = maxProfit([2, data]);\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            solution = maxProfit(data);\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            solution = solveTriangleSum(data, ns);\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            solution = uniquePathsI(data);\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            solution = uniquePathsII(data);\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            solution = generateIps(data);\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            solution = factor3(data);\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            solution = spiral(data);\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            solution = mergeOverlap(data);\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            solution = solverWaysToExpress(ns, data);\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            solution = solverLargestSubset(ns, data);\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            solution = SanitizeParensSolver(data);\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            solution = solverArrayJumpingGame(data);\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            solution = solverWaysToSum(data);\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + solveWaysToSumII(data));\\n            solution = solveWaysToSumII(data);\\n            break;\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\n            //ns.tprint('INFO: data=', data);\\n            //ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + HammingEncode(data));\\n            solution = HammingEncode(data);\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + HammingDecode(data));\\n            solution = HammingDecode(data);\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + ShortestPathInAGrid(data));\\n            solution = ShortestPathInAGrid(data);\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + solverArrayJumpingGameII(data));\\n            solution = solverArrayJumpingGameII(data);\\n            break;\\n        case \\\"Compression II: LZ Decompression\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + comprLZDecode(data));\\n            solution = comprLZDecode(data);\\n            break;\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + coloringGraph(data));\\n            solution = coloringGraph(data);\\n            break;\\n        case \\\"Compression III: LZ Compression\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + comprLZEncode(data));\\n            solution = comprLZEncode(data);\\n            break;\\n        case \\\"Compression I: RLE Compression\\\":\\n            //ns.tprint('INFO: data=', data);\\n            //ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + RLEencode(data));\\n            solution = RLEencode(data);\\n            break;\\n        case \\\"Encryption I: Caesar Cipher\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + caesarCipher(data));\\n            solution = caesarCipher(data);\\n            break;\\n        case \\\"Encryption II: Vigenère Cipher\\\":\\n            // ns.tprint('INFO: data=', data);\\n            // ns.tprint('WARN: ATTEMPT for ' + type + ' : ' + vignereCipher(data));\\n            solution = vignereCipher(data);\\n            break;\\n    }\\n    if (solution == 'none')\\n        ns.tprint('ERROR: NO SOLVER FOR ' + contract + ' ' + solution);\\n    if (solution == 'none') {\\n        return \\\"\\\";\\n    }\\n    else {\\n        var ret = blacklist.includes(contract) ? '' : ns.codingcontract.attempt(solution, contract, server, { returnReward: true });\\n        if (ret == '') {\\n            blacklist.push(contract);\\n            ns.tprint('FAILED TO SOLVE: ' + contract + ' type: ' + type + ' data: ' + data + ' attempted solution: ' + solution);\\n        }\\n        else {\\n            return ret;\\n        }\\n    }\\n}\\nfunction vignereCipher(data) {\\n    const cipher = [...data[0]]\\n        .map((a, i) => {\\n        return a === \\\" \\\"\\n            ? a\\n            : String.fromCharCode(((a.charCodeAt(0) - 2 * 65 + data[1].charCodeAt(i % data[1].length)) % 26) + 65);\\n    })\\n        .join(\\\"\\\");\\n    return cipher;\\n}\\nfunction caesarCipher(data) {\\n    const cipher = [...data[0]]\\n        .map((a) => (a === \\\" \\\" ? a : String.fromCharCode(((a.charCodeAt(0) - 65 - data[1] + 26) % 26) + 65)))\\n        .join(\\\"\\\");\\n    return cipher;\\n}\\nfunction solverArrayJumpingGameII(arrayData) {\\n    let n = arrayData.length;\\n    let reach = 0;\\n    let jumps = 0;\\n    let lastJump = -1;\\n    while (reach < n - 1) {\\n        let jumpedFrom = -1;\\n        for (let i = reach; i > lastJump; i--) {\\n            if (i + arrayData[i] > reach) {\\n                reach = i + arrayData[i];\\n                jumpedFrom = i;\\n            }\\n        }\\n        if (jumpedFrom === -1) {\\n            jumps = 0;\\n            break;\\n        }\\n        lastJump = jumpedFrom;\\n        jumps++;\\n    }\\n    return jumps;\\n}\\nfunction ShortestPathInAGrid(data) {\\n    let H = data.length, W = data[0].length;\\n    let dist = Array.from(Array(H), () => Array(W).fill(Number.POSITIVE_INFINITY));\\n    dist[0][0] = 0;\\n    let queue = [[0, 0]];\\n    while (queue.length > 0) {\\n        let [i, j] = queue.shift();\\n        let d = dist[i][j];\\n        if (i > 0 && d + 1 < dist[i - 1][j] && data[i - 1][j] !== 1) {\\n            dist[i - 1][j] = d + 1;\\n            queue.push([i - 1, j]);\\n        }\\n        if (i < H - 1 && d + 1 < dist[i + 1][j] && data[i + 1][j] !== 1) {\\n            dist[i + 1][j] = d + 1;\\n            queue.push([i + 1, j]);\\n        }\\n        if (j > 0 && d + 1 < dist[i][j - 1] && data[i][j - 1] !== 1) {\\n            dist[i][j - 1] = d + 1;\\n            queue.push([i, j - 1]);\\n        }\\n        if (j < W - 1 && d + 1 < dist[i][j + 1] && data[i][j + 1] !== 1) {\\n            dist[i][j + 1] = d + 1;\\n            queue.push([i, j + 1]);\\n        }\\n    }\\n    let path = \\\"\\\";\\n    if (Number.isFinite(dist[H - 1][W - 1])) {\\n        let i = H - 1, j = W - 1;\\n        while (i !== 0 || j !== 0) {\\n            let d = dist[i][j];\\n            let new_i = 0, new_j = 0, dir = \\\"\\\";\\n            if (i > 0 && dist[i - 1][j] < d) {\\n                d = dist[i - 1][j];\\n                new_i = i - 1;\\n                new_j = j;\\n                dir = \\\"D\\\";\\n            }\\n            if (i < H - 1 && dist[i + 1][j] < d) {\\n                d = dist[i + 1][j];\\n                new_i = i + 1;\\n                new_j = j;\\n                dir = \\\"U\\\";\\n            }\\n            if (j > 0 && dist[i][j - 1] < d) {\\n                d = dist[i][j - 1];\\n                new_i = i;\\n                new_j = j - 1;\\n                dir = \\\"R\\\";\\n            }\\n            if (j < W - 1 && dist[i][j + 1] < d) {\\n                d = dist[i][j + 1];\\n                new_i = i;\\n                new_j = j + 1;\\n                dir = \\\"L\\\";\\n            }\\n            i = new_i;\\n            j = new_j;\\n            path = dir + path;\\n        }\\n    }\\n    return path;\\n}\\n/**\\n *\\n * @param {number[][]} input [targetNumber,[available numbers]]\\n * @returns\\n */\\nfunction solveWaysToSumII(input) {\\n    /**\\n     *\\n     * @param {number} target\\n     * @param {number[]} nums\\n     * @returns\\n     */\\n    let n = input[0];\\n    let nums = input[1];\\n    let table = new Array(n + 1);\\n    for (let i = 0; i < n + 1; i++) {\\n        table[i] = 0;\\n    }\\n    table[0] = 1;\\n    for (let i of nums) {\\n        if (i > n) {\\n            continue;\\n        }\\n        for (let j = i; j <= n; j++) {\\n            table[j] += table[j - i];\\n        }\\n        console.log(table);\\n    }\\n    return table[n];\\n}\\nfunction waysToSum2(arrayData, target) {\\n    // If n is 0 then there is 1 solution\\n    // (do not include any coin)\\n    if (target == 0)\\n        return 1;\\n    // If n is less than 0 then no\\n    // solution exists\\n    if (target < 0)\\n        return 0;\\n    // If there are no coins and n\\n    // is greater than 0, then no\\n    // solution exist\\n    if (arrayData.length <= 0 && target >= 1)\\n        return 0;\\n    // count is sum of solutions (i)\\n    // including S[m-1] (ii) excluding S[m-1]\\n    return waysToSum2(arrayData, arrayData.length - 1, target) +\\n        waysToSum2(arrayData, arrayData.length, target - arrayData[arrayData.length - 1]);\\n}\\n//ALGORITHMIC STOCK TRADER\\nfunction maxProfit(arrayData) {\\n    let i, j, k;\\n    let maxTrades = arrayData[0];\\n    let stockPrices = arrayData[1];\\n    let tempStr = \\\"[0\\\";\\n    for (i = 0; i < stockPrices.length; i++) {\\n        tempStr += \\\",0\\\";\\n    }\\n    tempStr += \\\"]\\\";\\n    let tempArr = \\\"[\\\" + tempStr;\\n    for (i = 0; i < maxTrades - 1; i++) {\\n        tempArr += \\\",\\\" + tempStr;\\n    }\\n    tempArr += \\\"]\\\";\\n    let highestProfit = JSON.parse(tempArr);\\n    for (i = 0; i < maxTrades; i++) {\\n        for (j = 0; j < stockPrices.length; j++) { // Buy / Start\\n            for (k = j; k < stockPrices.length; k++) { // Sell / End\\n                if (i > 0 && j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && j > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (i > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else if (j > 0 && k > 0) {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n                }\\n                else {\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n                }\\n            }\\n        }\\n    }\\n    return highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n//SMALLEST TRIANGLE SUM\\nfunction solveTriangleSum(arrayData, ns) {\\n    let triangle = arrayData;\\n    let nextArray;\\n    let previousArray = triangle[0];\\n    for (let i = 1; i < triangle.length; i++) {\\n        nextArray = [];\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            if (j == 0) {\\n                nextArray.push(previousArray[j] + triangle[i][j]);\\n            }\\n            else if (j == triangle[i].length - 1) {\\n                nextArray.push(previousArray[j - 1] + triangle[i][j]);\\n            }\\n            else {\\n                nextArray.push(Math.min(previousArray[j], previousArray[j - 1]) + triangle[i][j]);\\n            }\\n        }\\n        previousArray = nextArray;\\n    }\\n    return Math.min.apply(null, nextArray);\\n}\\n//UNIQUE PATHS IN A GRID\\nfunction uniquePathsI(grid) {\\n    const rightMoves = grid[0] - 1;\\n    const downMoves = grid[1] - 1;\\n    return Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n}\\nfunction factorial(n) {\\n    return factorialDivision(n, 1);\\n}\\nfunction factorialDivision(n, d) {\\n    if (n == 0 || n == 1 || n == d)\\n        return 1;\\n    return factorialDivision(n - 1, d) * n;\\n}\\nfunction uniquePathsII(grid, ignoreFirst = false, ignoreLast = false) {\\n    const rightMoves = grid[0].length - 1;\\n    const downMoves = grid.length - 1;\\n    let totalPossiblePaths = Math.round(factorialDivision(rightMoves + downMoves, rightMoves) / (factorial(downMoves)));\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[i].length; j++) {\\n            if (grid[i][j] == 1 && (!ignoreFirst || (i != 0 || j != 0)) && (!ignoreLast || (i != grid.length - 1 || j != grid[i].length - 1))) {\\n                const newArray = [];\\n                for (let k = i; k < grid.length; k++) {\\n                    newArray.push(grid[k].slice(j, grid[i].length));\\n                }\\n                let removedPaths = uniquePathsII(newArray, true, ignoreLast);\\n                removedPaths *= uniquePathsI([i + 1, j + 1]);\\n                totalPossiblePaths -= removedPaths;\\n            }\\n        }\\n    }\\n    return totalPossiblePaths;\\n}\\n//GENERATE IP ADDRESSES\\nfunction generateIps(num) {\\n    num = num.toString();\\n    const length = num.length;\\n    const ips = [];\\n    for (let i = 1; i < length - 2; i++) {\\n        for (let j = i + 1; j < length - 1; j++) {\\n            for (let k = j + 1; k < length; k++) {\\n                const ip = [\\n                    num.slice(0, i),\\n                    num.slice(i, j),\\n                    num.slice(j, k),\\n                    num.slice(k, num.length)\\n                ];\\n                let isValid = true;\\n                ip.forEach(seg => {\\n                    isValid = isValid && isValidIpSegment(seg);\\n                });\\n                if (isValid)\\n                    ips.push(ip.join(\\\".\\\"));\\n            }\\n        }\\n    }\\n    return ips.toString();\\n}\\nfunction isValidIpSegment(segment) {\\n    if (segment[0] == \\\"0\\\" && segment != \\\"0\\\")\\n        return false;\\n    segment = Number(segment);\\n    if (segment < 0 || segment > 255)\\n        return false;\\n    return true;\\n}\\n//GREATEST FACTOR\\nfunction factor3(n) {\\n    // Returns all the prime factors of a positive integer\\n    let factors = new Array();\\n    let d = 2;\\n    while (n > 1) {\\n        while (n % d == 0) {\\n            factors.push(d);\\n            n /= d;\\n        }\\n        d = d + 1;\\n        if (d * d > n) {\\n            if (n > 1)\\n                factors.push(n);\\n            break;\\n        }\\n    }\\n    if (factors.length > 0)\\n        return factors.pop();\\n    return '';\\n}\\n//SPIRALIZE Matrix\\nfunction spiral(arr, accum = []) {\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.shift());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, arr[0].length - 1));\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(arr.pop().reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    accum = accum.concat(column(arr, 0).reverse());\\n    if (arr.length === 0 || arr[0].length === 0) {\\n        return accum;\\n    }\\n    return spiral(arr, accum);\\n}\\nfunction column(arr, index) {\\n    const res = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        const elm = arr[i].splice(index, 1)[0];\\n        if (elm) {\\n            res.push(elm);\\n        }\\n    }\\n    return res;\\n}\\n// Merge Overlapping Intervals\\nfunction mergeOverlap(intervals) {\\n    intervals.sort(([minA], [minB]) => minA - minB);\\n    for (let i = 0; i < intervals.length; i++) {\\n        for (let j = i + 1; j < intervals.length; j++) {\\n            const [min, max] = intervals[i];\\n            const [laterMin, laterMax] = intervals[j];\\n            if (laterMin <= max) {\\n                const newMax = laterMax > max ? laterMax : max;\\n                const newInterval = [min, newMax];\\n                intervals[i] = newInterval;\\n                intervals.splice(j, 1);\\n                j = i;\\n            }\\n        }\\n    }\\n    return intervals;\\n}\\nfunction SanitizeParensSolver(data) {\\n    var left = 0;\\n    var right = 0;\\n    var res = [];\\n    for (var i = 0; i < data.length; ++i) {\\n        if (data[i] === '(') {\\n            ++left;\\n        }\\n        else if (data[i] === ')') {\\n            left > 0 ? --left : ++right;\\n        }\\n    }\\n    function dfs(pair, index, left, right, s, solution, res) {\\n        if (s.length === index) {\\n            if (left === 0 && right === 0 && pair === 0) {\\n                for (var i = 0; i < res.length; i++) {\\n                    if (res[i] === solution) {\\n                        return;\\n                    }\\n                }\\n                res.push(solution);\\n            }\\n            return;\\n        }\\n        if (s[index] === '(') {\\n            if (left > 0) {\\n                dfs(pair, index + 1, left - 1, right, s, solution, res);\\n            }\\n            dfs(pair + 1, index + 1, left, right, s, solution + s[index], res);\\n        }\\n        else if (s[index] === ')') {\\n            if (right > 0)\\n                dfs(pair, index + 1, left, right - 1, s, solution, res);\\n            if (pair > 0)\\n                dfs(pair - 1, index + 1, left, right, s, solution + s[index], res);\\n        }\\n        else {\\n            dfs(pair, index + 1, left, right, s, solution + s[index], res);\\n        }\\n    }\\n    dfs(0, 0, left, right, data, '', res);\\n    return res;\\n}\\nfunction solverArrayJumpingGame(arrayData) {\\n    if (arrayData[0] == 0)\\n        return '0';\\n    let arrayJump = [1];\\n    for (let n = 0; n < arrayData.length; n++) {\\n        if (arrayJump[n]) {\\n            for (let p = n; p <= Math.min(n + arrayData[n], arrayData.length - 1); p++) { // fixed off-by-one error\\n                arrayJump[p] = 1;\\n            }\\n        }\\n    }\\n    return 0 + Boolean(arrayJump[arrayData.length - 1]); // thanks /u/Kalumniatoris\\n}\\nfunction solverWaysToSum(arrayData) {\\n    var ways = [];\\n    ways[0] = 1;\\n    for (var a = 1; a <= arrayData; a++) {\\n        ways[a] = 0;\\n    }\\n    for (var i = 1; i <= arrayData - 1; i++) {\\n        for (var j = i; j <= arrayData; j++) {\\n            ways[j] += ways[j - i];\\n        }\\n    }\\n    return ways[arrayData];\\n}\\nfunction solverWaysToExpress(ns, arrayData) {\\n    let i, j, k;\\n    let operatorList = [\\\"\\\", \\\"+\\\", \\\"-\\\", \\\"*\\\"];\\n    let validExpressions = [];\\n    let tempPermutations = Math.pow(4, (arrayData[0].length - 1));\\n    for (i = 0; i < tempPermutations; i++) {\\n        if (!Boolean(i % 100000)) {\\n            //ns.tprint(i + \\\"/\\\" + tempPermutations + \\\", \\\" + validExpressions.length + \\\" found.\\\");\\n            //await ns.sleep(10);\\n        }\\n        let arraySummands = [];\\n        let candidateExpression = arrayData[0].substr(0, 1);\\n        arraySummands[0] = parseInt(arrayData[0].substr(0, 1));\\n        for (j = 1; j < arrayData[0].length; j++) {\\n            candidateExpression += operatorList[(i >> ((j - 1) * 2)) % 4] + arrayData[0].substr(j, 1);\\n            let rollingOperator = operatorList[(i >> ((j - 1) * 2)) % 4];\\n            let rollingOperand = parseInt(arrayData[0].substr(j, 1));\\n            switch (rollingOperator) {\\n                case \\\"\\\":\\n                    rollingOperand = rollingOperand * (arraySummands[arraySummands.length - 1] / Math.abs(arraySummands[arraySummands.length - 1]));\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * 10 + rollingOperand;\\n                    break;\\n                case \\\"+\\\":\\n                    arraySummands[arraySummands.length] = rollingOperand;\\n                    break;\\n                case \\\"-\\\":\\n                    arraySummands[arraySummands.length] = 0 - rollingOperand;\\n                    break;\\n                case \\\"*\\\":\\n                    while (j < arrayData[0].length - 1 && ((i >> (j * 2)) % 4) === 0) {\\n                        j += 1;\\n                        candidateExpression += arrayData[0].substr(j, 1);\\n                        rollingOperand = rollingOperand * 10 + parseInt(arrayData[0].substr(j, 1));\\n                    }\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * rollingOperand;\\n                    break;\\n            }\\n        }\\n        let rollingTotal = arraySummands.reduce(function (a, b) { return a + b; });\\n        if (arrayData[1] === rollingTotal) {\\n            validExpressions[validExpressions.length] = candidateExpression;\\n        }\\n    }\\n    return JSON.stringify(validExpressions);\\n}\\nfunction solverLargestSubset(ns, arrayData) {\\n    let highestSubset = arrayData[0];\\n    for (let i = 0; i < arrayData.length; i++) {\\n        for (let j = i; j < arrayData.length; j++) {\\n            let tempSubset = 0;\\n            for (let k = i; k <= j; k++) {\\n                tempSubset += arrayData[k];\\n            }\\n            if (highestSubset < tempSubset) {\\n                highestSubset = tempSubset;\\n            }\\n        }\\n    }\\n    return highestSubset;\\n}\\nexport function HammingSumOfParity(_lengthOfDBits) {\\n    return (_lengthOfDBits < 3 || _lengthOfDBits == 0)\\n        ? ((_lengthOfDBits == 0) ? 0 : _lengthOfDBits + 1)\\n        // the Math.log2-math will only work, if the length is greater egqual 3 otherwise it's \\\"kinda broken\\\" :D\\n        : ((Math.ceil(Math.log2(_lengthOfDBits * 2))) <= Math.ceil(Math.log2(1 + _lengthOfDBits + Math.ceil(Math.log2(_lengthOfDBits)))))\\n            ? Math.ceil(Math.log2(_lengthOfDBits) + 1)\\n            : Math.ceil(Math.log2(_lengthOfDBits));\\n}\\nexport function HammingEncode(value) {\\n    let _dataBits = value.toString(2); // change value into string of binary bits\\n    let _sum_parity = HammingSumOfParity(_dataBits.length); // get the sum of needed parity bits\\n    let _data = _dataBits.split(\\\"\\\"); // create new array with the given data bits\\n    let _build = []; // init new array for building\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\\n    // count specified data in the array, for later use\\n    _build.push(\\\"x\\\", \\\"x\\\", ..._data.splice(0, 1)); // pre-build the \\\"pre-build\\\"\\n    for (let i = 2; i < _sum_parity; i++) { // add new paritybits and the corresponding data bits\\n        _build.push(\\\"x\\\", ..._data.splice(0, Math.pow(2, i) - 1));\\n    }\\n    // \\\"pre\\\"-build my array, now the \\\"calculation\\\"... get the paritybits working\\n    for (let index of _build.reduce(function (a, e, i) { if (e == \\\"x\\\")\\n        a.push(i); return a; }, [])) {\\n        let _tempcount = index + 1; // set the \\\"stepsize\\\"\\n        let _temparray = []; // temporary array to store the corresponding bits\\n        let _tempdata = [..._build]; // copy the \\\"build\\\"\\n        while (_tempdata[index] !== undefined) { // as long as there are bits, do \\\"cut\\\"\\n            let _temp = _tempdata.splice(index, _tempcount * 2); // get x*2 bits, then\\n            _temparray.push(..._temp.splice(0, _tempcount)); // .. cut them and keep first half\\n        }\\n        _temparray.splice(0, 1); // remove first bit, which is the parity one\\n        _build[index] = ((count(_temparray, \\\"1\\\")) % 2.).toString(); // simple count and remainder of 2 with \\\"toString\\\" to store it\\n    }\\n    _build.unshift(((count(_build, \\\"1\\\")) % 2.).toString()); // adding first index, which is done as last element\\n    return _build.join(\\\"\\\"); // return a string again\\n}\\nexport function HammingDecode(_data) {\\n    let _build = _data.split(\\\"\\\"); // ye, an array again\\n    let _testArray = []; //for the \\\"tests\\\". if any is false, it is been altered data, will check and fix it later\\n    let _sum_parity = Math.ceil(Math.log2(_data.length)); // excluding first bit\\n    let count = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0); // count.... again ;)\\n    let _overallParity = _build.splice(0, 1).join(\\\"\\\"); // remove first index, for checking and to use the _build properly later\\n    _testArray.push((_overallParity == (count(_build, \\\"1\\\") % 2).toString()) ? true : false); // checking the \\\"overall\\\" parity\\n    for (var i = 0; i < _sum_parity; i++) {\\n        let _tempIndex = Math.pow(2, i) - 1; // get the parityBits Index\\n        let _tempStep = _tempIndex + 1; // set the stepsize\\n        let _tempData = [..._build]; // \\\"copy\\\" the build-data\\n        let _tempArray = []; // init empty array for \\\"testing\\\"\\n        while (_tempData[_tempIndex] != undefined) { // extract from the copied data until the \\\"starting\\\" index is undefined\\n            var _temp = [..._tempData.splice(_tempIndex, _tempStep * 2)]; // extract 2*stepsize\\n            _tempArray.push(..._temp.splice(0, _tempStep)); // and cut again for keeping first half\\n        }\\n        let _tempParity = _tempArray.shift(); // and cut the first index for checking with the rest of the data\\n        _testArray.push(((_tempParity == (count(_tempArray, \\\"1\\\") % 2).toString())) ? true : false); // is the _tempParity the calculated data?\\n    }\\n    let _fixIndex = 0; // init the \\\"fixing\\\" index amd start with -1, bc we already removed the first bit\\n    for (let i = 1; i < _sum_parity + 1; i++) {\\n        _fixIndex += (_testArray[i]) ? 0 : (Math.pow(2, i) / 2);\\n    }\\n    _build.unshift(_overallParity);\\n    // fix the actual hammingcode if there is an error\\n    if (_fixIndex > 0 && _testArray[0] == false) { // if the overall is false and the sum of calculated values is greater equal 0, fix the corresponding hamming-bit\\n        _build[_fixIndex] = (_build[_fixIndex] == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\n    }\\n    else if (_testArray[0] == false) { // otherwise, if the the overall_parity is only wrong, fix that one\\n        _overallParity = (_overallParity == \\\"0\\\") ? \\\"1\\\" : \\\"0\\\";\\n    }\\n    else if (_testArray[0] == true && _testArray.some((truth) => truth == false)) {\\n        return 0; // uhm, there's some strange going on... 2 bits are altered? How?\\n    }\\n    // oof.. halfway through... we fixed the altered bit, now \\\"extract\\\" the parity from the build and parse the binary data\\n    for (var i = _sum_parity; i >= 0; i--) { // start from the last parity down the starting one\\n        _build.splice(Math.pow(2, i), 1);\\n    }\\n    _build.splice(0, 1);\\n    return parseInt(_build.join(\\\"\\\"), 2);\\n}\\n// decompress LZ-compressed string, or return null if input is invalid\\nfunction comprLZDecode(compr) {\\n    let plain = \\\"\\\";\\n    for (let i = 0; i < compr.length;) {\\n        const literal_length = compr.charCodeAt(i) - 0x30;\\n        if (literal_length < 0 || literal_length > 9 || i + 1 + literal_length > compr.length) {\\n            return null;\\n        }\\n        plain += compr.substring(i + 1, i + 1 + literal_length);\\n        i += 1 + literal_length;\\n        if (i >= compr.length) {\\n            break;\\n        }\\n        const backref_length = compr.charCodeAt(i) - 0x30;\\n        if (backref_length < 0 || backref_length > 9) {\\n            return null;\\n        }\\n        else if (backref_length === 0) {\\n            ++i;\\n        }\\n        else {\\n            if (i + 1 >= compr.length) {\\n                return null;\\n            }\\n            const backref_offset = compr.charCodeAt(i + 1) - 0x30;\\n            if ((backref_length > 0 && (backref_offset < 1 || backref_offset > 9)) || backref_offset > plain.length) {\\n                return null;\\n            }\\n            for (let j = 0; j < backref_length; ++j) {\\n                plain += plain[plain.length - backref_offset];\\n            }\\n            i += 2;\\n        }\\n    }\\n    return plain;\\n}\\nfunction coloringGraph(data) {\\n    //Helper function to get neighbourhood of a vertex\\n    function neighbourhood(vertex) {\\n        const adjLeft = data[1].filter(([a, _]) => a == vertex).map(([_, b]) => b);\\n        const adjRight = data[1].filter(([_, b]) => b == vertex).map(([a, _]) => a);\\n        return adjLeft.concat(adjRight);\\n    }\\n    //Verify that there is no solution by attempting to create a proper 2-coloring.\\n    const coloring = Array(data[0]).fill(undefined);\\n    while (coloring.some((val) => val === undefined)) {\\n        //Color a vertex in the graph\\n        const initialVertex = coloring.findIndex((val) => val === undefined);\\n        coloring[initialVertex] = 0;\\n        const frontier = [initialVertex];\\n        //Propogate the coloring throughout the component containing v greedily\\n        while (frontier.length > 0) {\\n            const v = frontier.pop() || 0;\\n            const neighbors = neighbourhood(v);\\n            //For each vertex u adjacent to v\\n            for (const id in neighbors) {\\n                const u = neighbors[id];\\n                //Set the color of u to the opposite of v's color if it is new,\\n                //then add u to the frontier to continue the algorithm.\\n                if (coloring[u] === undefined) {\\n                    if (coloring[v] === 0)\\n                        coloring[u] = 1;\\n                    else\\n                        coloring[u] = 0;\\n                    frontier.push(u);\\n                }\\n                //Assert u,v do not have the same color\\n                else if (coloring[u] === coloring[v]) {\\n                    //If u,v do have the same color, no proper 2-coloring exists, meaning\\n                    //the player was correct to say there is no proper 2-coloring of the graph.\\n                    return \\\"[]\\\";\\n                }\\n            }\\n        }\\n    }\\n    return coloring;\\n}\\n// compress plaintest string\\nexport function comprLZEncode(plain) {\\n    // for state[i][j]:\\n    //      if i is 0, we're adding a literal of length j\\n    //      else, we're adding a backreference of offset i and length j\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\n    let new_state = Array.from(Array(10), () => Array(10));\\n    function set(state, i, j, str) {\\n        const current = state[i][j];\\n        if (current == null || str.length < current.length) {\\n            state[i][j] = str;\\n        }\\n        else if (str.length === current.length && Math.random() < 0.5) {\\n            // if two strings are the same length, pick randomly so that\\n            // we generate more possible inputs to Compression II\\n            state[i][j] = str;\\n        }\\n    }\\n    // initial state is a literal of length 1\\n    cur_state[0][1] = \\\"\\\";\\n    for (let i = 1; i < plain.length; ++i) {\\n        for (const row of new_state) {\\n            row.fill(null);\\n        }\\n        const c = plain[i];\\n        // handle literals\\n        for (let length = 1; length <= 9; ++length) {\\n            const string = cur_state[0][length];\\n            if (string == null) {\\n                continue;\\n            }\\n            if (length < 9) {\\n                // extend current literal\\n                set(new_state, 0, length + 1, string);\\n            }\\n            else {\\n                // start new literal\\n                set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\n            }\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\n                if (plain[i - offset] === c) {\\n                    // start new backreference\\n                    set(new_state, offset, 1, string + String(length) + plain.substring(i - length, i));\\n                }\\n            }\\n        }\\n        // handle backreferences\\n        for (let offset = 1; offset <= 9; ++offset) {\\n            for (let length = 1; length <= 9; ++length) {\\n                const string = cur_state[offset][length];\\n                if (string == null) {\\n                    continue;\\n                }\\n                if (plain[i - offset] === c) {\\n                    if (length < 9) {\\n                        // extend current backreference\\n                        set(new_state, offset, length + 1, string);\\n                    }\\n                    else {\\n                        // start new backreference\\n                        set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\n                    }\\n                }\\n                // start new literal\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\n                // end current backreference and start new backreference\\n                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\n                    if (plain[i - new_offset] === c) {\\n                        set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\n                    }\\n                }\\n            }\\n        }\\n        const tmp_state = new_state;\\n        new_state = cur_state;\\n        cur_state = tmp_state;\\n    }\\n    let result = null;\\n    for (let len = 1; len <= 9; ++len) {\\n        let string = cur_state[0][len];\\n        if (string == null) {\\n            continue;\\n        }\\n        string += String(len) + plain.substring(plain.length - len, plain.length);\\n        if (result == null || string.length < result.length) {\\n            result = string;\\n        }\\n        else if (string.length == result.length && Math.random() < 0.5) {\\n            result = string;\\n        }\\n    }\\n    for (let offset = 1; offset <= 9; ++offset) {\\n        for (let len = 1; len <= 9; ++len) {\\n            let string = cur_state[offset][len];\\n            if (string == null) {\\n                continue;\\n            }\\n            string += String(len) + \\\"\\\" + String(offset);\\n            if (result == null || string.length < result.length) {\\n                result = string;\\n            }\\n            else if (string.length == result.length && Math.random() < 0.5) {\\n                result = string;\\n            }\\n        }\\n    }\\n    return result ?? \\\"\\\";\\n}\\nfunction RLEencode(data) {\\n    let chars = Array.from(data);\\n    let answer = '';\\n    let current = undefined;\\n    let count = 0;\\n    while (chars.length > 0) {\\n        let char = chars.shift();\\n        switch (current) {\\n            case undefined:\\n                current = char;\\n                count = 1;\\n                break;\\n            case char:\\n                if (count == 9) {\\n                    answer = `${answer}${count}${current}`;\\n                    count = 0;\\n                }\\n                count++;\\n                break;\\n            default:\\n                answer = `${answer}${count}${current}`;\\n                current = char;\\n                count = 1;\\n                break;\\n        }\\n    }\\n    answer = `${answer}${count}${current}`;\\n    return answer;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2NjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXpDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUVuQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLEVBQUU7UUFDMUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN0QyxPQUFPO0tBQ1A7SUFHRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDM0IsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5Qix3Q0FBd0M7UUFDeEMsS0FBSyxJQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUFFLFNBQVM7WUFDekMsS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDakUsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3pELE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUUvRCxJQUFJLFFBQVE7Z0JBQ1gsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7O2dCQUUvQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsTUFBTSxNQUFNLFFBQVEsTUFBTSxJQUFJLE1BQU0sUUFBUSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7WUFFakYsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO0tBQ0Q7SUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDO1FBQ1osRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssWUFBWSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVELEtBQUssVUFBVSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUU7SUFDcEQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBQ3RCLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEIsUUFBUSxJQUFJLEVBQUU7UUFDYixLQUFLLDRCQUE0QjtZQUNoQyxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEMsTUFBTTtRQUNQLEtBQUssNkJBQTZCO1lBQ2pDLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6RCxNQUFNO1FBQ1AsS0FBSyw4QkFBOEI7WUFDbEMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU07UUFDUCxLQUFLLDZCQUE2QjtZQUNqQyxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLE1BQU07UUFDUCxLQUFLLGdDQUFnQztZQUNwQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLE1BQU07UUFDUCxLQUFLLDBCQUEwQjtZQUM5QixRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLE1BQU07UUFDUCxLQUFLLDJCQUEyQjtZQUMvQixRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLE1BQU07UUFDUCxLQUFLLHVCQUF1QjtZQUMzQixRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdCLE1BQU07UUFDUCxLQUFLLDJCQUEyQjtZQUMvQixRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLE1BQU07UUFDUCxLQUFLLGtCQUFrQjtZQUN0QixRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLE1BQU07UUFDUCxLQUFLLDZCQUE2QjtZQUNqQyxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLE1BQU07UUFDUCxLQUFLLGlDQUFpQztZQUNyQyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3pDLE1BQU07UUFDUCxLQUFLLDJCQUEyQjtZQUMvQixRQUFRLEdBQUcsbUJBQW1CLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3pDLE1BQU07UUFDUCxLQUFLLG9DQUFvQztZQUN4QyxRQUFRLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsTUFBTTtRQUNQLEtBQUssb0JBQW9CO1lBQ3hCLFFBQVEsR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUN2QyxNQUFNO1FBQ1AsS0FBSyxtQkFBbUI7WUFDdkIsUUFBUSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxNQUFNO1FBQ1AsS0FBSyxzQkFBc0I7WUFDMUIsa0NBQWtDO1lBQ2xDLDJFQUEyRTtZQUMzRSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsTUFBTTtRQUNQLEtBQUsseUNBQXlDO1lBQzdDLGlDQUFpQztZQUNqQyx1RUFBdUU7WUFDdkUsUUFBUSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixNQUFNO1FBQ1AsS0FBSyx5Q0FBeUM7WUFDN0Msa0NBQWtDO1lBQ2xDLHdFQUF3RTtZQUN4RSxRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLE1BQU07UUFDUCxLQUFLLHlCQUF5QjtZQUM3QixrQ0FBa0M7WUFDbEMsOEVBQThFO1lBQzlFLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxNQUFNO1FBQ1AsS0FBSyx1QkFBdUI7WUFDM0Isa0NBQWtDO1lBQ2xDLG1GQUFtRjtZQUNuRixRQUFRLEdBQUcsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUMsTUFBTTtRQUNQLEtBQUssa0NBQWtDO1lBQ3RDLGtDQUFrQztZQUNsQyx3RUFBd0U7WUFDeEUsUUFBUSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixNQUFNO1FBQ1AsS0FBSyw4QkFBOEI7WUFDbEMsa0NBQWtDO1lBQ2xDLHdFQUF3RTtZQUN4RSxRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLE1BQU07UUFDUCxLQUFLLGlDQUFpQztZQUNyQyxrQ0FBa0M7WUFDbEMsd0VBQXdFO1lBQ3hFLFFBQVEsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsTUFBTTtRQUNQLEtBQUssZ0NBQWdDO1lBQ3BDLGlDQUFpQztZQUNqQyxtRUFBbUU7WUFDbkUsUUFBUSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQixNQUFNO1FBQ1AsS0FBSyw2QkFBNkI7WUFDakMsa0NBQWtDO1lBQ2xDLHVFQUF1RTtZQUN2RSxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLE1BQU07UUFDUCxLQUFLLGdDQUFnQztZQUNwQyxrQ0FBa0M7WUFDbEMsd0VBQXdFO1lBQ3hFLFFBQVEsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsTUFBTTtLQUNQO0lBQ0QsSUFBSSxRQUFRLElBQUksTUFBTTtRQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLHVCQUF1QixHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFFaEUsSUFBSSxRQUFRLElBQUksTUFBTSxFQUFFO1FBQ3ZCLE9BQU8sRUFBRSxDQUFDO0tBQ1Y7U0FDSTtRQUNKLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1SCxJQUFJLEdBQUcsSUFBSSxFQUFFLEVBQUU7WUFDZCxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEdBQUcsUUFBUSxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsU0FBUyxHQUFHLElBQUksR0FBRyx1QkFBdUIsR0FBRyxRQUFRLENBQUMsQ0FBQztTQUNySDthQUNJO1lBQ0osT0FBTyxHQUFHLENBQUM7U0FDWDtLQUNEO0FBQ0YsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLElBQUk7SUFDMUIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDYixPQUFPLENBQUMsS0FBSyxHQUFHO1lBQ2YsQ0FBQyxDQUFDLENBQUM7WUFDSCxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNYLE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLElBQUk7SUFDekIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNwRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDWCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTLHdCQUF3QixDQUFDLFNBQVM7SUFDMUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsQixPQUFPLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRTtnQkFDN0IsS0FBSyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLFVBQVUsR0FBRyxDQUFDLENBQUM7YUFDZjtTQUNEO1FBQ0QsSUFBSSxVQUFVLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDdEIsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNWLE1BQU07U0FDTjtRQUNELFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDdEIsS0FBSyxFQUFFLENBQUM7S0FDUjtJQUNELE9BQU8sS0FBSyxDQUFBO0FBQ2IsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsSUFBSTtJQUNoQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3hDLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUMvRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDeEIsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5CLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDaEgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQUU7UUFDcEgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUNoSCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTtLQUNwSDtJQUVELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRW5CLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQzthQUFFO1lBQzdGLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO2FBQUU7WUFDakcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQzthQUFFO1lBQzdGLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO2FBQUU7WUFFakcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDckIsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7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U0FBUyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwSCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUV4QyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNsSSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Z0JBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUNoRDtnQkFFRCxJQUFJLFlBQVksR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDN0QsWUFBWSxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRTdD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QUMsR0FBRyxFQUFFLEtBQUssR0FBRyxFQUFFO0lBQzlCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDNUMsT0FBTyxLQUFLLENBQUM7S0FDYjtJQUNELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDNUMsT0FBTyxLQUFLLENBQUM7S0FDYjtJQUNELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDNUMsT0FBTyxLQUFLLENBQUM7S0FDYjtJQUNELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDNUMsT0FBTyxLQUFLLENBQUM7S0FDYjtJQUNELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUMvQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FB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QUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQywwQ0FBMEM7S0FDckk7SUFDRCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxpRkFBaUY7SUFDcEcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekMsU0FBUyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtLQUN2RDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDOUIsa0RBQWtEO0lBQ2xELElBQUksU0FBUyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUcsaUhBQWlIO1FBQ2hLLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7S0FDMUQ7U0FDSSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRSxtRUFBbUU7UUFDckcsY0FBYyxHQUFHLENBQUMsY0FBYyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQTtLQUNwRDtTQUNJLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxL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\",\"filename\":\"/xsink/cct.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:file:///1e21e2ce-3ba5-4f69-8e08-1a2e6e46a774\",\"moduleSequenceNumber\":297},{\"filename\":\"/xsink/cct.js\",\"url\":\"blob:file:///66722d3d-bd27-4641-af75-71ca61532727\",\"moduleSequenceNumber\":29203}],\"dependents\":[],\"ramUsage\":22,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    const [query, replace, replacement] = ns.args;\\n    let files = ns.ls('home');\\n    for (const file of files) {\\n        let data = ns.read(file);\\n        if (data.search(query) == -1) {\\n            // \\tns.tprint('FAIL: Could not find ' + query + ' in ' + file);\\n            continue;\\n        }\\n        ns.tprint('INFO: Found ' + query + ' in ' + file);\\n        if (replace != '/r')\\n            continue;\\n        ns.tprint('WARN: Replacing ' + query + ' by ' + replacement + ' in ' + file);\\n        data = data.replace(query, replacement);\\n        await ns.write(file, data, 'w');\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9maW5kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFFOUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN6QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUM3QiwrREFBK0Q7WUFDL0QsU0FBUztTQUNUO1FBQ0QsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztRQUVsRCxJQUFJLE9BQU8sSUFBSSxJQUFJO1lBQUUsU0FBUztRQUU5QixFQUFFLENBQUMsTUFBTSxDQUFDLGtCQUFrQixHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsV0FBVyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztRQUM3RSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDeEMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDaEM7QUFDRixDQUFDIn0=\",\"filename\":\"/xsink/find.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// --- CONFIG SECTION ---\\nconst testFile = \\\"manager.js\\\"; //File to run to initiate testing\\nconst testFileArgs = ['rho-construction', 1]; //Any arguments to be sent to the test file\\nconst testTimeLimit = 1000 * 60 * 60; //Graded time, default is 1hr.\\n// --- END CONFIG SECTION ---\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    let startTime = Date.now();\\n    let startMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n    ns.run(testFile, 1, ...testFileArgs);\\n    await ns.asleep(testTimeLimit);\\n    let finishTime = Date.now();\\n    let finishMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let message = `Finished testing after ${ns.nFormat((finishTime - startTime) / 1000, \\\"0:00:00\\\")}. Money increased by ${ns.nFormat(finishMoney - startMoney, \\\"$0.00a\\\")}, effective profit is ${ns.nFormat((finishMoney - startMoney) * 60000 / (finishTime - startTime), \\\"$0.00a\\\")}/min`;\\n    console.log(message);\\n    ns.tprint(message);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2dyYWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5QkFBeUI7QUFDekIsTUFBTSxRQUFRLEdBQUMsWUFBWSxDQUFDLENBQUMsaUNBQWlDO0FBQzlELE1BQU0sWUFBWSxHQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQywyQ0FBMkM7QUFDdkYsTUFBTSxhQUFhLEdBQUMsSUFBSSxHQUFDLEVBQUUsR0FBQyxFQUFFLENBQUMsQ0FBQyw4QkFBOEI7QUFDOUQsNkJBQTZCO0FBRzdCLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzNCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMzQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDLENBQUM7SUFDckMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQy9CLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM1QixJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFckQsSUFBSSxPQUFPLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDLEdBQUMsSUFBSSxFQUFDLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUMsVUFBVSxFQUFDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsR0FBQyxVQUFVLENBQUMsR0FBQyxLQUFLLEdBQUMsQ0FBQyxVQUFVLEdBQUMsU0FBUyxDQUFDLEVBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQTtJQUNyUSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckIsQ0FBQyJ9\",\"filename\":\"/xsink/grader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const GANGSTER_NAMES = [\\n    'Jeromy Gride',\\n    'Scott Dourque',\\n    'Shown Furcotte',\\n    'Dean Wesrey',\\n    'Mike Truk',\\n    'Dwigt Rortugal',\\n    'Tim Sandaele',\\n    'Karl Dandleton',\\n    'Mike Sernandez',\\n    'Sleve McDichael',\\n    'Onson Sweemey',\\n    'Darryl Archideld',\\n    'Anatoli Smorin',\\n    'Rey McSriff',\\n    'Glenallen Mixon',\\n    'Mario McRlwain',\\n    'Raul Chamgerlain',\\n    'Kevin Nogilny',\\n    'Tony Smehrik',\\n    'Bobson Dugnutt',\\n    'Willie Dustice',\\n    'Todd Bonzalez'\\n];\\nconst allowUpgrades = true;\\nconst allowAscension = true;\\nconst allowAugs = true;\\nconst EXTERNAL_FUNDING = 0; // A balance of zero means the gang will only spend what it makes on it's own. Anything over 0 is extra money that can be taken if/when available.\\nlet g_goals = undefined;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    if (ns.args[0] == 'names') {\\n        // //let names= Set.from(ns.gang.getMemberNames());\\n        // let names = new Set();\\n        // while ([...names].length < 12) {\\n        // \\tlet index = Math.floor(Math.random() * GANGSTER_NAMES.length);\\n        // \\tlet name = GANGSTER_NAMES[index];\\n        // \\tnames.add(name);\\n        // }\\n        let names = GetNames(ns);\\n        for (let name of names) {\\n            ns.tprint(name);\\n        }\\n        return;\\n    }\\n    g_goals = new GangGoals(ns);\\n    if (!ns.gang.inGang()) {\\n        let karma = ns.heart.break();\\n        const loop = ns.args[0] == 'loop';\\n        while (karma > -54000) {\\n            if (!loop)\\n                ns.tprint('ERROR: Not enough karma to create a gang yet' + karma);\\n            ns.print('ERROR: Not enough karma to create a gang yet ' + karma);\\n            if (loop) {\\n                ns.tail();\\n                await ns.sleep(5000);\\n                karma = ns.heart.break();\\n                continue;\\n            }\\n            return;\\n        }\\n        if (ns.singularity.checkFactionInvitations().includes('Slum Snakes'))\\n            ns.singularity.joinFaction('Slum Snakes');\\n        if (ns.getPlayer().factions.includes('Slum Snakes'))\\n            ns.gang.createGang('Slum Snakes');\\n        if (!ns.gang.inGang()) {\\n            ns.tprint('ERROR: Not in a gang, could not create gang, exiting');\\n            ns.print('ERROR: Not in a gang, could not create gang, exiting');\\n            return;\\n        }\\n    }\\n    ns.tail();\\n    let otherGangsInfoPrevCycle = undefined;\\n    let nextTick = undefined;\\n    let gangInfo = ns.gang.getGangInformation();\\n    let members = ns.gang.getMemberNames();\\n    AssignTasks(ns, members, gangInfo);\\n    while (true) {\\n        gangInfo = ns.gang.getGangInformation();\\n        // *** Recruitment ***\\n        await RecruitMembers(ns);\\n        // *** Get current gang member names and gangInfo ***\\n        members = ns.gang.getMemberNames();\\n        gangInfo = ns.gang.getGangInformation();\\n        //GangReport(ns, gangInfo);\\n        // if (gangInfo.wantedPenalty < 0.90 && gangInfo.wantedLevel > 1 && gangInfo.respect > 1) {\\n        // \\tns.print('FAIL: Wanted level is too high. This is unexpected, script is designed to avoid this.');\\n        // }\\n        // *** Automatic ascension ***\\n        // We prevent ascension if at the current rate we expect to get our next member soon\\n        const nextMemberTime = GetNextMemberTime(ns, members, gangInfo);\\n        const timeLock = Math.pow(2, (members.length + 1) * 0.7) * 1000;\\n        //ns.tprint('TimeLock: ' + ns.tFormat(timeLock));\\n        if (nextMemberTime != -1 || members.length == 12) {\\n            if (members.length < 12 && nextMemberTime < timeLock) {\\n                //ns.print('WARN: Ascension LOCKED, next: ' + ns.tFormat(nextMemberTime) + ' lock threshold: ' + ns.tFormat(timeLock));\\n            }\\n            else {\\n                //ns.print('INFO: Checking ascension, next: ' + ns.tFormat(nextMemberTime) + ' lock threshold: ' + ns.tFormat(timeLock));\\n                if (allowAscension) {\\n                    for (let i = 0; i < members.length; i++) {\\n                        const member = members[i];\\n                        AscendGangMember(ns, member);\\n                    }\\n                }\\n            }\\n        }\\n        // *** Equipement stuff ***\\n        if (allowUpgrades) {\\n            UpgradeEquipement(ns);\\n            //ns.print('');\\n        }\\n        // *** Territory warfaire ***\\n        // Detect new tick\\n        let otherGangsInfo = ns.gang.getOtherGangInformation();\\n        let newTick = false;\\n        let allowClash = true;\\n        for (let i = 0; i < Object.keys(otherGangsInfo).length; i++) {\\n            const gangName = Object.keys(otherGangsInfo)[i];\\n            if (gangName == gangInfo.faction)\\n                continue;\\n            if (ns.gang.getChanceToWinClash(gangName) < 0.55)\\n                allowClash = false;\\n            let gi = Object.values(otherGangsInfo)[i];\\n            let ogi = otherGangsInfoPrevCycle ? Object.values(otherGangsInfoPrevCycle)[i] : gi;\\n            let powerChanged = gi.power != ogi.power;\\n            let territoryChanged = gi.territory != ogi.territory;\\n            let changed = powerChanged || territoryChanged;\\n            if (changed) {\\n                newTick = true;\\n            }\\n        }\\n        // If we're in a new tick, take note of when next one is going to happen\\n        if (newTick) {\\n            //ns.print('WARN: -- NEW TICK DETECTED --');\\n            if (nextTick != undefined) {\\n                AssignTasks(ns, members, gangInfo);\\n            }\\n            nextTick = Date.now() + 19000;\\n        }\\n        // Update our cache of otherGangsInfo\\n        otherGangsInfoPrevCycle = otherGangsInfo;\\n        if (gangInfo.territory < 1) {\\n            // Assign members to territory warfare\\n            if (nextTick != undefined && Date.now() + 500 > nextTick) {\\n                //ns.print('WARN: Assigning all members to territory warfare');\\n                for (let member of members)\\n                    ns.gang.setMemberTask(member, 'Territory Warfare');\\n            }\\n        }\\n        else {\\n            //ns.print('INFO: Skipping territory warfare, we are at 100% territory! Focusing on $$$');\\n        }\\n        ns.gang.setTerritoryWarfare(allowClash && gangInfo.territory < 1);\\n        // ns.print('');\\n        // ns.print('LOOP END');\\n        // ns.print('');\\n        g_goals.CheckGoals();\\n        await ns.sleep(1000);\\n    }\\n}\\nclass GangGoals {\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.goals = [\\n            { name: 'Gang created', condition: () => ns.gang.inGang(), state: undefined },\\n            { name: '12th member recruited', condition: () => ns.gang.inGang() && ns.gang.getMemberNames().length == 12, state: undefined },\\n            { name: 'Faction rep capped', condition: () => ns.gang.inGang() && ns.getPlayer().factions.includes('Slum Snakes') && ns.singularity.getFactionRep('Slum Snakes') >= 1_875_000, state: undefined },\\n            { name: 'Enabled clashes', condition: () => ns.gang.inGang() && (ns.gang.getGangInformation().territoryWarfareEngaged || ns.gang.getGangInformation().territory > 0.15), state: undefined },\\n            { name: '100% territory', condition: () => ns.gang.inGang() && ns.gang.getGangInformation().territory >= 1, state: undefined }\\n        ];\\n        this.CheckGoals();\\n    }\\n    CheckGoals() {\\n        for (const goal of this.goals)\\n            this.CheckGoal(goal);\\n    }\\n    CheckGoal(goal) {\\n        let currentValue = goal.condition();\\n        switch (goal.state) {\\n            case undefined:\\n                goal.state = goal.condition();\\n                if (goal.state)\\n                    this.ns.tprint('WARN: Gang goals: Already achieved goal ' + goal.name + ' on script startup');\\n                break;\\n            case false:\\n                if (currentValue) {\\n                    goal.state = true;\\n                    this.ns.tprint('FAIL: Gang goals: Achieved goal ' + goal.name);\\n                }\\n                break;\\n            case true:\\n                // Nothing to do here\\n                break;\\n        }\\n    }\\n}\\nfunction GetNextMemberTime(ns, members, gangInfo) {\\n    if (members.length == 12)\\n        return -1;\\n    // Check how much reputation we need to recruit the next member\\n    const needed = getRespectNeededToRecruitMember(ns, members);\\n    //ns.print('Needed: ' + needed);\\n    if (needed == 0)\\n        return -1;\\n    // Check how much we currently have\\n    const current = gangInfo.respect;\\n    //ns.print('Current: ' + current);\\n    if (current > needed)\\n        return -1;\\n    // Evaluate our current gain rate\\n    let gainPerMs = 0;\\n    try {\\n        gainPerMs = gangInfo.respectGainRate / 200;\\n    }\\n    catch {\\n        gainPerMs = 0;\\n    }\\n    //ns.print('Gain: ' + gainPerMs);\\n    if (gainPerMs <= 0)\\n        return 0;\\n    // evaluate how long it will take to get our next member at the current rate\\n    const time = (needed - current) / gainPerMs;\\n    //ns.print('Time: ' + time);\\n    return time;\\n}\\n// Ripped/adapted from source code\\n// https://github.com/danielyxie/bitburner/blob/2592c6ccd89d5559c9cc3cdf99416eb1c57edca2/src/Gang/Gang.ts#L296-L303\\nfunction getRespectNeededToRecruitMember(ns, members) {\\n    // First N gang members are free (can be recruited at 0 respect)\\n    const numFreeMembers = 3;\\n    if (members.length < numFreeMembers)\\n        return 0;\\n    const i = members.length - (numFreeMembers - 1);\\n    return Math.pow(5, i);\\n}\\nfunction AssignTasks(ns, members, gangInfo) {\\n    //ns.print('WARN: Assigning best tasks');\\n    // This is used to store the respect/wanted offset\\n    // If the first few members are generating mad respect, it can offset lower gang members\\n    // being really bad...\\n    let carryOver = 0;\\n    let sortedMembers = [...members].sort((a, b) => MemberWeight(ns, b) - MemberWeight(ns, a));\\n    for (let i = 0; i < sortedMembers.length; i++) {\\n        let member = sortedMembers[i];\\n        let [newTask, carry] = FindBestTask(ns, gangInfo, member, (i < sortedMembers.length / 2) || ns.gang.getGangInformation().territory == 1, carryOver);\\n        carryOver = carry;\\n        ns.gang.setMemberTask(member, newTask);\\n        //ns.print('WARN: Assigning task ' + newTask + ' to ' + member + ' forMoney: ' + focusMoney);\\n    }\\n}\\nfunction MemberWeight(ns, member) {\\n    let stats = ns.gang.getMemberInformation(member);\\n    let weight = stats.str + stats.def + stats.dex + stats.agi + stats['ha' + 'ck'] + stats.cha;\\n    return weight;\\n}\\nfunction GetNames(ns) {\\n    let names = new Set(ns.gang.inGang() ? ns.gang.getMemberNames() : []);\\n    while ([...names].length < 12) {\\n        let index = Math.floor(Math.random() * GANGSTER_NAMES.length);\\n        let name = GANGSTER_NAMES[index];\\n        names.add(name);\\n    }\\n    return [...names];\\n}\\nasync function RecruitMembers(ns) {\\n    let members = GetNames(ns);\\n    while (ns.gang.canRecruitMember()) {\\n        //ns.print('INFO: We can currently recruit a new member!');\\n        let newMember = members.pop();\\n        ns.gang.recruitMember(newMember);\\n        ns.print('SUCCESS: Recruited a new gang member called ' + newMember);\\n        // new members go straight to respect tasks\\n        let [newTask, carry] = FindBestTask(ns, ns.gang.getGangInformation(), newMember, false, 0);\\n        ns.gang.setMemberTask(newMember, newTask);\\n        await ns.sleep(10);\\n    }\\n}\\nfunction AscendGangMember(ns, member) {\\n    const ascensionResult = ns.gang.getAscensionResult(member);\\n    if (ascensionResult == undefined)\\n        return;\\n    let threshold = CalculateAscendTreshold(ns, member);\\n    if (ascensionResult.agi >= threshold || ascensionResult.str >= threshold || ascensionResult.def >= threshold || ascensionResult.dex >= threshold) {\\n        const respect = Math.max(1, ns.gang.getMemberInformation(member).respect);\\n        const gangRespect = Math.max(12, ns.gang.getGangInformation().respect);\\n        const respectRatio = respect / gangRespect;\\n        if (respectRatio > 1 / 12) {\\n            ns.print('FAIL: Holding ascension of ' + member);\\n            return; // Prevent ascending anyone whose respect is over X% of the gang's respect\\n        }\\n        ns.gang.ascendMember(member);\\n        ns.print('WARN: Ascending ' + member);\\n    }\\n}\\n// Credit: Mysteyes. https://discord.com/channels/415207508303544321/415207923506216971/940379724214075442\\nfunction CalculateAscendTreshold(ns, member) {\\n    let mult = ns.gang.getMemberInformation(member)['str_asc_mult'];\\n    if (mult < 1.632)\\n        return 1.6326;\\n    if (mult < 2.336)\\n        return 1.4315;\\n    if (mult < 2.999)\\n        return 1.284;\\n    if (mult < 3.363)\\n        return 1.2125;\\n    if (mult < 4.253)\\n        return 1.1698;\\n    if (mult < 4.860)\\n        return 1.1428;\\n    if (mult < 5.455)\\n        return 1.1225;\\n    if (mult < 5.977)\\n        return 1.0957;\\n    if (mult < 6.496)\\n        return 1.0869;\\n    if (mult < 7.008)\\n        return 1.0789;\\n    if (mult < 7.519)\\n        return 1.073;\\n    if (mult < 8.025)\\n        return 1.0673;\\n    if (mult < 8.513)\\n        return 1.0631;\\n    return 1.0591;\\n}\\nfunction UpgradeEquipement(ns) {\\n    let budget = Math.min(GetGangBalance(ns) + EXTERNAL_FUNDING, ns.getPlayer().money);\\n    if (budget < 0)\\n        return;\\n    let allGear = ns.gang.getEquipmentNames();\\n    allGear = allGear.sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n    const members = ns.gang.getMemberNames();\\n    for (let gear of allGear) {\\n        let type = ns.gang.getEquipmentType(gear);\\n        if (type == 'Augmentation' && !allowAugs)\\n            continue;\\n        // const allowedHackingAugs= [\\n        // \\t'BitWire', 'DataJack', 'Neuralstimulator'\\n        // ];\\t\\t\\n        // if (type == 'Augmentation' && !allowedHackingAugs.includes(gear))\\n        // \\tcontinue;\\n        // if ((type == 'Weapon' || type == 'Armor' || type == 'Vehicle' || type == 'Rootkit') && budget < 5_000_000_000)\\n        // \\tcontinue;\\n        // if (type == 'Rootkit' && budget < 5_000_000_000)\\n        // \\tcontinue;\\n        // Find which member(s) do not have that upgrade installed\\n        const missing = new Array();\\n        for (let member of members) {\\n            const memberInfo = ns.gang.getMemberInformation(member);\\n            if (!memberInfo.upgrades.includes(gear) && !memberInfo.augmentations.includes(gear)) {\\n                missing.push(member);\\n            }\\n        }\\n        let cost = ns.gang.getEquipmentCost(gear);\\n        for (let member of missing) {\\n            if (cost < budget) {\\n                //ns.print('Buying ' + gear + ' for ' + member);\\n                //ns.enableLog('gang.purchaseEquipment');\\n                ns.gang.purchaseEquipment(member, gear);\\n                budget -= cost;\\n            }\\n        }\\n    }\\n}\\nfunction GangReport(ns, gangInfo) {\\n    ns.print('');\\n    ns.print('Faction                :  ' + gangInfo.faction);\\n    ns.print('Gang type              :  ' + (gangInfo.isHacking ? 'Hacking' : 'Combat'));\\n    ns.print('Money gain rate        :  ' + gangInfo.moneyGainRate);\\n    ns.print('Power                  :  ' + gangInfo.power);\\n    ns.print('Respect                :  ' + gangInfo.respect);\\n    ns.print('Respect gain rate      :  ' + gangInfo.respectGainRate);\\n    ns.print('Territory              :  ' + gangInfo.territory);\\n    ns.print('Territory clash chance :  ' + gangInfo.territoryClashChance);\\n    ns.print('Territory war engaged  :  ' + gangInfo.territoryWarfareEngaged);\\n    ns.print('Wanted level           :  ' + gangInfo.wantedLevel);\\n    ns.print('Wanted level gain rate :  ' + gangInfo.wantedLevelGainRate);\\n    ns.print('Wanted penalty         :  ' + gangInfo.wantedPenalty);\\n    ns.print('');\\n}\\nfunction FindBestTask(ns, gangInfo, member, prioritizeMoney, carryOver) {\\n    // Absolute priority, if we got wanted penalty goes too far we fix that shit, it cripples everything\\n    // if (gangInfo.wantedPenalty < 0.80 && gangInfo.wantedLevel > 1 && gangInfo.respect > 1) {\\n    // \\treturn ['Vigilante Justice', carryOver];\\n    // }\\n    let mi = ns.gang.getMemberInformation(member);\\n    // Force training on combat stats\\n    // if (mi.str < 100) {\\n    // \\treturn ['Train Combat', carryOver];\\n    // }\\n    let ALLOWED_TASKS = [\\n        'Mug People',\\n        'Deal Drugs',\\n        'Strongarm Civilians',\\n        'Run a Con',\\n        'Armed Robbery',\\n        'Traffick Illegal Arms',\\n        'Threaten & Blackmail',\\n        'Human Trafficking'\\n    ];\\n    //ns.print(ALLOWED_TASKS);\\n    // For respect, terrorism is king, no reason to waste time with other\\n    // tasks. If money is a concern, it would be best to split members\\n    // between money/respect focus instead of doing half-assed tasks\\n    // See where this function is called.\\n    if (!prioritizeMoney)\\n        ALLOWED_TASKS = ['Terrorism'];\\n    // Evaluate the gains of allowed tasks\\n    let tasks = [];\\n    for (let task of ALLOWED_TASKS) {\\n        let stats = ns.gang.getTaskStats(task);\\n        let money = ns.formulas.gang.moneyGain(gangInfo, mi, stats);\\n        let respect = ns.formulas.gang.respectGain(gangInfo, mi, stats);\\n        let wanted = ns.formulas.gang.wantedLevelGain(gangInfo, mi, stats);\\n        let wantedPen = wanted == 0 ? 0 : respect / (respect + wanted);\\n        // Skip tasks that increase our wanted level (we'll likely default to combat training)\\n        //if (!prioritizeMoney && respect + carryOver < wanted) continue;\\n        //if (!prioritizeMoney) carryOver += respect / wanted;\\n        // Skip tasks that do not generate respect if we're focused on respect\\n        if (!prioritizeMoney && respect <= 0)\\n            continue;\\n        // Skip tasks that do not generate money if we're focused on money\\n        if (prioritizeMoney && money <= 0)\\n            continue;\\n        //if (wantedPen > 0) {\\n        // let color = wanted == 0 ? 'SUCCESS:' : 'WARN:';\\n        // ns.print(color + task + ' wanted penalty is : ' + wantedPen + ' for ' + member);\\n        // ns.print('wanted:  ' + wanted);\\n        // ns.print('respect: ' + respect);\\n        // ns.print('w/r:     ' + (wanted / respect).toString());\\n        // ns.print('r/w:     ' + (respect / wanted).toString());\\n        // ns.print('r/(r+w): ' + (respect / (respect + wanted)).toString());\\n        //continue;\\n        //}\\n        if (wanted > respect / 2)\\n            continue;\\n        // Add the task to our todo list, we'll sort and pick the best one later\\n        tasks.push({\\n            task: task,\\n            money: money,\\n            wanted: wanted,\\n            respect: respect,\\n            carryOver: carryOver\\n        });\\n    }\\n    // If we have more than one task, sort it based on our focus\\n    if (tasks.length > 1) {\\n        let sortKey = prioritizeMoney ? 'money' : 'respect';\\n        tasks.sort((a, b) => b[sortKey] - a[sortKey]);\\n    }\\n    // If we have no tasks, it means none of them correspond to our focus without generating wanted penalty\\n    // We train combat until that changes\\n    if (tasks.length == 0) {\\n        tasks.push({\\n            task: 'Train Combat',\\n            money: 0,\\n            wanted: 0,\\n            respect: 0,\\n            carryOver: carryOver\\n        });\\n    }\\n    // Return the fist task in the list\\n    return [tasks[0].task, tasks[0].carryOver];\\n}\\n/** @param {NS} ns **/\\nfunction GetGangBalance(ns) {\\n    let boxes = Array.from(eval(\\\"document\\\").querySelectorAll(\\\"[class*=MuiBox-root]\\\"));\\n    let box = boxes.find(s => getProps(s)?.player);\\n    if (!box)\\n        return 0;\\n    let props = getProps(box);\\n    if (!props)\\n        return 0;\\n    return props.player.moneySourceA.gang;\\n}\\nfunction getProps(obj) {\\n    return Object.entries(obj).find(entry => entry[0].startsWith(\\\"__reactProps\\\"))[1]?.children?.props;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FuZ21hbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9nYW5nbWFuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sY0FBYyxHQUFHO0lBQ3RCLGNBQWM7SUFDZCxlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGVBQWU7Q0FDZixDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzNCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztBQUM1QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFFdkIsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxrSkFBa0o7QUFFOUssSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBRXhCLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sRUFBRTtRQUMxQixtREFBbUQ7UUFDbkQseUJBQXlCO1FBQ3pCLG1DQUFtQztRQUNuQyxrRUFBa0U7UUFDbEUscUNBQXFDO1FBQ3JDLG9CQUFvQjtRQUNwQixJQUFJO1FBRUosSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXpCLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3ZCLEVBQUUs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\",\"filename\":\"/xsink/gangman.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":150.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // getAugmentationGraftPrice(augName)\\n    // getAugmentationGraftTime(augName)\\n    // getGraftableAugmentations()\\n    // graftAugmentation(augName, focus)\\n    const owned = ns.singularity.getOwnedAugmentations(true);\\n    let graftable = ns.grafting.getGraftableAugmentations()\\n        .filter(s => !owned.includes(s))\\n        .map((s) => {\\n        return {\\n            name: s,\\n            cost: ns.grafting.getAugmentationGraftPrice(s),\\n            time: ns.grafting.getAugmentationGraftTime(s)\\n        };\\n    });\\n    graftable = graftable.filter(s => s.cost < 1_000_000_000).sort((a, b) => a.time - b.time);\\n    //graftable.forEach(s => s.ratio = s.time * s.cost);\\n    //graftable.sort((a, b) => a.ratio - b.ratio);\\n    for (const graft of graftable)\\n        ns.tprint(graft.name.padEnd(60) + ns.tFormat(graft.time).padEnd(35) + ns.nFormat(graft.cost, '0.000a'));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhZnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvZ3JhZnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIscUNBQXFDO0lBQ3JDLG9DQUFvQztJQUNwQyw4QkFBOEI7SUFDOUIsb0NBQW9DO0lBRXBDLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekQsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRTtTQUNyRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDVixPQUFPO1lBQ04sSUFBSSxFQUFFLENBQUM7WUFDUCxJQUFJLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDO1NBQzdDLENBQUE7SUFDRixDQUFDLENBQUMsQ0FBQztJQUVKLFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxRixvREFBb0Q7SUFDcEQsOENBQThDO0lBRTlDLEtBQUssTUFBTSxLQUFLLElBQUksU0FBUztRQUM1QixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUUxRyxDQUFDIn0=\",\"filename\":\"/xsink/graft.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":94.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"grafting.getGraftableAugmentations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"grafting.getAugmentationGraftPrice\",\"cost\":3.75},{\"type\":\"fn\",\"name\":\"grafting.getAugmentationGraftTime\",\"cost\":3.75}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let boxes = Array.from(eval(\\\"document\\\").querySelectorAll(\\\"[class*=MuiBox-root]\\\"));\\n    let box = boxes.find(s => getProps(s)?.player);\\n    if (!box)\\n        return;\\n    let props = getProps(box);\\n    ns.tprint('WARN: Income since last install:');\\n    for (let entry of Object.entries(props.player.moneySourceA)) {\\n        ns.tprint(entry[0] + ' : ' + entry[1]);\\n    }\\n    ns.tprint('WARN: Income since start of node:');\\n    for (let entry of Object.entries(props.player.moneySourceB)) {\\n        ns.tprint(entry[0] + ' : ' + entry[1]);\\n    }\\n}\\nfunction getProps(obj) {\\n    return Object.entries(obj).find(entry => entry[0].startsWith(\\\"__reactProps\\\"))[1].children.props;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FuZ21vbmV5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2dhbmdtb25leS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7SUFDbEYsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvQyxJQUFJLENBQUMsR0FBRztRQUFFLE9BQU87SUFDakIsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUM5QyxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUN6RCxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUM7SUFDRCxFQUFFLENBQUMsTUFBTSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7SUFDL0MsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDekQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEdBQUc7SUFDakIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQ3BHLENBQUMifQ==\",\"filename\":\"/xsink/gangmoney.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WaitPids } from 'prep.js';\\nconst factions = [\\n    'CyberSec',\\n    'Tian Di Hui',\\n    'Netburners',\\n    'Sector-12',\\n    'Aevum',\\n    'Volhaven',\\n    'Ishima',\\n    'Chongqing',\\n    'New Tokyo',\\n    'NiteSec',\\n    'The Black Hand',\\n    'BitRunners',\\n    'ECorp',\\n    'MegaCorp',\\n    'KuaiGong International',\\n    'Four Sigma',\\n    'NWO',\\n    'Blade Industries',\\n    'OmniTek Incorporated',\\n    'Bachman & Associates',\\n    'Clarke Incorporated',\\n    'Fulcrum Secret Technologies',\\n    'Slum Snakes',\\n    'Tetrads',\\n    'Silhouette',\\n    'Speakers for the Dead',\\n    'The Dark Army',\\n    'The Syndicate',\\n    'The Covenant',\\n    'Daedalus',\\n    'Illuminati'\\n];\\nlet eastBlock = ['Sector-12', 'Aevum', 'Volhaven'];\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('sleep');\\n    await ns.sleep(2500);\\n    let mustHave = [\\n        'CyberSec',\\n        'Tian Di Hui',\\n        'Netburners',\\n        'Ishima',\\n        'Chongqing',\\n        'New Tokyo',\\n        'NiteSec',\\n        'The Black Hand',\\n        'BitRunners',\\n        'Slum Snakes',\\n        'Tetrads',\\n        //'The Syndicate',\\n        'The Covenant',\\n        'Daedalus',\\n        'Illuminati'\\n    ];\\n    ns.singularity.purchaseTor();\\n    ns.purchaseProgram(\\\"BruteSSH.exe\\\");\\n    ns.purchaseProgram(\\\"FTPCrack.exe\\\");\\n    ns.purchaseProgram(\\\"relaySMTP.exe\\\");\\n    ns.purchaseProgram(\\\"SQLInject.exe\\\");\\n    ns.purchaseProgram(\\\"HTTPWorm.exe\\\");\\n    ns.purchaseProgram(\\\"ServerProfiler.exe\\\");\\n    ns.purchaseProgram(\\\"DeepscanV2.exe\\\");\\n    await WaitPids(ns, ns.run('breach.js', 1));\\n    await WaitPids(ns, ns.run('sleeves.js', 1, 'study'));\\n    ns.singularity.travelToCity('Volhaven');\\n    ns.singularity.universityCourse('ZB Institute of Technology', 'Algorithms', false);\\n    await ns.sleep(1000);\\n    await WaitPids(ns, ns.run('installBackdoor.js', 1));\\n    ns.hacknet.purchaseNode();\\n    ns.hacknet.upgradeLevel(0, ns.formulas.hacknetServers.constants().MaxLevel);\\n    ns.hacknet.upgradeRam(0, ns.formulas.hacknetServers.constants().MaxRam);\\n    ns.hacknet.upgradeCore(0, ns.formulas.hacknetServers.constants().MaxCores);\\n    ns.hacknet.upgradeCache(0, ns.formulas.hacknetServers.constants().MaxCache);\\n    while (!ns.singularity.travelToCity('Chongqing')) {\\n        ns.tprint('FAIL: Failed to travel to Chongqing');\\n        await ns.sleep(1000);\\n    }\\n    await WaitAndAcceptFactionInvite(ns, 'Chongqing');\\n    await WaitAndAcceptFactionInvite(ns, 'Tian Di Hui');\\n    ns.singularity.travelToCity('New Tokyo');\\n    await WaitAndAcceptFactionInvite(ns, 'New Tokyo');\\n    ns.singularity.travelToCity('Ishima');\\n    await WaitAndAcceptFactionInvite(ns, 'Ishima');\\n    await WaitAndAcceptFactionInvite(ns, 'CyberSec');\\n    await WaitAndAcceptFactionInvite(ns, 'NiteSec');\\n    await WaitAndAcceptFactionInvite(ns, 'The Black Hand');\\n    await WaitAndAcceptFactionInvite(ns, 'BitRunners');\\n    await WaitAndAcceptFactionInvite(ns, 'Daedalus');\\n    let joined = ns.getPlayer().factions;\\n    let missing = mustHave.filter(s => !joined.includes(s));\\n    if (missing.length > 0)\\n        ns.tprint('FAIL: Failed to join the following factions:\\\\n' + missing.join('\\\\n'));\\n    ns.tprint('INFO: Joined all targeted factions!');\\n    ns.singularity.softReset('grind.js');\\n}\\nasync function WaitAndAcceptFactionInvite(ns, faction) {\\n    while (true) {\\n        let invites = ns.singularity.checkFactionInvitations();\\n        for (let invite of invites) {\\n            if (eastBlock.includes(invite)) {\\n                ns.tprint('WARN: Refusing faction invite from ' + invite);\\n                continue;\\n            }\\n            ns.tprint('INFO: Joining faction ' + invite);\\n            ns.singularity.joinFaction(invite);\\n        }\\n        if (ns.getPlayer().factions.includes(faction))\\n            return;\\n        ns.tprint('WARN: Waiting for faction invite from ' + faction);\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvZ3JpbmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVuQyxNQUFNLFFBQVEsR0FBRztJQUNoQixVQUFVO0lBQ1YsYUFBYTtJQUNiLFlBQVk7SUFDWixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixPQUFPO0lBQ1AsVUFBVTtJQUNWLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osS0FBSztJQUNMLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLHFCQUFxQjtJQUNyQiw2QkFBNkI7SUFDN0IsYUFBYTtJQUNiLFNBQVM7SUFDVCxZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixlQUFlO0lBQ2YsY0FBYztJQUNkLFVBQVU7SUFDVixZQUFZO0NBQ1osQ0FBQztBQUVGLElBQUksU0FBUyxHQUFHLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQTtBQUVsRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZCLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVyQixJQUFJLFFBQVEsR0FBRztRQUNkLFVBQVU7UUFDVixhQUFhO1FBQ2IsWUFBWTtRQUNaLFFBQVE7UUFDUixXQUFXO1FBQ1gsV0FBVztRQUNYLFNBQVM7UUFDVCxnQkFBZ0I7UUFDaEIsWUFBWTtRQUNaLGFBQWE7UUFDYixTQUFTO1FBQ1Qsa0JBQWtCO1FBQ2xCLGNBQWM7UUFDZCxVQUFVO1FBQ1YsWUFBWTtLQUNaLENB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\",\"filename\":\"/xsink/grind.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":625}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n    const [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n    await ns.sleep(delay);\\n    const start = performance.now();\\n    await ns.grow(target, { stock: true });\\n    const executionTime = performance.now() - start;\\n    if (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n        ColorPrint(logColor, 'Batch #' + batchNumber + ' grow did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n    }\\n}\\nexport function ColorPrint() {\\n    let findProp = propName => {\\n        for (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n            let propKey = Object.keys(div)[1];\\n            if (!propKey)\\n                continue;\\n            let props = div[propKey];\\n            if (props.children?.props && props.children.props[propName])\\n                return props.children.props[propName];\\n            if (props.children instanceof Array)\\n                for (let child of props.children)\\n                    if (child?.props && child.props[propName])\\n                        return child.props[propName];\\n        }\\n    };\\n    let term = findProp(\\\"terminal\\\");\\n    let out = [];\\n    for (let i = 0; i < arguments.length; i += 2) {\\n        out.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]));\\n    }\\n    try {\\n        term.printRaw(out);\\n    }\\n    catch { }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy1vbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2dyb3ctb25jZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUI7QUFDbkIsc0JBQXNCO0FBQ3RCLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIscURBQXFEO0FBQ3JELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ3JFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDaEMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDaEQsSUFBSSxRQUFRLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcsRUFBRTtRQUNsRSxVQUFVLENBQUMsUUFBUSxFQUFFLFNBQVMsR0FBRyxXQUFXLEdBQUcsd0NBQXdDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxDQUFDO0tBQ2pMO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVO0lBQ3pCLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFO1FBQ3pCLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pELElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLE9BQU87Z0JBQUUsU0FBUztZQUN2QixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDekIsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7Z0JBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztnQkFBRSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO29CQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQzt3QkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0k7SUFDRixDQUFDLENBQUM7SUFDRixJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFaEMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2hHO0lBQ0QsSUFBSTtRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbkI7SUFDRCxNQUFNLEdBQUc7QUFDVixDQUFDIn0=\",\"filename\":\"/xsink/grow-once.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/grow-once.js\",\"url\":\"blob:https://hydroflame.github.io/b2e07cfa-f775-48a6-9c7a-7c77046076a0\",\"moduleSequenceNumber\":35263}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n    const [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n    await ns.sleep(delay);\\n    const start = performance.now();\\n    await ns.hack(target);\\n    const executionTime = performance.now() - start;\\n    if (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n        ColorPrint(logColor, 'Batch #' + batchNumber + ' hack did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n    }\\n}\\nexport function ColorPrint() {\\n    let findProp = propName => {\\n        for (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n            let propKey = Object.keys(div)[1];\\n            if (!propKey)\\n                continue;\\n            let props = div[propKey];\\n            if (props.children?.props && props.children.props[propName])\\n                return props.children.props[propName];\\n            if (props.children instanceof Array)\\n                for (let child of props.children)\\n                    if (child?.props && child.props[propName])\\n                        return child.props[propName];\\n        }\\n    };\\n    let term = findProp(\\\"terminal\\\");\\n    let out = [];\\n    for (let i = 0; i < arguments.length; i += 2) {\\n        out.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]));\\n    }\\n    try {\\n        term.printRaw(out);\\n    }\\n    catch { }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay1vbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2hhY2stb25jZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUI7QUFDbkIsc0JBQXNCO0FBQ3RCLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIscURBQXFEO0FBQ3JELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ3JFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDaEMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDaEQsSUFBSSxRQUFRLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEdBQUcsRUFBRTtRQUNsRSxVQUFVLENBQUMsUUFBUSxFQUFFLFNBQVMsR0FBRyxXQUFXLEdBQUcsd0NBQXdDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxDQUFDO0tBQ2pMO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVO0lBQ3pCLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFO1FBQ3pCLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pELElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLE9BQU87Z0JBQUUsU0FBUztZQUN2QixJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDekIsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7Z0JBQUUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRyxJQUFJLEtBQUssQ0FBQyxRQUFRLFlBQVksS0FBSztnQkFBRSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRO29CQUFFLElBQUksS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQzt3QkFBRSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDL0k7SUFDRixDQUFDLENBQUM7SUFDRixJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFaEMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2hHO0lBQ0QsSUFBSTtRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbkI7SUFDRCxNQUFNLEdBQUc7QUFDVixDQUFDIn0=\",\"filename\":\"/xsink/hack-once.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/hack-once.js\",\"url\":\"blob:file:///098b4091-37ac-492f-afa3-af9065c48d06\",\"moduleSequenceNumber\":23762}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// getCacheUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node cache.\\n// getCoreUpgradeCost(index, n)\\t\\tCalculate the cost of upgrading hacknet node cores.\\n// getHashUpgradeLevel(upgName)\\t\\tGet the level of a hash upgrade.\\n// getHashUpgrades()\\t\\t\\t\\tGet the list of hash upgrades\\n// getLevelUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node levels.\\n// getNodeStats(index)\\t\\t\\t\\tGet the stats of a hacknet node.\\n// getPurchaseNodeCost()\\t\\t\\tGet the price of the next hacknet node.\\n// getRamUpgradeCost(index, n)\\t\\tCalculate the cost of upgrading hacknet node RAM.\\n// getStudyMult()\\t\\t\\t\\t\\tGet the multiplier to study.\\n// getTrainingMult()\\t\\t\\t\\tGet the multiplier to training.\\n// hashCapacity()\\t\\t\\t\\t\\tGet the maximum number of hashes you can store.\\n// hashCost(upgName)\\t\\t\\t\\tGet the cost of a hash upgrade.\\n// maxNumNodes()\\t\\t\\t\\t\\tGet the maximum number of hacknet nodes.\\n// numHashes()\\t\\t\\t\\t\\t\\tGet the total number of hashes stored.\\n// numNodes()\\t\\t\\t\\t\\t\\tGet the number of hacknet nodes you own.\\n// purchaseNode()\\t\\t\\t\\t\\tPurchase a new hacknet node.\\n// spendHashes(upgName, upgTarget)\\tPurchase a hash upgrade.\\n// upgradeCache(index, n)\\t\\t\\tUpgrade the cache of a hacknet node.\\n// upgradeCore(index, n)\\t\\t\\tUpgrade the core of a hacknet node.\\n// upgradeLevel(index, n)\\t\\t\\tUpgrade the level of a hacknet node.\\n// upgradeRam(index, n)\\t\\t\\t\\tUpgrade the RAM of a hacknet node.\\n// *** HACKNET NODES ***\\n// constants()\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tAll constants used by the game.\\n// coreUpgradeCost(startingCore, extraCores, costMult)\\t\\tCalculate cost of upgrading hacknet node cores.\\n// hacknetNodeCost(n, mult)\\t\\t\\t\\t\\t\\t\\t\\t\\tCalculate the cost of a hacknet node.\\n// levelUpgradeCost(startingLevel, extraLevels, costMult)\\tCalculate cost of upgrading hacknet node level.\\n// moneyGainRate(level, ram, cores, mult)\\t\\t\\t\\t\\tCalculate money gain rate.\\n// ramUpgradeCost(startingRam, extraLevels, costMult)\\t\\tCalculate cost of upgrading hacknet node ram.\\n// *** HACKNET SERVERS ***\\n// cacheUpgradeCost(startingCache, extraCache)\\t\\t\\t\\tCalculate cost of upgrading hacknet server cache.\\n// constants()\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tAll constants used by the game.\\n// coreUpgradeCost(startingCore, extraCores, costMult)\\t\\tCalculate cost of upgrading hacknet server cores.\\n// hacknetServerCost(n, mult)\\t\\t\\t\\t\\t\\t\\t\\tCalculate the cost of a hacknet server.\\n// hashGainRate(level, ramUsed, maxRam, cores, mult)\\t\\tCalculate hash gain rate.\\n// hashUpgradeCost(upgName, level)\\t\\t\\t\\t\\t\\t\\tCalculate hash cost of an upgrade.\\n// levelUpgradeCost(startingLevel, extraLevels, costMult)\\tCalculate cost of upgrading hacknet server level.\\n// ramUpgradeCost(startingRam, extraLevels, costMult)\\t\\tCalculate cost of upgrading hacknet server ram.\\n// HashesPerLevel       : 0.001\\n// BaseCost             : 50000\\n// RamBaseCost          : 200000\\n// CoreBaseCost         : 1000000\\n// CacheBaseCost        : 10000000\\n// PurchaseMult         : 3.2\\n// UpgradeLevelMult     : 1.1\\n// UpgradeRamMult       : 1.4\\n// UpgradeCoreMult      : 1.55\\n// UpgradeCacheMult     : 1.85\\n// MaxServers           : 20\\n// MaxLevel             : 300\\n// MaxRam               : 8192\\n// MaxCores             : 128\\n// MaxCache             : 15\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    let money = ns.args[0] || ns.getServerMoneyAvailable('home');\\n    for (;;) {\\n        let cost = await UpgradeRound(ns, money);\\n        money -= cost;\\n        if (cost == 0 || money <= 0)\\n            break;\\n        await ns.sleep(20);\\n    }\\n    // for (let key of Object.keys(con))\\n    // \\tns.tprint(key.padEnd(20) + ' : ' + con[key]);\\n}\\nasync function UpgradeRound(ns, money) {\\n    const con = ns.formulas.hacknetServers.constants();\\n    let budget = money;\\n    let actions = [\\n        ns.hacknet.purchaseNode,\\n        ns.hacknet.upgradeLevel,\\n        ns.hacknet.upgradeRam,\\n        ns.hacknet.upgradeCore,\\n        ns.hacknet.upgradeCache\\n    ];\\n    let possibleUpgrades = [];\\n    let count = ns.hacknet.numNodes();\\n    for (let i = 0; i < ns.hacknet.maxNumNodes(); i++) {\\n        // Consider purchase\\n        if (i >= count) {\\n            let cost = ns.hacknet.getPurchaseNodeCost();\\n            let hashGain = ns.formulas.hacknetServers.hashGainRate(1, 0, 1, 1, ns.getBitNodeMultipliers().HacknetNodeMoney);\\n            if (cost <= money) {\\n                possibleUpgrades.push({\\n                    index: i,\\n                    description: 'NewNode',\\n                    action: 0,\\n                    cost: cost,\\n                    hashGain: hashGain,\\n                    netGain: hashGain / cost\\n                });\\n            }\\n            continue;\\n        }\\n        let stats = ns.hacknet.getNodeStats(i);\\n        // Consider upgrading 1 level\\n        let level = stats.level + 1;\\n        if (level <= con.MaxLevel) {\\n            let cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n            let hashGain = ns.formulas.hacknetServers.hashGainRate(level, 0, stats.ram, stats.cores, ns.getBitNodeMultipliers().HacknetNodeMoney);\\n            if (cost <= money) {\\n                possibleUpgrades.push({\\n                    index: i,\\n                    description: 'LevelUp',\\n                    action: 1,\\n                    cost: cost,\\n                    hashGain: hashGain,\\n                    netGain: hashGain / cost\\n                });\\n            }\\n        }\\n        // Consider upgrading 1 ram\\n        let ram = stats.ram;\\n        if (ram * 2 <= con.MaxRam) {\\n            let cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n            let hashGain = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, ram * 2, stats.cores, ns.getBitNodeMultipliers().HacknetNodeMoney);\\n            if (cost <= money) {\\n                possibleUpgrades.push({\\n                    index: i,\\n                    description: 'RamUp',\\n                    action: 2,\\n                    cost: cost,\\n                    hashGain: hashGain,\\n                    netGain: hashGain / cost,\\n                    amount: 1\\n                });\\n            }\\n        }\\n        // Consider upgrading 1 core\\n        let cores = stats.cores + 1;\\n        if (cores <= con.MaxCores) {\\n            let cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n            let hashGain = ns.formulas.hacknetServers.hashGainRate(stats.level, 0, stats.ram, cores, ns.getBitNodeMultipliers().HacknetNodeMoney);\\n            if (cost <= money) {\\n                possibleUpgrades.push({\\n                    index: i,\\n                    description: 'CoresUp',\\n                    action: 3,\\n                    cost: cost,\\n                    hashGain: hashGain,\\n                    netGain: hashGain / cost\\n                });\\n            }\\n        }\\n        // // Consider upgrading 1 cache\\n        // let cache = stats.cache;\\n        // if (cache <= con.MaxCache) {\\n        // \\tlet cost = ns.hacknet.getCacheUpgradeCost(i, 1);\\n        // \\tif (cost <= money) {\\n        // \\t\\tpossibleUpgrades.push({\\n        // \\t\\t\\tindex: i,\\n        // \\t\\t\\tdescription: 'CacheUp',\\n        // \\t\\t\\taction: 4,\\n        // \\t\\t\\tcost: cost,\\n        // \\t\\t\\thashGain: 0,\\n        // \\t\\t\\tnetGain: 0\\n        // \\t\\t});\\n        // \\t}\\n        // }\\n    }\\n    possibleUpgrades.sort((a, b) => b.netGain - a.netGain);\\n    let lastNetGain = 0;\\n    let skip = false;\\n    for (let upg of possibleUpgrades) {\\n        if ((lastNetGain == 0 || lastNetGain == upg.netGain) && !skip) {\\n            if (money < upg.cost) {\\n                ns.tprint('WARN: Budget limit hit! Aborting');\\n                break;\\n            }\\n            ns.tprint('INFO: Upgrading node ' + upg.index + ' upgradeType: ' + upg.action);\\n            actions[upg.action](upg.index, upg.amount || 1);\\n            money -= upg.cost;\\n        }\\n        else {\\n            ns.tprint('WARN: Skipping ' + upg);\\n            skip = true;\\n            break;\\n        }\\n        lastNetGain = upg.netGain;\\n    }\\n    return budget - money;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja25ldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9oYWNrbmV0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9GQUFvRjtBQUNwRixvRkFBb0Y7QUFDcEYsaUVBQWlFO0FBQ2pFLHFEQUFxRDtBQUNyRCxxRkFBcUY7QUFDckYsMERBQTBEO0FBQzFELGtFQUFrRTtBQUNsRSxpRkFBaUY7QUFDakYsa0RBQWtEO0FBQ2xELHVEQUF1RDtBQUN2RCxxRUFBcUU7QUFDckUsdURBQXVEO0FBQ3ZELDZEQUE2RDtBQUM3RCwwREFBMEQ7QUFDMUQsMkRBQTJEO0FBQzNELGtEQUFrRDtBQUNsRCwyREFBMkQ7QUFDM0QsZ0VBQWdFO0FBQ2hFLDhEQUE4RDtBQUM5RCxnRUFBZ0U7QUFDaEUsNkRBQTZEO0FBRTdELHdCQUF3QjtBQUN4Qix5REFBeUQ7QUFDekQsdUdBQXVHO0FBQ3ZHLHlFQUF5RTtBQUN6RSx5R0FBeUc7QUFDekcsd0VBQXdFO0FBQ3hFLG9HQUFvRztBQUVwRywwQkFBMEI7QUFDMUIsbUdBQW1HO0FBQ25HLHlEQUF5RDtBQUN6RCx5R0FBeUc7QUFDekcsNEVBQTRFO0FBQzVFLCtFQUErRTtBQUMvRSwyRUFBMkU7QUFDM0UsMkdBQTJHO0FBQzNHLHNHQUFzRztBQUd0RywrQkFBK0I7QUFFL0IsK0JBQStCO0FBRS9CLGdDQUFnQztBQUNoQyxpQ0FBaUM7QUFDakMsa0NBQWtDO0FBRWxDLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFFOUIsNEJBQTRCO0FBQzVCLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUc1QixxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVB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\",\"filename\":\"/xsink/hacknet.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    while (true) {\\n        let capacity = ns.hacknet.hashCapacity();\\n        let current = ns.hacknet.numHashes();\\n        ns.print('Current hashes: ' + current + ' of max ' + capacity);\\n        // if (current > 200) {\\n        // \\tns.hacknet.spendHashes('Generate Coding Contract');\\n        // \\tawait ns.sleep(5000);\\n        // \\tns.exec('cct.js', 'home');\\n        // }\\n        // while (current > 4) {\\n        // \\tns.print('Trading for cash');\\n        // \\tns.hacknet.spendHashes('Sell for Money');\\n        // \\tcurrent = ns.hacknet.numHashes();\\n        // \\tawait ns.sleep(0);\\n        // }\\n        //let activity = 'Exchange for Corporation Research';\\n        //let activity= 'Exchange for Bladeburner Rank';\\n        let activity = 'Exchange for Bladeburner SP';\\n        while (current > ns.hacknet.hashCost(activity)) {\\n            ns.print(activity);\\n            ns.hacknet.spendHashes(activity);\\n            current = ns.hacknet.numHashes();\\n            await ns.sleep(0);\\n        }\\n        // activity= 'Exchange for Bladeburner SP';\\n        // while (current > ns.hacknet.hashCost(activity)) {\\n        // \\tns.print(activity);\\n        // \\tns.hacknet.spendHashes(activity);\\n        // \\tcurrent = ns.hacknet.numHashes();\\n        // \\tawait ns.sleep(0);\\n        // }\\n        ns.print('Loop end, sleeping');\\n        await ns.sleep(150);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2hhc2hlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE9BQU8sSUFBSSxFQUFFO1FBQ1osSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6QyxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRXJDLEVBQUUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxHQUFHLFVBQVUsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUUvRCx1QkFBdUI7UUFDdkIsdURBQXVEO1FBQ3ZELHlCQUF5QjtRQUN6Qiw4QkFBOEI7UUFDOUIsSUFBSTtRQUVKLHdCQUF3QjtRQUN4QixpQ0FBaUM7UUFDakMsNkNBQTZDO1FBRTdDLHFDQUFxQztRQUNyQyxzQkFBc0I7UUFDdEIsSUFBSTtRQUVKLHFEQUFxRDtRQUNyRCxnREFBZ0Q7UUFDaEQsSUFBSSxRQUFRLEdBQUUsNkJBQTZCLENBQUM7UUFDNUMsT0FBTyxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDL0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQixFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVqQyxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNqQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7UUFFRCwyQ0FBMkM7UUFDM0Msb0RBQW9EO1FBQ3BELHVCQUF1QjtRQUN2QixxQ0FBcUM7UUFFckMscUNBQXFDO1FBQ3JDLHNCQUFzQjtRQUN0QixJQUFJO1FBRUosRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNwQjtBQUNGLENBQUMifQ==\",\"filename\":\"/xsink/hashes.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-constant-condition */\\n/** @param {NS} ns **/\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    const doc = eval('document');\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = [];\\n            const values = [];\\n            headers.push('---------------');\\n            values.push('-----------------CRIMES-----------------'); // ------------MONEY and PROFIT------------\\n            headers.push(\\\"Total Karma: \\\");\\n            values.push('   ' + ns.nFormat(ns.heart.break(), '0,0'));\\n            headers.push(\\\"People Killed: \\\");\\n            values.push('   ' + ns.nFormat(ns.getPlayer()['numPeopleKilled'], '0,0'));\\n            headers.push('---------------');\\n            values.push('------------MONEY and PROFIT------------'); // ------------MONEY and PROFIT------------\\n            headers.push(\\\"Money: \\\");\\n            values.push('   ' + ns.nFormat(ns.getPlayer()['money'], '$0,0'));\\n            if (ns.gang.inGang()) {\\n                if (ns.gang.getGangInformation()['moneyGainRate'] > 0) {\\n                    headers.push(\\\"Gang Income: \\\");\\n                    values.push('   ' + ns.nFormat((5 * ns.gang.getGangInformation()['moneyGainRate']), '$0,0') + ' /s');\\n                }\\n            }\\n            headers.push('Hack Income: ');\\n            values.push('   ' + ns.nFormat(ns.getTotalScriptIncome()[0], '$0,0') + ' /s');\\n            if (ns.hacknet.numHashes() > 0) {\\n                headers.push('Hashes: ');\\n                values.push(' ' + ns.hacknet.numHashes().toPrecision(3) + ' / ' + ns.hacknet.hashCapacity().toPrecision(3));\\n            }\\n            headers.push('---------------');\\n            values.push('------------SKILL EXPERIENCE------------'); // ------------SKILL EXPERIENCE------------\\n            headers.push(\\\"Hacking EXP: \\\");\\n            values.push('   ' + ns.nFormat(ns.getPlayer()['exp']['hacking'], '0,0'));\\n            headers.push('Intelligence: ')\\n            values.push('   ' + ns.nFormat(ns.getPlayer()['exp']['intelligence'], '0,0'));\\n            //EXAMPLE GANG OBJECT\\n            //{\\\"faction\\\":\\\"NiteSec\\\",\\\"isHacking\\\":true,\\\"moneyGainRate\\\":2483647.443279274,\\\"power\\\":1,\\\"respect\\\":26663496.956160907,\\\"respectGainRate\\\":118.52362700148927,\\\"territory\\\":0.14285714285714413,\\\"territoryClashChance\\\":0,\\\"territoryWarfareEngaged\\\":false,\\\"wantedLevel\\\":1,\\\"wantedLevelGainRate\\\":-0.4421478504236176,\\\"wantedPenalty\\\":0.9999999624955435}\\n            if (ns.gang.inGang()) {\\n                headers.push('---------------');\\n                values.push('------------------GANG------------------');\\n                headers.push(\\\"Faction: \\\");\\n                values.push('   ' + ns.gang.getGangInformation()['faction']);\\n                let gangType = (ns.gang.getGangInformation()['isHacking']) ? \\\"Hacking\\\" : \\\"Combat\\\";\\n                headers.push(\\\"Type: \\\");\\n                values.push('   ' + gangType);\\n                headers.push(\\\"Power: \\\");\\n                values.push('   ' + ns.nFormat(ns.gang.getGangInformation()['power'], '0,0'));\\n                headers.push(\\\"Respect: \\\");\\n                values.push('   ' + ns.nFormat(ns.gang.getGangInformation()['respect'], '0,0'));\\n                headers.push(\\\"Wanted Level: \\\");\\n                values.push('   ' + ns.nFormat(ns.gang.getGangInformation()['wantedLevel'], '0,0'));\\n                if (ns.gang.getGangInformation()['territoryWarfareEngaged']) {\\n                    headers.push(\\\"Clash Chance: \\\");\\n                    values.push('   ' + ns.nFormat(ns.gang.getGangInformation()['territoryClashChance'], '0.0%'));\\n                }\\n            }\\n            headers.push('---------------');\\n            values.push('---------------STATISTICS---------------'); // ---------------STATISTICS---------------\\n            headers.push('Home Ram Use: ');\\n            values.push(ns.nFormat(ns.getServerUsedRam('home'), '0,0') + ' / ' + ns.nFormat(ns.getServerMaxRam('home'), '0,0'));\\n            headers.push('Bit Node: ');\\n            values.push(ns.getPlayer()['bitNodeN']);\\n            headers.push('Time in Node: ');\\n            values.push(ns.tFormat(ns.getPlayer()['playtimeSinceLastBitnode']));\\n            headers.push('Total Playtime: ');\\n            values.push(ns.tFormat(ns.getPlayer()['totalPlaytime']));\\n            headers.push(ns.getPlayer()['city']);\\n            values.push(ns.getPlayer()['location']);\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        }\\n        catch (err) {\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2h1ZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEM7QUFDMUMsc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQyxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDMUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzFELE9BQU8sSUFBSSxFQUFFO1FBQ1osSUFBSTtZQUNILE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQTtZQUNsQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFFbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RCxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDaEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3JCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDdEQsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztpQkFDckc7YUFDRDtZQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQTtZQUU3RSxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUMzRztZQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtZQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUVuSCxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0NBQXdDLENBQUMsQ0FBQTtZQUVyRCxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7WUFFdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFFbkUsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRXhELE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7WUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtZQUV2QyxLQUFLLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BDO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDYixFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0YsQ0FBQyJ9\",\"filename\":\"/xsink/hud.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/hud.js\",\"url\":\"blob:file:///251af7ed-b00a-4d83-ad3f-e2edad6f1753\",\"moduleSequenceNumber\":361}],\"dependents\":[],\"ramUsage\":9.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getTotalScriptIncome\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    UpdateHud(100);\\n}\\nfunction UpdateHud(kills) {\\n    const doc = eval('document');\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    try {\\n        const headers = [];\\n        const values = [];\\n        if (kills == undefined) {\\n            hook0.innerText = '';\\n            hook1.innerText = '';\\n            return;\\n        }\\n        headers.push(\\\"Kills: \\\");\\n        values.push('   ' + kills);\\n        hook0.innerText = headers.join(\\\" \\\\n\\\");\\n        hook1.innerText = values.join(\\\"\\\\n\\\");\\n    }\\n    catch { }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVkMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9odWQyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsS0FBSztJQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzFELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUUxRCxJQUFJO1FBQ0gsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFBO1FBQ2xCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUVsQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDdkIsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7WUFDckIsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7WUFDckIsT0FBTztTQUNQO1FBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQztRQUUzQixLQUFLLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3BDO0lBQUMsTUFBTSxHQUFHO0FBQ1osQ0FBQyJ9\",\"filename\":\"/xsink/hud2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const servers = GetAllServers(ns);\\n    const targets = servers.map(s => s.name); // ['CSEC', 'I.I.I.I', 'avmnite-02h', 'run4theh111z', 'w0r1d_d43m0n'];\\n    //'millenium-fitness', 'powerhouse-fitness', 'crush-fitness', 'snap-fitness'/*, 'w0r1d_d43m0n'*/];\\n    //const targets = servers.map(s => s.name);\\n    let count = 0;\\n    for (const server of servers) {\\n        //if (servers == 'w0r1d_d43m0n') continue;\\n        if (!targets.includes(server.name)) {\\n            ns.tprint('derp 1 ' + server.name);\\n            continue;\\n        }\\n        //ns.tprint(server.name + ' => ' + server.route);\\n        let so = ns.getServer(server.name);\\n        if (so.requiredHackingSkill > ns.getHackingLevel()) {\\n            ns.tprint('derp 2');\\n            continue;\\n        }\\n        if (!ns.hasRootAccess(server.name)) {\\n            ns.tprint('derp 3');\\n            continue;\\n        }\\n        if (so.backdoorInstalled) {\\n            ns.tprint('derp 4');\\n            continue;\\n        }\\n        //ns.tprint('Traversing the server chain to target: ' + server.name);\\n        for (const node of server.route) {\\n            if (!ns.singularity.connect(node)) {\\n                ns.tprint('ERROR: Could not connect to ' + node);\\n            }\\n            else {\\n                //ns.tprint('INFO: Connected to ' + node);\\n            }\\n        }\\n        //ns.tprint('INFO: Installing backdoor on ' + server.name);\\n        await ns.singularity.installBackdoor();\\n        so = ns.getServer(server.name);\\n        if (so.backdoorInstalled == false) {\\n            ns.tprint('ERROR: Failed to install backdoor on ' + server.name);\\n        }\\n        else\\n            ns.tprint('SUCCESS: Installed backdoor on ' + server.name);\\n        count++;\\n    }\\n    ns.tprint('INFO: Done installing backdoors on ' + count + ' servers');\\n    ns.singularity.connect('home');\\n    //ns.tprint('SUCCESS: Done.');\\n}\\nexport function GetAllServers(ns, root = 'home', found = new Array(), route = new Array()) {\\n    if (!found.find(p => p.name == root)) {\\n        let entry = new Object();\\n        entry.name = root;\\n        entry.route = route;\\n        entry.route.push(root);\\n        found.push(entry);\\n    }\\n    for (const server of ns.scan(root)) {\\n        if (!found.find(p => p.name == server)) {\\n            let newRoute = route.map(p => p);\\n            GetAllServers(ns, server, found, newRoute);\\n        }\\n    }\\n    return [...found];\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFsbEJhY2tkb29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL2luc3RhbGxCYWNrZG9vci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsc0VBQXNFO0lBQzlHLGtHQUFrRztJQUNsRywyQ0FBMkM7SUFFM0MsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRWQsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDN0IsMENBQTBDO1FBRTFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsU0FBUztTQUNUO1FBQ0QsaURBQWlEO1FBRWpELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksRUFBRSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUNuRCxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BCLFNBQVM7U0FDVDtRQUVELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BCLFNBQVM7U0FDVDtRQUVELElBQUksRUFBRSxDQUFDLGlCQUFpQixFQUFFO1lBQ3pCLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEIsU0FBUztTQUNUO1FBRUQscUVBQXFFO1FBQ3JFLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNoQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xDLEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLEdBQUcsSUFBSSxDQUFDLENBQUM7YUFDakQ7aUJBQ0k7Z0JBQ0osMENBQTBDO2FBQzFDO1NBQ0Q7UUFFRCwyREFBMkQ7UUFDM0QsTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXZDLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsSUFBSSxLQUFLLEVBQUU7WUFDbEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx1Q0FBdUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakU7O1lBRUEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQ0FBaUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUQsS0FBSyxFQUFFLENBQUM7S0FDUjtJQUVELEVBQUUsQ0FBQyxNQUFNLENBQUMscUNBQXFDLEdBQUcsS0FBSyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ3RFLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLDhCQUE4QjtBQUMvQixDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxHQUFHLE1BQU0sRUFBRSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsRUFBRSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUU7SUFDeEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO1FBQ3JDLElBQUksS0FBSyxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUFDekIsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNsQjtJQUVELEtBQUssTUFBTSxNQUFNLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEVBQUU7WUFDdkMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMzQztLQUNEO0lBRUQsT0FBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDbkIsQ0FBQyJ9\",\"filename\":\"/xsink/installBackdoor.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/installBackdoor.js\",\"url\":\"blob:file:///7c0b1680-972a-461f-a57c-0d0cc1515905\",\"moduleSequenceNumber\":8000}],\"dependents\":[],\"ramUsage\":67.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tail();\\n    ns.disableLog('sleep');\\n    const cities = ['Aevum', 'Chongqing', 'Sector-12', 'New Tokyo', 'Ishima', 'Volhaven'];\\n    const divisionNames = ['Energy', 'Water Utilities', 'Agriculture', 'Fishing', 'Mining', 'Food', 'Tobacco', 'Chemical', 'Pharmaceutical', 'Computer Hardware', 'Robotics', 'Software', 'RealEstate'];\\n    const divisionNamesCode = ['Energy', 'Utilities', 'Agriculture', 'Fishing', 'Mining', 'Food', 'Tobacco', 'Chemical', 'Pharmaceutical', 'Computer', 'Robotics', 'Software', 'RealEstate'];\\n    const jobs = ['Operations', 'Engineer', 'Business', 'Management', 'Research & Development', 'Training', 'Unassigned'];\\n    const upgrades = ['Smart Factories', 'Smart Storage', 'DreamSense', 'Wilson Analytics', 'Nuoptimal Nootropic Injector Implants', 'Speech Processor Implants', 'Neural Accelerators', 'FocusWires', 'ABC SalesBots', 'Project Insight'];\\n    let corpdata = ns.corporation.getCorporation();\\n    const newCities = ['Aevum', 'Chongqing', 'New Tokyo', 'Ishima', 'Volhaven'];\\n    const usefuljobs = ['Operations', 'Engineer', 'Business', 'Management', 'Research & Development'];\\n    const workingresearchjobs = ['Operations', 'Engineer', 'Business', 'Management', ...Array(11).fill('Research & Development')];\\n    let firstoffer = 3e12;\\n    let secondoffer = 300e12;\\n    let workingdivisions = divisionNames[5];\\n    let researchcity = 'Aevum';\\n    let researchworkdistribution = ['Engineer', 'Management', 'Management', 'Management'];\\n    ns.corporation.expandIndustry(workingdivisions, workingdivisions);\\n    ns.corporation.unlockUpgrade('Smart Supply');\\n    for (let ii in upgrades) {\\n        if (ns.corporation.getUpgradeLevel(upgrades[ii]) > 0) {\\n            continue;\\n        }\\n        if (['Wilson Analytics', 'Project Insight'].includes(upgrades[ii])) {\\n            continue;\\n        }\\n        ns.corporation.levelUpgrade(upgrades[ii]);\\n    }\\n    for (let ii in newCities) {\\n        ns.corporation.expandCity(workingdivisions, newCities[ii]);\\n        ns.corporation.purchaseWarehouse(workingdivisions, newCities[ii]);\\n    }\\n    for (let ii in cities) {\\n        let escape = 0;\\n        let warehouseinfo = ns.corporation.getWarehouse(workingdivisions, cities[ii]);\\n        while (warehouseinfo['size'] <= 300 && escape <= 2) {\\n            ns.corporation.upgradeWarehouse(workingdivisions, cities[ii]);\\n            warehouseinfo = ns.corporation.getWarehouse(workingdivisions, cities[ii]);\\n            await ns.sleep(10);\\n            escape++;\\n        }\\n        ns.corporation.setSmartSupply(workingdivisions, cities[ii], true);\\n        if (ns.corporation.getOffice(workingdivisions, cities[ii]).size == 3) {\\n            ns.corporation.upgradeOfficeSize(workingdivisions, cities[ii], 3);\\n        }\\n        while (ns.corporation.getOffice(workingdivisions, cities[ii]).employees.length < ns.corporation.getOffice(workingdivisions, cities[ii]).size) {\\n            ns.corporation.hireEmployee(workingdivisions, cities[ii]);\\n            await ns.sleep(10);\\n        }\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        if (cities[ii] == researchcity) {\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], researchworkdistribution[jj % 4]);\\n            }\\n        }\\n        else {\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], usefuljobs[4]);\\n            }\\n        }\\n    }\\n    // Develop first product\\n    ns.corporation.makeProduct(workingdivisions, researchcity, 'Prod-1', ns.corporation.getCorporation().funds / 20, ns.corporation.getCorporation().funds / 20);\\n    ns.corporation.makeProduct(workingdivisions, researchcity, 'Prod-2', ns.corporation.getCorporation().funds / 10, ns.corporation.getCorporation().funds / 10);\\n    ns.corporation.makeProduct(workingdivisions, researchcity, 'Prod-3', ns.corporation.getCorporation().funds / 5, ns.corporation.getCorporation().funds / 5);\\n    // buy production materials\\n    for (let ii in cities) {\\n        if (ns.corporation.getWarehouse(workingdivisions, cities[ii]).size >= 300) {\\n            let storedrobots = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Robots');\\n            let storedhardware = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Hardware');\\n            let storedaiCores = ns.corporation.getMaterial(workingdivisions, cities[ii], 'AI Cores');\\n            let storedRealEstate = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Real Estate');\\n            while (storedrobots['qty'] < 0) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Robots', (0 - storedrobots['qty']) / 10);\\n                storedrobots = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Robots');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Robots', 0);\\n            while (storedhardware['qty'] < 967) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Hardware', (967 - storedhardware['qty']) / 10);\\n                storedhardware = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Hardware');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Hardware', 0);\\n            while (storedaiCores['qty'] < 1396) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'AI Cores', (1396 - storedaiCores['qty']) / 10);\\n                storedaiCores = ns.corporation.getMaterial(workingdivisions, cities[ii], 'AI Cores');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'AI Cores', 0);\\n            while (storedRealEstate['qty'] < 476) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Real Estate', (476 - storedRealEstate['qty']) / 10);\\n                storedRealEstate = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Real Estate');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Real Estate', 0);\\n        }\\n        else {\\n            ns.alert('Unable to Buy first round of production material; Warehouse Capacity too low.');\\n        }\\n    }\\n    while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]).developmentProgress < 100) {\\n        ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]).developmentProgress);\\n        await ns.sleep(15000);\\n    }\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[0], 'MAX', 'MP', true);\\n    while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[1]).developmentProgress < 100) {\\n        ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[1]).developmentProgress);\\n        await ns.sleep(15000);\\n    }\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[1], 'MAX', 'MP', true);\\n    while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[2]).developmentProgress < 100) {\\n        ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[2]).developmentProgress);\\n        await ns.sleep(15000);\\n    }\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[2], 'MAX', 'MP', true);\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        for (let jj in employees) {\\n            await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], usefuljobs[jj % 5]);\\n        }\\n    }\\n    ns.print('Stockpiling Product');\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[0], 'PROD*0.1', 'MP', true);\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[1], 'PROD*0.1', 'MP', true);\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[2], 'PROD*0.1', 'MP', true);\\n    for (let ii in cities) {\\n        while (ns.corporation.getWarehouse(workingdivisions, cities[ii]).sizeUsed < ns.corporation.getWarehouse(workingdivisions, cities[ii]).size * 0.8) {\\n            await ns.sleep(15000);\\n        }\\n    }\\n    for (let ii in cities) {\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'Robots', 'MAX', 0);\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'Hardware', 'MAX', 0);\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'AI Cores', 'MAX', 0);\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'Real Estate', 'MAX', 0);\\n    }\\n    while (ns.corporation.getMaterial(workingdivisions, cities[0], 'Real Estate').qty > 0) {\\n        ns.print('Waiting to sell Material');\\n        await ns.sleep(60000);\\n    }\\n    for (let ii in cities) {\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'Robots', 0, 0);\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'Hardware', 0, 0);\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'AI Cores', 0, 0);\\n        ns.corporation.sellMaterial(workingdivisions, cities[ii], 'Real Estate', 0, 0);\\n    }\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[0], 0, 0, true);\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[1], 0, 0, true);\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[2], 0, 0, true);\\n    //\\t// Store up max product\\n    while (true) {\\n        for (let ii in cities) {\\n            while (ns.corporation.getWarehouse(workingdivisions, cities[ii]).sizeUsed < ns.corporation.getWarehouse(workingdivisions, cities[ii]).size * 0.99) {\\n                ns.print('Awaiting for max Warehouse: ' + cities[ii]);\\n                await ns.sleep(60000);\\n            }\\n        }\\n        for (let ii in cities) {\\n            let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], 'Business');\\n            }\\n        }\\n        while (ns.corporation.getCorporation().state != 'START') {\\n            ns.print('Awaiting Start');\\n            await ns.sleep(100);\\n        }\\n        while (ns.corporation.getCorporation().state == 'START') {\\n            ns.print('Awaiting Start to End');\\n            await ns.sleep(100);\\n        }\\n        ns.print('Selling Product');\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[0], 'MAX', 'MP', true);\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[1], 'MAX', 'MP', true);\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[2], 'MAX', 'MP', true);\\n        ns.print('Awaiting Start');\\n        while (ns.corporation.getCorporation().state != 'START') {\\n            await ns.sleep(10);\\n        }\\n        ns.print('Awaiting Start to End');\\n        while (ns.corporation.getCorporation().state == 'START') {\\n            await ns.sleep(10);\\n        }\\n        ns.print('Start has ended.');\\n        while ((ns.corporation.getCorporation().state != 'START') && (ns.corporation.getInvestmentOffer().round == 1)) {\\n            ns.print(ns.corporation.getInvestmentOffer().funds);\\n            ns.print(firstoffer * ns.getBitNodeMultipliers()['CorporationValuation']);\\n            ns.print(ns.corporation.getInvestmentOffer().funds >= (firstoffer * ns.getBitNodeMultipliers()['CorporationValuation']));\\n            if (ns.corporation.getInvestmentOffer().funds >= firstoffer * ns.getBitNodeMultipliers()['CorporationValuation']) {\\n                ns.corporation.acceptInvestmentOffer();\\n                break;\\n            }\\n            await ns.sleep(100);\\n        }\\n        if (ns.corporation.getInvestmentOffer().round == 2) {\\n            break;\\n        }\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[0], 0, 0, true);\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[1], 0, 0, true);\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[2], 0, 0, true);\\n        for (let ii in cities) {\\n            let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], usefuljobs[jj % 5]);\\n            }\\n        }\\n        await ns.sleep(100);\\n    }\\n    //\\t// Got first funding round\\n    //\\t// Now to spend it\\n    //\\t// upgrade to 20 for the employee upgrades\\n    //\\t// upgrade to 10 for the others\\n    //\\t// ignore Wilson for now\\n    for (let ii in upgrades) {\\n        let upgradelevel = 0;\\n        switch (upgrades[ii]) {\\n            case 'Nuoptimal Nootropic Injector Implants':\\n                upgradelevel = 20;\\n                break;\\n            case 'Speech Processor Implants':\\n                upgradelevel = 20;\\n                break;\\n            case 'Neural Accelerators':\\n                upgradelevel = 20;\\n                break;\\n            case 'FocusWires':\\n                upgradelevel = 20;\\n                break;\\n            case 'Smart Factories':\\n                upgradelevel = 10;\\n                break;\\n            case 'Smart Storage':\\n                upgradelevel = 10;\\n                break;\\n            case 'DreamSense':\\n                upgradelevel = 10;\\n                break;\\n            case 'ABC SalesBots':\\n                upgradelevel = 10;\\n                break;\\n            case 'Project Insight':\\n                upgradelevel = 10;\\n                break;\\n            case 'Wilson Analytics':\\n                upgradelevel = 0;\\n                break;\\n        }\\n        while (ns.corporation.getUpgradeLevel(upgrades[ii]) < upgradelevel) {\\n            ns.corporation.levelUpgrade(upgrades[ii]);\\n        }\\n    }\\n    // upgrade warehouses to 1600\\n    // upgrade employees to 60\\n    for (let ii in cities) {\\n        while (ns.corporation.getOffice(workingdivisions, cities[ii]).size < 60) {\\n            while (ns.corporation.getCorporation.funds < ns.corporation.getOfficeSizeUpgradeCost(workingdivisions, cities[ii], 3)) {\\n                await ns.sleep(1000);\\n            }\\n            ns.corporation.upgradeOfficeSize(workingdivisions, cities[ii], 3);\\n            await ns.sleep(10);\\n        }\\n        while (ns.corporation.getOffice(workingdivisions, cities[ii]).employees.length < ns.corporation.getOffice(workingdivisions, cities[ii]).size) {\\n            ns.corporation.hireEmployee(workingdivisions, cities[ii]);\\n            await ns.sleep(10);\\n        }\\n    }\\n    for (let ii in cities) {\\n        while (ns.corporation.getWarehouse(workingdivisions, cities[ii]).size <= 1600) {\\n            ns.corporation.upgradeWarehouse(workingdivisions, cities[ii]);\\n            await ns.sleep(10);\\n        }\\n    }\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        for (let jj in employees) {\\n            await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], workingresearchjobs[jj % 15]);\\n        }\\n    }\\n    //\\t\\t// for remaining money \\n    //\\t//  cycle through employee upgrades 2x\\n    //\\t\\t// cycle through production, storage, research upgrades 1x\\n    escape = 0;\\n    while ((ns.corporation.getCorporation().funds > ns.corporation.getUpgradeLevelCost('FocusWires')) && (escape == 0)) {\\n        for (let ii in upgrades) {\\n            let upgradelevel = 0;\\n            switch (upgrades[ii]) {\\n                case 'Nuoptimal Nootropic Injector Implants':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'Speech Processor Implants':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'Neural Accelerators':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'FocusWires':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'Smart Factories':\\n                    upgradelevel = 1;\\n                    break;\\n                case 'Smart Storage':\\n                    upgradelevel = 1;\\n                    break;\\n                case 'Project Insight':\\n                    upgradelevel = 1;\\n                    break;\\n                case 'Wilson Analytics':\\n                    upgradelevel = 0;\\n                    break;\\n                case 'DreamSense':\\n                    upgradelevel = 0;\\n                    break;\\n                case 'ABC SalesBots':\\n                    upgradelevel = 1;\\n                    break;\\n            }\\n            let testcondition = 0;\\n            while (testcondition < upgradelevel) {\\n                if (ns.corporation.getCorporation().funds > ns.corporation.getUpgradeLevelCost(upgrades[ii])) {\\n                    ns.corporation.levelUpgrade(upgrades[ii]);\\n                }\\n                else {\\n                    escape++;\\n                    break;\\n                }\\n                testcondition++;\\n            }\\n        }\\n    }\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        if (cities[ii] == researchcity) {\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], researchworkdistribution[jj % 4]);\\n            }\\n        }\\n        else {\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], workingresearchjobs[jj % 15]);\\n            }\\n        }\\n    }\\n    //\\tdevelop new product x3\\n    ns.print(ns.corporation.getDivision(workingdivisions).products);\\n    ns.corporation.discontinueProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]);\\n    let oldname = ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1].split('-');\\n    ns.print(oldname);\\n    let newname = oldname[0] + '-' + (parseInt(oldname[1]) + 1);\\n    ns.print(newname);\\n    ns.corporation.makeProduct(workingdivisions, researchcity, newname, ns.corporation.getCorporation().funds / 20, ns.corporation.getCorporation().funds / 20);\\n    ns.print(ns.corporation.getDivision(workingdivisions).products);\\n    while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress < 100) {\\n        ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress);\\n        await ns.sleep(15000);\\n    }\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], 'MAX', 'MP', true);\\n    ns.print(ns.corporation.getDivision(workingdivisions).products);\\n    ns.corporation.discontinueProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]);\\n    oldname = ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1].split('-');\\n    ns.print(oldname);\\n    newname = oldname[0] + '-' + (parseInt(oldname[1]) + 1);\\n    ns.print(newname);\\n    ns.corporation.makeProduct(workingdivisions, researchcity, newname, ns.corporation.getCorporation().funds / 20, ns.corporation.getCorporation().funds / 20);\\n    while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress < 100) {\\n        ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress);\\n        await ns.sleep(15000);\\n    }\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], 'MAX', 'MP', true);\\n    ns.print(ns.corporation.getDivision(workingdivisions).products);\\n    ns.corporation.discontinueProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]);\\n    oldname = ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1].split('-');\\n    ns.print(oldname);\\n    newname = oldname[0] + '-' + (parseInt(oldname[1]) + 1);\\n    ns.print(newname);\\n    ns.corporation.makeProduct(workingdivisions, researchcity, newname, ns.corporation.getCorporation().funds / 20, ns.corporation.getCorporation().funds / 20);\\n    while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress < 100) {\\n        ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress);\\n        await ns.sleep(15000);\\n    }\\n    ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], 'MAX', 'MP', true);\\n    while (ns.corporation.getDivision(workingdivisions).research <= 75000) {\\n        ns.print('waiting for research');\\n        await ns.sleep(10000);\\n    }\\n    ns.corporation.research(workingdivisions, 'Market-TA.I');\\n    ns.corporation.research(workingdivisions, 'Market-TA.II');\\n    for (let ii in ns.corporation.getDivision(workingdivisions).products) {\\n        ns.corporation.setProductMarketTA2(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ii], true);\\n    }\\n    for (let ii in cities) {\\n        ns.print(cities[ii] + ' Employee Moving');\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        for (let jj in employees) {\\n            await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], usefuljobs[jj % 5]);\\n        }\\n    }\\n    //  //\\t// buy production materials\\n    for (let ii in cities) {\\n        if (ns.corporation.getWarehouse(workingdivisions, cities[ii]).size >= 1200) {\\n            let storedrobots = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Robots');\\n            let storedhardware = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Hardware');\\n            let storedaiCores = ns.corporation.getMaterial(workingdivisions, cities[ii], 'AI Cores');\\n            let storedRealEstate = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Real Estate');\\n            while (storedrobots['qty'] < 0) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Robots', (0 - storedrobots['qty']) / 10);\\n                storedrobots = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Robots');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Robots', 0);\\n            while (storedhardware['qty'] < 5514) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Hardware', (5514 - storedhardware['qty']) / 10);\\n                storedhardware = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Hardware');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Hardware', 0);\\n            while (storedaiCores['qty'] < 5514) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'AI Cores', (5514 - storedaiCores['qty']) / 10);\\n                storedaiCores = ns.corporation.getMaterial(workingdivisions, cities[ii], 'AI Cores');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'AI Cores', 0);\\n            while (storedRealEstate['qty'] < 23556) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Real Estate', (23556 - storedRealEstate['qty']) / 10);\\n                storedRealEstate = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Real Estate');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Real Estate', 0);\\n        }\\n        else {\\n            ns.tprint('Unable to Buy second round of production material; Warehouse Capacity too low.');\\n        }\\n    }\\n    for (let ii in cities) {\\n        if (ns.corporation.getWarehouse(workingdivisions, cities[ii]).size >= 3000) {\\n            let storedrobots = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Robots');\\n            let storedhardware = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Hardware');\\n            let storedaiCores = ns.corporation.getMaterial(workingdivisions, cities[ii], 'AI Cores');\\n            let storedRealEstate = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Real Estate');\\n            while (storedrobots['qty'] < 0) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Robots', (0 - storedrobots['qty']) / 10);\\n                storedrobots = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Robots');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Robots', 0);\\n            while (storedhardware['qty'] < 13847) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Hardware', (13847 - storedhardware['qty']) / 10);\\n                storedhardware = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Hardware');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Hardware', 0);\\n            while (storedaiCores['qty'] < 13847) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'AI Cores', (13847 - storedaiCores['qty']) / 10);\\n                storedaiCores = ns.corporation.getMaterial(workingdivisions, cities[ii], 'AI Cores');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'AI Cores', 0);\\n            while (storedRealEstate['qty'] < 56889) {\\n                ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Real Estate', (56889 - storedRealEstate['qty']) / 10);\\n                storedRealEstate = ns.corporation.getMaterial(workingdivisions, cities[ii], 'Real Estate');\\n                await ns.sleep(10);\\n            }\\n            ns.corporation.buyMaterial(workingdivisions, cities[ii], 'Real Estate', 0);\\n        }\\n        else {\\n            ns.tprint('Unable to Buy third round of production material; Warehouse Capacity too low.');\\n        }\\n    }\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        for (let jj in employees) {\\n            await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], usefuljobs[jj % 5]);\\n        }\\n    }\\n    ns.exit();\\n    await ns.sleep(100000);\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        if (cities[ii] == researchcity) {\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], researchworkdistribution[jj % 4]);\\n            }\\n        }\\n        else {\\n            for (let jj in employees) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], workingresearchjobs[jj % 15]);\\n            }\\n        }\\n    }\\n    while (true) {\\n        ns.print(ns.corporation.getDivision(workingdivisions).products);\\n        oldname = ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1].split('-');\\n        ns.print(oldname);\\n        newname = oldname[0] + '-' + (parseInt(oldname[1]) + 1);\\n        ns.print(newname);\\n        ns.corporation.discontinueProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]);\\n        ns.corporation.makeProduct(workingdivisions, researchcity, newname, ns.corporation.getCorporation().funds / 20, ns.corporation.getCorporation().funds / 20);\\n        ns.print(ns.corporation.getDivision(workingdivisions).products);\\n        while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress < 100) {\\n            ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress);\\n            await ns.sleep(15000);\\n        }\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], 'MAX', 'MP', true);\\n        ns.corporation.setProductMarketTA2(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], true);\\n        await ns.sleep(300000);\\n        while ((ns.corporation.getCorporation().state != 'START') && (ns.corporation.getInvestmentOffer().round == 2)) {\\n            ns.print(ns.corporation.getInvestmentOffer().funds);\\n            ns.print(secondoffer * ns.getBitNodeMultipliers()['CorporationValuation']);\\n            ns.print(ns.corporation.getInvestmentOffer().funds >= (secondoffer * ns.getBitNodeMultipliers()['CorporationValuation']));\\n            if (ns.corporation.getInvestmentOffer().funds >= secondoffer * ns.getBitNodeMultipliers()['CorporationValuation']) {\\n                ns.tprint(ns.nFormat(ns.corporation.getInvestmentOffer().funds, '$0,0'));\\n                ns.corporation.acceptInvestmentOffer();\\n                break;\\n            }\\n            await ns.sleep(100);\\n        }\\n        if (ns.corporation.getInvestmentOffer().round == 3) {\\n            break;\\n        }\\n    }\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        for (let jj in employees) {\\n            await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], usefuljobs[jj % 5]);\\n        }\\n    }\\n    //\\t// Done with second investment\\n    //\\t// Move to 3rd investment, possible TA2\\n    while (parseInt(oldname[1]) < 100) {\\n        ns.print(ns.corporation.getDivision(workingdivisions).products);\\n        oldname = ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1].split('-');\\n        ns.print(oldname);\\n        newname = oldname[0] + '-' + (parseInt(oldname[1]) + 1);\\n        ns.print(newname);\\n        ns.corporation.discontinueProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]);\\n        ns.corporation.makeProduct(workingdivisions, researchcity, newname, ns.corporation.getCorporation().funds / 20, ns.corporation.getCorporation().funds / 20);\\n        ns.print(ns.corporation.getDivision(workingdivisions).products);\\n        while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress < 100) {\\n            ns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress);\\n            await ns.sleep(15000);\\n        }\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], 'MAX', 'MP', true);\\n        ns.corporation.setProductMarketTA2(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], true);\\n    }\\n    for (let ii in cities) {\\n        while (ns.corporation.getOffice(workingdivisions, cities[ii]).size < 150) {\\n            while (ns.corporation.getCorporation.funds < (ns.corporation.getOfficeSizeUpgradeCost(workingdivisions, cities[ii], 3))) {\\n                await ns.sleep(1000);\\n            }\\n            //\\t\\t\\tfor (let jj in cities) {\\n            ns.corporation.upgradeOfficeSize(workingdivisions, cities[ii], 3);\\n            //\\t\\t\\t}\\n            await ns.sleep(10);\\n        }\\n        while (ns.corporation.getOffice(workingdivisions, cities[ii]).employees.length < ns.corporation.getOffice(workingdivisions, cities[ii]).size) {\\n            ns.corporation.hireEmployee(workingdivisions, cities[ii]);\\n            await ns.sleep(10);\\n        }\\n    }\\n    for (let ii in cities) {\\n        while (ns.corporation.getWarehouse(workingdivisions, cities[ii]).size <= 5000) {\\n            ns.corporation.upgradeWarehouse(workingdivisions, cities[ii]);\\n            await ns.sleep(10);\\n        }\\n    }\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        for (let jj in employees) {\\n            if (ns.corporation.getEmployee(workingdivisions, cities[ii], employees[jj]).pos != usefuljobs[jj % 5]) {\\n                await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], usefuljobs[jj % 5]);\\n            }\\n        }\\n    }\\n    escape = 0;\\n    while (escape == 0) {\\n        let upgradecosts = 0;\\n        for (let ii in upgrades) {\\n            let upgradelevel = 0;\\n            switch (upgrades[ii]) {\\n                case 'Nuoptimal Nootropic Injector Implants':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'Speech Processor Implants':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'Neural Accelerators':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'FocusWires':\\n                    upgradelevel = 2;\\n                    break;\\n                case 'Smart Factories':\\n                    upgradelevel = 1;\\n                    break;\\n                case 'Smart Storage':\\n                    upgradelevel = 1;\\n                    break;\\n                case 'Project Insight':\\n                    upgradelevel = 1;\\n                    break;\\n                case 'Wilson Analytics':\\n                    upgradelevel = 0;\\n                    break;\\n                case 'DreamSense':\\n                    upgradelevel = 0;\\n                    break;\\n                case 'ABC SalesBots':\\n                    upgradelevel = 1;\\n                    break;\\n            }\\n            let testcondition = 0;\\n            while (testcondition < upgradelevel) {\\n                upgradecosts += ns.corporation.getUpgradeLevelCost(upgrades[ii]);\\n                testcondition++;\\n            }\\n        }\\n        if (ns.corporation.getCorporation().funds > upgradecosts) {\\n            for (let ii in upgrades) {\\n                let upgradelevel = 0;\\n                switch (upgrades[ii]) {\\n                    case 'Nuoptimal Nootropic Injector Implants':\\n                        upgradelevel = 2;\\n                        break;\\n                    case 'Speech Processor Implants':\\n                        upgradelevel = 2;\\n                        break;\\n                    case 'Neural Accelerators':\\n                        upgradelevel = 2;\\n                        break;\\n                    case 'FocusWires':\\n                        upgradelevel = 2;\\n                        break;\\n                    case 'Smart Factories':\\n                        upgradelevel = 1;\\n                        break;\\n                    case 'Smart Storage':\\n                        upgradelevel = 1;\\n                        break;\\n                    case 'Project Insight':\\n                        upgradelevel = 1;\\n                        break;\\n                    case 'Wilson Analytics':\\n                        upgradelevel = 0;\\n                        break;\\n                    case 'DreamSense':\\n                        upgradelevel = 0;\\n                        break;\\n                    case 'ABC SalesBots':\\n                        upgradelevel = 1;\\n                        break;\\n                }\\n                let testcondition = 0;\\n                while (testcondition < upgradelevel) {\\n                    if (ns.corporation.getCorporation().funds > ns.corporation.getUpgradeLevelCost(upgrades[ii])) {\\n                        ns.corporation.levelUpgrade(upgrades[ii]);\\n                    }\\n                    else {\\n                        escape++;\\n                        break;\\n                    }\\n                    testcondition++;\\n                }\\n            }\\n        }\\n        else {\\n            escape++;\\n        }\\n        await ns.sleep(10);\\n    }\\n    let researchqueue = 3;\\n    if (ns.corporation.hasResearched(workingdivisions, 'uPgrade: Capacity.I')) {\\n        researchqueue++;\\n    }\\n    if (ns.corporation.hasResearched(workingdivisions, 'uPgrade: Capacity.II')) {\\n        researchqueue++;\\n    }\\n    for (let ii in cities) {\\n        let employees = ns.corporation.getOffice(workingdivisions, cities[ii]).employees;\\n        if (cities[ii] == researchcity) {\\n            for (let jj in employees) {\\n                if (ns.corporation.getEmployee(workingdivisions, cities[ii], employees[jj]).pos != researchworkdistribution[jj % 4]) {\\n                    await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], researchworkdistribution[jj % 4]);\\n                }\\n            }\\n        }\\n        else {\\n            for (let jj in employees) {\\n                if (ns.corporation.getEmployee(workingdivisions, cities[ii], employees[jj]).pos != workingresearchjobs[jj % 15]) {\\n                    await ns.corporation.assignJob(workingdivisions, cities[ii], employees[jj], workingresearchjobs[jj % 15]);\\n                }\\n            }\\n        }\\n    }\\n    while (parseInt(oldname[1]) < 100) {\\n        ns.print(oldname);\\n        ns.print((parseInt(oldname[1]) % 3));\\n        if ((parseInt(oldname[1]) % 3) == 0) {\\n            while (ns.corporation.getCorporation().funds > ns.corporation.getHireAdVertCost(workingdivisions)) {\\n                ns.corporation.hireAdVert(workingdivisions);\\n            }\\n        }\\n        else {\\n            while (ns.corporation.getCorporation().funds > ns.corporation.getUpgradeLevelCost('Wilson Analytics')) {\\n                ns.corporation.levelUpgrade('Wilson Analytics');\\n                await ns.sleep(10);\\n            }\\n        }\\n        ns.print(ns.corporation.getDivision(workingdivisions).products);\\n        oldname = ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1].split('-');\\n        //\\t\\tns.print(oldname)\\n        newname = oldname[0] + '-' + (parseInt(oldname[1]) + 1);\\n        //\\t\\tns.print(newname)\\n        if (ns.corporation.getDivision(workingdivisions).products.length == researchqueue) {\\n            ns.corporation.discontinueProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[0]);\\n        }\\n        ns.corporation.makeProduct(workingdivisions, researchcity, newname, ns.corporation.getCorporation().funds / 20, ns.corporation.getCorporation().funds / 20);\\n        //\\t\\tns.print(ns.corporation.getDivision(workingdivisions).products)\\n        while (ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress < 100) {\\n            //\\t\\t\\tns.print(ns.corporation.getProduct(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1]).developmentProgress)\\n            await ns.sleep(15000);\\n        }\\n        ns.corporation.sellProduct(workingdivisions, cities[0], ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], 'MAX', 'MP', true);\\n        ns.corporation.setProductMarketTA2(workingdivisions, ns.corporation.getDivision(workingdivisions).products[ns.corporation.getDivision(workingdivisions).products.length - 1], true);\\n    }\\n    ns.alert('Produced 100 products');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamFuY29ycC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9qYW5jb3JwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBRTVCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNULEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFdEIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQ3JGLE1BQU0sYUFBYSxHQUFHLENBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDbk0sTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDeEwsTUFBTSxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFBO0lBQ3JILE1BQU0sUUFBUSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSx1Q0FBdUMsRUFBRSwyQkFBMkIsRUFBRSxxQkFBcUIsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixDQUFD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QUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUMxRjtTQUNEO0tBQ0Q7SUFFRCx3QkFBd0I7SUFDeEIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDNUosRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDNUosRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFMUosMkJBQTJCO0lBQzNCLEtBQUssSUFBSSxFQUFFLElBQUksTUFBTSxFQUFFO1FBQ3RCLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRTtZQUMxRSxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUE7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RUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxFQUFFO1FBQ3RNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUNsTSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDckI7SUFDRCxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFFbk0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQy9ELEVBQUUsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENB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\",\"filename\":\"/xsink/jancorp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1028,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    for (var server of RecursiveScan(ns)) {\\n        await ns.scriptKill('weaken.js', server);\\n        await ns.scriptKill('grow.js', server);\\n        await ns.scriptKill('hack.js', server);\\n        await ns.scriptKill('weaken-once.js', server);\\n        await ns.scriptKill('grow.js-once.js', server);\\n        await ns.scriptKill('hack.js-once.js', server);\\n        await ns.scriptKill('dothemagic.js', server);\\n    }\\n    await ns.print('Killed all proceeses');\\n}\\nfunction RecursiveScan(ns, root, found) {\\n    if (found == null)\\n        found = new Array();\\n    if (root == null)\\n        root = 'home';\\n    if (found.find(p => p == root) == undefined) {\\n        found.push(root);\\n        for (const server of ns.scan(root))\\n            if (found.find(p => p == server) == undefined)\\n                RecursiveScan(ns, server, found);\\n    }\\n    return found;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2EuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsva2EuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixLQUFLLElBQUksTUFBTSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNyQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkMsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUMsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzdDO0lBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSztJQUNyQyxJQUFJLEtBQUssSUFBSSxJQUFJO1FBQUUsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDdkMsSUFBSSxJQUFJLElBQUksSUFBSTtRQUFFLElBQUksR0FBRyxNQUFNLENBQUM7SUFDaEMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLFNBQVMsRUFBRTtRQUM1QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pCLEtBQUssTUFBTSxNQUFNLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDakMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLFNBQVM7Z0JBQzVDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ25DO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDIn0=\",\"filename\":\"/xsink/ka.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tprint('Karma                   : ' + ns.heart.break());\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2FybWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsva2FybWEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLDRCQUE0QixHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDIn0=\",\"filename\":\"/xsink/karma.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Prep, IsPrepped } from \\\"/xsink/prep.js\\\";\\nimport { BATCH_SPACER, MaxHackForServer, GetBestMetricsForServer, HGW_MODE } from \\\"/xsink/metrics.js\\\";\\nimport { MemoryMap, RunScript } from \\\"/xsink/ram.js\\\";\\nimport { HasFormulas, ServerReport, WaitPids } from \\\"/xsink/utils.js\\\";\\nconst H = 0;\\nconst W1 = 1;\\nconst G = 2;\\nconst W2 = 3;\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    if (!HasFormulas(ns)) {\\n        ns.tprint('ERROR: Formulas.exe is needed to run this script.');\\n        ns.exit();\\n    }\\n    let [server, maxPctTotalRam, loop] = ns.args;\\n    // ns.args[0] = target server name\\n    if (server == null) {\\n        ns.tprint('ERROR: No server specified');\\n        ns.exit();\\n    }\\n    if (maxPctTotalRam == null) {\\n        ns.tprint('ERROR: No max percentage of total ram specified');\\n        ns.exit();\\n    }\\n    if (loop == null) {\\n        loop = true;\\n    }\\n    // Manage the server!\\n    await ManageServer(ns, server, maxPctTotalRam, loop);\\n}\\nasync function ManageServer(ns, server, maxPctTotalRam, loop) {\\n    ns.print('INFO: Gathering batch metrics');\\n    // Batch cycle counter\\n    let cycle = 0;\\n    // Store hack level, this is just for reporting it when we detect a desync.\\n    // Ideally, most desyncs are caused by an increase in hackLevel mid-cycle,\\n    // fudging the batch metrics to the point of throwing batches out of sync\\n    let hackLevel = ns.getPlayer().skills.hacking;\\n    while (true) {\\n        // const pct = await GetBestPctForServer(ns, server, BATCH_SPACER, 0.05, 0.8, 0.05, maxPctTotalRam);\\n        // let metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1, maxPctTotalRam);\\n        let metrics = await GetBestMetricsForServer(ns, server, 1, MaxHackForServer(ns, server), maxPctTotalRam);\\n        //const pct= metrics.pct;\\n        //metrics.Report(ns);\\n        ServerReport(ns, server, metrics);\\n        // Since we prepped in main(), the only reason why we would ever enter this is our metrics changed, something desynced, or some other external factor\\n        // changed the server state or player capacities\\n        if (!IsPrepped(ns, server)) {\\n            const hackLevelChanged = ns.getPlayer().skills.hacking != hackLevel;\\n            let msg = (hackLevelChanged ? 'WARN: ' : 'ERROR: ') +\\n                'Desync detected, re-prepping ' + server + ' cycles= ' + cycle + ' hack= ' + ns.getPlayer().skills.hacking + ' (was ' + hackLevel + ')';\\n            //if (!hackLevelChanged)\\n            ns.tprint(msg);\\n            ns.print(msg);\\n            await Prep(ns, server, metrics);\\n            ns.print('SUCCESS: Server prepped!');\\n            cycle = 0; // reset cycle\\n            hackLevel = ns.getPlayer().skills.hacking;\\n            ServerReport(ns, server, metrics);\\n        }\\n        cycle++;\\n        let pids = new Array();\\n        let mem = new MemoryMap(ns);\\n        let coreBonus = 1 + (ns.getServer('home').cpuCores - 1) / 16;\\n        let batchCount = Math.min(metrics.maxBatches, Math.floor(mem.available * maxPctTotalRam / (metrics.batchRam / coreBonus)));\\n        if (batchCount <= 0) {\\n            ns.print('metrics.maxBatches = ' + metrics.maxBatches);\\n            ns.print('mem.available = ' + mem.available);\\n            ns.print('metrics.batchRam = ' + metrics.batchRam);\\n            ns.print('Math.floor(mem.available / metrics.batchRam) = ' + Math.floor(mem.available / metrics.batchRam));\\n            ns.print('FAIL: Insufficient ram to run a single batch! Aborting...');\\n            ns.exit();\\n        }\\n        ns.print('INFO: Spawning ' + batchCount + ' batches');\\n        for (let i = 0; i < batchCount; i++) {\\n            ns.print('INFO: Starting batch #' + (i + 1) + ' of ' + batchCount);\\n            if (!BatchFitsInMemoryBlocks(ns, metrics)) {\\n                ns.print('WARN: Not enough free memory to start batch #' + (i + 1) + ', lets take a break!');\\n                break;\\n            }\\n            pids = pids.concat(await StartBatch(ns, server, metrics, i));\\n            await ns.sleep(BATCH_SPACER * 4);\\n        }\\n        ServerReport(ns, server, metrics);\\n        ns.print('INFO: Waiting for batch to end (approx: ' + ns.tFormat(metrics.batchTime) + ')');\\n        await WaitPids(ns, pids);\\n        ns.print('SUCCESS: Cycle ended');\\n        ns.print('');\\n        if (!loop) {\\n            ns.print('SUCCESS: We are done, exiting, controller will restart us if needed...');\\n            return;\\n        }\\n        await ns.sleep(BATCH_SPACER);\\n    }\\n}\\nexport function BatchFitsInMemoryBlocks(ns, metrics) {\\n    const mem = new MemoryMap(ns);\\n    const HACK_RAM = ns.getScriptRam('hack-once.js');\\n    const GROW_RAM = ns.getScriptRam('grow-once.js');\\n    const WEAKEN_RAM = ns.getScriptRam('weaken-once.js');\\n    // Failsafe, on veut pas trop taxer\\n    if (metrics.batchRam > mem.available * 0.9) {\\n        ns.print('Batch won\\\\'t fit in 90% of total ram (failsalfe)');\\n        return false;\\n    }\\n    if (mem.ReserveBlock(metrics.threads[H] * HACK_RAM) == undefined) {\\n        ns.print('Could not find a block big enough for ' + metrics.threads[H] + ' hack threads');\\n        ns.print('Required = ' + metrics.threads[H] * HACK_RAM + ' Biggest block = ' + mem.BiggestBlock());\\n        return false;\\n    }\\n    if (mem.ReserveBlock(metrics.threads[G] * GROW_RAM) == undefined) {\\n        ns.print('Could not find a block big enough for ' + metrics.threads[G] + ' grow threads');\\n        return false;\\n    }\\n    for (let i = 0; i < (metrics.threads[W1] + metrics.threads[W2]) * WEAKEN_RAM; i++) {\\n        if (mem.ReserveBlock(WEAKEN_RAM) == undefined) {\\n            ns.print('Could not find enough network RAM for ' + (metrics.threads[W1] + metrics.threads[W2]) + ' weaken threads');\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\nasync function StartBatch(ns, server, metrics, batchNumber) {\\n    const colors = [\\n        '#9226e0', '#6b1a93', '#6754f7', '#e81284', '#dd9713', '#338fc4', '#6be84c', '#ea784b',\\n        '#1dd62a', '#ba02ed', '#4139dd', '#120087', '#4dcc53', '#8c2700', '#7f1ee8', '#2cb2ab',\\n        '#e84351', '#390b72', '#38c974', '#368293', '#e5a12b', '#4fe274', '#1230b7', '#21d392',\\n        '#9dd356', '#8c30e8', '#ed2fd3', '#d3303b', '#0dbf6f', '#e8009e', '#3799fc', '#bc3260'\\n    ];\\n    //const logColor = colors[batchNumber % colors.length];\\n    const logColor = 0;\\n    //ns.tprint(logColor);\\n    //export async function RunScript(ns, scriptName, target, threads, delay, expectedTime, batchNumber, logColor, allowSpread, allowPartial) {\\n    let w1pids = [];\\n    if (!HGW_MODE) {\\n        w1pids = await RunScript(ns, 'weaken-once.js', server, metrics.threads[W1], 0, metrics.times[W1], batchNumber, logColor, true, false);\\n        await ns.sleep(0);\\n        if (w1pids.length == 0) {\\n            ns.print('FAIL: W1 Aborting batch');\\n            await ns.sleep(metrics.batchTime);\\n            return [w1pids].flat(Infinity);\\n        }\\n    }\\n    const w2pids = await RunScript(ns, 'weaken-once.js', server, metrics.threads[W2], metrics.delays[W2], metrics.times[W2], batchNumber, logColor, true, false);\\n    await ns.sleep(0);\\n    if (w2pids.length == 0) {\\n        ns.print('FAIL: W2 Aborting batch');\\n        await ns.sleep(metrics.batchTime);\\n        return [w1pids, w2pids].flat(Infinity);\\n    }\\n    const gpids = await RunScript(ns, 'grow-once.js', server, metrics.threads[G], metrics.delays[G], metrics.times[G], batchNumber, logColor, false, false);\\n    await ns.sleep(0);\\n    if (gpids.length == 0) {\\n        ns.print('FAIL: G Aborting batch');\\n        await ns.sleep(metrics.batchTime);\\n        return [w1pids, gpids, w2pids].flat(Infinity);\\n    }\\n    const hpids = await RunScript(ns, 'hack-once.js', server, metrics.threads[H], metrics.delays[H], metrics.times[H], batchNumber, logColor, false, false);\\n    await ns.sleep(0);\\n    if (hpids.length == 0) {\\n        ns.print('FAIL: H Aborting batch');\\n        await ns.sleep(metrics.batchTime);\\n        return [hpids, w1pids, gpids, w2pids].flat(Infinity);\\n    }\\n    return [hpids, w1pids, gpids, w2pids].flat(Infinity);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9tYW5hZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV0RSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWixNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDYixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWixNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFYixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLG1EQUFtRCxDQUFDLENBQUM7UUFDL0QsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ1Y7SUFFRCxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBRTdDLGtDQUFrQztJQUNsQyxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7UUFDbkIsRUFBRSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQ3hDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNWO0lBRUQsSUFBSSxjQUFjLElBQUksSUFBSSxFQUFF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\",\"filename\":\"/xsink/manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:https://hydroflame.github.io/d00f2a90-76fe-4846-b8b4-6dc46b761975\",\"moduleSequenceNumber\":28408},{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:https://hydroflame.github.io/5bd7e172-88e6-4435-b97e-0d12d8a94a66\",\"moduleSequenceNumber\":28404},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:https://hydroflame.github.io/f8721cdd-6fa2-4a5a-b3c0-ff354f2e06eb\",\"moduleSequenceNumber\":28408},{\"filename\":\"/xsink/ram.js\",\"url\":\"blob:https://hydroflame.github.io/ce6665fb-aa9c-4855-97bc-b49153eac88e\",\"moduleSequenceNumber\":28393},{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:https://hydroflame.github.io/7bf75100-297b-4963-b4d9-32d91bf4dd87\",\"moduleSequenceNumber\":28404},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:https://hydroflame.github.io/b7d3c265-d846-49a8-8fd6-e333f57169ae\",\"moduleSequenceNumber\":28408},{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:https://hydroflame.github.io/31f6bf80-61f9-4a1e-bba5-3660f2097fd1\",\"moduleSequenceNumber\":28404},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:https://hydroflame.github.io/a11502ed-4f79-4c07-b878-ce912ae96451\",\"moduleSequenceNumber\":28408},{\"filename\":\"/xsink/ram.js\",\"url\":\"blob:https://hydroflame.github.io/11d1a9e6-a8e5-4774-8c1b-ff335e538f1d\",\"moduleSequenceNumber\":28393},{\"filename\":\"/xsink/metrics.js\",\"url\":\"blob:https://hydroflame.github.io/96163a37-85b1-4ecb-896e-5bf9ba8ef59c\",\"moduleSequenceNumber\":28387},{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:https://hydroflame.github.io/b8ae563f-32d5-4705-ad16-a8eb46ec4200\",\"moduleSequenceNumber\":28404},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:https://hydroflame.github.io/35ee1c0c-fdf2-46f3-bd40-bcf48ad9159e\",\"moduleSequenceNumber\":28408},{\"filename\":\"/xsink/ram.js\",\"url\":\"blob:https://hydroflame.github.io/94d45397-66f4-415b-aabf-2298129c0f81\",\"moduleSequenceNumber\":28393},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:https://hydroflame.github.io/6db54e41-d599-4be6-aa96-8e72c52aa183\",\"moduleSequenceNumber\":28408},{\"filename\":\"/xsink/prep.js\",\"url\":\"blob:https://hydroflame.github.io/8164d08a-3271-4543-b896-44f0056f22ee\",\"moduleSequenceNumber\":28392},{\"filename\":\"/xsink/manager.js\",\"url\":\"blob:https://hydroflame.github.io/62c6b6fa-03d3-4be2-8e52-a9766e389d93\",\"moduleSequenceNumber\":35214}],\"dependents\":[],\"ramUsage\":8.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MemoryMap } from \\\"/xsink/ram.js\\\";\\nimport { HasFormulas, FormatMoney, GetAllServers, ColorPrint, GetNextLevelXp } from \\\"/xsink/utils.js\\\";\\nimport { PrintTable, DefaultStyle } from '/xsink/tables.js';\\nexport const H = 0; // Index of HACK data\\nexport const W1 = 1; // Index of first WEAKEN data\\nexport const G = 2; // Index of GROW data\\nexport const W2 = 3; // Index of second WEAKEN data\\nexport const BATCH_SPACER = 25; // Spacer between jobs (and batches) in milliseconds\\nexport let HGW_MODE = false;\\nconst DEPTH = 10;\\nlet HACK_RAM = undefined;\\nlet GROW_RAM = undefined;\\nlet WEAKEN_RAM = undefined;\\nlet LEECH = [];\\nlet metricsCounter = 0;\\nexport function MaxHackForServer(ns, server) {\\n    let so = ns.getServer(server);\\n    let po = ns.getPlayer();\\n    so.hackDifficulty = so.minDifficulty;\\n    const hackPctThread = ns.formulas.hacking.hackPercent(so, po);\\n    let ret = Math.ceil(1 / hackPctThread);\\n    if (ret == Infinity)\\n        ret = 0;\\n    //ns.tprint('Max threads for ' + server + ' is ' + ret);\\n    return ret;\\n}\\nexport function GetBestMetricsForServer(ns, server, minThreads, maxThreads, maxNetworkRamPct, depth = DEPTH) {\\n    if (maxThreads == 0)\\n        return undefined;\\n    let STEP = (maxThreads - minThreads) / depth;\\n    // ns.tprint('');\\n    // ns.tprint('minThreads: ' + minThreads + ' maxThreads: ' + maxThreads + ' STEP: ' + STEP);\\n    let steps = new Set();\\n    for (let i = minThreads; i <= maxThreads; i += STEP)\\n        steps.add(Math.round(i));\\n    steps = [...steps];\\n    //ns.tprint('Steps: ' + steps);\\n    if (steps.length == 1)\\n        return steps[0];\\n    let bestMetrics = undefined;\\n    for (const threads of steps) {\\n        let pct = threads / MaxHackForServer(ns, server);\\n        const metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1, maxNetworkRamPct);\\n        //ns.tprint('Trying pct: ' + (pct * 100).toFixed(2) + ' threads=' + threads + ' cps: ' + metrics.cashPerSecond);\\n        if (bestMetrics == undefined || metrics.cashPerSecond > bestMetrics.cashPerSecond) {\\n            bestMetrics = metrics;\\n        }\\n        else if (bestMetrics != undefined && metrics.cashPerSecond < bestMetrics.cashPerSecond * 0.95)\\n            break;\\n        //await ns.sleep(0);\\n    }\\n    if (STEP > 1) {\\n        //ns.tprint('WARN: Best threads yet for server is ' + bestMetrics.threads[H]);\\n        return GetBestMetricsForServer(ns, server, Math.max(Math.round(bestMetrics.threads[H] - STEP), minThreads), Math.min(Math.round(bestMetrics.threads[H] + STEP), maxThreads), maxNetworkRamPct);\\n    }\\n    return bestMetrics;\\n}\\n// Solve for number of growth threads required to get from money_lo to money_hi\\nfunction solveGrow(base, money_lo, money_hi) {\\n    if (money_lo >= money_hi) {\\n        return 0;\\n    }\\n    let threads = 1000;\\n    let prev = threads;\\n    for (let i = 0; i < 30; ++i) {\\n        let factor = money_hi / Math.min(money_lo + threads, money_hi - 1);\\n        threads = Math.log(factor) / Math.log(base);\\n        if (Math.ceil(threads) == Math.ceil(prev)) {\\n            break;\\n        }\\n        prev = threads;\\n    }\\n    return Math.ceil(Math.max(threads, prev, 0));\\n}\\nexport function growthIdeal(ns, server, growthAmount, cores) {\\n    return Math.log(Math.pow(Math.min(1 + .03 / ns.getServerSecurityLevel(server), 1.0035), ns.growthAnalyze(server, growthAmount, cores))) / Math.log(Math.min(1 + .03 / ns.getServerMinSecurityLevel(server), 1.0035));\\n}\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    LEECH = [];\\n    for (let i = 0.05; i < 1; i += 0.05) {\\n        LEECH.push(i);\\n    }\\n    // let fixed = [];\\n    // let dynamic = [];\\n    // let s = performance.now();\\n    // for (let server of GetAllServers(ns).filter(s => ns.getServerMaxMoney(s) > 0)) {\\n    // \\tlet best = GetBestPctForServer(ns, server, BATCH_SPACER, 0, 0, 0, 1);\\n    // \\t// if (best == undefined)\\n    // \\t// \\tns.tprint('FAIL: best is undefined for ' + server);\\n    // \\tfixed.push(best);\\n    // }\\n    // ns.tprint((performance.now() - s) + 'ms for 5% increments (5% to 95%) ' + metricsCounter + ' metrics evaluated');\\n    // metricsCounter = 0;\\n    // s = performance.now();\\n    // for (let server of GetAllServers(ns).filter(s => ns.getServerMaxMoney(s) > 0)) {\\n    // \\tlet metrics = GetBestMetricsForServer(ns, server, 1, MaxHackForServer(ns, server), 1, 10);\\n    // \\t// if (metrics == undefined)\\n    // \\t// \\tns.tprint('FAIL: metrics is undefined for ' + server);\\n    // \\tdynamic.push(metrics);\\n    // }\\n    // ns.tprint((performance.now() - s) + 'ms for divide and conquer ' + metricsCounter + ' metrics evaluated');\\n    // if (fixed.length != dynamic.length) {\\n    // \\tns.tprint('FAIL: fixed and dynamic don\\\\'t have the same length?');\\n    // }\\n    // for (let i = 0; i < fixed.length; i++) {\\n    // \\tlet f = fixed[i];\\n    // \\tlet d = dynamic[i];\\n    // \\tif (f == null || d == null) continue;\\n    // \\tns.tprint(f.threads[H].toFixed(0).padStart(15) + d.threads[H].toFixed(0).padStart(15) +\\n    // \\t\\tf.cashPerSecond.toFixed(3).padStart(15) + d.cashPerSecond.toFixed(3).padStart(15));\\n    // }\\n    // return;\\n    HACK_RAM = ns.getScriptRam('hack-once.js');\\n    GROW_RAM = ns.getScriptRam('grow-once.js');\\n    WEAKEN_RAM = ns.getScriptRam('weaken-once.js');\\n    // let test= FindBestPctForServer(ns, 'phantasy');\\n    // return;\\n    if (ns.args[0] == 'test') {\\n        let server = ns.args[1] || 'n00dles';\\n        let best = GetBestMetricsForServer(ns, server, 1, MaxHackForServer(ns, server), 1);\\n        if (best)\\n            ns.tprint('FAIL: Best threads for server is ' + best.threads[H] + ' (' + (best.pct * 100).toFixed(2) + '%)');\\n        else\\n            ns.tprint('FAIL: Server ' + server + ' is not hackable.');\\n        return;\\n    }\\n    let start = performance.now();\\n    if (!HasFormulas(ns)) {\\n        ns.tprint('ERROR: Formulas.exe not found, running this command would take years, aborting.');\\n        ns.exit();\\n    }\\n    // args[0] : max total network ram percentage\\n    // args[1] : server name to analyze (if empty, do a full server list report)\\n    let [server, maxNetworkRamPct = 1, HGW] = ns.args;\\n    if (HGW != undefined)\\n        HGW_MODE = HGW;\\n    // This is a test to compare different grow thread calculation methods\\n    // if (server == 'grow') {\\n    // \\tlet player = ns.getPlayer();\\n    // \\t//let start = performance.now();\\n    // \\tfor (let server of GetAllServers(ns).filter(s => ns.getServerMaxMoney(s) > 0 /*&& ns.hasRootAccess(s)*/).sort(s => ns.getServerMaxMoney(s))) {\\n    // \\t\\tlet so = ns.getServer(server);\\n    // \\t\\tso.hackDifficulty = so.minDifficulty;\\n    // \\t\\tso.moneyAvailable = 0;\\n    // \\t\\t//let a = calculateGrowThreads(ns, so, player, 1);\\n    // \\t\\tlet metrics = new Metrics(ns, server, 0.99, 30, 1);\\n    // \\t\\tlet w = metrics.threads[G];\\n    // \\t\\tlet b = metrics.debugThreadsG;\\n    // \\t\\tlet pct = Math.round(b * 100 / w) - 100;\\n    // \\t\\tns.tprint(server.padEnd(25) + ('jean: ' + metrics.debugThreadsG).padEnd(25) + (' formulas: ' + metrics.threads[G]).padEnd(25) + ' %: ' + pct.toString().padStart(4));\\n    // \\t\\tawait ns.sleep(0);\\n    // \\t}\\n    // \\t// ns.tprint('end: ' + (performance.now() - start));\\n    // \\t// start = performance.now();\\n    // \\t// for (let server of GetAllServers(ns).filter(s => ns.getServerMaxMoney(s) > 0 /*&& ns.hasRootAccess(s)*/).sort(s => ns.getServerMaxMoney(s))) {\\n    // \\t// \\tlet so = ns.getServer(server);\\n    // \\t// \\tso.hackDifficulty = so.minDifficulty;\\n    // \\t// \\tso.moneyAvailable = so.moneyMax * 0.9;\\n    // \\t// \\tlet b = solveGrow(ns.formulas.hacking.growPercent(so, 1, player, 1), so.moneyAvailable, so.moneyMax);\\n    // \\t// \\t// let metrics = new Metrics(ns, server, 1, 30, 1);\\n    // \\t// \\t// let w = metrics.threads[G];\\n    // \\t// \\t// let b = metrics.debugThreadsG;\\n    // \\t// \\t// let pct = Math.round(b * 100 / w) - 100;\\n    // \\t// \\t// ns.tprint(server.padEnd(25) + ('fish: ' + metrics.debugThreadsG).padEnd(25) + (' Lambert: ' + metrics.threads[G]).padEnd(25) + ' %: ' + pct.toString().padStart(4));\\n    // \\t// \\tawait ns.sleep(0);\\n    // \\t// }\\n    // \\t//ns.tprint('end: ' + (performance.now() - start));\\n    // \\treturn;\\n    // }\\n    if (server == undefined) {\\n        await AnalyzeAllServers(ns, maxNetworkRamPct);\\n        ns.tprint('Executed in ' + Math.ceil(performance.now() - start) + ' milliseconds');\\n        return;\\n    }\\n    else {\\n        let results = [];\\n        for (const pct of LEECH) {\\n            let metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1, 1);\\n            if (metrics == undefined)\\n                ns.tprint('metrics is null?');\\n            else if (metrics.cashPerSecond == undefined)\\n                ns.tprint('cashPerSecond is null?');\\n            results.push(metrics);\\n            //await ns.sleep(0);\\n        }\\n        let bestPct = GetBestPctForServer(ns, server, BATCH_SPACER, 0.05, 1, 0.05, 1)?.pct ?? 0;\\n        let cpsorder = [...results].sort((a, b) => a.cashPerSecond - b.cashPerSecond);\\n        let ramorder = [...results].sort((a, b) => a.batchRam - b.batchRam);\\n        let batches = [...results].sort((a, b) => a.maxRunnableBatches - b.maxRunnableBatches);\\n        let tableData = [];\\n        const columns = [\\n            { header: ' ' + server, width: server.length + 2 },\\n            { header: '  $/sec', width: 10 },\\n            { header: ' BatchRam', width: 10 },\\n            { header: '    Count', width: 12 },\\n            { header: ' Charts', width: 34 },\\n            { header: ' Threads', width: 37 },\\n            { header: ' Cycle $', width: 9 },\\n            { header: ' Cycle time', width: 25 },\\n            { header: ' Batch XP', width: 10 },\\n            { header: ' Max to lvl', width: 12 }\\n        ];\\n        const barchar = '■';\\n        let maxH = Math.max(...results.map(s => s.threads[H]));\\n        let maxG = Math.max(...results.map(s => s.threads[G]));\\n        let maxW = Math.max(...results.map(s => s.threads[W1] + s.threads[W2]));\\n        for (const metrics of results) {\\n            // if (isNaN(metrics.batchMoney))\\n            // \\tns.tprint('metrics.batchMoney == NaN')\\n            // if (metrics.maxRunnableBatches == NaN)\\n            // \\tns.tprint('metrics.maxRunnableBatches == NaN')\\n            // if (metrics.batchMoney * metrics.maxRunnableBatches == NaN)\\n            // \\tns.tprint('metrics.maxRunnableBatches * metrics.batchMoney == NaN')\\n            // ns.tprint(metrics.batchMoney);\\n            // ns.tprint(metrics.maxRunnableBatches);\\n            let maxThreads = Math.max(...metrics.threads);\\n            let pctOfMax = Math.round(metrics.cashPerSecond / cpsorder[cpsorder.length - 1].cashPerSecond * 100);\\n            let pctH = Math.round(metrics.threads[H] / maxH * 100);\\n            let pctH2 = Math.round(metrics.threads[H] / maxThreads * 100);\\n            pctH = pctH2; //(pctH + pctH2) / 2;\\n            tableData.push([\\n                { color: bestPct == metrics.pct ? 'lime' : 'white', text: ((metrics.pct * 100).toFixed(2) + '% ').padStart(server.length + 1) },\\n                { color: 'white', text: ns.nFormat(metrics.cashPerSecond, '0.000a').padStart(9) },\\n                { color: 'white', text: ns.nFormat(Math.ceil(metrics.batchRam) * 1000000000, '0.0b').padStart(9) },\\n                { color: 'white', text: (metrics.maxRunnableBatches + '/' + metrics.maxBatches).padStart(11) },\\n                { color: metrics.maxRunnableBatches == 0 ? 'red' : 'lime', text: metrics.maxRunnableBatches == 0 ? ' Not enough RAM available!' : '$/sec'.padStart(6) + ' '.padEnd(pctOfMax / 4 + 2, barchar) },\\n                { color: 'orange', text: 'H ' + metrics.threads[H].toString().padStart(7) + ' '.padEnd(pctH / 4 + 2, barchar) },\\n                { color: 'white', text: ns.nFormat(metrics.batchMoney * metrics.maxRunnableBatches, '0.0a').padStart(8) },\\n                { color: 'white', text: ' ' + ns.tFormat(metrics.batchTime + BATCH_SPACER * metrics.maxRunnableBatches).padStart(9) },\\n                { color: 'white', text: ' ' + ns.nFormat(metrics.batchXp, '0.000a').padStart(8) },\\n                { color: 'white', text: ' ' + Math.ceil(GetNextLevelXp(ns).remaining / metrics.batchXp).toString().padStart(10) }\\n            ]);\\n            pctOfMax = Math.round(metrics.maxRunnableBatches / batches[ramorder.length - 1].maxRunnableBatches * 100);\\n            let pctG = Math.round(metrics.threads[G] / maxG * 100);\\n            let pctG2 = Math.round(metrics.threads[G] / maxThreads * 100);\\n            pctG = pctG2; //(pctG + pctG2) / 2;\\n            tableData.push([\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'orange', text: metrics.maxRunnableBatches == 0 ? '' : 'Count'.padStart(6) + ' '.padEnd(pctOfMax / 4 + 2, barchar) },\\n                { color: 'lime', text: 'G ' + metrics.threads[G].toString().padStart(7) + ' '.padEnd(pctG / 4 + 2, barchar) },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' }\\n            ]);\\n            pctOfMax = Math.round(metrics.batchRam / ramorder[ramorder.length - 1].batchRam * 100);\\n            let pctW = Math.round((metrics.threads[W1] + metrics.threads[W2]) / maxW * 100);\\n            let pctW2 = Math.round((metrics.threads[W1] + metrics.threads[W2]) / maxThreads * 100);\\n            pctW = pctW2; //(pctW + pctW2) / 2;\\n            let weakenThreadsText = HGW_MODE ? metrics.threads[W2].toString() : (metrics.threads[W1] + '/' + metrics.threads[W2]).toString();\\n            tableData.push([\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'yellow', text: metrics.maxRunnableBatches == 0 ? '' : 'B.Ram'.padStart(6) + ' '.padEnd(pctOfMax / 4 + 2, barchar) },\\n                { color: '#4488FF', text: 'W ' + weakenThreadsText.padStart(7) + ' '.padEnd(pctW / 4 + 2, barchar) },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' },\\n                { color: 'white', text: '' }\\n            ]);\\n            tableData.push(null);\\n        }\\n        tableData.pop();\\n        PrintTable(ns, tableData, columns, DefaultStyle(), ColorPrint);\\n        ns.tprint('Executed in ' + Math.ceil(performance.now() - start) + ' milliseconds');\\n    }\\n}\\nexport function GetBestPctForServer(ns, server, spacer = BATCH_SPACER, minPct = 0.05, maxPct = 1, step = 0.05, maxNetworkRamPct) {\\n    let best = undefined;\\n    for (const pct of LEECH) {\\n        const metrics = new Metrics(ns, server, pct, spacer, 1, maxNetworkRamPct);\\n        if (metrics.cashPerSecond > (best?.cashPerSecond ?? 0))\\n            best = metrics;\\n    }\\n    return best;\\n}\\nasync function AnalyzeAllServers(ns, maxNetworkRamPct) {\\n    const data = new Array();\\n    const servers = GetAllServers(ns).filter(s => ns.getServer(s).hasAdminRights && ns.getServer(s).moneyMax > 0);\\n    ns.tprint('INFO: Getting metrics for ' + servers.length + ' servers');\\n    for (let server of servers) {\\n        //ns.tprint('Checking server: ' + server);\\n        let metrics = GetBestMetricsForServer(ns, server, 1, MaxHackForServer(ns, server), maxNetworkRamPct);\\n        if (metrics)\\n            data.push(metrics);\\n        // let subData = new Array();\\n        // for (const pct of LEECH) {\\n        // \\tconst metrics = new Metrics(ns, server, pct, BATCH_SPACER, 1, maxNetworkRamPct)\\n        // \\t// Skip stuff we can't hack\\n        // \\tif (/*metrics.hackChance >= 0.50 &&*/ metrics.cashPerSecond > 0)\\n        // \\t\\tsubData.push(metrics);\\n        // \\tawait ns.sleep(0);\\n        // }\\n        // if (subData.length > 0) {\\n        // \\tsubData = subData.sort(RatioSort);\\n        // \\tdata.push(subData[0]);\\n        // }\\n    }\\n    ns.tprint('SUCCESS: Done gathering metrics on ' + servers.length + ' servers');\\n    let sorted = data.sort((a, b) => b.cashPerSecond - a.cashPerSecond);\\n    let tableData = [];\\n    const columns = [\\n        { header: ' server', width: 20 },\\n        { header: ' Hack %', width: 8 },\\n        { header: '   $/sec', width: 9 },\\n        { header: ' batchTime', width: 25 },\\n        { header: ' weakenTime', width: 25 }\\n    ];\\n    for (let metrics of sorted) {\\n        tableData.push([\\n            { color: 'white', text: ' ' + metrics.server },\\n            { color: 'white', text: ((metrics.pct * 100).toFixed(2) + '%').padStart(7) },\\n            { color: 'white', text: ns.nFormat(metrics.cashPerSecond, '0.0a').padStart(8) },\\n            { color: 'white', text: ' ' + ns.tFormat(metrics.batchTime) },\\n            { color: 'white', text: ' ' + ns.tFormat(metrics.currentStateWeakenTime) }\\n        ]);\\n    }\\n    PrintTable(ns, tableData, columns, DefaultStyle(), ColorPrint);\\n}\\nexport class Metrics {\\n    constructor(ns, server, pct, spacer, cores = 1, maxNetworkRamPct = 1, forcedHackThreads = undefined) {\\n        metricsCounter++;\\n        // Params\\n        this.server = server;\\n        this.pct = pct;\\n        this.spacer = spacer;\\n        this.cores = cores;\\n        this.maxNetworkRamPct = maxNetworkRamPct;\\n        this.maxNetworkRam = undefined;\\n        this.forcedHackThreads = forcedHackThreads;\\n        // Metrics\\n        this.times = new Array(0, 0, 0, 0);\\n        this.threads = new Array(0, 0, 0, 0);\\n        // Calculated values\\n        this.delays = new Array(0, 0, 0, 0);\\n        this.ends = new Array(0, 0, 0, 0);\\n        // Additional information\\n        this.batchRam = 0;\\n        this.batchTime = 0;\\n        this.batchMoney = 0;\\n        this.hackChance = 0;\\n        this.effectivePct = 0;\\n        this.moneyPerRam = 0;\\n        this.maxRunnableBatches = 0;\\n        this.jobXp = new Array(0, 0, 0, 0);\\n        this.batchXp = 0;\\n        this.cashPerSecond = 0;\\n        // Fill the data\\n        this.UpdateMetrics(ns);\\n    }\\n    Report(ns, printfunc = ns.print, minimalist = false) {\\n        if (minimalist) {\\n            let pct = Math.round(this.pct * 100).toString() + '%';\\n            let threads = this.threads.toString();\\n            let cps = FormatMoney(ns, Math.ceil(this.batchMoney * this.maxRunnableBatches / (this.batchTime / 1000)));\\n            let ram = ns.nFormat(Math.ceil(this.maxRunnableBatches * this.batchRam) * 1000000000, '0.00b');\\n            let batchRam = ns.nFormat(Math.ceil(this.batchRam) * 1000000000, '0.00b');\\n            printfunc(pct.padEnd(6) + threads.padEnd(20) + cps.padEnd(12) + ram.padEnd(12) + batchRam.padEnd(12));\\n            return;\\n        }\\n        printfunc('┌─────────────────────────────────────────────────────┐');\\n        let line = 'Metrics for ' + this.server + ' skimming ' + Math.round(this.pct * 100) + '%';\\n        printfunc('│ ' + line.padStart(52 / 2 + line.length / 2).padEnd(52) + '│');\\n        printfunc('├─────────────────────────────────────────────────────┤');\\n        line = 'RAM                     :  ' + ns.nFormat(Math.ceil(this.batchRam) * 1000000000, '0.00b');\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        line = '$                       :  ' + FormatMoney(ns, this.batchMoney);\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        line = 'Time                    :  ' + ns.tFormat(this.batchTime);\\n        printfunc('├─────────────────────────────────────────────────────┤');\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        line = 'Max Count               :  ' + this.maxBatches;\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        line = '$/RAM                   :  ' + FormatMoney(ns, this.moneyPerRam);\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        line = 'Max in allowed ram      :  ' + this.maxRunnableBatches;\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        printfunc('├─────────────────────────────────────────────────────┤');\\n        line = 'Cycle profit            :  ' + FormatMoney(ns, this.batchMoney * this.maxRunnableBatches);\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        line = 'Cycle RAM               :  ' + ns.nFormat(Math.ceil(this.maxRunnableBatches * this.batchRam) * 1000000000, '0.00b');\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        line = '$/s                     :  ' + FormatMoney(ns, Math.ceil(this.batchMoney * this.maxRunnableBatches / (this.batchTime / 1000)));\\n        printfunc('│ ' + line.padEnd(52) + '│');\\n        printfunc('├─────────────────────────────────────────────────────┤');\\n        if (HGW_MODE) {\\n            printfunc('│ ' + ('HGW threads : ' + this.threads).padEnd(52) + '│');\\n            printfunc('│ ' + ('HGW times   : ' + this.times.map(p => Math.ceil(p))).padEnd(52) + '│');\\n            printfunc('│ ' + ('HGW delays  : ' + this.delays).padEnd(52) + '│');\\n            printfunc('│ ' + ('HGW ends    : ' + this.ends).padEnd(52) + '│');\\n        }\\n        else {\\n            printfunc('│ ' + ('HWGW threads : ' + this.threads).padEnd(52) + '│');\\n            printfunc('│ ' + ('HWGW times   : ' + this.times.map(p => Math.ceil(p))).padEnd(52) + '│');\\n            printfunc('│ ' + ('HWGW delays  : ' + this.delays).padEnd(52) + '│');\\n            printfunc('│ ' + ('HWGW ends    : ' + this.ends).padEnd(52) + '│');\\n        }\\n        //printfunc('│ ' + ('Lambert G    : ' + this.debugThreadsG).padEnd(52) + '│');\\n        //printfunc('│ ' + ('FISH delays  : ' + this.fishDelays).padEnd(52) + '│');\\n        //printfunc('│ ' + ('Period       : ' + this.period).padEnd(52) + '│');\\n        //printfunc('│ ' + ('Depth        : ' + this.depth).padEnd(52) + '│');\\n        //printfunc('│ ' + this.Visualize(ns, 51).padEnd(52) + '│');\\n        printfunc('└─────────────────────────────────────────────────────┘');\\n    }\\n    UpdateMetrics(ns) {\\n        if (!HasFormulas(ns)) {\\n            ns.tprint('ERROR: Formulas.exe is required.');\\n            return;\\n        }\\n        // Figure hack time and threads\\n        const so = ns.getServer(this.server);\\n        const player = ns.getPlayer();\\n        // Note current security weaken time\\n        this.currentStateWeakenTime = ns.formulas.hacking.weakenTime(so, player);\\n        // Set server to min difficulty, it's the state where all 4 ops start at\\n        so.hackDifficulty = so.minDifficulty;\\n        so.moneyAvailable = so.moneyMax;\\n        // Get the times, those are fixed since we start at X security\\n        this.times[H] = ns.formulas.hacking.hackTime(so, player);\\n        this.times[W1] = ns.formulas.hacking.weakenTime(so, player);\\n        this.times[G] = ns.formulas.hacking.growTime(so, player);\\n        this.times[W2] = ns.formulas.hacking.weakenTime(so, player);\\n        // Figure first hack time and threads\\n        const hackPctThread = ns.formulas.hacking.hackPercent(so, player);\\n        this.threads[H] = Math.ceil(this.pct / hackPctThread);\\n        if (this.threads[H] == Infinity)\\n            this.threads[H] = 0;\\n        this.effectivePct = Math.min(hackPctThread * this.threads[H], 1 - 0.000001);\\n        this.batchMoney = Math.floor(so.moneyAvailable * hackPctThread) * this.threads[H];\\n        // if (isNaN(this.batchMoney)) {\\n        // \\tns.tprint(so.moneyAvailable, hackPctThread, this.threads[H]);\\n        // }\\n        so.moneyAvailable -= this.batchMoney;\\n        so.hackDifficulty += this.threads[H] * 0.002; //ns.hackAnalyzeSecurity(this.threads[H]);\\n        if (this.pct == 1) {\\n            this.effectivePct = 1 - 0.000001;\\n            so.moneyAvailable = 0;\\n        }\\n        // Figure first weaken time and threads\\n        this.threads[W1] = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, this.cores)*/);\\n        if (!HGW_MODE)\\n            so.hackDifficulty = so.minDifficulty;\\n        if (isNaN(so.moneyAvailable)) {\\n            return;\\n        }\\n        this.threads[G] = calculateGrowThreads(ns, so, player, this.cores);\\n        // Figure grow time and threads\\n        // const growFactor = 1 / (1 - ((so.moneyMax - 0.01) / so.moneyMax));\\n        // this.debugThreadsG = Math.ceil(Math.log(growFactor) / Math.log(ns.formulas.hacking.growPercent(so, 1, player, this.cores)));\\n        //this.debugThreadsG= solveGrow(ns.formulas.hacking.growPercent(so, 1, player, 1), so.moneyAvailable, so.moneyMax);\\n        if (so.moneyAvailable == 0)\\n            so.moneyAvailable = 1;\\n        this.debugThreadsG = Math.ceil(growthIdeal(ns, this.server, so.moneyMax / so.moneyAvailable, 1));\\n        // let opts = {\\n        // \\tmoneyAvailable: so.moneyAvailable,\\n        // \\thackDifficulty: so.minDifficulty,\\n        //ServerGrowthRate: ns.getBitNodeMultipliers().ServerGrowthRate\\n        // };\\n        // this.threads[G] = calculateGrowThreadsLambert(ns, so.hostname, so.moneyMax - so.moneyAvailable, 1, opts);\\n        //this.debugThreadsG = calculateGrowThreadsLambert(ns, so.hostname, so.moneyMax - so.moneyAvailable, 1, opts);\\n        so.hackDifficulty += this.threads[G] * 0.004; //ns.growthAnalyzeSecurity(this.threads[G]);\\n        so.moneyAvailable = so.moneyMax;\\n        // Figure second weaken time and threads\\n        this.threads[W2] = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, this.cores)*/);\\n        so.hackDifficulty = so.minDifficulty;\\n        // Make sure we have whole values of threads and times\\n        this.threads = this.threads.map(p => Math.ceil(p));\\n        this.times = this.times.map(p => Math.ceil(p));\\n        if (HGW_MODE) {\\n            this.threads[W1] = 0;\\n            this.times[W1] = 0;\\n            this.delays[H] = this.times[W2] - this.spacer * 2 - this.times[H];\\n            this.delays[W1] = 0;\\n            this.delays[G] = this.times[W2] - this.spacer - this.times[G];\\n            this.delays[W2] = 0;\\n            this.ends[H] = this.delays[H] + this.times[H];\\n            this.ends[W1] = 0;\\n            this.ends[G] = this.delays[G] + this.times[G];\\n            this.ends[W2] = this.delays[W2] + this.times[W2];\\n        }\\n        else {\\n            this.delays[H] = this.times[W1] - this.spacer - this.times[H];\\n            this.delays[W1] = 0;\\n            this.delays[G] = this.times[W1] + this.spacer - this.times[G];\\n            this.delays[W2] = this.spacer * 2;\\n            this.ends[H] = this.delays[H] + this.times[H];\\n            this.ends[W1] = this.delays[W1] + this.times[W1];\\n            this.ends[G] = this.delays[G] + this.times[G];\\n            this.ends[W2] = this.delays[W2] + this.times[W2];\\n        }\\n        // Round delays\\n        this.delays = this.delays.map(p => Math.ceil(p));\\n        // Calculate batch time\\n        this.batchTime = Math.ceil(this.delays[W2] + this.times[W2]);\\n        // Calculate batch ram requirement\\n        if (HACK_RAM == undefined) {\\n            HACK_RAM = ns.getScriptRam('hack-once.js');\\n            GROW_RAM = ns.getScriptRam('grow-once.js');\\n            WEAKEN_RAM = ns.getScriptRam('weaken-once.js');\\n        }\\n        this.batchRam = this.threads[G] * GROW_RAM;\\n        this.batchRam += this.threads[W1] * WEAKEN_RAM;\\n        this.batchRam += this.threads[W2] * WEAKEN_RAM;\\n        this.batchRam += this.threads[H] * HACK_RAM;\\n        // Calculate max concurrent batches (very rough arbitrary calculation)\\n        if (HGW_MODE) {\\n            this.maxBatches = Math.ceil(Math.floor(this.times[W2] / (this.spacer * 3)));\\n        }\\n        else\\n            this.maxBatches = Math.ceil(Math.floor(this.times[W2] / (this.spacer * 4)));\\n        // Calculate hackChance\\n        so.hackDifficulty = so.minDifficulty;\\n        this.hackChance = ns.formulas.hacking.hackChance(so, player);\\n        // Correct money by hack chance\\n        this.batchMoney *= this.hackChance;\\n        if (isNaN(this.batchMoney))\\n            ns.tprint('2');\\n        // Money vs ram ratio\\n        this.moneyPerRam = this.batchMoney / this.batchRam;\\n        // Max number of batches we can run in alloted memory\\n        //const ram = new MemoryMap(ns, true);\\n        //this.maxNetworkRam = ram.total * this.maxNetworkRamPct;\\n        const MAX_RAM = new MemoryMap(ns, true).total;\\n        this.maxNetworkRam = MAX_RAM;\\n        // let nbBatches = 0;\\n        // for (let i = 0; i < this.maxBatches; i++) {\\n        // \\tif (ram.ReserveBlock(this.threads[H] * HACK_RAM) == undefined) break;\\n        // \\tif (!HGW_MODE)\\n        // \\t\\tif (ram.ReserveBlock(this.threads[W1] * WEAKEN_RAM) == undefined) break;\\n        // \\tif (ram.ReserveBlock(this.threads[G] * GROW_RAM) == undefined) break;\\n        // \\tif (ram.ReserveBlock(this.threads[W2] * WEAKEN_RAM) == undefined) break;\\n        // \\tnbBatches++;\\n        // }\\n        // const maxBatchesInRam = nbBatches;\\n        const maxBatchesInRam = Math.floor(this.maxNetworkRam / this.batchRam);\\n        this.maxRunnableBatches = Math.min(this.maxBatches, maxBatchesInRam);\\n        this.batchXp = 0;\\n        for (let i = 0; i < 4; i++) {\\n            this.jobXp[i] = this.threads[i] * ns.formulas.hacking.hackExp(so, player);\\n            this.batchXp += this.jobXp[i];\\n        }\\n        this.cashPerSecond = Math.ceil(this.batchMoney * this.maxRunnableBatches / (this.batchTime / 1000));\\n    }\\n}\\nexport function calculateGrowThreads(ns, serverObject, playerObject, cores) {\\n    if (serverObject.moneyAvailable >= serverObject.moneyMax)\\n        return 0;\\n    let min = 1;\\n    // Use the flawed API to find a maximum value\\n    const growFactor = 1 / (1 - ((serverObject.moneyMax - 1) / serverObject.moneyMax));\\n    let max = Math.ceil(Math.log(growFactor) / Math.log(ns.formulas.hacking.growPercent(serverObject, 1, playerObject, cores)));\\n    let threads = binarySearchGrow(ns, min, max, serverObject, playerObject, cores);\\n    let newMoney = CalcGrowth(ns, serverObject, playerObject, threads, cores);\\n    let diff = (newMoney - serverObject.moneyMax);\\n    if (diff < 0)\\n        ns.tprint('FAIL: undershot by ' + diff);\\n    return threads;\\n}\\nfunction binarySearchGrow(ns, min, max, so, po, cores) {\\n    //ns.tprint('min: ' + min + ' max: ' + max);\\n    if (min == max)\\n        return max;\\n    let threads = Math.ceil(min + (max - min) / 2);\\n    let newMoney = CalcGrowth(ns, so, po, threads, cores);\\n    if (newMoney > so.moneyMax) {\\n        if (CalcGrowth(ns, so, po, threads - 1, cores) < so.moneyMax)\\n            return threads;\\n        return binarySearchGrow(ns, min, threads - 1, so, po, cores);\\n    }\\n    else if (newMoney < so.moneyMax) {\\n        return binarySearchGrow(ns, threads + 1, max, so, po, cores);\\n    }\\n    else { //(newMoney == so.moneyMax)\\n        return threads;\\n    }\\n}\\nfunction CalcGrowth(ns, so, po, threads, cores) {\\n    let serverGrowth = ns.formulas.hacking.growPercent(so, threads, po, cores);\\n    return (so.moneyAvailable + threads) * serverGrowth;\\n}\\n// function SetCharAt(str, index, chr) {\\n// \\tif (index > str.length - 1) return str;\\n// \\treturn str.substring(0, index) + chr + str.substring(index + 1);\\n// }\\n// /**\\n//  * @author m0dar <gist.github.com/xmodar>\\n//  * {@link https://discord.com/channels/415207508303544321/415211780999217153/954213342917050398}\\n//  *\\n//  * type GrowOptions = Partial<{\\n//  *   moneyAvailable: number;\\n//  *   hackDifficulty: number;\\n//  *   ServerGrowthRate: number; // ns.getBitNodeMultipliers().ServerGrowthRate\\n//  *   // https://github.com/danielyxie/bitburner/blob/dev/src/BitNode/BitNode.tsx\\n//  * }>;\\n//  */\\n// export function calculateGrowGain(ns, host, threads = 1, cores = 1, opts = {}) {\\n// \\tconst moneyMax = ns.getServerMaxMoney(host);\\n// \\tconst { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n// \\tconst rate = growPercent(ns, host, threads, cores, opts);\\n// \\treturn Math.min(moneyMax, rate * (moneyAvailable + threads)) - moneyAvailable;\\n// }\\n// /** @param gain money to be added to the server after grow */\\n// export function calculateGrowThreadsLambert(ns, host, gain, cores = 1, opts = {}) {\\n// \\tconst moneyMax = ns.getServerMaxMoney(host);\\n// \\tconst { moneyAvailable = ns.getServerMoneyAvailable(host) } = opts;\\n// \\tconst money = Math.min(Math.max(moneyAvailable + gain, 0), moneyMax);\\n// \\tconst rate = Math.log(growPercent(ns, host, 1, cores, opts));\\n// \\tconst logX = Math.log(money * rate) + moneyAvailable * rate;\\n// \\tconst threads = lambertWLog(logX) / rate - moneyAvailable;\\n// \\treturn Math.max(Math.ceil(threads), 0);\\n// }\\n// function growPercent(ns, host, threads = 1, cores = 1, opts = {}) {\\n// \\tconst { ServerGrowthRate = 1, hackDifficulty = ns.getServerSecurityLevel(host), } = opts;\\n// \\tconst growth = ns.getServerGrowth(host) / 100;\\n// \\tconst multiplier = ns.getPlayer().mults[\\\"hacking_grow\\\"];\\n// \\tconst base = Math.min(1 + 0.03 / hackDifficulty, 1.0035);\\n// \\tconst power = growth * ServerGrowthRate * multiplier * ((cores + 15) / 16);\\n// \\treturn base ** (power * threads);\\n// }\\n// /**\\n//  * Lambert W-function for log(x) when k = 0\\n//  * {@link https://gist.github.com/xmodar/baa392fc2bec447d10c2c20bbdcaf687}\\n//  */\\n// function lambertWLog(logX) {\\n// \\tif (isNaN(logX)) return NaN;\\n// \\tconst logXE = logX + 1;\\n// \\tconst logY = 0.5 * log1Exp(logXE);\\n// \\tconst logZ = Math.log(log1Exp(logY));\\n// \\tconst logN = log1Exp(0.13938040121300527 + logY);\\n// \\tconst logD = log1Exp(-0.7875514895451805 + logZ);\\n// \\tlet w = -1 + 2.036 * (logN - logD);\\n// \\tw *= (logXE - Math.log(w)) / (1 + w);\\n// \\tw *= (logXE - Math.log(w)) / (1 + w);\\n// \\tw *= (logXE - Math.log(w)) / (1 + w);\\n// \\treturn isNaN(w) ? (logXE < 0 ? 0 : Infinity) : w;\\n// }\\n// const log1Exp = (x) => x <= 0 ? Math.log(1 + Math.exp(x)) : x + log1Exp(-x);\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9tZXRyaWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RyxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRTNELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxxQkFBcUI7QUFDMUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtBQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUscUJBQXFCO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyw4QkFBOEI7QUFFbkQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFDLG9EQUFvRDtBQUVwRixNQUFNLENBQUMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBRTVCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUVqQixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekIsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUUzQixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7QUFFZixJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFFdkIsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxNQUFNO0lBQzFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUIsSUFBSSxFQUFFLEdBQUcs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LEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFHLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMvRixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMxRSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEcsT0FBTztTQUNQO1FBRUQsU0FBUyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7UUFDckUsSUFBSSxJQUFJLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDMUYsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0UsU0FBUyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7UUFDckUsSUFBSSxHQUFHLDZCQUE2QixHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFB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Q0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2pEO2FBQ0k7WUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUVsQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZ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\",\"filename\":\"/xsink/metrics.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:file:///16380185-2d21-445b-a93f-4c87a5faf552\",\"moduleSequenceNumber\":320},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:file:///99026dc9-0344-40de-8dbe-04e294467ee6\",\"moduleSequenceNumber\":324},{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:file:///16ce8236-20e1-4237-87f8-598e9f33a786\",\"moduleSequenceNumber\":320},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:file:///d9f6899f-56ed-487c-a32b-3cb34cbc9669\",\"moduleSequenceNumber\":324},{\"filename\":\"/xsink/ram.js\",\"url\":\"blob:file:///52491291-acb1-43ed-930c-49a38fe9053a\",\"moduleSequenceNumber\":309},{\"filename\":\"/xsink/metrics.js\",\"url\":\"blob:file:///15321b05-4f18-41c6-b940-d79d430a6310\",\"moduleSequenceNumber\":11007}],\"dependents\":[],\"ramUsage\":5.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, DefaultStyle, ColorPrint } from 'tables.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    let mults = ns.getBitNodeMultipliers();\\n    const data = [];\\n    for (let [key, value] of Object.entries(mults).sort((a, b) => a[1] - b[1])) { //.filter(s => s[1] != 1)) {\\n        let color = value == 0 ? 'red' : (value != 1 ? 'orange' : 'lime');\\n        data.push([\\n            { color: 'yellow', text: ' ' + key },\\n            { color: color, text: value.toFixed(2).padStart(8) }\\n        ]);\\n    }\\n    const columns = [\\n        { header: ' Key', width: 30 },\\n        { header: ' Multiplier', width: 12 }\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvbXVsdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRWhFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFFdkMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLDRCQUE0QjtRQUN4RyxJQUFJLEtBQUssR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ1QsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFO1lBQ3BDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7U0FDcEQsQ0FBQyxDQUFDO0tBQ0g7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNmLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQzdCLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO0tBQ3BDLENBQUM7SUFFRixVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsQ0FBQyJ9\",\"filename\":\"/xsink/mults.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function GetAllServers(ns, set = new Set(['home'])) {\\n    return set.forEach(hn => ns.scan(hn).forEach(o => set.add(o))) || [...set.values()];\\n}\\nexport async function main(ns) {\\n    let servers = GetAllServers(ns);\\n    let serverMap = new Map();\\n    for (const server of servers)\\n        serverMap[server] = ns.scan(server);\\n    //ns.tprint(servers);\\n    ns.tprint(serverMap);\\n}\\n// const active = new Map();\\n// var current = \\\"n00dles\\\";\\n// var temp = \\\"home\\\"; \\n// var v = 0;\\n// var e = 1;\\n// var x = 1;\\n// active.set(\\\"home\\\", ns.scan());\\n// if (ns.serverExists(\\\"pserv-0\\\")) {\\n//     for (var i = 0; i < 25; ++i) {\\n//         active.get(\\\"home\\\").pop();\\n//     }\\n// }\\n// if (ns.serverExists(\\\"darkweb\\\")) {\\n//     active.get(\\\"home\\\").pop();\\n// }\\n// while (active.get(\\\"home\\\").length > v) {\\n//     if (active.get(temp) == undefined) {\\n//         ns.tprint('ERROR: active.get(temp) is undefined ' + temp);\\n//         return;\\n//     }\\n//     while (active.get(temp).length > x ){\\n//         while (ns.scan(current).length > 1) {\\n//             if (!active.get(current)) {\\n//                 ns.tprint(\\\"hello\\\");\\n//                 active.set(current, ns.scan(current));\\n//                 var e = 1\\n//             }\\n//             ns.tprint(ns.scan(current));\\n//             var current = active.get(current)[e];\\n//             await ns.sleep(100);\\n//         }\\n//         active.set(current, ns.scan(current));\\n//         var current = active.get(current)[0];\\n//         var temp = current;\\n//         ++x;\\n//         ++e;\\n//         ns.tprint(active.get(temp).length);\\n//         await ns.sleep(100);\\n//     }\\n//     var x = 1;\\n//     var e = 1;\\n//     var current = ns.scan(active.get(current)[0]);\\n//     var temp = current;\\n//     await ns.sleep(100);\\n// }\\n// ns.tprint(active.get(\\\"n00dles\\\")[1]);\\n//}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvaGQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDckYsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDekIsSUFBSSxPQUFPLEdBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksU0FBUyxHQUFFLElBQUksR0FBRyxFQUFFLENBQUM7SUFDekIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPO1FBQ3hCLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXZDLHFCQUFxQjtJQUNyQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFJRyw0QkFBNEI7QUFDNUIsMkJBQTJCO0FBQzNCLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFFYixpQ0FBaUM7QUFDakMsb0NBQW9DO0FBQ3BDLHFDQUFxQztBQUNyQyxvQ0FBb0M7QUFDcEMsUUFBUTtBQUNSLElBQUk7QUFDSixvQ0FBb0M7QUFDcEMsZ0NBQWdDO0FBQ2hDLElBQUk7QUFDSiwwQ0FBMEM7QUFDMUMsMkNBQTJDO0FBQzNDLHFFQUFxRTtBQUNyRSxrQkFBa0I7QUFDbEIsUUFBUTtBQUNSLDRDQUE0QztBQUM1QyxnREFBZ0Q7QUFDaEQsMENBQTBDO0FBQzFDLHNDQUFzQztBQUN0Qyx5REFBeUQ7QUFDekQsNEJBQTRCO0FBQzVCLGdCQUFnQjtBQUNoQiwyQ0FBMkM7QUFDM0Msb0RBQW9EO0FBQ3BELG1DQUFtQztBQUNuQyxZQUFZO0FBQ1osaURBQWlEO0FBQ2pELGdEQUFnRDtBQUNoRCw4QkFBOEI7QUFDOUIsZUFBZTtBQUNmLGVBQWU7QUFDZiw4Q0FBOEM7QUFDOUMsK0JBQStCO0FBQy9CLFFBQVE7QUFDUixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLHFEQUFxRDtBQUNyRCwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCLElBQUk7QUFDSix1Q0FBdUM7QUFDM0MsR0FBRyJ9\",\"filename\":\"/xsink/hd.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var processes = ns.ps(ns.getHostname());\\n    if (ns.args[0] != undefined) {\\n        processes = processes.filter(p => p.filename.search(ns.args[0]) != -1 || p.args.toString().search(ns.args[0]) != -1);\\n    }\\n    for (var process of processes) {\\n        ns.tprint(process.filename + ' pid=' + process.pid + ' params=' + process.args);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlwcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9teXBzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDeEMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsRUFBRTtRQUM1QixTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNySDtJQUVELEtBQUssSUFBSSxPQUFPLElBQUksU0FBUyxFQUFFO1FBQzlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsR0FBRyxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2hGO0FBQ0YsQ0FBQyJ9\",\"filename\":\"/xsink/myps.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    var servers = RecursiveScan(ns);\\n    var target = ns.args[0];\\n    for (const server of servers) {\\n        if (target != null) {\\n            if (server.name.search(target) != -1)\\n                ns.tprint(server.route);\\n        }\\n        else\\n            ns.tprint(server.route);\\n    }\\n    ns.tprint('Total servers explored: ' + servers.length);\\n}\\nfunction RecursiveScan(ns, root, found, route) {\\n    if (route == null)\\n        route = '';\\n    else\\n        route = route + ';connect ' + root;\\n    if (found == null)\\n        found = new Array();\\n    if (root == null) {\\n        root = 'home';\\n        route = 'connect home';\\n    }\\n    if (found.find(p => p == root) == undefined) {\\n        var entry = {};\\n        entry.name = root;\\n        entry.route = route;\\n        found.push(entry);\\n        for (const server of ns.scan(root))\\n            if (found.find(p => p.name == server) == undefined)\\n                RecursiveScan(ns, server, found, route);\\n    }\\n    return found;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlzY2FuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL215c2Nhbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLElBQUksT0FBTyxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXhCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzdCLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtZQUNuQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7O1lBRUEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDekI7SUFFRCxFQUFFLENBQUMsTUFBTSxDQUFDLDBCQUEwQixHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSztJQUM1QyxJQUFJLEtBQUssSUFBSSxJQUFJO1FBQUUsS0FBSyxHQUFHLEVBQUUsQ0FBQzs7UUFDekIsS0FBSyxHQUFHLEtBQUssR0FBRyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3hDLElBQUksS0FBSyxJQUFJLElBQUk7UUFBRSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUN2QyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDakIsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNkLEtBQUssR0FBRyxjQUFjLENBQUM7S0FDdkI7SUFDRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQzVDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsS0FBSyxNQUFNLE1BQU0sSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNqQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLFNBQVM7Z0JBQ2pELGFBQWEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQyJ9\",\"filename\":\"/xsink/myscan.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServerReport, WaitPids } from \\\"/xsink/utils.js\\\";\\nimport { RunScript } from '/xsink/ram.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const [target] = ns.args;\\n    if (target == undefined) {\\n        ns.print('ERROR: No target server specified');\\n        return;\\n    }\\n    if (IsPrepped(ns, target)) {\\n        //ns.tprint('INFO: Server is already prepped (' + target + ')');\\n    }\\n    else {\\n        //ns.tprint('INFO: Prep initiated on ' + target);\\n        await Prep(ns, target);\\n        //ns.tprint('SUCCESS: Prep completed on ' + target);\\n    }\\n}\\nexport function IsPrepped(ns, server) {\\n    var so = ns.getServer(server);\\n    if (so.moneyAvailable < so.moneyMax)\\n        return false;\\n    if (so.hackDifficulty > so.minDifficulty)\\n        return false;\\n    return true;\\n}\\nexport async function Grow(ns, server, allowSpread = false, allowPartial = true, extra = 1.1) {\\n    const script = '/xsink/grow-once.js';\\n    const so = ns.getServer(server);\\n    let threads = Math.ceil(ns.growthAnalyze(server, so.moneyMax / Math.max(so.moneyAvailable, 1), 1) * extra);\\n    const estTime = ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 3.2;\\n    ns.print('INFO: Funds are not maxed, starting ' + threads + ' threads to grow them');\\n    const pids = await RunScript(ns, script, server, threads, 0, estTime, 0, 0, allowSpread, allowPartial);\\n    await WaitPids(ns, pids);\\n    return [threads, estTime];\\n}\\nexport async function Weaken(ns, server, allowSpread = true, allowPartial = true, extra = 1.0) {\\n    const script = '/xsink/weaken-once.js';\\n    const so = ns.getServer(server);\\n    const threads = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, 1)*/ * extra);\\n    const estTime = ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 4;\\n    ns.print('INFO: Security is over minimum, starting ' + threads + ' threads to floor it');\\n    const pids = await RunScript(ns, script, server, threads, 0, estTime, 0, 0, allowSpread, allowPartial);\\n    await WaitPids(ns, pids);\\n    return [threads, estTime];\\n}\\nexport async function Hack(ns, server, pct, allowSpread = false, allowPartial = true, extra = 1.1) {\\n    const script = '/xsink/hack-once.js';\\n    const so = ns.getServer(server);\\n    const threads = Math.floor(ns.hackAnalyzeThreads(server, so.moneyAvailable) * pct * extra);\\n    const estTime = ns.formulas.hacking.hackTime(so, ns.getPlayer());\\n    ns.print('INFO: Server is ripe for hacking, starting ' + threads + ' threads to hack it');\\n    const pids = await RunScript(ns, script, server, threads, 0, estTime, 0, 0, allowSpread, allowPartial);\\n    await WaitPids(ns, pids);\\n    return [threads, estTime];\\n}\\nexport async function Prep(ns, server, metrics) {\\n    while (!IsPrepped(ns, server)) {\\n        let so = ns.getServer(server);\\n        ServerReport(ns, server, metrics);\\n        if (so.hackDifficulty > so.minDifficulty)\\n            await Weaken(ns, server, true, true);\\n        else if (so.moneyAvailable < so.moneyMax)\\n            await Grow(ns, server, false, true);\\n        await ns.sleep(200);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9wcmVwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBRXpCLElBQUksTUFBTSxJQUFJLFNBQVMsRUFBRTtRQUN4QixFQUFFLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7UUFDOUMsT0FBTztLQUNQO0lBRUQsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQzFCLGdFQUFnRTtLQUNoRTtTQUNJO1FBQ0osaURBQWlEO1FBQ2pELE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QixvREFBb0Q7S0FDcEQ7QUFDRixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxFQUFFLEVBQUUsTUFBTTtJQUNuQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLElBQUksRUFBRSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsUUFBUTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQ2xELElBQUksRUFBRSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsYUFBYTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQ3ZELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFN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\",\"filename\":\"/xsink/prep.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:file:///89102de0-45ea-4b5c-bffe-268320396577\",\"moduleSequenceNumber\":279},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:file:///07aa984f-df36-4819-b138-b04533798035\",\"moduleSequenceNumber\":283},{\"filename\":\"/xsink/ram.js\",\"url\":\"blob:file:///1a2d2254-c313-4e84-add1-a344d78c14e9\",\"moduleSequenceNumber\":268},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:file:///d4d550f6-f471-4bbb-af72-c668edcbd869\",\"moduleSequenceNumber\":283},{\"filename\":\"/xsink/prep.js\",\"url\":\"blob:file:///8b753afd-4fad-432a-8394-e55873ded1ea\",\"moduleSequenceNumber\":363}],\"dependents\":[],\"ramUsage\":8.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetAllServers } from \\\"/xsink/utils.js\\\";\\nimport { PrintTable, DefaultStyle, ColorPrint } from '/xsink/tables.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const columns = [\\n        { header: ' Server', width: 22 },\\n        { header: '    Total', width: 10 },\\n        { header: '     Used', width: 15 },\\n        { header: '     Free', width: 15 },\\n        { header: ' Weaken', width: 8 },\\n        { header: '   Grow', width: 8 },\\n        { header: '   Hack', width: 8 },\\n        { header: '  Share', width: 8 },\\n        { header: ' Charge', width: 8 },\\n        { header: '  Other', width: 8 },\\n        { header: ' Scripts', width: 9 }\\n    ];\\n    let data = [];\\n    let servers = GetAllServers(ns).filter(s => ns.getServer(s).hasAdminRights).sort((a, b) => ns.getServer(b).maxRam - ns.getServer(a).maxRam);\\n    let details = [];\\n    let totalProcs = 0;\\n    for (const server of servers) {\\n        if (ns.getServer(server).maxRam < 1.6)\\n            continue;\\n        let total = ns.getServer(server).maxRam;\\n        let used = ns.getServer(server).ramUsed;\\n        let free = total - used;\\n        let usedPct = Math.round(used / total * 100);\\n        let freePct = Math.round(free / total * 100);\\n        let entry = [\\n            { color: 'white', text: ' ' + server },\\n            { color: 'white', text: ns.nFormat(total * 1e9, '0.00b').padStart(9) },\\n            { color: pctColor(1 - (usedPct / 100)), text: ns.nFormat(used * 1e9, '0.00b').padStart(9) + (usedPct.toFixed(0) + '%').padStart(5) },\\n            { color: pctColor(freePct / 100), text: ns.nFormat(free * 1e9, '0.00b').padStart(9) + (freePct.toFixed(0) + '%').padStart(5) }\\n        ];\\n        let [procs, nbProcs] = GetProcessDetails(ns, server);\\n        details.push(procs);\\n        procs.forEach(function (s) {\\n            entry.push({ color: pctColor(1 - (s.percent / 100)), text: s.percent > 0 ? (s.percent.toFixed(0) + '%').padStart(7) : '' });\\n        });\\n        totalProcs += nbProcs;\\n        entry.push({ color: 'white', text: nbProcs.toString().padStart(8) });\\n        data.push(entry);\\n    }\\n    data.push(null);\\n    let total = servers.reduce((a, s) => a += ns.getServer(s).maxRam, 0);\\n    let used = servers.reduce((a, s) => a += ns.getServer(s).ramUsed, 0);\\n    let free = total - used;\\n    let usedPct = Math.round(used / total * 100);\\n    let freePct = Math.round(free / total * 100);\\n    let entry = [\\n        { color: 'white', text: 'Total' },\\n        { color: 'white', text: ns.nFormat(total * 1e9, '0.00b').padStart(9) },\\n        { color: pctColor(1 - (usedPct / 100)), text: ns.nFormat(used * 1e9, '0.00b').padStart(9) + (usedPct.toFixed(0) + '%').padStart(5) },\\n        { color: pctColor(freePct / 100), text: ns.nFormat(free * 1e9, '0.00b').padStart(9) + (freePct.toFixed(0) + '%').padStart(5) }\\n    ];\\n    for (let i = 0; i < details[0].length; i++) {\\n        let pct = details.reduce((a, s) => a += s[i].ram, 0) / total * 100;\\n        entry.push({ color: pctColor(1 - (pct / 100)), text: pct > 0 ? (pct.toFixed(1) + '%').padStart(7) : '' });\\n    }\\n    entry.push({ color: 'white', text: totalProcs.toString().padStart(8) });\\n    data.push(entry);\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\nfunction GetProcessDetails(ns, server) {\\n    const categories = [\\n        { script: 'weaken', header: 'Weaken' },\\n        { script: 'grow', header: 'Grow' },\\n        { script: 'hack', header: 'Hack' },\\n        { script: 'share-forever.js', header: 'Share' },\\n        { script: 'charge.js', header: 'Charge' }\\n    ];\\n    let procs = ns.ps(server);\\n    let serverRam = ns.getServer(server).maxRam;\\n    let ret = categories.map(function (cat) {\\n        let matches = procs.filter(p => p.filename.startsWith(cat.script));\\n        let ram = matches.reduce((a, s) => a += s.threads * ns.getScriptRam(s.filename, server), 0);\\n        let pct = Math.round(ram / serverRam * 100);\\n        return { category: cat, percent: pct, ram: ram };\\n    });\\n    // Other category\\n    let matches = procs.filter(p => !categories.map(s => s.script).includes(p.filename));\\n    let ram = matches.reduce((a, s) => a += s.threads * ns.getScriptRam(s.filename, server), 0);\\n    let pct = Math.round(ram / serverRam * 100);\\n    ret.push({ category: 'Other', percent: pct, ram: ram });\\n    return [ret, procs.length];\\n}\\nfunction pctColor(pct) {\\n    if (pct >= 1)\\n        return 'Lime';\\n    else if (pct >= 0.9)\\n        return 'Green';\\n    else if (pct >= 0.75)\\n        return 'ForestGreen';\\n    else if (pct >= 0.5)\\n        return 'GreenYellow';\\n    else if (pct >= 0.25)\\n        return 'Orange';\\n    else if (pct >= 0.1)\\n        return 'DarkOrange';\\n    else if (pct > 0)\\n        return 'OrangeRed';\\n    return 'Red';\\n}\\nexport class MemoryMap {\\n    constructor(ns, simulateFull = false) {\\n        const servers = GetAllServers(ns).filter(s => ns.getServer(s).hasAdminRights);\\n        this.blocks = new Array();\\n        this.used = 0;\\n        this.available = 0;\\n        this.total = 0;\\n        this.purchased = 0;\\n        this.home = 0;\\n        this.other = 0;\\n        for (var server of servers) {\\n            var so = ns.getServer(server);\\n            if (so.hostname.startsWith('hacknet'))\\n                continue;\\n            let free = so.maxRam - (simulateFull ? 0 : so.ramUsed);\\n            if (free < 1.6)\\n                free = 0;\\n            this.used += simulateFull ? 0 : so.ramUsed;\\n            this.available += free;\\n            this.total += so.maxRam;\\n            if (server == 'home')\\n                this.home = so.maxRam;\\n            else if (so.purchasedByPlayer)\\n                this.purchased += so.maxRam;\\n            else\\n                this.other += so.maxRam;\\n            if (free >= 0 && so.maxRam > 0) {\\n                let block = new Object();\\n                block.server = server;\\n                block.free = free;\\n                block.coreBonus = 1 + (so.cpuCores - 1) / 16;\\n                if (server == 'home') {\\n                    let minFree = 256;\\n                    //if (minFree > so.maxRam * 0.25) {\\n                    minFree = 45; //so.maxRam * 0.25;\\n                    //}\\n                    if (free < minFree) {\\n                        minFree = free;\\n                    }\\n                    block.reserved = minFree;\\n                }\\n                else\\n                    block.reserved = 0;\\n                block.purchased = so.purchasedByPlayer;\\n                block.isHome = server == 'home';\\n                block.total = so.maxRam;\\n                this.blocks.push(block);\\n            }\\n        }\\n        this.blocks.sort(BlockSort(this.total, this.other));\\n        function BlockSort(total, other) {\\n            return function (a, b) {\\n                // home is always last unless we have to use other servers\\n                if (a.isHome)\\n                    return 1;\\n                if (b.isHome)\\n                    return -1;\\n                // Priorize by block size, smallers first\\n                if (a.free - a.reserved > b.free - b.reserved)\\n                    return 1;\\n                if (a.free - a.reserved < b.free - b.reserved)\\n                    return -1;\\n                // Priorize purchased servers\\n                if (a.purchased && !b.purchased)\\n                    return [total] > [other] ? -1 : 1;\\n                if (!a.purchased && b.purchased)\\n                    return [total] > [other] ? 1 : -1;\\n                return 0;\\n            };\\n        }\\n    }\\n    get blockList() { return this.blocks; }\\n    ReserveBlock(minSize) {\\n        var match = this.blocks.find(b => (b.free - b.reserved) >= minSize);\\n        if (match == undefined)\\n            return undefined;\\n        match.reserved += minSize;\\n        return match.server;\\n    }\\n    SmallestBlock(minSize = 0) {\\n        let smallest = this.BiggestBlock();\\n        for (const block of this.blocks) {\\n            const available = block.free - block.reserved;\\n            if (available < smallest && available >= minSize)\\n                smallest = available;\\n        }\\n        return smallest;\\n    }\\n    BiggestBlock() {\\n        let biggest = 0;\\n        for (const block of this.blocks) {\\n            const available = block.free - block.reserved;\\n            if (available > biggest)\\n                biggest = available;\\n        }\\n        return biggest;\\n    }\\n    HomeBlock() {\\n        return this.blocks.find(b => b.isHome);\\n    }\\n}\\nexport function RunScript(ns, scriptName, target, threads, delay, expectedTime, batchNumber, logColor, allowSpread, allowPartial) {\\n    return RunScript2(ns, scriptName, threads, [target, delay, expectedTime, batchNumber, logColor], allowSpread, allowPartial);\\n    // let ramMap = new MemoryMap(ns);\\n    // // Find script RAM usage\\n    // let ram = ns.getScriptRam(scriptName);\\n    // // Fired threads counter\\n    // let fired = 0;\\n    // let pids = new Array();\\n    // let prot = 0;\\n    // let unique = 0;\\n    // while (fired < threads) {\\n    // \\t// const biggest = ramMap.BiggestBlock();\\n    // \\t// let maxThreads = Math.floor(biggest / ram);\\n    // \\t// if (maxThreads == 0) break;\\n    // \\t// if (maxThreads > threads - fired) {\\n    // \\t// \\tmaxThreads = threads - fired;\\n    // \\t// }\\n    // \\t// const blockSize = maxThreads * ram;\\n    // \\t// const server = ramMap.ReserveBlock(blockSize);\\n    // \\tlet candidate = ramMap.BiggestBlock();\\n    // \\t// if (allowSpread) {\\n    // \\t// \\tcandidate = ramMap.SmallestBlock(ram);\\n    // \\t// \\t//ns.tprint('smallest='+ candidate);\\n    // \\t// }\\n    // \\tlet maxThreads = Math.floor(candidate / ram);\\n    // \\tif (maxThreads == 0) break;\\n    // \\tif (maxThreads > threads - fired) {\\n    // \\t\\tmaxThreads = threads - fired;\\n    // \\t}\\n    // \\tconst blockSize = maxThreads * ram;\\n    // \\tconst server = ramMap.ReserveBlock(blockSize);\\n    // \\tif (server != undefined) {\\n    // \\t\\t// if (!ns.fileExists(scriptName, server)) {\\n    // \\t\\t// \\tns.print('WARN: ' + scriptName + ' not found on ' + server);\\n    // \\t\\t// \\tns.print('WARN: Attempting to copy ' + scriptName + ' to ' + server);\\n    // \\t\\tawait ns.scp(scriptName, server, \\\"home\\\");\\n    // \\t\\t// \\tif (!ns.fileExists(scriptName, server)) {\\n    // \\t\\t// \\t\\tns.print('FAIL: Could not copy ' + scriptName + ' to ' + server + ', aborting.');\\n    // \\t\\t// \\t\\tbreak;\\n    // \\t\\t// \\t}\\n    // \\t\\t// \\telse {\\n    // \\t\\t// \\t\\tns.print('SUCCESS: Copied ' + scriptName + ' to ' + server + ', resuming.');\\n    // \\t\\t// \\t}\\n    // \\t\\t// }\\n    // \\t\\t//ns.print('Attempting to start ' + scriptName + ' on ' + server + ' with ' + maxThreads + ' threads');\\n    // \\t\\tlet pid = ns.exec(scriptName, server, maxThreads, target, delay, expectedTime, batchNumber, logColor, performance.now() + unique++);\\n    // \\t\\tif (pid > 0) {\\n    // \\t\\t\\tns.print('Started script ' + scriptName + ' on ' + server + ' with ' + maxThreads + ' threads');\\n    // \\t\\t\\tpids.push(pid);\\n    // \\t\\t\\tfired += maxThreads;\\n    // \\t\\t}\\n    // \\t\\telse {\\n    // \\t\\t\\tns.print('FAIL: Failed to launch script ' + scriptName + ' on ' + server + ' with ' + maxThreads + ' threads');\\n    // \\t\\t}\\n    // \\t}\\n    // \\telse if (!allowPartial) {\\n    // \\t\\t// Couldn't find a block big enough so can't allowPartial\\n    // \\t\\tbreak;\\n    // \\t}\\n    // \\telse if (!allowSpread) {\\n    // \\t\\t// Couldn't find a block big enough and cannot allowSpread\\n    // \\t\\tbreak;\\n    // \\t}\\n    // \\tprot++;\\n    // \\tif (prot > 100) {\\n    // \\t\\tns.print('ERROR: RunScript infinite loop detected.');\\n    // \\t\\tns.print('INFO: candidate= ' + candidate + ' ram= ' + ram + ' maxThreads= ' + maxThreads + ' threads= ' + threads + ' fired=' + fired + ' blockSize=' + blockSize);\\n    // \\t\\tbreak;\\n    // \\t}\\n    // }\\n    // if (fired != threads) {\\n    // \\tns.print('ERROR: No server big enough to handle ' + threads + ' threads of ' + scriptName + ' (fired ' + fired + ' total)');\\n    // }\\n    // return pids;\\n}\\nexport function RunScript2(ns, scriptName, threads, params, allowSpread, allowPartial) {\\n    let ramMap = new MemoryMap(ns);\\n    // Find script RAM usage\\n    let ram = ns.getScriptRam(scriptName);\\n    // Fired threads counter\\n    let fired = 0;\\n    let pids = new Array();\\n    let prot = 0;\\n    let unique = 0;\\n    while (fired < threads) {\\n        // const biggest = ramMap.BiggestBlock();\\n        // let maxThreads = Math.floor(biggest / ram);\\n        // if (maxThreads == 0) break;\\n        // if (maxThreads > threads - fired) {\\n        // \\tmaxThreads = threads - fired;\\n        // }\\n        // const blockSize = maxThreads * ram;\\n        // const server = ramMap.ReserveBlock(blockSize);\\n        let candidate = ramMap.BiggestBlock();\\n        // if (allowSpread) {\\n        // \\tcandidate = ramMap.SmallestBlock(ram);\\n        // \\t//ns.tprint('smallest='+ candidate);\\n        // }\\n        let maxThreads = Math.floor(candidate / ram);\\n        if (maxThreads == 0)\\n            break;\\n        if (maxThreads > threads - fired) {\\n            maxThreads = threads - fired;\\n        }\\n        const blockSize = maxThreads * ram;\\n        let server = ramMap.ReserveBlock(blockSize);\\n        let coreBonus = 1;\\n        if (scriptName.startsWith('grow') || scriptName.startsWith('weaken')) {\\n            let homeBlock = ramMap.HomeBlock();\\n            if (homeBlock != undefined && homeBlock.coreBonus > 1 && threads * ram < homeBlock.free - homeBlock.reserved) {\\n                if (server == 'home') {\\n                    //ns.tprint('INFO: Favoring home for');\\n                }\\n                else {\\n                    server = 'home';\\n                    //ns.tprint('INFO: Spawning grow on home for bonus!');\\n                }\\n                coreBonus = homeBlock.coreBonus;\\n            }\\n        }\\n        if (server != undefined) {\\n            // if (!ns.fileExists(scriptName, server)) {\\n            // \\tns.print('WARN: ' + scriptName + ' not found on ' + server);\\n            // \\tns.print('WARN: Attempting to copy ' + scriptName + ' to ' + server);\\n            ns.scp(scriptName, server, \\\"home\\\");\\n            // \\tif (!ns.fileExists(scriptName, server)) {\\n            // \\t\\tns.print('FAIL: Could not copy ' + scriptName + ' to ' + server + ', aborting.');\\n            // \\t\\tbreak;\\n            // \\t}\\n            // \\telse {\\n            // \\t\\tns.print('SUCCESS: Copied ' + scriptName + ' to ' + server + ', resuming.');\\n            // \\t}\\n            // }\\n            //ns.print('Attempting to start ' + scriptName + ' on ' + server + ' with ' + maxThreads + ' threads');\\n            let actualThreads = Math.ceil(maxThreads / coreBonus);\\n            if (actualThreads != maxThreads) {\\n                ns.print('INFO: Readjusting threads from ' + maxThreads + ' to ' + actualThreads);\\n            }\\n            let pid = ns.exec(scriptName, server, actualThreads, ...params, performance.now() + unique++);\\n            if (pid > 0) {\\n                ns.print('Started script ' + scriptName + ' on ' + server + ' with ' + actualThreads + ' threads');\\n                pids.push(pid);\\n                fired += maxThreads;\\n            }\\n            else {\\n                ns.print('FAIL: Failed to launch script ' + scriptName + ' on ' + server + ' with ' + actualThreads + ' threads');\\n            }\\n        }\\n        else if (!allowPartial) {\\n            // Couldn't find a block big enough so can't allowPartial\\n            break;\\n        }\\n        else if (!allowSpread) {\\n            // Couldn't find a block big enough and cannot allowSpread\\n            break;\\n        }\\n        prot++;\\n        if (prot > 100) {\\n            ns.print('ERROR: RunScript infinite loop detected.');\\n            ns.print('INFO: candidate= ' + candidate + ' ram= ' + ram + ' maxThreads= ' + maxThreads + ' threads= ' + threads + ' fired=' + fired + ' blockSize=' + blockSize);\\n            break;\\n        }\\n    }\\n    if (fired != threads) {\\n        ns.print('ERROR: No server big enough to handle ' + threads + ' threads of ' + scriptName + ' (fired ' + fired + ' total)');\\n    }\\n    return pids;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL3JhbS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFdkUsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFFNUIsTUFBTSxPQUFPLEdBQUc7UUFDZixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNoQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUNsQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtLQUNoQyxDQUFDO0lBRUYsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2QsSUFBSSxPQUFP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LElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3RFLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BJLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtLQUM5SCxDQUFDO0lBRUYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0MsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDbkUsS0FBSyxDQUFDLElBQUksQ0FDVCxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUM3RixDQUFBO0tBQ0Q7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFeEUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUdqQixVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLE1BQU07SUFDcEMsTUFBTSxVQUFVLEdBQUc7UUFDbEIsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUU7UUFDdEMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7UUFDbEMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7UUFDbEMsRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtRQUMvQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtLQUN6QyxDQUFDO0lBRUYsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQixJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUU1QyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRztRQUNyQyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDNUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxpQkFBaUI7SUFDakIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDckYsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1RixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUV4RCxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBR0QsU0FBUyxRQUFRLENBQUMsR0FBRztJQUNwQixJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQUUsT0FBTyxNQUFNLENBQUM7U0FDdkIsSUFBSSxHQUFHLElBQUksR0FBRztRQUFFLE9BQU8sT0FBTyxDQUFDO1NBQy9CLElBQUksR0FBRyxJQUFJLElBQUk7UUFBRSxPQUFPLGFBQWEsQ0FBQztTQUN0QyxJQUFJLEdBQUcsSUFBSSxHQUFHO1FBQUUsT0FBTyxhQUFhLENBQUM7U0FDckMsSUFBSSxHQUFHLElBQUksSUFBSTtRQUFFLE9BQU8sUUFBUSxDQUFDO1NBQ2pDLElBQUksR0FBRyxJQUFJLEdBQUc7UUFBRSxPQUFPLFlBQVksQ0FBQztTQUNwQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQUUsT0FBTyxXQUFXLENBQUM7SUFDckMsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxPQUFPLFNBQVM7SUFDckIsWUFBWSxFQUFFLEVBQUUsWUFBWSxHQUFHLEtBQUs7UUFDbkMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFOUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRWYsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDM0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUU5QixJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztnQkFBRSxTQUFTO1lBRWhELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZELElBQUksSUFBSSxHQUFHLEdBQUc7Z0JBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUV6QixJQUFJLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQzNDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUV4QixJQUFJLE1BQU0sSUFBSSxNQUFNO2dCQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7aUJBQ2xCLElBQUksRUFBRSxDQUFDLGlCQUFpQjtnQkFDNUIsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDOztnQkFFNUIsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDO1lBRXpCLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDL0IsSUFBSSxLQUFLLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztnQkFDekIsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ3RCLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUNsQixLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUU3QyxJQUFJLE1BQU0sSUFBSSxNQUFNLEVBQUU7b0JBQ3JCLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQztvQkFDbEIsbUNBQW1DO29CQUNuQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUEsbUJBQW1CO29CQUNoQyxHQUFHO29CQUNILElBQUksSUFBSSxHQUFHLE9BQU8sRUFBRTt3QkFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQztxQkFDZjtvQkFDRCxLQUFLLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztpQkFDekI7O29CQUVBLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQixLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDdkMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDO2dCQUNoQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Q7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVwRCxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSztZQUM5QixPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUM7Z0JBQ3BCLDBEQUEwRDtnQkFDMUQsSUFBSSxDQUFDLENBQUMsTUFBTTtvQkFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLENBQUMsTUFBTTtvQkFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUV4Qix5Q0FBeUM7Z0JBQ3pDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFFBQVE7b0JBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFFBQVE7b0JBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFFekQsNkJBQTZCO2dCQUM3QixJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUztvQkFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkUsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLFNBQVM7b0JBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRW5FLE9BQU8sQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxDQUFBO1FBQ0YsQ0FBQztJQUNGLENBQUM7SUFFRCxJQUFJLFNBQVMsS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRXZDLFlBQVksQ0FBQyxPQUFPO1FBQ25CLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQztRQUNwRSxJQUFJLEtBQUssSUFBSSxTQUFTO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFDekMsS0FBSyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBTyxHQUFHLENBQUM7UUFDeEIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25DLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDOUMsSUFBSSxTQUFTLEdBQUcsUUFBUSxJQUFJLFNBQVMsSUFBSSxPQUFPO2dCQUMvQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDakIsQ0FBQztJQUVELFlBQVk7UUFDWCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFFaEIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUM5QyxJQUFJLFNBQVMsR0FBRyxPQUFPO2dCQUN0QixPQUFPLEdBQUcsU0FBUyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUVELFNBQVM7UUFDUixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRDtBQUdELE1BQU0sVUFBVSxTQUFTLENBQUMsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsWUFBWTtJQUMvSCxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDNUgsa0NBQWtDO0lBRWxDLDJCQUEyQjtJQUMzQix5Q0FBeUM7SUFFekMsMkJBQTJCO0lBQzNCLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFFMUIsZ0JBQWdCO0lBRWhCLGtCQUFrQjtJQUVsQiw0QkFBNEI7SUFDNUIsNkNBQTZDO0lBQzdDLGtEQUFrRDtJQUNsRCxrQ0FBa0M7SUFDbEMsMENBQTBDO0lBQzFDLHFDQUFxQztJQUNyQyxRQUFRO0lBQ1IsMENBQTBDO0lBQzFDLHFEQUFxRDtJQUVyRCwwQ0FBMEM7SUFDMUMseUJBQXlCO0lBQ3pCLDhDQUE4QztJQUM5Qyw0Q0FBNEM7SUFDNUMsUUFBUTtJQUVSLGlEQUFpRDtJQUNqRCwrQkFBK0I7SUFDL0IsdUNBQXVDO0lBQ3ZDLGtDQUFrQztJQUNsQyxLQUFLO0lBQ0wsdUNBQXVDO0lBQ3ZDLGtEQUFrRDtJQUVsRCw4QkFBOEI7SUFDOUIsaURBQWlEO0lBQ2pELHFFQUFxRTtJQUNyRSw4RUFBOEU7SUFFOUUsOENBQThDO0lBRTlDLGtEQUFrRDtJQUNsRCwyRkFBMkY7SUFDM0YsZ0JBQWdCO0lBQ2hCLFVBQVU7SUFDVixlQUFlO0lBQ2Ysc0ZBQXNGO0lBQ3RGLFVBQVU7SUFDVixTQUFTO0lBRVQsNEdBQTRHO0lBQzVHLHlJQUF5STtJQUN6SSxtQkFBbUI7SUFDbkIsc0dBQXNHO0lBQ3RHLHFCQUFxQjtJQUNyQiwwQkFBMEI7SUFDMUIsTUFBTTtJQUNOLFdBQVc7SUFDWCxxSEFBcUg7SUFDckgsTUFBTTtJQUNOLEtBQUs7SUFDTCw2QkFBNkI7SUFDN0IsOERBQThEO0lBQzlELFdBQVc7SUFDWCxLQUFLO0lBQ0wsNEJBQTRCO0lBQzVCLCtEQUErRDtJQUMvRCxXQUFXO0lBQ1gsS0FBSztJQUVMLFdBQVc7SUFDWCxxQkFBcUI7SUFDckIsMERBQTBEO0lBQzFELHdLQUF3SztJQUN4SyxXQUFXO0lBQ1gsS0FBSztJQUNMLElBQUk7SUFFSiwwQkFBMEI7SUFDMUIsZ0lBQWdJO0lBQ2hJLElBQUk7SUFDSixlQUFlO0FBQ2hCLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsWUFBWTtJQUNwRixJQUFJLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUvQix3QkFBd0I7SUFDeEIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUV0Qyx3QkFBd0I7SUFDeEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUV2QixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFFYixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFZixPQUFPLEtBQUssR0FBRyxPQUFPLEVBQUU7UUFDdkIseUNBQXlDO1FBQ3pDLDhDQUE4QztRQUM5Qyw4QkFBOEI7UUFDOUIsc0NBQXNDO1FBQ3RDLGlDQUFpQztRQUNqQyxJQUFJO1FBQ0osc0NBQXNDO1FBQ3RDLGlEQUFpRDtRQUVqRCxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEMscUJBQXFCO1FBQ3JCLDBDQUEwQztRQUMxQyx3Q0FBd0M7UUFDeEMsSUFBSTtRQUVKLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzdDLElBQUksVUFBVSxJQUFJLENBQUM7WUFBRSxNQUFNO1FBQzNCLElBQUksVUFBVSxHQUFHLE9BQU8sR0FBRyxLQUFLLEVBQUU7WUFDakMsVUFBVSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDN0I7UUFDRCxNQUFNLFNBQVMsR0FBRyxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQ25DLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFNUMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBRWxCLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3JFLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNuQyxJQUFJLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksT0FBTyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUU7Z0JBQzdHLElBQUksTUFBTSxJQUFJLE1BQU0sRUFBRTtvQkFDckIsdUNBQXVDO2lCQUN2QztxQkFDSTtvQkFDSixNQUFNLEdBQUcsTUFBTSxDQUFDO29CQUNoQixzREFBc0Q7aUJBQ3REO2dCQUNELFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO2FBQ2hDO1NBQ0Q7UUFFRCxJQUFJLE1BQU0sSUFBSSxTQUFTLEVBQUU7WUFDeEIsNENBQTRDO1lBQzVDLGdFQUFnRTtZQUNoRSx5RUFBeUU7WUFFekUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRW5DLDZDQUE2QztZQUM3QyxzRkFBc0Y7WUFDdEYsV0FBVztZQUNYLEtBQUs7WUFDTCxVQUFVO1lBQ1YsaUZBQWlGO1lBQ2pGLEtBQUs7WUFDTCxJQUFJO1lBRUosdUdBQXVHO1lBRXZHLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1lBQ3RELElBQUksYUFBYSxJQUFJLFVBQVUsRUFBRTtnQkFDaEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLGFBQWEsQ0FBQyxDQUFDO2FBQ2xGO1lBRUQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE1BQU0sRUFBRSxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUM5RixJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7Z0JBQ1osRUFBRSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsYUFBYSxHQUFHLFVBQVUsQ0FBQyxDQUFDO2dCQUNuRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLEtBQUssSUFBSSxVQUFVLENBQUM7YUFDcEI7aUJBQ0k7Z0JBQ0osRUFBRSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsR0FBRyxVQUFVLEdBQUcsTUFBTSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsYUFBYSxHQUFHLFVBQVUsQ0FBQyxDQUFDO2FBQ2xIO1NBQ0Q7YUFDSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3ZCLHlEQUF5RDtZQUN6RCxNQUFNO1NBQ047YUFDSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3RCLDBEQUEwRDtZQUMxRCxNQUFNO1NBQ047UUFFRCxJQUFJLEVBQUUsQ0FBQztRQUNQLElBQUksSUFBSSxHQUFHLEdBQUcsRUFBRTtZQUNmLEVBQUUsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztZQUNyRCxFQUFFLENBQUMsS0FBSyxDQUFDLG1CQUFtQixHQUFHLFNBQVMsR0FBRyxRQUFRLEdBQUcsR0FBRyxHQUFHLGVBQWUsR0FBRyxVQUFVLEdBQUcsWUFBWSxHQUFHLE9BQU8sR0FBRyxTQUFTLEdBQUcsS0FBSyxHQUFHLGFBQWEsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUNuSyxNQUFNO1NBQ047S0FDRDtJQUVELElBQUksS0FBSyxJQUFJLE9BQU8sRUFBRTtRQUNyQixFQUFFLENBQUMsS0FBSyxDQUFDLHdDQUF3QyxHQUFHLE9BQU8sR0FBRyxjQUFjLEdBQUcsVUFBVSxHQUFHLFVBQVUsR0FBRyxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUM7S0FDNUg7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNiLENBQUMifQ==\",\"filename\":\"/xsink/ram.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MaxHackForServer, GetBestMetricsForServer } from \\\"metrics.js\\\";\\nimport { RunScript2, MemoryMap } from \\\"ram.js\\\";\\nimport { ServerReport } from \\\"utils.js\\\";\\n// We define constants to index the times and delays in metrics\\nconst H = 0;\\nconst W1 = 1;\\nconst G = 2;\\nconst W2 = 3;\\nconst ANSI_COLORS = {\\n    \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n    \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n    \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n    \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n    \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n    \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n    \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n    \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n    \\\"d\\\": \\\"\\\\x1b[0m\\\"\\n};\\n// Amount of time between jobs. The same spacer is used between batches as well.\\nconst SPACER = 25;\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    let [target] = ns.args;\\n    if (target == null) {\\n        ns.tprint('FAIL: Scheduler called without a target! Example usage: run scheduler n00dles');\\n        return;\\n    }\\n    ns.tail();\\n    // Port used by the worker scripts to report their death to this script\\n    const PORT = 1;\\n    // We declare a clock object\\n    const clock = new ClockSync(ns);\\n    // This is the fixed window length for a batch paywindow (H-W-G-W, that's SPACER*3, plus another to space out the last W and the next batch's H)\\n    const windowLen = SPACER * 4;\\n    // We are scheduling batches to the clock. In order to do this, we simply increment this variable by windowLen each time we create a new\\n    // batch job. This means that we intend to start a batch every windowLength\\n    let nextBatch = performance.now();\\n    // id of the next batch we'll be spawning. This is simply incremented every time we create a new one\\n    let id = 0;\\n    // Semi-bogus metrics, those were precalculated using a script from my repo (n00dles at hack level 2706 with no augs, if you're curious)\\n    // Order is H, W1, G, W2\\n    // let metrics = {\\n    // \\t// This is how long we expect each job to last. For the purpose of this test the fake job script we call simply sleeps for that amount of time\\n    // \\t// to simulate each type of job\\n    // \\t\\\"times\\\": [524, 2094, 1675, 2094],\\n    // \\t// This is how long we need to wait from batch start to kick each job\\n    // \\t\\\"delays\\\": [1540, 0, 449, 60],\\n    // \\t// Delay between jobs\\n    // \\tdelay: SPACER,\\n    // \\t// Tolerance\\n    // \\ttolerance: SPACER / 1.5\\n    // };\\n    let metrics = await GetBestMetricsForServer(ns, target, 1, MaxHackForServer(ns, target), 1);\\n    metrics.delay = SPACER;\\n    metrics.tolerance = SPACER / 1.5;\\n    ServerReport(ns, target, metrics);\\n    // Simply an array to track batches. We currently never purge this array so don't leave it running too long or it will pile up\\n    // and it might skew the results/behavior\\n    let batches = [];\\n    // Empty whatever is still lingering on the port, whatever is there is stale and we have no use for it\\n    ClearPort(ns, PORT);\\n    while (true) {\\n        // Look for 'Batch' tasks and add some if we're under the target. We're using a target of 1 for this test.\\n        while (clock.tasks.filter(t => t.desc.startsWith('Batch')).length < 2) {\\n            if (!BatchFitsInMemoryBlocks(ns, metrics))\\n                break;\\n            const batch = new Batch(ns, id++, metrics);\\n            batches.push(batch);\\n            batch.Schedule(clock, nextBatch, PORT);\\n            // The next batch time is based on the previous batch, not the current time\\n            nextBatch += windowLen;\\n        }\\n        // This simply processes the task queue and runs what needs to be run\\n        clock.Process();\\n        // Removes any task that's aborted or started\\n        clock.PurgeTasks();\\n        // Checks the port for worker reports. We compile those and report when a batch finishes (either in correct or bad order)\\n        // Note that any batch that's been partially spawned because of cancelled job will never finish and linger in there forever\\n        // in the current implementation\\n        WorkerDeathReports(ns, PORT, batches);\\n        for (let batch of batches) {\\n            batch.Validate();\\n        }\\n        batches = batches.filter(s => s.reports.length < 4 && !s.aborted);\\n        // Yield CPU to other scripts\\n        await ns.asleep(0);\\n    }\\n}\\n// WIP\\nclass Batch {\\n    constructor(ns, id, metrics) {\\n        this.ns = ns;\\n        this.id = id;\\n        this.metrics = metrics;\\n        this.clock = undefined;\\n        this.port = undefined;\\n        this.scheduledTime = 0; // Time when the batch is meant to start (performance.now() based)\\n        this.execTime = 0; // Actual time when the batch was allowed to start ((performance.now() based))\\n        this.started = undefined; // Indicates time when this batch was started\\n        this.aborted = false; // Indicates whether or not this batch was completely or partially aborted\\n        this.reports = [];\\n        this.workerAborted = [false, false, false, false]; // Indicates whether or not each worker has been aborted\\n    }\\n    Schedule(clock, time, port) {\\n        this.clock = clock;\\n        this.port = port;\\n        this.scheduledTime = time;\\n        // Adds the new task in the scheduler\\n        this.clock.AddTask(`Batch ${this.id}`, this.scheduledTime, this.metrics.delay, () => this.Start(), []);\\n    }\\n    // Test function to start a mock batch. It simply adds them as tasks in the ClockSync instance.\\n    Start() {\\n        this.started = performance.now();\\n        this.clock.AddTask(`${this.id}.H`, this.started + this.metrics.delays[H], this.metrics.tolerance, () => this.StartJob('H', H, this.metrics.times[H]), []);\\n        this.clock.AddTask(`${this.id}.W1`, this.started + this.metrics.delays[W1], this.metrics.tolerance, () => this.StartJob('W1', W1, this.metrics.times[W1]), []);\\n        this.clock.AddTask(`${this.id}.G`, this.started + this.metrics.delays[G], this.metrics.tolerance, () => this.StartJob('G', G, this.metrics.times[G]), []);\\n        this.clock.AddTask(`${this.id}.W2`, this.started + this.metrics.delays[W2], this.metrics.tolerance, () => this.StartJob('W2', W2, this.metrics.times[W2]), []);\\n    }\\n    // Test function to start a mock job. The script emulates H/W/G without actually doing anything to the server\\n    // Desyncs are inconsequential, since they do not affect any servers. The script just sleeps for the duration to simulate\\n    // a hack, grow or weaken call\\n    StartJob(desc, type, duration) {\\n        let script = undefined;\\n        switch (type) {\\n            case H:\\n                script = 'hack-jit.js';\\n                break;\\n            case G:\\n                script = 'grow-jit.js';\\n                break;\\n            case W1:\\n                script = 'weaken-jit.js';\\n                break;\\n            case W2:\\n                script = 'weaken-jit.js';\\n                break;\\n        }\\n        let pids = RunScript2(this.ns, script, this.metrics.threads[type], [this.id, this.metrics.server, desc, type, duration, this.port], type == W1 || type == W2, false);\\n        //this.ns.exec(script, 'home', 1, this.id, desc, type, duration, this.port);\\n    }\\n    LogReport(data) {\\n        data.reported = performance.now();\\n        this.reports.push(data);\\n        let drift = this.GetJobDrift(data.type);\\n        if (drift == undefined)\\n            this.ns.print(ANSI_COLORS.r, 'This should not happen?!');\\n        if (drift > this.delay - 2) {\\n            this.ns.print(ANSI_COLORS.y, 'Batch job ' + this.id + '.' + data.desc + ' finished late... drift=' + drift);\\n        }\\n    }\\n    GetJobDrift(jobId) {\\n        let report = this.reports.find(r => r.type == jobId);\\n        if (report == undefined)\\n            return 0;\\n        let ended = report.end;\\n        let expectedEnd = this.started + this.metrics.delays[jobId] + this.metrics.times[jobId];\\n        let drift = ended - expectedEnd;\\n        return drift;\\n    }\\n    Validate() {\\n        let now = performance.now();\\n        if (this.scheduledTime > now + this.delay) {\\n            this.ns.print(ANSI_COLORS.y, 'Batch ' + this.id + ' did not start on time');\\n        }\\n        if (this.started) {\\n            if ([H, W1, G, W2].some(s => this.GetJobDrift(s) > this.metrics.tolerance * 5)) {\\n                this.ns.print(ANSI_COLORS.y, 'Batch ' + this.id + ' has some jobs past tolerance');\\n                // if ([H, W1, G, W2].some(s => this.GetJobDrift(s) > this.metrics.tolerance * 15)) {\\n                // \\tthis.ns.print(ANSI_COLORS.y, 'Batch ' + this.id + ' has some jobs past tolerance');\\n                // }\\n            }\\n        }\\n        if (performance.now() > (this.started + this.metrics.times[W1] + 3 * SPACER) + SPACER * 5) {\\n            this.ns.print(ANSI_COLORS.r, 'Batch ' + this.id + ' gone on too long, cancelling');\\n            this.aborted = true;\\n        }\\n        if (this.reports.length != 4)\\n            return;\\n        let replyChain = [];\\n        for (const report of this.reports) {\\n            switch (report.type) {\\n                case H:\\n                    replyChain.push('H');\\n                    break;\\n                case W1:\\n                    replyChain.push('W1');\\n                    break;\\n                case G:\\n                    replyChain.push('G');\\n                    break;\\n                case W2:\\n                    replyChain.push('W2');\\n                    break;\\n            }\\n        }\\n        if (replyChain.toString() == 'H,W1,G,W2') {\\n            //this.ns.print('SUCCESS: Batch ' + this.id + ' finished in correct order');\\n        }\\n        else {\\n            this.ns.print(ANSI_COLORS.y, 'Batch ' + this.id + ' finished out of order ' + replyChain.toString());\\n        }\\n    }\\n}\\n// Simply clears the data on the specified port\\nfunction ClearPort(ns, port) {\\n    while (ns.peek(port) != 'NULL PORT DATA') {\\n        ns.readPort(port);\\n    }\\n}\\n// Looks for worker reports and reports batches that fully executed\\n// It's very basic, the point is to not spam the log, so we only report batches whose 4 jobs have ended\\n// and we are able to determine if they finished in the expected order or not\\nfunction WorkerDeathReports(ns, port, batches) {\\n    while (ns.peek(port) != 'NULL PORT DATA') {\\n        let raw = ns.readPort(port);\\n        let data = JSON.parse(raw);\\n        let batch = batches.find(b => b.id == data.id);\\n        if (batch == undefined) {\\n            ns.print(ANSI_COLORS.r, \\\"Dismissing report of an unknown batch \\\" + data.id);\\n            continue;\\n        }\\n        batch.LogReport(data);\\n        //batch.Validate();\\n    }\\n}\\n// The ClockSync class\\n// This class is used to create, execute and delete tasks to be executed at precise time, with a drift tolerance\\n// The drift can only be positive (ie: you want to start at X, it will only execute if current time is >= X)\\n// Each task has a tolerance parameter, we are using 20ms in this test. This means a task meant to run at X\\n// can be delayed up to X + 20ms, if the task is still in the queue at that time and not executed yet,\\n// it's cancelled.\\nclass ClockSync {\\n    constructor(ns) {\\n        this.tasks = [];\\n        this.lastProc = performance.now();\\n        this.drift = 0;\\n        this.ns = ns;\\n        this.nextTid = 0;\\n    }\\n    Process() {\\n        // We use the time of entry in this function as the reference.\\n        const now = performance.now();\\n        // The drift is how much time elapsed since the last time we entered this function (excluding the current one obviously)\\n        this.drift = now - this.lastProc;\\n        // We filter out tasks that have already been started or that have been aborted, they're just logs/ghosts at this point\\n        // We also filter out tasks for which the start time hasn't been reached yet, we'll get to them next time this function\\n        // is called\\n        const tasks = this.tasks.filter(t => t.time <= now && !t.started && !t.aborted);\\n        for (const task of tasks) {\\n            // Started is when we processed the task. It could be aborted, it doesn't been it's been spawned/executed.\\n            task.started = now;\\n            // Different from this.drift, this one represents how many ms we are past the time we want to start this task\\n            let drift = now - task.time;\\n            // If we are past tolerance, task is aborted\\n            if (drift > task.tolerance) {\\n                // For debugging purposes, we use different colors for batches and jobs\\n                // TODO: This should be a task parameter so we can keep this function generic\\n                if (task.desc.startsWith('Batch'))\\n                    this.ns.print(ANSI_COLORS.y, `Task ${task.desc} cancelled... drift=${Math.ceil(drift)}`);\\n                else\\n                    this.ns.print(ANSI_COLORS.r, `Task ${task.desc} cancelled... drift=${Math.ceil(drift)}`);\\n                task.aborted = true;\\n                continue;\\n            }\\n            // Execute the scheduled task\\n            task.func(...task.args);\\n        }\\n        this.lastProc = now;\\n    }\\n    // Adds a task to the queue\\n    // \\n    AddTask(desc, // Task description, not important\\n    time, // Time at which we want to start the task (relative to performance.now())\\n    tolerance, // How much further than 'time' we allow the task to be started. If we get to it beyond this time, it will be cancelled.\\n    func, // Lambda function to execute (ie: the proverbial task)\\n    args // Arguments to be passed to the function (pass an empty array if none are needed)\\n    ) {\\n        let task = {\\n            id: this.nextTid++,\\n            desc: desc,\\n            time: time,\\n            tolerance: tolerance,\\n            func: func,\\n            args: args,\\n            aborted: false,\\n            started: null\\n        };\\n        this.tasks.push(task);\\n        return task.id;\\n    }\\n    // Removes tasks that are started or aborted to keep the queue mean and lean\\n    PurgeTasks() {\\n        this.tasks = this.tasks.filter(t => t.started == null && t.aborted == false);\\n    }\\n}\\nexport function BatchFitsInMemoryBlocks(ns, metrics) {\\n    const mem = new MemoryMap(ns);\\n    const HACK_RAM = ns.getScriptRam('hack-jit.js');\\n    const GROW_RAM = ns.getScriptRam('grow-jit.js');\\n    const WEAKEN_RAM = ns.getScriptRam('weaken-jit.js');\\n    // Failsafe, on veut pas trop taxer\\n    if (metrics.batchRam > mem.available * 0.9) {\\n        //ns.print('Batch won\\\\'t fit in 90% of total ram (failsalfe)');\\n        return false;\\n    }\\n    if (mem.ReserveBlock(metrics.threads[H] * HACK_RAM) == undefined) {\\n        // ns.print('Could not find a block big enough for ' + metrics.threads[H] + ' hack threads');\\n        // ns.print('Required = ' + metrics.threads[H] * HACK_RAM + ' Biggest block = ' + mem.BiggestBlock());\\n        return false;\\n    }\\n    if (mem.ReserveBlock(metrics.threads[G] * GROW_RAM) == undefined) {\\n        //ns.print('Could not find a block big enough for ' + metrics.threads[G] + ' grow threads');\\n        return false;\\n    }\\n    for (let i = 0; i < (metrics.threads[W1] + metrics.threads[W2]) * WEAKEN_RAM; i++) {\\n        if (mem.ReserveBlock(WEAKEN_RAM) == undefined) {\\n            //ns.print('Could not find enough network RAM for ' + (metrics.threads[W1] + metrics.threads[W2]) + ' weaken threads');\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n// // Test function to start a mock batch. It simply adds them as tasks in the ClockSync instance.\\n// function StartBatch(ns, id, metrics, port, clock) {\\n// \\tlet now = performance.now();\\n// \\tclock.AddTask(`${id}.H`, now + metrics.delays[H], SPACER - 10, () => StartJob(ns, 'H ', id, metrics.times[H], port), []);\\n// \\tclock.AddTask(`${id}.W1`, now + metrics.delays[W1], SPACER - 10, () => StartJob(ns, 'W1', id, metrics.times[W1], port), []);\\n// \\tclock.AddTask(`${id}.G`, now + metrics.delays[G], SPACER - 10, () => StartJob(ns, 'G ', id, metrics.times[G], port), []);\\n// \\tclock.AddTask(`${id}.W2`, now + metrics.delays[W2], SPACER - 10, () => StartJob(ns, 'W2', id, metrics.times[W2], port), []);\\n// }\\n// // Test function to start a mock job. The script emulates H/W/G without actually doing anything to the server\\n// // Desyncs are inconsequential, since they do not affect any servers. The script just sleeps for the duration to simulate\\n// // a hack, grow or weaken call\\n// function StartJob(ns, type, id, duration, port) {\\n// \\tns.exec('fakejob.js', 'home', 1, id, type, duration, port);\\n// }\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL3NjaGVkdWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWdCLGdCQUFnQixFQUFFLHVCQUF1QixFQUFZLE1BQU0sWUFBWSxDQUFDO0FBQy9GLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQy9DLE9BQU8sRUFBZSxZQUFZLEVBQVksTUFBTSxVQUFVLENBQUM7QUFFL0QsK0RBQStEO0FBQy9ELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNaLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNaLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUViLE1BQU0sV0FBVyxHQUFHO0lBQ25CLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLElBQUksRUFBRSxVQUFVO0lBQ2hCLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFNBQVM7Q0FDZCxDQUFBO0FBRUQsZ0ZBQWdGO0FBQ2hGLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUVsQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDdkIsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxNQUFNLENBQUMsK0VBQStFLENBQUMsQ0FBQztRQUMzRixPQUFPO0tBQ1A7SUFFRCxFQUFFLENBQUMsSUFBSSxFQUFF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LENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFKLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0osSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxSixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJ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\",\"filename\":\"/xsink/scheduler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":644}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    while (true)\\n        await ns.share();\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtZm9yZXZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9zaGFyZS1mb3JldmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsT0FBTyxJQUFJO1FBQUUsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDL0IsQ0FBQyJ9\",\"filename\":\"/xsink/share-forever.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetAllServers } from 'utils.js';\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // Get source code enum data\\n    await ns.wget('https://raw.githubusercontent.com/danielyxie/bitburner/master/src/Locations/data/LocationNames.ts', 'locations.txt');\\n    ;\\n    await ns.wget('https://raw.githubusercontent.com/danielyxie/bitburner/master/src/StockMarket/data/StockSymbols.ts', 'stocksymbols.txt');\\n    let location = \\\"\\\";\\n    let company = \\\"\\\";\\n    let locations = ns.read('locations.txt');\\n    let locationMap = Object();\\n    for (let line of locations.split(\\\"\\\\n\\\")) {\\n        if (line.includes('=')) {\\n            location = line.split(\\\" = \\\")[0];\\n            company = line.split(\\\" = \\\")[1];\\n            while (company.includes('\\\"')) {\\n                company = company.replace('\\\"', '').replace(\\\",\\\", \\\"\\\");\\n            }\\n            while (location.includes(' ')) {\\n                location = location.replace(' ', '');\\n            }\\n        }\\n        locationMap[location] = company;\\n    }\\n    let data = [];\\n    let companies = ns.read('stocksymbols.txt');\\n    for (let line of companies.split(\\\"\\\\n\\\")) {\\n        let location;\\n        let sym;\\n        let serverName;\\n        let organization;\\n        if (line.includes(\\\"LocationName\\\")) {\\n            for (let line2 of Object.keys(locationMap)) {\\n                if (line2.length > 3 && line.includes(line2)) {\\n                    location = locationMap[line2];\\n                    sym = line.split(\\\"=\\\")[1].replace(\\\";\\\", \\\"\\\").replace('\\\\\\\"', '').replace('\\\\\\\"', '').replace(' ', '');\\n                }\\n            }\\n        }\\n        else {\\n            if (line.includes(\\\"StockSymbols\\\") && !line.includes(\\\"LocationName\\\") && !line.includes(\\\"export\\\")) {\\n                location = line.substring(14, line.indexOf(']') - 1);\\n                sym = line.substring(line.indexOf('=') + 3, line.length - 2);\\n            }\\n        }\\n        for (let server of GetAllServers(ns)) {\\n            let so = ns.getServer(server);\\n            if (so.organizationName == location) {\\n                serverName = server;\\n                organization = so.organizationName;\\n            }\\n        }\\n        if (location != undefined && serverName != undefined)\\n            data.push({ location: location, sym: sym, server: serverName, organization: organization });\\n    }\\n    let symbols = ns.stock.getSymbols();\\n    for (let sym of symbols) {\\n        let match = data.find(s => s.sym == sym);\\n        if (match == undefined)\\n            ns.tprint('WARN: ' + sym.padEnd(10) + ' : ' + 'No match!'.padEnd(20) + '???'.padEnd(25) + ' ' + 'N/A'.padEnd(25));\\n        else\\n            ns.tprint('INFO: ' + match.sym.padEnd(10) + ' : ' + match.server.padEnd(20) + match.organization.padEnd(25) + ' ' + match.location.padEnd(25));\\n    }\\n    // Remove temporary files\\n    ns.rm('locations.txt');\\n    ns.rm('stocksymbols.txt');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyc3RvbmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvc2VydmVyc3RvbmsuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV6QyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUN6QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLDRCQUE0QjtJQUM1QixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUdBQW1HLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFBQSxDQUFDO0lBQ3JJLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxvR0FBb0csRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBRXhJLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNsQixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDakIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN6QyxJQUFJLFdBQVcsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUMzQixLQUFLLElBQUksSUFBSSxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDcEMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFBRSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FB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\",\"filename\":\"/xsink/serverstonk.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":646}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetAllServers } from \\\"/xsink/utils.js\\\";\\nimport { RunScript } from \\\"/xsink/ram.js\\\";\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const [pct = 0.95] = ns.args;\\n    if (pct == 'stop') {\\n        const data = FindInstances(ns);\\n        // Kill all existing instances of share-forever.js\\n        for (const proc of data.shares) {\\n            ns.tprint('Killing share-forever.js PID ' + proc.pid);\\n            ns.kill(proc.pid);\\n        }\\n        for (const proc of data.dupes) {\\n            ns.tprint('Killing share.js PID ' + proc.pid);\\n            ns.kill(proc.pid);\\n        }\\n        return;\\n    }\\n    for (;;) {\\n        ns.print('');\\n        ns.print('');\\n        await AdjustUsage(ns, pct);\\n        ns.print('Current share power: ' + ns.getSharePower());\\n        await ns.sleep(5000);\\n    }\\n}\\nfunction FindInstances(ns) {\\n    let allProcs = [];\\n    let dupes = [];\\n    let totalRam = 0;\\n    for (const server of GetAllServers(ns)) {\\n        let procs = ns.ps(server);\\n        allProcs.push(...procs.filter(s => s.filename == 'share-forever.js'));\\n        dupes.push(...procs.filter(s => s.filename == 'share.js' && s.args[0] != 'stop'));\\n        if (ns.hasRootAccess(server))\\n            totalRam += ns.getServerMaxRam(server);\\n    }\\n    return {\\n        shares: allProcs.sort((a, b) => a.threads - b.threads),\\n        dupes: dupes,\\n        totalRam: totalRam\\n    };\\n}\\nasync function AdjustUsage(ns, pct) {\\n    let data = FindInstances(ns);\\n    let shareThreads = data.shares.reduce((a, s) => a += s.threads, 0);\\n    let scriptRam = ns.getScriptRam('share-forever.js');\\n    let sharePct = (shareThreads * scriptRam) / data.totalRam;\\n    let targetThreads = Math.ceil(data.totalRam * pct / scriptRam);\\n    if (shareThreads > targetThreads) {\\n        let needToKill = shareThreads - targetThreads;\\n        while (needToKill > 0 && data.shares.length > 0) {\\n            ns.print('Killing ' + data.shares[0].threads + ' share threads');\\n            shareThreads -= data.shares[0].threads;\\n            needToKill -= data.shares[0].threads;\\n            ns.kill(data.shares[0].pid);\\n            data.shares.shift();\\n        }\\n        sharePct = (shareThreads * scriptRam) / data.totalRam;\\n    }\\n    if (sharePct < pct) {\\n        let missingThreads = targetThreads - shareThreads;\\n        ns.print('Attempting to start ' + missingThreads + ' share threads.');\\n        await RunScript(ns, 'share-forever.js', '', missingThreads, performance.now(), true, true, true);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvc2hhcmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRW5DLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBRTdCLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRTtRQUNsQixNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDOUIsa0RBQWtEO1FBQ2xELEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUMvQixFQUFFLENBQUMsTUFBTSxDQUFDLCtCQUErQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN0RCxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtRQUNELEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM5QixFQUFFLENBQUMsTUFBTSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtRQUNELE9BQU87S0FDUDtJQUVELFNBQVU7UUFDVCxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNiLE1BQU0sV0FBVyxDQUFDLEVBQUUsRUFB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\",\"filename\":\"/xsink/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/tables.js\",\"url\":\"blob:file:///98fecb52-6630-4529-8887-6c3ce9f40a4c\",\"moduleSequenceNumber\":23709},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:file:///173f01a3-1c68-4b15-9ada-79787c3fac74\",\"moduleSequenceNumber\":23707},{\"filename\":\"/xsink/ram.js\",\"url\":\"blob:file:///84e74608-cce5-4146-99b1-33d027938119\",\"moduleSequenceNumber\":23711},{\"filename\":\"/xsink/utils.js\",\"url\":\"blob:file:///9190f926-7ee5-4f54-802b-b9bafd50fc51\",\"moduleSequenceNumber\":23707},{\"filename\":\"/xsink/share.js\",\"url\":\"blob:file:///f0cd9125-9009-4679-9091-304689b35529\",\"moduleSequenceNumber\":84777}],\"dependents\":[],\"ramUsage\":6.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetBestCrime } from 'stats.js';\\nimport { ColorPrint } from 'hack-once.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [task, start = 0, count = 8] = ns.args;\\n    let getBest = task == undefined;\\n    for (let i = start; i < count; i++) {\\n        let cash = ns.getServerMoneyAvailable('home');\\n        let city = ns.sleeve.getInformation(i).city;\\n        //if (task == 'augs' && i > 3) continue;\\n        if (getBest) {\\n            let fakePlayer = ns.getPlayer();\\n            fakePlayer.skills = ns.sleeve.getSleeveStats(i);\\n            task = GetBestCrime(ns, fakePlayer);\\n        }\\n        if (task == 'shock') {\\n            ns.tprint('Setting sleeve ' + i + ' to Shock Recovery');\\n            ns.sleeve.setToShockRecovery(i);\\n            continue;\\n        }\\n        // if (task == 'Homicide') {\\n        // \\tns.sleeve.setToCommitCrime(i, task);\\n        // \\tcontinue;\\n        // }\\n        if (task == 'augs') {\\n            if (ns.sleeve.getSleeveStats(i).shock > 0)\\n                continue;\\n            //if (i > 1) continue;\\n            const owned = ns.sleeve.getSleeveAugmentations(i);\\n            const available = ns.sleeve.getSleevePurchasableAugs(i).sort((a, b) => a.cost - b.cost).filter(s => !owned.includes(s.name));\\n            let totalCost = 0;\\n            for (const aug of available) {\\n                let color = 'white';\\n                ns.tprint(aug.name + ' => ' + ns.nFormat(aug.cost, \\\"$0.000a\\\"));\\n                let stats = ns.getAugmentationStats(aug.name);\\n                if (Object.keys(stats).length == 0) {\\n                    ColorPrint('red', '   No stats found for this augment');\\n                }\\n                else {\\n                    for (let key of Object.keys(stats)) {\\n                        // if (key.search('str') >= 0 ||\\n                        // \\tkey.search('def') >= 0 ||\\n                        // \\tkey.search('agi') >= 0 ||\\n                        // \\tkey.search('dex') >= 0 ||\\n                        // \\tkey.search('combat') >= 0 ||\\n                        // \\tkey.search('skills') >= 0)\\n                        // \\tcolor = 'yellow';\\n                        // if (key.search('faction') >= 0)\\n                        // color = 'yellow';\\n                        // if (key.search('hack') >= 0 && key.search('hacknet') == -1)\\n                        // \\tcolor = 'orange';\\n                        // if (key.search('hacknet') >= 0)\\n                        // \\tcolor = 'purple';\\n                        if (aug.cost > 15_000_000_000)\\n                            continue;\\n                        //color = 'red';\\n                        //if (color == 'yellow') {\\n                        totalCost += aug.cost;\\n                        ns.sleeve.purchaseSleeveAug(i, aug.name);\\n                        await ns.sleep(5);\\n                        //}\\n                        ColorPrint(color, '    ' + key.padEnd(30) + '    ' + stats[key]);\\n                    }\\n                }\\n            }\\n            ColorPrint('yellow', 'Total of matching augs: ' + ns.nFormat(totalCost * 8, \\\"$0.000a\\\"));\\n            await ns.sleep(100);\\n            continue;\\n            //break;\\n        }\\n        if (task == 'study') {\\n            // Travel if possible/needed\\n            if (ns.sleeve.getInformation(i).city != 'Volhaven' && cash > 1_000_000_000) {\\n                ns.sleeve.travel(i, 'Volhaven');\\n                city = ns.sleeve.getInformation(i).city;\\n            }\\n            // Chose either the most expensive or free course depending on cash\\n            const course = cash > 1_000_000_000 ? 'Algorithms' : 'Study Computer Science';\\n            let uni = '';\\n            switch (city) {\\n                case 'Volhaven':\\n                    uni = 'ZB Institute of Technology';\\n                    break;\\n                case 'Sector-12':\\n                    uni = 'Rothman University';\\n                    break;\\n                default:\\n                    ns.tprint('Sleeve ' + i + ' is not in Sector-12 or Volhaven and cash is tight, aborting.');\\n                    continue;\\n            }\\n            ns.tprint('Sleeve ' + i + ' is starting to study ' + course + ' at ' + uni);\\n            ns.sleeve.setToUniversityCourse(i, uni, course);\\n            continue;\\n        }\\n        if (task == 'train') {\\n            // Travel if possible/needed\\n            if (ns.sleeve.getInformation(i).city != 'Sector-12') {\\n                if (cash > 1_000_000) {\\n                    ns.sleeve.travel(i, 'Sector-12');\\n                    city = ns.sleeve.getInformation(i).city;\\n                }\\n                else {\\n                    ns.tprint('Sleeve ' + i + ' is not in Sector-12 and cash is tight, aborting training.');\\n                    continue;\\n                }\\n            }\\n            const stats = ['Train Strength', 'Train Defense', 'Train Dexterity', 'Train Agility'];\\n            const statIndex = i % 4;\\n            ns.tprint('Sleeve ' + i + ' is starting to to ' + stats[statIndex] + ' at ' + 'Powerhouse Gym');\\n            ns.sleeve.setToGymWorkout(i, 'Powerhouse Gym', stats[statIndex]);\\n            continue;\\n        }\\n        // Default\\n        ns.tprint('Setting sleeve ' + i + ' to ' + task);\\n        ns.sleeve.setToCommitCrime(i, task);\\n        continue;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xlZXZlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9zbGVldmVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUV6QyxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFFM0MsSUFBSSxPQUFPLEdBQUcsSUFBSSxJQUFJLFNBQVMsQ0FBQztJQUVoQyxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFNUMsd0NBQXdDO1FBRXhDLElBQUksT0FBTyxFQUFFO1lBQ1osSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2hDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEQsSUFBSSxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFJLElBQUksSUFBSSxPQUFPLEVBQUU7WUFDcEIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztZQUN4RCxFQUFFLENB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\",\"filename\":\"/xsink/sleeves.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":648}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { FormatMoney } from \\\"utils.js\\\";\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    ns.tprint('');\\n    const servers = RecursiveScan(ns);\\n    const hackableServers = HackableServers(ns, servers);\\n    ns.tprint(hackableServers.length + ' hackable servers found out of ' + servers.length);\\n    if (ns.fileExists('Formulas.exe'))\\n        ns.tprint('INFO: Using formulas for hack % (showing maximum %)');\\n    else\\n        ns.tprint('WARNING: NOT using formulas for hack % (showing current %)');\\n    ns.tprint('┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────┐');\\n    ns.tprint('│  Server            │  $$$      │  HackReq │  MinSec │  Prepped  │  Chance  |  Weaken Time                   │');\\n    ns.tprint('├─────────────────────────────────────────────────────────────────────────────────────────────────────────────┤');\\n    let cut = false;\\n    const player = ns.getPlayer();\\n    if (ns.args[0] != undefined) {\\n        player.hacking = ns.args[0];\\n        player.hacking_speed_mult = 1;\\n        player.hacking_chance_mult = 1;\\n        player.hacking_exp_mult = 1;\\n        player.hacking_exp = 1;\\n        player.hacking_grow_mult = 1;\\n        player.hacking_money_mult = 1;\\n    }\\n    for (const hackable of hackableServers) {\\n        const so = ns.getServer(hackable);\\n        if (!cut && so.requiredHackingSkill < player.hacking / 2) {\\n            ns.tprint('├─────────────────────────────────────────────────────────────────────────────────────────────────────────────┤');\\n            cut = true;\\n        }\\n        const minSec = ns.getServerMinSecurityLevel(hackable);\\n        let chance = ns.hackAnalyzeChance(hackable);\\n        const maxMoney = ns.getServerMaxMoney(hackable);\\n        so.hackDifficulty = so.minDifficulty;\\n        let wtime = ns.getWeakenTime(so.hostname);\\n        if (ns.fileExists('Formulas.exe')) {\\n            chance = ns.formulas.hacking.hackChance(so, player);\\n            wtime = ns.formulas.hacking.weakenTime(so, player);\\n        }\\n        ns.tprint('│  ' + hackable.padEnd(18) + '│  ' +\\n            FormatMoney(ns, maxMoney).padEnd(9) + '│  ' +\\n            so.requiredHackingSkill.toString().padEnd(8) + '│  ' +\\n            Math.round(minSec).toString().padEnd(7) + '│  ' +\\n            Prepped(ns, hackable).toString().padEnd(9) + '│  ' +\\n            ((chance * 100).toFixed(0).toString() + '%').padEnd(8) + '│  ' +\\n            ns.tFormat(wtime).padEnd(30) + '│');\\n    }\\n    ns.tprint('└─────────────────────────────────────────────────────────────────────────────────────────────────────────────┘');\\n    ns.tprint('');\\n    if (ns.args[0] == 'prep') {\\n        ns.tprint(\\\"INFO: Looking for prep targets\\\");\\n        for (const hackable of hackableServers) {\\n            if (Prepped(ns, hackable)) {\\n                continue;\\n            }\\n            let procs = await ns.ps();\\n            let alreadyRunning = false;\\n            for (const proc of procs) {\\n                if (proc.filename != 'prep.js')\\n                    continue;\\n                if (proc.args != hackable)\\n                    continue;\\n                alreadyRunning = true;\\n                break;\\n            }\\n            if (alreadyRunning == false) {\\n                ns.tprint(\\\"INFO: Launching prep.js for \\\" + hackable);\\n                //const needed = ns.getScriptRam('prep.js');\\n                //let ram = new MemoryMap(ns);\\n                //const server = ram.ReserveBlock(needed);\\n                if (ns.exec('prep.js', 'home', 1, hackable) == 0) {\\n                    ns.tprint(\\\"FAILED: Launching prep.js for \\\" + hackable);\\n                }\\n            }\\n            else {\\n                //ns.tprint(\\\"prep.js already running for for \\\" + hackable);\\n            }\\n        }\\n    }\\n    const usableServers = UsableServers(ns, servers);\\n    ns.tprint(usableServers.length + ' usable servers found out of ' + servers.length);\\n    for (const usable of usableServers) {\\n        if (ns.args[0] == 'mem') {\\n            ns.tprint(usable + ' => ' + ns.nFormat(ServerUsableRam(ns, usable) * 1000000000, '0.00b'));\\n        }\\n    }\\n    for (const hackable of hackableServers) {\\n        if (ns.args[0] == 'run') {\\n            let target = 'v1.js';\\n            const so = ns.getServer(hackable);\\n            if (so.requiredHackingSkill > player.hacking / 2)\\n                continue;\\n            let procs = await ns.ps();\\n            let alreadyRunning = false;\\n            for (const proc of procs) {\\n                if (proc.filename != target)\\n                    continue;\\n                if (proc.args[0] != hackable)\\n                    continue;\\n                alreadyRunning = true;\\n                break;\\n            }\\n            if (alreadyRunning == false) {\\n                ns.tprint('INFO: Launching ' + target + ' for ' + hackable);\\n                if (ns.exec(target, 'home', 1, hackable, 0.5, 10000) == 0) {\\n                    ns.tprint('FAILED: Launching ' + target + ' for ' + hackable);\\n                }\\n                await ns.sleep(10);\\n            }\\n        }\\n    }\\n    ns.tprint('');\\n    //let ram = new MemoryMap(ns);\\n    //ns.tprint('Total usable RAM: ' + ns.nFormat(ram.available * 1000000000, '0.00b') + ' / ' + ns.nFormat(ram.total * 1000000000, '0.00b') + ' (' + Math.round(ram.available * 100.0 / ram.total) + '%)');\\n    //ns.tprint('Possible grow/weaken/hack threads: approx ' + Math.floor(ram.available / ns.getScriptRam('grow-once.js')) + ' / ' + Math.floor(ram.total / ns.getScriptRam('grow-once.js')));\\n}\\nfunction Prepped(ns, server) {\\n    const so = ns.getServer(server);\\n    if (so.moneyAvailable < so.moneyMax)\\n        return false;\\n    if (so.hackDifficulty > so.minDifficulty)\\n        return false;\\n    return true;\\n}\\nasync function ReplaceProcess(ns, script, params, server) {\\n    // args\\t\\t\\tstring[]\\tScript's arguments\\n    // filename\\t\\tstring\\t\\tScript name.\\n    // pid\\t\\t\\tnumber\\t\\tProcess ID\\n    // threads\\t\\tnumber\\t\\tNumber of threads script is running with\\t\\n    const procs = await ns.ps(server);\\n    for (const proc of procs) {\\n        if (proc.filename != script)\\n            continue;\\n        if (proc.args != params)\\n            continue;\\n        ns.tprint('Killing ' + script + ' (args: ' + params + ') on ' + server);\\n        await ns.kill(proc.pid);\\n    }\\n    if (params == 'n00dles')\\n        return;\\n    ns.tprint('Spawning ' + script + ' (args: ' + params + ') on ' + server);\\n    ns.exec(script, server, 1, params);\\n}\\nfunction ServerUsableRam(ns, server) {\\n    return ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n}\\nfunction HackableServers(ns, servers) {\\n    //const ret = servers.filter(s => !KeepServer(s));\\n    const ret = servers.filter(s => ns.hasRootAccess(s) && ns.getServerMaxMoney(s) > 0);\\n    ret.sort(MoneySort);\\n    return ret;\\n    function KeepServer(z) {\\n        return true;\\n        const so = ns.getServer(s);\\n        const player = ns.getPlayer();\\n        if (!ns.hasRootAccess(s))\\n            return false;\\n        if (ns.getServerMaxMoney(s) == 0)\\n            return false;\\n        if (s == 'home')\\n            return false;\\n        if (so.purchasedByPlayer)\\n            return false;\\n        if (so.requiredHackingSkill < player.hacking)\\n            return false;\\n        if (ns.fileExists('Formulas.exe')) {\\n            so.hackDifficulty = so.minDifficulty;\\n            const chance = ns.formulas.hacking.hackChance(so, player);\\n            if (chance < 0.25)\\n                return false;\\n        }\\n        return true;\\n    }\\n    function MoneySort(a, b) {\\n        if (ns.getServerMaxMoney(a) > ns.getServerMaxMoney(b))\\n            return -1;\\n        if (ns.getServerMaxMoney(a) < ns.getServerMaxMoney(b))\\n            return 1;\\n        return 0;\\n    }\\n}\\nfunction UsableServers(ns, servers) {\\n    const ret = servers.filter(s => ns.hasRootAccess(s) && ServerUsableRam(ns, s) > 0);\\n    ret.sort(RamSort);\\n    return ret;\\n    function RamSort(a, b) {\\n        if (ServerUsableRam(ns, a) > ServerUsableRam(ns, b))\\n            return -1;\\n        if (ServerUsableRam(ns, a) < ServerUsableRam(ns, b))\\n            return 1;\\n        return 0;\\n    }\\n}\\nfunction RecursiveScan(ns, root, found) {\\n    if (found == null)\\n        found = new Array();\\n    if (root == null)\\n        root = 'home';\\n    if (found.find(p => p == root) == undefined) {\\n        found.push(root);\\n        for (const server of ns.scan(root))\\n            if (found.find(p => p == server) == undefined)\\n                RecursiveScan(ns, server, found);\\n    }\\n    return found;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9zb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdkMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFZCxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEMsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRCxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsaUNBQWlDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXZGLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUM7UUFDaEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxREFBcUQsQ0FBQyxDQUFDOztRQUVqRSxFQUFFLENBQUMsTUFBTSxDQUFDLDREQUE0RCxDQUFDLENBQUM7SUFFekUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxpSEFBaUgsQ0FBQyxDQUFDO0lBQzdILEVBQUUsQ0FBQyxNQUFNLENBQUMsaUhBQWlILENBQUMsQ0FBQztJQUM3SCxFQUFFLENBQUMsTUFBTSxDQUFDLGlIQUFpSCxDQUFDLENBQUM7SUFFN0gsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBQ2hCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUU5QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMs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\",\"filename\":\"/xsink/sort.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":649}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { RunScript, MemoryMap } from 'ram.js';\\nimport { WaitPids } from 'utils.js';\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    let fragments = ns.stanek.activeFragments().filter(p => p.limit < 5);\\n    const [ramPct = 1] = ns.args;\\n    ns.tprint('INFO: Running share... pct:' + ramPct);\\n    for (;;) {\\n        for (let fragment of fragments) {\\n            ns.print('Charging: ' + fragment.id);\\n            let ram = new MemoryMap(ns);\\n            let cost = ns.getScriptRam('charge.js');\\n            let pids = await RunScript(ns, 'charge.js', fragment.x, Math.floor(ram.total * ramPct / cost), fragment.y, 0, 0, performance.now(), true, true);\\n            await WaitPids(ns, pids);\\n            ns.print('Done charging: ' + fragment.id);\\n        }\\n        await ns.sleep(0);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmVrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL3N0YW5lay5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLDZCQUE2QixHQUFHLE1BQU0sQ0FBQyxDQUFDO0lBRWxELFNBQVU7UUFDVCxLQUFLLElBQUksUUFBUSxJQUFJLFNBQVMsRUFBRTtZQUMvQixFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFNUIsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUV4QyxJQUFJLElBQUksR0FBRyxNQUFNLFNBQVMsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoSixNQUFNLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUM7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7QUFDRixDQUFDIn0=\",\"filename\":\"/xsink/stanek.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":650}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Weaken, Grow, Hack } from \\\"prep.js\\\";\\nimport { ServerReport } from \\\"utils.js\\\";\\n// ns.args[0] = target server name\\n// ns.args[1] = hack percent factor (0.1 to 1)\\n// ns.args[2] = debug true/false\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    if (ns.args[0] == null) {\\n        ns.print('ERROR: No server specified');\\n        ns.exit();\\n    }\\n    var server = ns.args[0];\\n    await ManageServer(ns, server, ns.args[1], ns.args[2]);\\n}\\nasync function ManageServer(ns, server, pct, debug) {\\n    if (pct == undefined || pct >= 1)\\n        pct = 0.9;\\n    for (;;) {\\n        ServerReport(ns, server);\\n        const so = ns.getServer(server);\\n        if (so.hackDifficulty > so.minDifficulty + 1)\\n            await Weaken(ns, server, true, true);\\n        else if (so.moneyAvailable < so.moneyMax * 0.85)\\n            await Grow(ns, server, true, true);\\n        else\\n            await Hack(ns, server, pct, true, true);\\n        await ns.sleep(200);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay9zdGFydGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXhDLGtDQUFrQztBQUNsQyw4Q0FBOEM7QUFDOUMsZ0NBQWdDO0FBQ2hDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUN2QyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDVjtJQUVELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFeEIsTUFBTSxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLO0lBQ2pELElBQUksR0FBRyxJQUFJLFNBQVMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUMvQixHQUFHLEdBQUcsR0FBRyxDQUFDO0lBRVgsU0FBVTtRQUNULFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoQyxJQUFJLEVBQUUsQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLGFBQWEsR0FBRyxDQUFDO1lBQzNDLE1BQU0sTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2pDLElBQUksRUFBRSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsUUFBUSxHQUFHLElBQUk7WUFDOUMsTUFBTSxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7O1lBRW5DLE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV6QyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEI7QUFDRixDQUFDIn0=\",\"filename\":\"/xsink/starter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const factions = [\\n    'CyberSec',\\n    'Tian Di Hui',\\n    'Netburners',\\n    'Sector-12',\\n    'Aevum',\\n    'Volhaven',\\n    'Ishima',\\n    'Chongqing',\\n    'New Tokyo',\\n    'NiteSec',\\n    'The Black Hand',\\n    'BitRunners',\\n    'ECorp',\\n    'MegaCorp',\\n    'KuaiGong International',\\n    'Four Sigma',\\n    'NWO',\\n    'Blade Industries',\\n    'OmniTek Incorporated',\\n    'Bachman & Associates',\\n    'Clarke Incorporated',\\n    'Fulcrum Secret Technologies',\\n    'Slum Snakes',\\n    'Tetrads',\\n    'Silhouette',\\n    'Speakers for the Dead',\\n    'The Dark Army',\\n    'The Syndicate',\\n    'The Covenant',\\n    'Daedalus',\\n    'Illuminati'\\n];\\nconst crimes = [\\n    'shoplift',\\n    'rob store',\\n    'mug',\\n    'larceny',\\n    'deal drugs',\\n    'bond forgery',\\n    'traffick arms',\\n    'homicide',\\n    'grand theft auto',\\n    'kidnap',\\n    'assassinate',\\n    'heist'\\n];\\n// ascensionMultiplier(points)\\t\\t\\t\\tCalculate ascension mult.\\n// ascensionPointsGain(exp)\\t\\t\\t\\t\\tCalculate ascension point gain.\\n// moneyGain(gang, member, task)\\t\\t\\tCalculate money gain per tick.\\n// respectGain(gang, member, task)\\t\\t\\tCalculate respect gain per tick.\\n// wantedLevelGain(gang, member, task)\\t\\tCalculate wanted gain per tick.\\n// wantedPenalty(gang)\\t\\t\\t\\t\\t\\tCalculate the wanted penalty.\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    let player = ns.getPlayer();\\n    if (ns.args[0] == 'best') {\\n        ns.tprint('Best crime right now is: ' + GetBestCrime(ns, ns.getPlayer()));\\n        return;\\n    }\\n    if (ns.args[0] == 'factions') {\\n        let joined = ns.getPlayer().factions;\\n        let missing = factions.filter(s => !joined.includes(s));\\n        ns.tprint('missing: ' + missing.join('\\\\n'));\\n        // for (const faction of factions) {\\n        // \\ttry {\\n        // \\t\\tconst augs = ns.singularity.getAugmentationsFromFaction(faction);\\n        // \\t}\\n        // \\tcatch {\\n        // \\t\\tns.tprint('faction ' + faction + ' is invalid maybe?');\\n        // \\t}\\n        // }\\n        return;\\n    }\\n    if (ns.args[0] == 'travel') {\\n        for (;;) {\\n            for (let i = 0; i < 10000; i++) {\\n                ns.singularity.travelToCity('Sector-12');\\n                ns.singularity.travelToCity('Chongqing');\\n            }\\n            await ns.sleep(0);\\n        }\\n        return;\\n    }\\n    const startMoney = player.money;\\n    while (true) {\\n        player = ns.getPlayer();\\n        // If we lost money, lets do some crimes to replenish the wallet\\n        // if (player.money < startMoney) {\\n        // \\tawait TheSecretIngredientIsCrime(ns);\\n        // }\\n        // else {//if (!ns.isBusy()) {\\n        ns.print('Training stats at the gym!');\\n        await TrainCombatStats(ns, player);\\n        // }\\n        SituationReport(ns, player, startMoney);\\n        await ns.sleep(10000);\\n    }\\n}\\nasync function TrainCombatStats(ns, player) {\\n    let stats = new Array({ 'stat': 'strength', 'value': player.strength }, { 'stat': 'defense', 'value': player.defense }, { 'stat': 'dexterity', 'value': player.dexterity }, { 'stat': 'agility', 'value': player.agility });\\n    // Find our lowest stat\\n    stats = stats.sort((a, b) => a.value - b.value);\\n    ns.print('Our lowest combat stat is ' + stats[0].stat);\\n    if (player.className != 'training your ' + stats[0].stat + ' at a gym') {\\n        ns.gymWorkout('Powerhouse Gym', stats[0].stat, false);\\n        for (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n            ns.sleeve.setToGymWorkout(i, 'Powerhouse Gym', 'Train ' + stats[0].stat.charAt(0).toUpperCase() + stats[0].stat.slice(1));\\n        }\\n    }\\n}\\nfunction SituationReport(ns, player, startMoney) {\\n    ns.print('');\\n    ns.print('Karma                   : ' + ns.heart.break());\\n    ns.print('Money on script launch  : ' + ns.nFormat(startMoney, \\\"$0.000a\\\"));\\n    ns.print('Money                   : ' + ns.nFormat(player.money, \\\"$0.000a\\\"));\\n    ns.print('City                    : ' + player.city);\\n    ns.print('isWorking               : ' + player.isWorking);\\n    ns.print('workType                : ' + player.workType);\\n    ns.print('className               : ' + player.className);\\n    ns.print('');\\n}\\nasync function TheSecretIngredientIsCrime(ns) {\\n    const bestCrime = GetBestCrime(ns, ns.getPlayer());\\n    if (bestCrime != undefined) {\\n        const start = Date.now();\\n        const time = ns.commitCrime(bestCrime);\\n        ns.print('Committing ' + bestCrime + ' (will take approx ' + ns.tFormat(time) + ')');\\n        while (ns.isBusy()) {\\n            let elapsed = Date.now() - start;\\n            if (elapsed < time * 0.8)\\n                break; // user cancelled\\n            await ns.sleep(100);\\n        }\\n        ns.print(bestCrime + ' complete!');\\n    }\\n}\\nexport function GetBestCrime(ns, player) {\\n    let bestCrime = undefined;\\n    let bestCps = 0;\\n    let bestKps = 0;\\n    let bestIps = 0;\\n    for (const crime of crimes) {\\n        let crimeStats = ns.singularity.getCrimeStats(crime);\\n        let chance = calculateCrimeSuccessChance(crimeStats, player); // ns.getCrimeChance(crime);\\n        let cps = crimeStats.money / crimeStats.time * chance;\\n        let kps = crimeStats.karma / crimeStats.time * chance;\\n        let ips = crimeStats.intelligence_exp / crimeStats.time * chance;\\n        //if (bestCps == 0 || (cps > bestCps && chance > 0.25)) {\\n        //if (bestKps == 0 || (kps > bestKps/* && chance > 0.25*/)) {\\n        if (bestIps == 0 || (ips > bestIps /* && chance > 0.25*/)) {\\n            bestCrime = crime;\\n            bestCps = cps;\\n            bestKps = kps;\\n            bestIps = ips;\\n        }\\n        ns.tprint(crime + ' ips: ' + ips);\\n    }\\n    //ns.tprint('Best crime is: ' + bestCrime);\\n    return bestCrime;\\n}\\nfunction calculateCrimeSuccessChance(crimeStats, person) {\\n    let chance = crimeStats.hacking_success_weight * person.skills.hacking +\\n        crimeStats.strength_success_weight * person.skills.strength +\\n        crimeStats.defense_success_weight * person.skills.defense +\\n        crimeStats.dexterity_success_weight * person.skills.dexterity +\\n        crimeStats.agility_success_weight * person.skills.agility +\\n        crimeStats.charisma_success_weight * person.skills.charisma;\\n    chance /= 975;\\n    chance /= crimeStats.difficulty;\\n    return Math.min(chance, 1);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvc3RhdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxRQUFRLEdBQUc7SUFDaEIsVUFBVTtJQUNWLGFBQWE7SUFDYixZQUFZO0lBQ1osV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osT0FBTztJQUNQLFVBQVU7SUFDVix3QkFBd0I7SUFDeEIsWUFBWTtJQUNaLEtBQUs7SUFDTCxrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsNkJBQTZCO0lBQzdCLGFBQWE7SUFDYixTQUFTO0lBQ1QsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixlQUFlO0lBQ2YsZUFBZTtJQUNmLGNBQWM7SUFDZCxVQUFVO0lBQ1YsWUFBWTtDQUNaLENBQUM7QUFHRixNQUFNLE1BQU0sR0FBRztJQUNkLFVBQVU7SUFDVixXQUFXO0lBQ1gsS0FBSztJQUNMLFNBQVM7SUFDVCxZQUFZO0lBQ1osY0FBYztJQUNkLGVBQWU7SUFDZixVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLFFBQVE7SUFDUixhQUFhO0lBQ2IsT0FBTztDQUNQLENBQUM7QUFFRiwyREFBMkQ7QUFDM0QsK0RBQStEO0FBQy9ELGlFQUFpRTtBQUNqRSxxRUFBcUU7QUFDckUsdUVBQXVFO0FBQ3ZFLHlEQUF5RDtBQUV6RCxzQkFBc0I7QUFDdEIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUU1QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxFQUFF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\",\"filename\":\"/xsink/stats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":242.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":32},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToGymWorkout\",\"cost\":4},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getCrimeStats\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, DefaultStyle } from 'tables.js';\\nimport { FormatMoney } from 'utils.js';\\nlet g_tixMode = false; // Global variable indicating if we have full 4S data or not (it is automatically \\n// set/determined later in script no point changing the value here)\\nlet SHORTS = false; // Global to determine whether or not we have access to shorts (this is updated at the start of the script)\\nconst LOG_SIZE = 15; // How many prices we keep in the log for blind/pre-4S trading for each symbol\\nconst BUY_TRIGGER = 0.1; // deviation from 0.5 (neutral) from which we start buying\\nconst SELL_TRIGGER = 0.05; // deviation from 0.5 (neutral) from which we start selling\\nconst TRANSACTION_COST = 100_000; // Cost of a stock transaction\\nconst MIN_TRANSACTION_SIZE = 5_000_000; // Minimum amount of stocks to buy, we need this to keep the transaction cost in check\\nconst TIME_TRACKING = true; // True if we're benchmarking our performance\\nconst BENCH_TIME = 1000 * 60 * 60; // How long we wait before reporting profitability\\n// Little representation of what this script does\\n// | <---------------------------- SHORTS | LONGS ------------------------------>|\\n// 0                    0.4     0.45     0.5     0.55      0.6                   1\\n//                       ^        ^                ^        ^ \\n//                  <<< BUY     SELL >>>     <<< SELL      BUY >>>\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    let initialFunds = ns.getServerMoneyAvailable('home');\\n    // This code determines if we have access to shorts or not\\n    // Note: Shorts are an endgame mechanic, it will be obvious to you how to get them\\n    // once you get there. Any more info would be spoilers :)\\n    // I'm using this instead of ns.singularity.getOwnedSourceFiles() because that bad boy is expensive AF in 2.0+\\n    try {\\n        ns.stock.buyShort('JGN', 0);\\n        SHORTS = true;\\n        ns.print('INFO: Shorts activated!');\\n        ns.tprint('INFO: Shorts activated!');\\n    }\\n    catch {\\n        ns.print('WARN: Shorts are not available to you yet, disabling them.');\\n        ns.tprint('WARN: Shorts are not available to you yet, disabling them.');\\n    }\\n    // Check if we have access to the stock market and the base API\\n    if (!ns.stock.hasWSEAccount() || !ns.stock.hasTIXAPIAccess()) {\\n        ns.print('ERROR: You need a Wse account and Tix Api access to run this script.');\\n        ns.tprint('ERROR: You need a Wse account and Tix Api access to run this script.');\\n        return;\\n    }\\n    // Check if we have 4S data or not\\n    g_tixMode = ns.stock.has4SDataTIXAPI();\\n    if (g_tixMode) {\\n        ns.print('INFO: Starting stonks in 4S mode.');\\n        ns.tprint('INFO: Starting stonks in 4S mode.');\\n    }\\n    else {\\n        ns.print('WARN: Starting stonks in pre-4S mode.');\\n        ns.tprint('WARN: Starting stonks in pre-4S mode.');\\n    }\\n    // We show the tail in normal mode, but not if we're in sales mode\\n    if (ns.args[0] != 'sell')\\n        ns.tail();\\n    else {\\n        // Passing sell to the script sells all the stocks and kills any other running scripts, then exists\\n        let procs = ns.ps();\\n        for (let proc of procs) {\\n            if (proc.filename == 'stonks.js' && proc.args.length == 0) {\\n                ns.tprint('WARN: Killing stonks.js!');\\n                ns.kill(proc.pid);\\n                break;\\n            }\\n        }\\n    }\\n    // Array that will contain all symbols, we build it once and update it every tick\\n    let stonks = [];\\n    let started = performance.now();\\n    while (true) {\\n        ns.clearLog();\\n        if (!g_tixMode && ns.stock.has4SDataTixApi)\\n            g_tixMode = true; // Switch to 4S data if we obtained it while running\\n        // Update our market log\\n        TakeSnapshot(ns, stonks);\\n        // Sort by forecast (for display purposes)\\n        let longs = stonks.map(s => s).sort((a, b) => b.forecast - a.forecast);\\n        // If it's been an hour, report progress\\n        if (TIME_TRACKING && performance.now() - started > BENCH_TIME) {\\n            // Dump every stock\\n            SellStonks(ns, longs, true);\\n            let balance = ns.getServerMoneyAvailable('home');\\n            //let balance = GetStonksBalance(ns);\\n            ns.tprint('FAIL: It\\\\'s been an hour and the current balance is ' + FormatMoney(ns, balance) + ' initial funds were ' + FormatMoney(ns, initialFunds) + ' profit: ' + ((1 - balance / initialFunds * 100)).toFixed(2) + '%');\\n            // Reset\\n            initialFunds = balance;\\n            started = performance.now();\\n        }\\n        // Sell the stonks we have in our wallet that aren't worth keeping anymore\\n        SellStonks(ns, longs, ns.args[0] == 'sell');\\n        // If the user passed 'sell' as a parameter, we're dumping and killing the script\\n        if (ns.args[0] == 'sell') {\\n            UpdateHud(ns, undefined);\\n            return;\\n        }\\n        // Buy stocks that meet our criterion\\n        BuyStonks(ns, longs);\\n        // Display our last snapshot of the stocks data to the user\\n        ReportCurrentSnapshot(ns, longs);\\n        // 6 second ticks, we don't have any special treatment for bonus time\\n        await ns.sleep(6000);\\n    }\\n}\\nfunction SellStonks(ns, log, dump) {\\n    // *********************************\\n    // ***         LONGS\\n    // *********************************\\n    for (const stonk of log) {\\n        // If we don't have any shares, skip\\n        if (stonk.nbShares < 1)\\n            continue;\\n        // If our forecast is still positive, skip, unless we're dumping\\n        if (stonk.forecast >= 0.5 + SELL_TRIGGER && !dump)\\n            continue;\\n        // If we don't have enough data, abort sales unless we're dumping\\n        if (!g_tixMode && stonk.snapshots.length < LOG_SIZE && !dump) {\\n            ns.print('INFO: Would sell ' + stonk.nbShares + ' LONG shares of ' + stonk.sym + ' but we only have ' + stonk.snapshots.length + ' snapshots...');\\n            continue;\\n        }\\n        ns.print('WARN: Selling ' + stonk.nbShares + ' LONG shares of ' + stonk.sym + ' for ' + ns.nFormat(stonk.GetValue(), \\\"$0.000a\\\") + ' (' + ns.nFormat(stonk.GetProfit(), \\\"$0.000a\\\") + ' profit)');\\n        if (dump)\\n            ns.tprint('WARN: Selling ' + stonk.nbShares + ' LONG shares of ' + stonk.sym + ' for ' + ns.nFormat(stonk.GetValue(), \\\"$0.000a\\\") + ' (' + ns.nFormat(stonk.GetProfit(), \\\"$0.000a\\\") + ' profit)');\\n        ns.stock.sellStock(stonk.sym, stonk.nbShares);\\n    }\\n    if (SHORTS) {\\n        // *********************************\\n        // ***         SHORTS\\n        // *********************************\\n        for (const stonk of log) {\\n            // If we don't have any shares, skip\\n            if (stonk.nbShorts < 1)\\n                continue;\\n            // If our forecast is still negative, skip, unless we're dumping\\n            if (stonk.forecast <= 0.5 - SELL_TRIGGER && !dump)\\n                continue;\\n            // If we don't have enough data, abort sales unless we're dumping\\n            if (!g_tixMode && stonk.snapshots.length < LOG_SIZE && !dump) {\\n                ns.print('INFO: Would sell ' + stonk.nbShorts + ' SHORT shares of ' + stonk.sym + ' but we only have ' + stonk.snapshots.length + ' snapshots...');\\n                continue;\\n            }\\n            ns.print('WARN: Selling ' + stonk.nbShorts + ' SHORT shares of ' + stonk.sym + ' for ' + ns.nFormat(stonk.GetValue(), \\\"$0.000a\\\") + ' (' + ns.nFormat(stonk.GetProfit(), \\\"$0.000a\\\") + ' profit)');\\n            if (dump)\\n                ns.tprint('WARN: Selling ' + stonk.nbShorts + ' SHORT shares of ' + stonk.sym + ' for ' + ns.nFormat(stonk.GetValue(), \\\"$0.000a\\\") + ' (' + ns.nFormat(stonk.GetProfit(), \\\"$0.000a\\\") + ' profit)');\\n            ns.stock.sellShort(stonk.sym, stonk.nbShorts);\\n        }\\n    }\\n}\\nfunction BuyStonks(ns, log) {\\n    // If you're buying Long, you want Ask price. Long stocks sell for Bid price.\\n    // If you're buying Short, you want Bid price. Short stocks sell for Ask price.\\n    let budget = ns.getServerMoneyAvailable('home') * 0.75;\\n    if (budget < 10_000_000)\\n        return;\\n    let stonks = log.map(s => s).filter(p => p.normalizedForecast >= 0.5 + BUY_TRIGGER).sort((a, b) => b.normalizedForecast - a.normalizedForecast);\\n    for (const stonk of stonks) {\\n        // Check if we have enough pre-S4 data to make a decision\\n        if (!g_tixMode && stonk.snapshots.length < LOG_SIZE)\\n            continue;\\n        // If we don't have short and the position is short, skip this symbol\\n        if (!SHORTS && stonk.forecast < 0.5)\\n            continue;\\n        // We're only buying at/over 0.6 forecast (anything over 0.5 is trending up)\\n        if (stonk.normalizedForecast < 0.5 + BUY_TRIGGER)\\n            continue;\\n        // Count how many shares we can buy\\n        let maxShares = ns.stock.getMaxShares(stonk.sym) - stonk.nbShares - stonk.nbShorts;\\n        // Clamp to the amount of cash we have available total\\n        let sharePrice = stonk.forecast < 0.5 ? stonk.bidPrice : stonk.askPrice;\\n        maxShares = Math.min(maxShares, Math.floor((budget - TRANSACTION_COST) / sharePrice));\\n        // We broke!\\n        if (maxShares <= 0)\\n            continue;\\n        let totalPrice = maxShares * sharePrice + TRANSACTION_COST;\\n        if (totalPrice < MIN_TRANSACTION_SIZE)\\n            continue;\\n        if (totalPrice > budget) {\\n            ns.print('Budget is : ' + ns.nFormat(budget, \\\"$0.000a\\\") + ' and price is ' + ns.nFormat(totalPrice, \\\"$0.000a\\\"));\\n            continue;\\n        }\\n        // Buy some stocks!\\n        ns.print('INFO: Buying ' + maxShares + ' ' + (stonk.forecast < 0.5 ? 'SHORT' : 'LONG') + ' shares of ' + stonk.sym + ' at price ' + ns.nFormat(maxShares * sharePrice, \\\"$0.000a\\\"));\\n        if (stonk.forecast < 0.5 && !SHORTS)\\n            continue;\\n        let spent = stonk.forecast < 0.5 ? ns.stock.buyShort(stonk.sym, maxShares) : ns.stock.buyStock(stonk.sym, maxShares);\\n        budget -= maxShares * spent + TRANSACTION_COST;\\n    }\\n}\\nfunction TakeSnapshot(ns, stonks) {\\n    const symbols = ns.stock.getSymbols();\\n    for (const sym of symbols) {\\n        let entry = stonks.find(p => p.sym == sym);\\n        if (entry == undefined) {\\n            entry = new Stonk(ns, sym);\\n            stonks.push(entry);\\n        }\\n        entry.Update();\\n    }\\n}\\nfunction ForecastToGraph(forecast) {\\n    if (forecast >= 1)\\n        return { color: '#00FF00', text: '+++++' };\\n    if (forecast >= 0.9)\\n        return { color: '#00EE00', text: '++++' };\\n    if (forecast >= 0.8)\\n        return { color: '#00DD00', text: '+++' };\\n    if (forecast >= 0.7)\\n        return { color: '#00CC00', text: '+++' };\\n    if (forecast >= 0.65)\\n        return { color: '#00BB00', text: '++' };\\n    if (forecast >= 0.6)\\n        return { color: '#00AA00', text: '+' };\\n    if (forecast >= 0.55)\\n        return { color: '#800000', text: '' };\\n    if (forecast >= 0.50)\\n        return { color: 'yellow', text: '' };\\n    if (forecast >= 0.45)\\n        return { color: '#800000', text: '' };\\n    if (forecast >= 0.40)\\n        return { color: '#00AA00', text: '-' };\\n    if (forecast >= 0.35)\\n        return { color: '#00BB00', text: '--' };\\n    if (forecast >= 0.3)\\n        return { color: '#00CC00', text: '---' };\\n    if (forecast >= 0.2)\\n        return { color: '#00DD00', text: '----' };\\n    if (forecast >= 0.1)\\n        return { color: '#00EE00', text: '-----' };\\n    //if (forecast >= 0.0) \\n    return { color: '#00FF00', text: '------' };\\n}\\nfunction ReportCurrentSnapshot(ns, stonks) {\\n    const columns = [\\n        { header: ' SYM', width: 7 },\\n        { header: ' Type', width: 7 },\\n        { header: ' Forecast', width: 10 },\\n        { header: ' Forecast', width: 10 },\\n        { header: '  Shares', width: 10 },\\n        { header: '   Paid', width: 10 },\\n        { header: '  Value', width: 10 },\\n        { header: '  Profit', width: 10 },\\n        { header: '   %', width: 8 }\\n    ];\\n    const total = { nbShares: 0, nbShorts: 0, paid: 0, profit: 0 };\\n    const data = [];\\n    const sum = [0, 0, 0, 0];\\n    for (const stonk of stonks) {\\n        total.nbShares += stonk.nbShares;\\n        total.nbShorts += stonk.nbShorts;\\n        total.paid += stonk.GetPricePaid();\\n        total.profit += stonk.GetProfit();\\n        let forecast = stonk.forecast == 'N/A' ? stonk.forecast : stonk.forecast.toFixed(4);\\n        let line = [];\\n        line.push({ color: 'white', text: ' ' + stonk.sym });\\n        line.push({ color: 'white', text: stonk.forecast >= 0.5 ? ' Long' : ' Short' });\\n        line.push({ color: 'white', text: ' ' + forecast });\\n        line.push(ForecastToGraph(stonk.forecast));\\n        line.push({ color: 'white', text: ns.nFormat(stonk.nbShares + stonk.nbShorts, \\\"0.0a\\\").padStart(9) });\\n        line.push({ color: 'white', text: ns.nFormat(stonk.GetValue(), \\\"0.0a\\\").padStart(9) });\\n        line.push({ color: 'white', text: ns.nFormat(stonk.GetPricePaid(), \\\"0.0a\\\").padStart(9) });\\n        line.push({ color: 'white', text: ns.nFormat(stonk.GetProfit(), \\\"0.0a\\\").padStart(9) });\\n        let pct = stonk.GetProfit() / stonk.GetPricePaid() * 100;\\n        if (isNaN(pct))\\n            pct = 0;\\n        if (pct == 0)\\n            pct = '';\\n        else\\n            pct = ns.nFormat(pct, \\\"0.0a\\\").padStart(7);\\n        line.push({ color: 'white', text: pct });\\n        sum[0] += stonk.nbShares + stonk.nbShorts;\\n        sum[1] += stonk.GetValue();\\n        sum[2] += stonk.GetPricePaid();\\n        sum[3] += stonk.GetProfit();\\n        data.push(line);\\n    }\\n    data.push(null);\\n    let pct = sum[3] / sum[2] * 100;\\n    if (isNaN(pct))\\n        pct = 0;\\n    if (pct == 0)\\n        pct = '';\\n    else\\n        pct = ns.nFormat(pct, \\\"0.0a\\\").padStart(7);\\n    data.push([\\n        { color: 'white', text: ' Total' },\\n        { color: 'white', text: '' },\\n        { color: 'white', text: '' },\\n        { color: 'white', text: '' },\\n        { color: 'white', text: ns.nFormat(sum[0], \\\"0.0a\\\").padStart(9) },\\n        { color: 'white', text: ns.nFormat(sum[1], \\\"0.0a\\\").padStart(9) },\\n        { color: 'white', text: ns.nFormat(sum[2], \\\"0.0a\\\").padStart(9) },\\n        { color: 'white', text: ns.nFormat(sum[3], \\\"0.0a\\\").padStart(9) },\\n        { color: 'white', text: pct }\\n    ]);\\n    PrintTable(ns, data, columns, DefaultStyle(), ns.print);\\n    let totalWorth = total.paid + total.profit + ns.getServerMoneyAvailable('home');\\n    UpdateHud(ns, totalWorth);\\n    const snaps = stonks[0].snapshots.length;\\n    if (!g_tixMode && stonks.length > 0 && snaps < LOG_SIZE)\\n        ns.print('WARN: Script running in pre-4S data mode (we need ' + LOG_SIZE + ' prices in the log before doing any trading): ' + snaps + '/' + LOG_SIZE);\\n}\\nfunction UpdateHud(ns, totalWorth) {\\n    const doc = eval('document');\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    try {\\n        const headers = [];\\n        const values = [];\\n        if (totalWorth == undefined) {\\n            hook0.innerText = '';\\n            hook1.innerText = '';\\n            return;\\n        }\\n        headers.push('Total worth: ');\\n        values.push(ns.nFormat(totalWorth, \\\"$0.000a\\\"));\\n        hook0.innerText = headers.join(\\\" \\\\n\\\");\\n        hook1.innerText = values.join(\\\"\\\\n\\\");\\n    }\\n    catch (err) {\\n        ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n    }\\n}\\nexport class Stonk {\\n    constructor(ns, name) {\\n        this.ns = ns;\\n        this.sym = name;\\n        this.snapshots = [];\\n    }\\n    Update() {\\n        // Obtain prices and other stock metrics\\n        this.askPrice = this.ns.stock.getAskPrice(this.sym);\\n        this.bidPrice = this.ns.stock.getBidPrice(this.sym);\\n        this.price = this.ns.stock.getPrice(this.sym);\\n        this.maxShares = this.ns.stock.getMaxShares(this.sym);\\n        // Get current position on longs and shorts\\n        const [shares, avgPx, sharesShort, avgPxShort] = this.ns.stock.getPosition(this.sym);\\n        this.nbShares = shares;\\n        this.avgPrice = avgPx;\\n        this.nbShorts = sharesShort;\\n        this.avgShortPrice = avgPxShort;\\n        // Add the snapshot to the list\\n        this.snapshots.push(this.price);\\n        // We keep LOG_SIZE snapshots maximim total\\n        if (this.snapshots.length > LOG_SIZE) {\\n            this.snapshots.shift();\\n        }\\n        // Get volatility and forecast if available\\n        if (g_tixMode) {\\n            this.forecast = this.ns.stock.getForecast(this.sym);\\n        }\\n        else {\\n            // Recound the ups and downs for pre-4S forecast estimation\\n            let nbUp = 0;\\n            for (let i = 1; i < this.snapshots.length; i++) {\\n                let prev = this.snapshots[i - 1];\\n                let cur = this.snapshots[i];\\n                if (prev < cur)\\n                    nbUp++;\\n            }\\n            // We simulate a forecast based on the last LOG_SIZE operations\\n            if (this.snapshots.length == LOG_SIZE)\\n                this.forecast = nbUp / (LOG_SIZE - 1); // -1 here because with 15 values, we only have 14 changes\\n            else\\n                this.forecast = 'N/A';\\n        }\\n        if (this.forecast != 'N/A') {\\n            this.normalizedForecast = this.forecast;\\n            if (this.forecast < 0.5)\\n                this.normalizedForecast = 1 - this.forecast;\\n        }\\n        else\\n            this.normalizedForecast = 0;\\n    }\\n    GetPricePaid() {\\n        let longCost = this.nbShares * this.avgPrice;\\n        let shortCost = this.nbShorts * this.avgShortPrice;\\n        return longCost + shortCost;\\n    }\\n    GetProfit() {\\n        // Short stocks sell for Ask price.\\n        // Long stocks sell for Bid price.\\n        let longProfit = this.nbShares * this.bidPrice - this.nbShares * this.avgPrice;\\n        let shortProfit = this.nbShorts * this.avgShortPrice - this.nbShorts * this.askPrice;\\n        return longProfit + shortProfit;\\n    }\\n    GetValue() {\\n        let longCost = this.nbShares * this.bidPrice;\\n        let shortCost = this.nbShorts * this.askPrice;\\n        return longCost + shortCost;\\n    }\\n}\\n/** @param {NS} ns **/\\nfunction GetStonksBalance(ns) {\\n    let boxes = Array.from(eval(\\\"document\\\").querySelectorAll(\\\"[class*=MuiBox-root]\\\"));\\n    let box = boxes.find(s => getProps(s)?.player);\\n    if (!box)\\n        return 0;\\n    let props = getProps(box);\\n    if (!props)\\n        return 0;\\n    return props.player.moneySourceA.stock;\\n}\\nfunction getProps(obj) {\\n    return Object.entries(obj).find(entry => entry[0].startsWith(\\\"__reactProps\\\"))[1]?.children?.props;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvbmtzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL3N0b25rcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXRDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFNLGtGQUFrRjtBQUM5RyxtRUFBbUU7QUFDbkUsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQU0sMkdBQTJHO0FBRXBJLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFLLDhFQUE4RTtBQUN2RyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBSSwwREFBMEQ7QUFDdEYsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUksMkRBQTJEO0FBQ3pGLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLENBQUUsOEJBQThCO0FBQ2pFLE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLENBQUMsc0ZBQXNGO0FBQzlILE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxDQUFJLDZDQUE2QztBQUM1RSxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFFLGtEQUFrRDtBQUV0RixpREFBaUQ7QUFDakQsa0ZBQWtGO0FBQ2xGLGtGQUFrRjtBQUNsRiw4REFBOEQ7QUFDOUQsa0VBQWtFO0FBRWxFLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXRELDBEQUEwRDtJQUMxRCxrRkFBa0Y7SUFDbEYseURBQXlEO0lBQ3pELDhHQUE4RztJQUM5RyxJQUFJO1FBQ0gsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxFQUFFLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsTUFBTTtRQUNMLEVBQUUsQ0FBQyxLQUFLLENBQUMsNERBQTRELENBQUMsQ0FBQztRQUN2RSxFQUFFLENBQUMsTUFBTSxDQUFDLDREQUE0RCxDQUFDLENBQUM7S0FDeEU7SUFFRCwrREFBK0Q7SUFDL0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBQzdELEVBQUUsQ0FBQyxLQUFLLENBQUMsc0VBQXNFLENBQUMsQ0FBQztRQUNqRixFQUFFLENBQUMsTUFBTSxDQUFDLHNFQUFzRSxDQUFDLENBQUM7UUFDbEYsT0FBTztLQUNQO0lBRUQsa0NBQWtDO0lBQ2xDLFNBQVMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3ZDLElBQUksU0FBUyxFQUFFO1FBQ2QsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQzlDLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUNBQW1DLENBQUMsQ0FBQztLQUMvQztTQUNJO1FBQ0osRUFBRSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxNQUFNLENBQUMsdUNBQXVDLENBQUMsQ0FBQztLQUNuRDtJQUVELGtFQUFrRTtJQUNsRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTTtRQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMvQjtRQUNKLG1HQUFtRztRQUNuRyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDcEIsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDdkIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7Z0JBQzFELEVBQUUsQ0FBQyxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xCLE1BQU07YUFDTjtTQUNEO0tBQ0Q7SUFFRCxpRkFBaUY7SUFDakYsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWhCLElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVoQyxPQUFPLElBQUksRUFBRTtRQUNaLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNiLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlO1lBQ3pDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxvREFBb0Q7UUFFdkUsd0JBQXdCO1FBQ3hCLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekIsMENBQTBDO1FBQzFDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV2RSx3Q0FBd0M7UUFDeEMsSUFBSSxhQUFhLElBQUksV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sR0FBRyxVQUFVLEVBQUU7WUFDOUQsbUJBQW1CO1lBQ25CLFVBQVUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzVCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqRCxxQ0FBcUM7WUFDckMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzREFBc0QsR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLHNCQUFzQixHQUFHLFdBQVcsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLEdBQUcsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLFlBQVksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUU1TixRQUFRO1lBQ1IsWUFBWSxHQUFHLE9BQU8sQ0FBQztZQUN2QixPQUFPLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQzVCO1FBRUQsMEVBQTBFO1FBQzFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUM7UUFFNUMsaUZBQWlGO1FBQ2pGLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDekIsU0FBUyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUN6QixPQUFPO1NBQ1A7UUFFRCxxQ0FBcUM7UUFDckMsU0FBUyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVyQiwyREFBMkQ7UUFDM0QscUJBQXFCLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWpDLHFFQUFxRTtRQUNyRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDckI7QUFDRixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJO0lBQ2hDLG9DQUFvQztJQUNwQyxvQkFBb0I7SUFDcEIsb0NBQW9DO0lBQ3BDLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxFQUFFO1FBQ3hCLG9DQUFvQztRQUNwQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQztZQUFFLFNBQVM7UUFFakMsZ0VBQWdFO1FBQ2hFLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxHQUFHLEdBQUcsWUFBWSxJQUFJLENBQUMsSUFBSTtZQUFFLFNBQVM7UUFFNUQsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzdELEVBQUUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQyxDQUFDO1lBQ2xKLFNBQVM7U0FDVDtRQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsU0FBUyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFDaE0sSUFBSSxJQUFJO1lBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsUUFBUSxHQUFHLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUMzTSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM5QztJQUVELElBQUksTUFBTSxFQUFFO1FBQ1gsb0NBQW9DO1FBQ3BDLHFCQUFxQjtRQUNyQixvQ0FBb0M7UUFDcEMsS0FBSyxNQUFNLEtBQUssSUFBSSxHQUFHLEVBQUU7WUFDeEIsb0NBQW9DO1lBQ3BDLElBQUksS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDO2dCQUFFLFNBQVM7WUFFakMsZ0VBQWdFO1lBQ2hFLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxHQUFHLEdBQUcsWUFBWSxJQUFJLENBQUMsSUFBSTtnQkFBRSxTQUFTO1lBRTVELGlFQUFpRTtZQUNqRSxJQUFJLENBQUMsU0FBUyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDN0QsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxLQUFLLENBQUMsUUFBUSxHQUFHLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsb0JBQW9CLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUFDLENBQUM7Z0JBQ25KLFNBQVM7YUFDVDtZQUVELEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxtQkFBbUIsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsU0FBUyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7WUFDak0sSUFBSSxJQUFJO2dCQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxtQkFBbUIsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsU0FBUyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7WUFDNU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUM7S0FDRDtBQUNGLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxFQUFFLEVBQUUsR0FBRztJQUN6Qiw2RUFBNkU7SUFDN0UsK0VBQStFO0lBRS9FLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDdkQsSUFBSSxNQUFNLEdBQUcsVUFBVTtRQUFFLE9BQU87SUFFaEMsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsSUFBSSxHQUFHLEdBQUcsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRWhKLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQzNCLHlEQUF5RDtRQUN6RCxJQUFJLENBQUMsU0FBUyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFFBQVE7WUFDbEQsU0FBUztRQUVWLHFFQUFxRTtRQUNyRSxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsR0FBRztZQUFFLFNBQVM7UUFFOUMsNEVBQTRFO1FBQzVFLElBQUksS0FBSyxDQUFDLGtCQUFrQixHQUFHLEdBQUcsR0FBRyxXQUFXO1lBQUUsU0FBUztRQUUzRCxtQ0FBbUM7UUFDbkMsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNuRixzREFBc0Q7UUFFdEQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFDeEUsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBRXRGLFlBQVk7UUFDWixJQUFJLFNBQVMsSUFBSSxDQUFDO1lBQUUsU0FBUztRQUU3QixJQUFJLFVBQVUsR0FBRyxTQUFTLEdBQUcsVUFBVSxHQUFHLGdCQUFnQixDQUFDO1FBQzNELElBQUksVUFBVSxHQUFHLG9CQUFvQjtZQUFFLFNBQVM7UUFDaEQsSUFBSSxVQUFVLEdBQUcsTUFBTSxFQUFFO1lBQ3hCLEVBQUUsQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxHQUFHLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDaEgsU0FBUztTQUNUO1FBRUQsbUJBQW1CO1FBQ25CLEVBQUUsQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxZQUFZLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFbkwsSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU07WUFBRSxTQUFTO1FBRTlDLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JILE1BQU0sSUFBSSxTQUFTLEdBQUcsS0FBSyxHQUFHLGdCQUFnQixDQUFDO0tBQy9DO0FBQ0YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNO0lBQy9CLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUU7UUFDMUIsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7UUFDM0MsSUFBSSxLQUFLLElBQUksU0FBUyxFQUFFO1lBQ3ZCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNuQjtRQUNELEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNmO0FBQ0YsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLFFBQVE7SUFDaEMsSUFBSSxRQUFRLElBQUksQ0FBQztRQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUM5RCxJQUFJLFFBQVEsSUFBSSxHQUFHO1FBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQy9ELElBQUksUUFBUSxJQUFJLEdBQUc7UUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDOUQsSUFBSSxRQUFRLElBQUksR0FBRztRQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUM5RCxJQUFJLFFBQVEsSUFBSSxJQUFJO1FBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzlELElBQUksUUFBUSxJQUFJLEdBQUc7UUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDNUQsSUFBSSxRQUFRLElBQUksSUFBSTtRQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUU1RCxJQUFJLFFBQVEsSUFBSSxJQUFJO1FBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBRTNELElBQUksUUFBUSxJQUFJLElBQUk7UUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDNUQsSUFBSSxRQUFRLElBQUksSUFBSTtRQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUM3RCxJQUFJLFFBQVEsSUFBSSxJQUFJO1FBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzlELElB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QUM7UUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEYsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUYsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFdkYsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDekQsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQzs7WUFDbEIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV6QyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDaEI7SUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2hDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDeEIsSUFBSSxHQUFHLElBQUksQ0FBQztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7O1FBQ2xCLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0MsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNULEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1FBQ2xDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQzVCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQzVCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQzVCLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2hFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2hFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2hFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2hFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFO0tBQzdCLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFeEQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRixTQUFTLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTFCLE1BQU0s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\",\"filename\":\"/xsink/stonks.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":653}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const HEADER = 0; // Index of the header styles\\nconst DIVIDER = 1; // Index of the horizontal divider style\\nconst FOOTER = 2; // Index of the footer style\\nconst OPENER = 0; // Index of the opener line character\\nconst SEPARATOR = 1; // Index of the separator line character (where columns meet)\\nconst CLOSER = 2; // Index of the closer line character\\nconst FILLER = 3; // Index of the filler line character\\nconst BAR = 4; // Index of the straight vertical bar line character\\nexport let win = globalThis, doc = win[\\\"document\\\"];\\nlet fmt = Intl.NumberFormat('en', { notation: 'compact' });\\nconst ANSI_COLORS = {\\n    \\\"r\\\": \\\"\\\\x1b[31m\\\",\\n    \\\"g\\\": \\\"\\\\x1b[32m\\\",\\n    \\\"b\\\": \\\"\\\\x1b[34m\\\",\\n    \\\"c\\\": \\\"\\\\x1b[36m\\\",\\n    \\\"m\\\": \\\"\\\\x1b[35m\\\",\\n    \\\"y\\\": \\\"\\\\x1b[33m\\\",\\n    \\\"bk\\\": \\\"\\\\x1b[30m\\\",\\n    \\\"w\\\": \\\"\\\\x1b[37m\\\",\\n    \\\"d\\\": \\\"\\\\x1b[0m\\\"\\n};\\n// ns.tprint(col.bk + \\\"black \\\" + col.r + \\\"red \\\" + col.g + \\\"green \\\" + col.y + \\\"yellow \\\"\\n// \\t+ col.b + \\\"blue \\\" + col.m + \\\"magenta \\\" + col.c + \\\"cyan \\\" + col.w + \\\"white \\\" + col.d + \\\"default\\\")\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // Some sample data, basic information on root servers\\n    // Note that if you want color, you need to use ColorPrint as the printing function\\n    // Colored cells need to be an object with color and text, instead of \\\"any\\\".. Red cell example here\\n    let data = ns.scan('home').map(s => [{ color: 'red', text: s }, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]);\\n    // For bold we need to correct the spacing... Sketch AF, not sure how else.\\n    // let boldText = 'bold text example blah';\\n    // let spacing = -0.00666666666666666666666666666667 * boldText.length;\\n    data.push([\\n        { style: { color: 'red' }, text: 'nope' },\\n        //{ style: { color: 'red', fontWeight: 'bold', letterSpacing: spacing }, text: boldText },\\n        { style: { color: 'white', fontStyle: 'italic' }, text: 'italic text' },\\n        { style: { color: 'white', textDecorationLine: 'line-through', textDecorationStyle: 'solid' }, text: 'strikethrough text' }\\n    ]);\\n    // Free style, no columns, the table adjusts to contents\\n    PrintTable(ns, data, undefined, DefaultStyle(), ColorPrint);\\n    // Example of adding a break line in the middle of the table:\\n    // data.push(null);\\n    // data.push(...ns.scan('sigma-cosmetics').slice(1).map(s => [s, ns.getServerMaxRam(s), ns.getServerMaxMoney(s)]));\\n    // We use pre-defined columns\\n    // header: The text to display\\n    // width : Width of the column content\\n    // pad   : 0 for center, < 0 for left, > 0 for right\\n    const columns = [\\n        { header: 'Servers', width: 40 },\\n        { header: 'Ram', width: 13 },\\n        { header: 'Money', width: 20 }\\n    ];\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\nexport function PrintTable(ns, data, columns, style = DefaultStyle(), printfunc = ns.print) {\\n    // Create default columns if no definition were provided\\n    let columnsProvided = true;\\n    if (columns == undefined) {\\n        columnsProvided = false;\\n        columns = [];\\n        for (let i = 0; i < data[0].length; i++) {\\n            let longest = 0;\\n            for (let ii = 0; ii < data.length; ii++) {\\n                if (data[ii] == null)\\n                    continue;\\n                let len = data[ii][i].text != undefined ? data[ii][i].text.length : data[ii][i].toString().length;\\n                if (len > longest)\\n                    longest = len;\\n            }\\n            columns.push({ header: '', width: longest, padHeader: 0, padContent: 0 });\\n        }\\n    }\\n    PrintBorder(ns, columns, style[HEADER], printfunc);\\n    if (columnsProvided) {\\n        PrintHeader(ns, columns, style[HEADER], printfunc);\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\n    }\\n    let i = 0;\\n    for (const line of data) {\\n        PrintLine(ns, columns, line, style, printfunc, i++ % 2 == 0);\\n    }\\n    PrintBorder(ns, columns, style[FOOTER], printfunc);\\n}\\nexport function DefaultStyle() {\\n    return [\\n        ['┌', '┬', '┐', '─', '│'],\\n        ['├', '┼', '┤', '─', '│'],\\n        ['└', '┴', '┘', '─', '│']\\n    ];\\n}\\nfunction PrintBorder(ns, columns, style, printfunc = ns.print) {\\n    let printStack = [];\\n    printStack.push('white', style[OPENER]);\\n    for (let c = 0; c < columns.length; c++) {\\n        printStack.push('white', ''.padEnd(columns[c].width, style[FILLER]));\\n        if (c == columns.length - 1)\\n            printStack.push('white', style[CLOSER]);\\n        else\\n            printStack.push('white', style[SEPARATOR]);\\n    }\\n    PrintStack(ns, printStack, printfunc);\\n}\\nfunction PrintHeader(ns, columns, style, printfunc = ns.print) {\\n    let printStack = [];\\n    printStack.push('white', style[BAR]);\\n    for (let c = 0; c < columns.length; c++) {\\n        printStack.push('white', columns[c].header.padEnd(columns[c].width));\\n        printStack.push('white', style[BAR]);\\n    }\\n    PrintStack(ns, printStack, printfunc);\\n}\\nfunction PrintLine(ns, columns, data, style, printfunc = ns.print, highlight) {\\n    if (data == null) {\\n        PrintBorder(ns, columns, style[DIVIDER], printfunc);\\n        return;\\n    }\\n    let printStack = [];\\n    printStack.push('white', style[0][BAR]);\\n    for (let c = 0; c < columns.length; c++) {\\n        if (data[c].style != undefined)\\n            printStack.push({ style: data[c].style }, data[c].text.padEnd(columns[c].width));\\n        else if (data[c].color != undefined)\\n            printStack.push(CreateStyle(data[c].color, highlight), data[c].text.padEnd(columns[c].width));\\n        else\\n            printStack.push(CreateStyle('white', highlight), data[c].toString().padEnd(columns[c].width));\\n        printStack.push('white', style[0][BAR]);\\n    }\\n    PrintStack(ns, printStack, printfunc);\\n}\\nexport function CreateStyle(color, highlight) {\\n    //return color;\\n    let backColor = highlight ? '#000000' : '#1A1A1A';\\n    return { style: { color: color, backgroundColor: backColor } };\\n}\\nfunction PrintStack(ns, printStack, printfunc) {\\n    if (printfunc == ns.tprint || printfunc == ns.print) {\\n        let str = '';\\n        for (let i = 1; i < printStack.length; i += 2) {\\n            str += printStack[i];\\n        }\\n        printfunc(str);\\n    }\\n    else {\\n        printfunc(...printStack);\\n    }\\n}\\n// Usage: ColorPrint('red', 'This is some red text', '#FFFFFF', ' This is some white text);\\nexport function ColorPrint() {\\n    let findProp = propName => {\\n        for (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n            let propKey = Object.keys(div)[1];\\n            if (!propKey)\\n                continue;\\n            let props = div[propKey];\\n            if (props.children?.props && props.children.props[propName])\\n                return props.children.props[propName];\\n            if (props.children instanceof Array)\\n                for (let child of props.children)\\n                    if (child?.props && child.props[propName])\\n                        return child.props[propName];\\n        }\\n    };\\n    let term = findProp(\\\"terminal\\\");\\n    let out = [];\\n    for (let i = 0; i < arguments.length; i += 2) {\\n        let style = arguments[i];\\n        if (style.style == undefined) {\\n            style = { style: { color: arguments[i], backgroundColor: '#000000' } };\\n        }\\n        out.push(React.createElement(\\\"span\\\", style, arguments[i + 1]));\\n    }\\n    try {\\n        term.printRaw(out);\\n    }\\n    catch { }\\n}\\n/**\\n * @param {ns}\\n * @param {Array} JSON DATA in form of [{id:1,name:\\\"Lexicon\\\"},{id:2,name:\\\"Paradox\\\"}]\\n * @param {Array} pass an array of columns\\n * @returns {HTMLTableElement} Returns a HTMLTableElement that you can use DOM.appendChild(table);\\n */\\nexport function createHTMLTableFromJSON(ns, data, columns) {\\n    var formattedData = JSON.parse(JSON.stringify(data, columns));\\n    var col = [];\\n    for (var i = 0; i < formattedData.length; i++) {\\n        for (var key in formattedData[i]) {\\n            if (col.indexOf(key) === -1) {\\n                col.push(key);\\n            }\\n        }\\n    }\\n    var table = doc.createElement(\\\"table\\\");\\n    table.style.width = '100%';\\n    var tr = table.insertRow(-1); // TABLE ROW.\\n    for (var i = 0; i < col.length; i++) {\\n        var th = doc.createElement(\\\"th\\\"); // TABLE HEADER.\\n        th.innerHTML = col[i];\\n        tr.appendChild(th);\\n    }\\n    for (var i = 0; i < formattedData.length; i++) {\\n        tr = table.insertRow(-1);\\n        for (var j = 0; j < col.length; j++) {\\n            var tabCell = tr.insertCell(-1);\\n            if (typeof (formattedData[i][col[j]]) == 'number') {\\n                var number = formattedData[i][col[j]];\\n                if (number > 0)\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"green\\\");\\n                else if (number == 0)\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"white\\\");\\n                else if (number < 0)\\n                    tabCell.innerHTML = addHtmlWithColor(\\\"a\\\", fmt.format(number), \\\"red\\\");\\n            }\\n            else {\\n                tabCell.innerHTML = formattedData[i][col[j]];\\n            }\\n        }\\n    }\\n    return table;\\n}\\nlet addHtmlWithColor = (tag, data, color) => {\\n    return \\\"<\\\" + tag + \\\" style='color:\\\" + color + \\\"'>\\\" + data + \\\"</\\\" + tag + \\\">\\\";\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL3RhYmxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7QUFDL0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBLENBQUMsd0NBQXdDO0FBQzFELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtBQUU5QyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkRBQTZEO0FBQ2xGLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztBQUN2RCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7QUFDdkQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUUsb0RBQW9EO0FBRXBFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsR0FBRyxVQUFVLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNsRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBRTNELE1BQU0sV0FBVyxHQUFHO0lBQ25CLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFVBQVU7SUFDZixHQUFHLEVBQUUsVUFBVTtJQUNmLElBQUksRUFBRSxVQUFVO0lBQ2hCLEdBQUcsRUFBRSxVQUFVO0lBQ2YsR0FBRyxFQUFFLFNBQVM7Q0FDZCxDQUFBO0FBQ0Qsc0ZBQXNGO0FBQ3RGLG9HQUFvRztBQUVwRyxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENB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SUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3hDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsVUFBVSxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxTQUFTO0lBQzNFLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtRQUNqQixXQUFXLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDcEQsT0FBTztLQUNQO0lBRUQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3hDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxTQUFTO1lBQzdCLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQzdFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxTQUFTO1lBQ2xDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7O1lBRTlGLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQy9GLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsVUFBVSxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBSyxFQUFFLFNBQVM7SUFDM0MsZUFBZTtJQUNmLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7QUFDaEUsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUztJQUM1QyxJQUFJLFNBQVMsSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFO1FBQ3BELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjtRQUNELFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNmO1NBQ0k7UUFDSixTQUFTLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztLQUN6QjtBQUNGLENBQUM7QUFFRCwyRkFBMkY7QUFDM0YsTUFBTSxVQUFVLFVBQVU7SUFDekIsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLEVBQUU7UUFDekIsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekQsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsT0FBTztnQkFBRSxTQUFTO1lBQ3ZCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztnQkFBRSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25HLElBQUksS0FBSyxDQUFDLFFBQVEsWUFBWSxLQUFLO2dCQUFFLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVE7b0JBQUUsSUFBSSxLQUFLLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO3dCQUFFLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvSTtJQUNGLENBQUMsQ0FBQztJQUNGLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVoQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzdDLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksU0FBUyxFQUFFO1lBQzdCLEtBQUssR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUM7U0FDdkU7UUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUM5RDtJQUNELElBQUk7UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ25CO0lBQ0QsTUFBTSxHQUFHO0FBQ1YsQ0FBQztBQUdEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTztJQUV4RCxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDOUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDakMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM1QixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2Q7U0FDRDtLQUNEO0lBRUQsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUE7SUFFMUIsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQW1CLGFBQWE7SUFFN0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFNLGdCQUFnQjtRQUN2RCxFQUFFLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ25CO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFFOUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxFQUFFO2dCQUNsRCxJQUFJLE1BQU0sR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ3JDLElBQUksTUFBTSxHQUFHLENBQUM7b0JBQ2IsT0FBTyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztxQkFDbkUsSUFBSSxNQUFNLElBQUksQ0FBQztvQkFDbkIsT0FBTyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztxQkFDbkUsSUFBSSxNQUFNLEdBQUcsQ0FBQztvQkFDbEIsT0FBTyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUd0RTtpQkFBTTtnQkFDTixPQUFPLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUU3QztTQUVEO0tBQ0Q7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUM7QUFDRCxJQUFJLGdCQUFnQixHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtJQUMzQyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsZ0JBQWdCLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDOUUsQ0FBQyxDQUFBIn0=\",\"filename\":\"/xsink/tables.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    // // Acquire a reference to the terminal text field\\n    // const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    // // Set the value to the command you want to run.\\n    // terminalInput.value=\\\"home;connect n00dles;home;connect n00dles;home;\\\";\\n    // // Get a reference to the React event handler.\\n    // const handler = Object.keys(terminalInput)[1];\\n    // // Perform an onChange event to set some internal values.\\n    // terminalInput[handler].onChange({target:terminalInput});\\n    // // Simulate an enter press\\n    // terminalInput[handler].onKeyDown({key:'Enter',preventDefault:()=>null});\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay90ZXJtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLG9EQUFvRDtJQUNwRCxtRUFBbUU7SUFFbkUsbURBQW1EO0lBQ25ELHlFQUF5RTtJQUV6RSxpREFBaUQ7SUFDakQsaURBQWlEO0lBRWpELDREQUE0RDtJQUM1RCwyREFBMkQ7SUFFM0QsNkJBQTZCO0lBQzdCLDJFQUEyRTtBQUM1RSxDQUFDIn0=\",\"filename\":\"/xsink/term.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const BLACKLISTED_HOSTS = ['darkweb'];\\nconst SEARCH_DEPTH = 999;\\nconst INACCESSIBLE_STYLE_NAME = 'inaccessible';\\nconst MERMAID_HEAD = 'graph LR';\\nconst MERMAID_STYLE = `classDef ${INACCESSIBLE_STYLE_NAME} fill:#f96;`;\\n/** @type {NS} **/\\nlet ns;\\n/** @param {NS} _ns **/\\nexport async function main(_ns) {\\n    ns = _ns;\\n    const limit = ns.getHackingLevel();\\n    const hostCache = [];\\n    const content = [];\\n    const deepSearch = (name, i = 0, parent = null) => {\\n        if (i > SEARCH_DEPTH) {\\n            return;\\n        }\\n        // Check if host has been traversed already\\n        if (hostCache.indexOf(name) == -1 && BLACKLISTED_HOSTS.indexOf(name)) {\\n            hostCache.push(name);\\n        }\\n        else {\\n            return;\\n        }\\n        let target = ns.getServer(name);\\n        target.connections = ns.scan(name);\\n        target.connectionsResolved = {};\\n        // Creating node definition for mermaid\\n        if (parent !== null) {\\n            const isAccessible = target.requiredHackingSkill >= limit ? `:::${INACCESSIBLE_STYLE_NAME}` : '';\\n            content.push(`${parent} -- ${target.requiredHackingSkill} ---> ${name}${isAccessible}`);\\n        }\\n        if (target.connections.length > 0) {\\n            for (let subTarget of target.connections) {\\n                let peek = deepSearch(subTarget, i + 1, name);\\n                if (peek)\\n                    target.connectionsResolved[subTarget] = peek;\\n            }\\n        }\\n        return target;\\n    };\\n    deepSearch('home');\\n    renderDefinition(content);\\n}\\nfunction renderDefinition(content) {\\n    ns.tprint(`\\\\n` + MERMAID_HEAD + '\\\\n\\\\t' + content.join('\\\\n\\\\t') + MERMAID_STYLE);\\n    ns.tprint('Copy & paste the content above into https://mermaid.live');\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy94c2luay90cmVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0saUJBQWlCLEdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM3QyxNQUFNLFlBQVksR0FBZ0IsR0FBRyxDQUFBO0FBQ3JDLE1BQU0sdUJBQXVCLEdBQUssY0FBYyxDQUFBO0FBQ2hELE1BQU0sWUFBWSxHQUFnQixVQUFVLENBQUE7QUFDNUMsTUFBTSxhQUFhLEdBQWUsWUFBWSx1QkFBdUIsYUFBYSxDQUFBO0FBRWxGLGtCQUFrQjtBQUNsQixJQUFJLEVBQUUsQ0FBQTtBQUVOLHVCQUF1QjtBQUN2QixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxHQUFHO0lBQzFCLEVBQUUsR0FBRyxHQUFHLENBQUE7SUFFUixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDbEMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFBO0lBQ3BCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQTtJQUVsQixNQUFNLFVBQVUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxJQUFJLEVBQUUsRUFBRTtRQUM5QyxJQUFJLENBQUMsR0FBRyxZQUFZLEVBQUU7WUFDbEIsT0FBTTtTQUNUO1FBRUQsMkNBQTJDO1FBQzNDLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEUsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUN2QjthQUFNO1lBQ0gsT0FBTTtTQUNUO1FBRUQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQixNQUFNLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDbEMsTUFBTSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsQ0FBQTtRQUUvQix1Q0FBdUM7UUFDdkMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ2pCLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO1lBQ2hHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLE9BQU8sTUFBTSxDQUFDLG9CQUFvQixTQUFTLElBQUksR0FBRyxZQUFZLEVBQUUsQ0FBQyxDQUFBO1NBQzFGO1FBRUQsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0IsS0FBSyxJQUFJLFNBQVMsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUN0QyxJQUFJLElBQUksR0FBRyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7Z0JBQzdDLElBQUksSUFBSTtvQkFBRSxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFBO2FBQ3pEO1NBQ0o7UUFFRCxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDLENBQUE7SUFFRCxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbEIsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDN0IsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsT0FBTztJQUM3QixFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxZQUFZLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUE7SUFDOUUsRUFBRSxDQUFDLE1BQU0sQ0FBQywwREFBMEQsQ0FBQyxDQUFBO0FBQ3pFLENBQUMifQ==\",\"filename\":\"/xsink/tree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    ns.disableLog('ALL');\\n    for (;;) {\\n        for (let i = 0; i < 10000; i++) {\\n            ns.singularity.travelToCity('Chongqing');\\n            ns.singularity.travelToCity('New Tokyo');\\n            ns.singularity.travelToCity('Ishima');\\n        }\\n        await ns.sleep(0);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhdmVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3hzaW5rL3RyYXZlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsU0FBVTtRQUNULEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEM7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7QUFDRixDQUFDIn0=\",\"filename\":\"/xsink/travel.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(GetNextLevelXp(ns));\\n    //ns.tprint(HasFormulas(ns));\\n    // const servers = GetAllServers(ns);\\n    // ns.tprint(servers.length + ' ' + servers);\\n    // ns.tprint('path of ecorp is ' + GetServerPath(ns, 'ecorp'));\\n    // ns.tprint(FormatMoney(ns, 0));\\n    // ns.tprint(FormatMoney(ns, 1e3));\\n    // ns.tprint(FormatMoney(ns, 1e6));\\n    // ns.tprint(FormatMoney(ns, 1e9));\\n    // ns.tprint(FormatMoney(ns, 1e12));\\n    // ns.tprint(FormatMoney(ns, 1e15));\\n    // ns.tprint(FormatMoney(ns, 1e18));\\n    // ns.tprint(FormatMoney(ns, 1e21));\\n    // ns.tprint(FormatMoney(ns, 1e24));\\n    // ns.tprint(FormatMoney(ns, 1e27));\\n    // ns.tprint(FormatMoney(ns, 1e30));\\n    // ns.tprint(FormatMoney(ns, 1e33));\\n    // ns.tprint(FormatMoney(ns, 1e36));\\n    // ns.tprint(FormatMoney(ns, 1e39));\\n    // ns.tprint(FormatMoney(ns, 1e42));\\n    // ns.tprint(FormatMoney(ns, 1e45));\\n    // ns.tprint(FormatMoney(ns, 1e48));\\n    // ns.tprint(FormatMoney(ns, 1e51));\\n    // ns.tprint(FormatMoney(ns, 1e54));\\n    // ns.tprint(FormatMoney(ns, 1e57));\\n    // ns.tprint(FormatMoney(ns, 1e60));\\n    // ns.tprint(FormatMoney(ns, 1e63));\\n    // ns.tprint(FormatMoney(ns, 1e66));\\n}\\n// Iterative network scan\\nexport function GetAllServers(ns) {\\n    let servers = ['home'];\\n    for (const server of servers) {\\n        const found = ns.scan(server);\\n        if (server != 'home')\\n            found.splice(0, 1);\\n        servers.push(...found);\\n    }\\n    return servers;\\n}\\n// Find the path to a server\\nexport function GetServerPath(ns, server) {\\n    const path = [server];\\n    while (server != 'home') {\\n        server = ns.scan(server)[0];\\n        path.unshift(server);\\n    }\\n    return path;\\n}\\n// Prints colored text to console. Arguments must be passed in pairs\\n// Usage: ColorPrint('red', 'This is some red text', '#FFFFFF', ' This is some white text);\\nexport function ColorPrint( /* pass pairs of color, text */) {\\n    let findProp = propName => {\\n        for (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n            let propKey = Object.keys(div)[1];\\n            if (!propKey)\\n                continue;\\n            let props = div[propKey];\\n            if (props.children?.props && props.children.props[propName])\\n                return props.children.props[propName];\\n            if (props.children instanceof Array)\\n                for (let child of props.children)\\n                    if (child?.props && child.props[propName])\\n                        return child.props[propName];\\n        }\\n    };\\n    let term = findProp(\\\"terminal\\\");\\n    let out = [];\\n    for (let i = 0; i < arguments.length; i += 2) {\\n        let style = arguments[i];\\n        if (style.style == undefined) {\\n            style = { style: { color: arguments[i], backgroundColor: '#000000' } };\\n        }\\n        out.push(React.createElement(\\\"span\\\", style, arguments[i + 1]));\\n    }\\n    try {\\n        term.printRaw(out);\\n    }\\n    catch { }\\n}\\nexport function ServerReport(ns, server, metrics = undefined, printfunc = ns.print) {\\n    // Get server object for this server\\n    var so = ns.getServer(server);\\n    // weaken threads\\n    const tweaken = Math.ceil((so.hackDifficulty - so.minDifficulty) / 0.05 /*ns.weakenAnalyze(1, 1)*/);\\n    // grow threads\\n    const tgrow = Math.ceil(ns.growthAnalyze(server, so.moneyMax / Math.max(so.moneyAvailable, 1), 1));\\n    // hack threads\\n    const thack = Math.ceil(ns.hackAnalyzeThreads(server, so.moneyAvailable));\\n    printfunc('┌─────────────────────────────────────────────────────┐');\\n    printfunc('│ ' + server.padStart(52 / 2 + server.length / 2).padEnd(52) + '│');\\n    printfunc('├─────────────────────────────────────────────────────┤');\\n    printfunc('│ ' + ('Money        : ' + ns.nFormat(so.moneyAvailable, \\\"$0.000a\\\") + ' / ' + ns.nFormat(so.moneyMax, \\\"$0.000a\\\") + ' (' + (so.moneyAvailable / so.moneyMax * 100).toFixed(2) + '%)').padEnd(52) + '│');\\n    printfunc('│ ' + ('Security     : ' + (so.hackDifficulty - so.minDifficulty).toFixed(2) + ' min= ' + so.minDifficulty.toFixed(2) + ' current= ' + so.hackDifficulty.toFixed(2)).padEnd(52) + '│');\\n    printfunc('├─────────────────────────────────────────────────────┤');\\n    printfunc('│ ' + ('Weaken time  : ' + ns.tFormat(ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 4) + ' (t=' + tweaken + ')').padEnd(52) + '│');\\n    printfunc('│ ' + ('Grow         : ' + ns.tFormat(ns.formulas.hacking.hackTime(so, ns.getPlayer()) * 3.2) + ' (t=' + tgrow + ')').padEnd(52) + '│');\\n    printfunc('│ ' + ('Hack         : ' + ns.tFormat(ns.formulas.hacking.hackTime(so, ns.getPlayer())) + ' (t=' + thack + ')').padEnd(52) + '│');\\n    printfunc('└─────────────────────────────────────────────────────┘');\\n    if (metrics != undefined) {\\n        metrics.Report(ns, printfunc);\\n    }\\n}\\nexport function FormatMoney(ns, value, decimals = 3) {\\n    if (value >= 1e33)\\n        return '$' + value.toExponential(0);\\n    for (const pair of [[1e30, 'n'], [1e27, 'o'], [1e24, 'S'], [1e21, 's'], [1e18, 'Q'], [1e15, 'q'], [1e12, 't'], [1e9, 'b'], [1e6, 'm'], [1e3, 'k']])\\n        if (value >= pair[0])\\n            return (value / pair[0]).toFixed(decimals) + pair[1];\\n    return '$' + value.toFixed(decimals);\\n}\\nexport async function WaitPids(ns, pids) {\\n    if (!Array.isArray(pids))\\n        pids = [pids];\\n    while (pids.some(p => ns.getRunningScript(p) != undefined)) {\\n        await ns.sleep(5);\\n    }\\n}\\nexport function HasFormulas(ns) {\\n    try {\\n        ns.formulas.hacknetNodes.constants();\\n        return true;\\n    }\\n    catch {\\n        return false;\\n    }\\n}\\n// Returns the needed XP for the next hacking level\\nexport function GetNextLevelXp(ns, skill = 'hacking') {\\n    let player = ns.getPlayer();\\n    let prevXp = ns.formulas.skills.calculateExp(player.skills[skill], player.mults[skill]);\\n    let nextXp = ns.formulas.skills.calculateExp(player.skills[skill] + 1, player.mults[skill]);\\n    let needed = nextXp - prevXp;\\n    let progress = player.exp[skill] - prevXp;\\n    let remaining = needed - progress;\\n    let pct = progress / needed * 100;\\n    // ns.tprint('Progress : ' + ns.nFormat(progress, '0.000a') + ' / ' + ns.nFormat(needed, '0.000a'));\\n    // ns.tprint('Remaining: ' + ns.nFormat(remaining, '0.000a') + ' (' + pct.toFixed(2) + '%)');\\n    return {\\n        needed: needed,\\n        progress: progress,\\n        remaining: remaining,\\n        pct: pct\\n    };\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU5Qiw2QkFBNkI7SUFFN0IscUNBQXFDO0lBQ3JDLDZDQUE2QztJQUU3QywrREFBK0Q7SUFFL0QsaUNBQWlDO0lBQ2pDLG1DQUFtQztJQUNuQyxtQ0FBbUM7SUFDbkMsbUNBQW1DO0lBQ25DLG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLG9DQUFvQztJQUNwQyxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBQ3BDLG9DQUFvQztBQUNyQyxDQUFDO0FBRUQseUJBQXlCO0FBQ3pCLE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBRTtJQUMvQixJQUFJLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzdCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsSUFBSSxNQUFNLElBQUksTUFBTTtZQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QjtJQUNELE9BQU8sT0FBTyxD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\",\"filename\":\"/xsink/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const MAX_SECURITY_DRIFT = 3; // This is how far from minimum security we allow the server to be before weakening\\nconst MAX_MONEY_DRIFT_PCT = 0.1; // This is how far from 100% money we allow the server to be before growing (1-based percentage)\\nconst DEFAULT_PCT = 0.25; // This is the default 1-based percentage of money we want to hack from the server in a single pass\\nconst MIN_HOME_RAM = 32; // Number of GBs we want to keep free on home\\nlet xpMode = false;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    // Parameters\\n    const [target, pct = DEFAULT_PCT] = ns.args;\\n    // Show usage if no parameters were passed\\n    if (target == undefined) {\\n        ns.tprint('ERROR: No server specified!');\\n        ns.tprint('INFO : Usage: run v1.js <server> <pct>');\\n        ns.tprint('INFO :    <server> is the name of the target server');\\n        ns.tprint('INFO :    <pct> is the 1-based maximum percentage to hack from the target (Optional, default is 25%)');\\n        ns.tprint('INFO :');\\n        ns.tprint('INFO : XP MODE: run v1.js xp');\\n        ns.tprint('INFO :    This mode will simply prepare and then throw all the ram on grow at joesguns for XP');\\n        return;\\n    }\\n    // If the user passes xp as a target, we grow joesguns for XP\\n    if (target == 'xp') {\\n        xpMode = true;\\n    }\\n    // This script calls 1-liner worker scripts, the following commands create those scripts on the current host\\n    await CreateScript(ns, 'hack');\\n    await CreateScript(ns, 'grow');\\n    await CreateScript(ns, 'weaken');\\n    // Open the tail window, you can comment this if it bothers you\\n    ns.tail();\\n    await Exploit(ns, target, pct);\\n}\\nasync function Exploit(ns, server, pct) {\\n    if (xpMode)\\n        server = 'joesguns';\\n    // Determines if we have got to the hack part of the cycle\\n    // This is used to show some warnings when the target percentage of hack is too high for current ram or target\\n    let hackedOnce = false;\\n    while (true) {\\n        // Security\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        let weakenThreads = Math.ceil((sec - minSec) / ns.weakenAnalyze(1));\\n        // Money\\n        let money = ns.getServerMoneyAvailable(server);\\n        if (money <= 0)\\n            money = 1; // division by zero safety\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        let growThreads = Math.ceil(ns.growthAnalyze(server, maxMoney / money));\\n        // Hacking (limited by pct)\\n        let hackThreads = Math.floor(ns.hackAnalyzeThreads(server, money) * pct);\\n        if (xpMode) {\\n            if (weakenThreads > 0)\\n                weakenThreads = Infinity;\\n            growThreads = Infinity;\\n            hackThreads = 0;\\n        }\\n        // Report\\n        ns.print('');\\n        ns.print(server);\\n        ns.print('INFO: Money    : ' + ns.nFormat(money, \\\"$0.000a\\\") + ' / ' + ns.nFormat(maxMoney, \\\"$0.000a\\\") + ' (' + (money / maxMoney * 100).toFixed(2) + '%)');\\n        ns.print('INFO: Security : ' + (sec - minSec).toFixed(2));\\n        ns.print('INFO: Weaken   : ' + ns.tFormat(ns.getWeakenTime(server)) + ' (t=' + weakenThreads + ')');\\n        ns.print('INFO: Grow     : ' + ns.tFormat(ns.getGrowTime(server)) + ' (t=' + growThreads + ')');\\n        ns.print('INFO: Hack     : ' + ns.tFormat(ns.getHackTime(server)) + ' (t=' + hackThreads + ')');\\n        ns.print('');\\n        let startedAnything = false;\\n        // Check if security is above minimum\\n        if ((xpMode || (sec > minSec + MAX_SECURITY_DRIFT)) && weakenThreads > 0) {\\n            // We need to lower security\\n            ns.print('WARN: ***WEAKENING*** Security is over threshold, we need ' + weakenThreads + ' threads to floor it');\\n            let pids = await RunScript(ns, 'weaken-once.script', server, weakenThreads, hackedOnce);\\n            if (pids.length > 0 && pids.find(s => s != 0))\\n                startedAnything = true;\\n            ns.print('INFO: Waiting for script completion (approx ' + ns.tFormat(ns.getWeakenTime(server)) + ')');\\n            await WaitPids(ns, pids);\\n        }\\n        else if ((money < maxMoney - maxMoney * MAX_MONEY_DRIFT_PCT && growThreads > 0) || xpMode) {\\n            // We need to grow the server\\n            ns.print('WARN: ***GROWING*** Money is getting low, we need ' + growThreads + ' threads to max it');\\n            let pids = await RunScript(ns, 'grow-once.script', server, growThreads, hackedOnce);\\n            if (pids.length > 0 && pids.find(s => s != 0))\\n                startedAnything = true;\\n            if (hackedOnce)\\n                MemoryReport(ns);\\n            ns.print('INFO: Waiting for script completion (approx ' + ns.tFormat(ns.getGrowTime(server)) + ')');\\n            await WaitPids(ns, pids);\\n        }\\n        else if (hackThreads > 0) {\\n            // Server is ripe for hacking\\n            ns.print('WARN: ***HACKING*** Server is ripe for hacking, hitting our target would require ' + hackThreads + ' threads');\\n            let pids = await RunScript(ns, 'hack-once.script', server, hackThreads, hackedOnce);\\n            if (pids.length > 0 && pids.find(s => s != 0))\\n                startedAnything = true;\\n            hackedOnce = true;\\n            ns.print('INFO: Waiting for script completion (approx ' + ns.tFormat(ns.getHackTime(server)) + ')');\\n            await WaitPids(ns, pids);\\n        }\\n        if (!startedAnything) {\\n            ns.print('FAIL: ***STALLING*** Could not start any of the scripts, this is most likely because we do not have enough RAM to do so. Waiting a bit.');\\n            await ns.sleep(1000); // If we didn't have enough ram to start anything, we need to sleep here to avoid a lock\\n        }\\n    }\\n}\\nfunction MemoryReport(ns) {\\n    let servers = RecursiveScan(ns);\\n    let free = 0;\\n    let used = 0;\\n    let total = 0;\\n    for (const server of servers) {\\n        total += ns.getServerMaxRam(server);\\n        used += ns.getServerUsedRam(server);\\n        free = total - used;\\n    }\\n    let pct = (free / total * 100).toFixed(2);\\n    if (used / total < 0.85)\\n        ns.print('WARN: The full grow cycle for this hacking job is running with ' + pct + '% ram left. You could hack other servers, and/or increase the % hack of this server.');\\n}\\n// This function waits for one (or an array of) PID to stop running\\nexport async function WaitPids(ns, pids) {\\n    if (!Array.isArray(pids))\\n        pids = [pids];\\n    for (;;) {\\n        let stillRunning = false;\\n        for (const pid of pids) {\\n            const process = ns.getRunningScript(pid);\\n            if (process != undefined) {\\n                stillRunning = true;\\n                break;\\n            }\\n            await ns.sleep(0);\\n        }\\n        if (!stillRunning)\\n            return;\\n        await ns.sleep(5);\\n    }\\n}\\nasync function RunScript(ns, scriptName, target, threads, hackedOnce) {\\n    // Find all servers\\n    const allServers = RecursiveScan(ns);\\n    // Sort by maximum memory\\n    allServers.sort((a, b) => ns.getServerMaxRam(b) - ns.getServerMaxRam(a));\\n    // Find script RAM usage\\n    const ramPerThread = ns.getScriptRam(scriptName);\\n    // Find usable servers\\n    const usableServers = allServers.filter(p => ns.hasRootAccess(p) && ns.getServerMaxRam(p) > 0);\\n    // Fired threads counter\\n    let fired = 0;\\n    const pids = [];\\n    for (const server of usableServers) {\\n        // Determin how many threads we can run on target server for the given script\\n        let availableRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n        if (server == 'home') {\\n            availableRam -= MIN_HOME_RAM;\\n            if (availableRam < 0)\\n                availableRam = 0;\\n        }\\n        let possibleThreads = Math.floor(availableRam / ramPerThread);\\n        // Check if server is already at max capacity\\n        if (possibleThreads <= 0)\\n            continue;\\n        // Lower thread count if we are over target\\n        if (possibleThreads > threads - fired)\\n            possibleThreads = threads - fired;\\n        // Copy script to the server if it's not the current\\n        if (server != ns.getHostname())\\n            await ns.scp(scriptName, server);\\n        // Fire the script with as many threads as possible\\n        ns.print('INFO: Starting script ' + scriptName + ' on ' + server + ' with ' + possibleThreads + ' threads');\\n        let pid = ns.exec(scriptName, server, possibleThreads, target);\\n        if (pid == 0)\\n            ns.print('WARN: Could not start script ' + scriptName + ' on ' + server + ' with ' + possibleThreads + ' threads');\\n        else {\\n            fired += possibleThreads;\\n            pids.push(pid);\\n        }\\n        if (fired >= threads)\\n            break;\\n    }\\n    if (fired == 0) {\\n        ns.print('FAIL: Not enough memory to launch a single thread of ' + scriptName + ' (out of memory on all servers!)');\\n    }\\n    if (hackedOnce && fired != threads) {\\n        ns.print('FAIL: There wasn\\\\'t enough ram to run ' + threads + ' threads of ' + scriptName + ' (fired: ' + fired + '). It is recommended to either reduce the hack percentage or reduce memory usage from other scripts.');\\n    }\\n    return pids;\\n}\\nasync function CreateScript(ns, command) {\\n    await ns.write(command + '-once.script', command + '(args[0])', 'w');\\n}\\nfunction RecursiveScan(ns, root = 'home', found = []) {\\n    if (!found.includes(root)) {\\n        found.push(root);\\n        for (const server of ns.scan(root))\\n            if (!found.includes(server))\\n                RecursiveScan(ns, server, found);\\n    }\\n    return found;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvdjEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUMsQ0FBRSxtRkFBbUY7QUFDbEgsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUMsQ0FBQyxnR0FBZ0c7QUFDakksTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUcsbUdBQW1HO0FBQy9ILE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFHLDZDQUE2QztBQUV4RSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFFbkIsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixhQUFhO0lBQ2IsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUU1QywwQ0FBMEM7SUFDMUMsSUFBSSxNQUFNLElBQUksU0FBUyxFQUFFO1FBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsTUFBTSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDcEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBQ2pFLEVBQUUsQ0FBQyxNQUFNLENBQUMsc0dBQXNHLENBQUMsQ0FBQztRQUNsSCxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUMxQyxFQUFFLENBQUMsTUFBTSxDQUFDLCtGQUErRixDQUFDLENBQUM7UUFDM0csT0FBTztLQUNQO0lBRUQsNkRBQTZEO0lBQzdELElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtRQUNuQixNQUFNLEdB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\",\"filename\":\"/xsink/v1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args[0] - server\\n// args[1] - wait time\\n// args[2] - expected time\\n// args[3] - batchNumber\\n// args[4] - log color (undefined to disable logging)\\nexport async function main(ns) {\\n    const [target, delay, expectedTime, batchNumber, logColor] = ns.args;\\n    await ns.sleep(delay);\\n    const start = performance.now();\\n    await ns.weaken(target);\\n    const executionTime = performance.now() - start;\\n    if (logColor != 0 && Math.abs(expectedTime - executionTime) > 100) {\\n        ColorPrint(logColor, 'Batch #' + batchNumber + ' weaken did not end with expected start=' + Math.round(start) + ' expected= ' + expectedTime + ' executionTime= ' + executionTime);\\n    }\\n}\\nexport function ColorPrint() {\\n    let findProp = propName => {\\n        for (let div of eval(\\\"document\\\").querySelectorAll(\\\"div\\\")) {\\n            let propKey = Object.keys(div)[1];\\n            if (!propKey)\\n                continue;\\n            let props = div[propKey];\\n            if (props.children?.props && props.children.props[propName])\\n                return props.children.props[propName];\\n            if (props.children instanceof Array)\\n                for (let child of props.children)\\n                    if (child?.props && child.props[propName])\\n                        return child.props[propName];\\n        }\\n    };\\n    let term = findProp(\\\"terminal\\\");\\n    let out = [];\\n    for (let i = 0; i < arguments.length; i += 2) {\\n        out.push(React.createElement(\\\"span\\\", { style: { color: `${arguments[i]}` } }, arguments[i + 1]));\\n    }\\n    try {\\n        term.printRaw(out);\\n    }\\n    catch { }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLW9uY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsvd2Vha2VuLW9uY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QiwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLHFEQUFxRDtBQUNyRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUNyRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QixNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ2hELElBQUksUUFBUSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUMsR0FBRyxHQUFHLEVBQUU7UUFDbEUsVUFBVSxDQUFDLFFBQVEsRUFBRSxTQUFTLEdBQUcsV0FBVyxHQUFHLDBDQUEwQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsYUFBYSxHQUFHLFlBQVksR0FBRyxrQkFBa0IsR0FBRyxhQUFhLENBQUMsQ0FBQztLQUNuTDtBQUNGLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVTtJQUN6QixJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsRUFBRTtRQUN6QixLQUFLLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6RCxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxPQUFPO2dCQUFFLFNBQVM7WUFDdkIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO2dCQUFFLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkcsSUFBSSxLQUFLLENBQUMsUUFBUSxZQUFZLEtBQUs7Z0JBQUUsS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUTtvQkFBRSxJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7d0JBQUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9JO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRWhDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNiLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDN0MsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNoRztJQUNELElBQUk7UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ25CO0lBQ0QsTUFBTSxHQUFHO0FBQ1YsQ0FBQyJ9\",\"filename\":\"/xsink/weaken-once.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/xsink/weaken-once.js\",\"url\":\"blob:https://hydroflame.github.io/c753e008-a9a2-4460-b832-be9ae6eeb40c\",\"moduleSequenceNumber\":35700}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Prep, IsPrepped } from \\\"prep.js\\\";\\nimport { MemoryMap } from \\\"ram.js\\\";\\nimport { RunScript, WaitPids, ServerReport } from \\\"utils.js\\\";\\n// ns.args[0] = ram percent to allow (0.001 to 1)\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    let [ramPct] = ns.args;\\n    if (ramPct == undefined)\\n        ramPct = 0.9;\\n    let server = 'joesguns';\\n    const scriptSize = ns.getScriptRam('grow-once.js');\\n    if (!IsPrepped(ns, server)) {\\n        await Prep(ns, server);\\n    }\\n    for (;;) {\\n        const ram = new MemoryMap(ns);\\n        const threads = Math.floor(ram.total * ramPct / scriptSize);\\n        ServerReport(ns, server);\\n        await GrowJoesgunsForXP(ns, server, threads);\\n        await ns.sleep(100);\\n    }\\n}\\nasync function GrowJoesgunsForXP(ns, server, threads) {\\n    const script = 'grow-once.js';\\n    const so = ns.getServer(server);\\n    const estTime = await ns.getGrowTime(server);\\n    ns.print('INFO: Growing ' + server + ' for XP, starting ' + threads + ' threads');\\n    const pids = await RunScript(ns, script, server, threads, 0, 0, 0, 0, true, true);\\n    await WaitPids(ns, pids);\\n    return [threads, estTime];\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsveHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNuQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFN0QsaURBQWlEO0FBQ2pELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUN2QixJQUFJLE1BQU0sSUFBSSxTQUFTO1FBQUUsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUV0QyxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUM7SUFFeEIsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVuRCxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUMzQixNQUFNLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDdkI7SUFFRCxTQUFVO1FBQ1QsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQztRQUM1RCxZQUFZLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLE1BQU0saUJBQWlCLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3QyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEI7QUFDRixDQUFDO0FBRUQsS0FBSyxVQUFVLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTztJQUNuRCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7SUFDOUIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLEdBQUcsb0JBQW9CLEdBQUcsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sSUFBSSxHQUFHLE1BQU0sU0FBUyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QixPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLENBQUMifQ==\",\"filename\":\"/xsink/xp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PrintTable, DefaultStyle, ColorPrint } from 'tables.js';\\n// Returns a weight that can be used to sort servers by hack desirability\\nfunction Weight(ns, server) {\\n    if (!server)\\n        return 0;\\n    // Don't ask, endgame stuff\\n    if (server.startsWith('hacknet-node'))\\n        return 0;\\n    // Get the player information\\n    let player = ns.getPlayer();\\n    // Get the server information\\n    let so = ns.getServer(server);\\n    // Set security to minimum on the server object (for Formula.exe functions)\\n    so.hackDifficulty = so.minDifficulty;\\n    // We cannot hack a server that has more than our hacking skill so these have no value\\n    if (so.requiredHackingSkill > player.skills.hacking)\\n        return 0;\\n    // Default pre-Formulas.exe weight. minDifficulty directly affects times, so it substitutes for min security times\\n    let weight = so.moneyMax / so.minDifficulty;\\n    // If we have formulas, we can refine the weight calculation\\n    if (HasFormulas(ns)) {\\n        // We use weakenTime instead of minDifficulty since we got access to it, \\n        // and we add hackChance to the mix (pre-formulas.exe hack chance formula is based on current security, which is useless)\\n        weight = so.moneyMax / ns.formulas.hacking.weakenTime(so, player) * ns.formulas.hacking.hackChance(so, player);\\n    }\\n    else \\n    // If we do not have formulas, we can't properly factor in hackchance, so we lower the hacking level tolerance by half\\n    if (so.requiredHackingSkill > player.skills.hacking / 2 && server != 'n00dles')\\n        return 0;\\n    return weight;\\n}\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.disableLog('ALL');\\n    const [hackingOnly = true] = ns.args;\\n    let servers = GetAllServers(ns);\\n    if (hackingOnly) {\\n        servers = servers.filter(s => ns.hasRootAccess(s.name) && ns.getServerMaxMoney(s.name) > 0).sort((a, b) => ns.getServerMaxMoney(b.name) - ns.getServerMaxMoney(a.name) /*Weight(ns, b.name) - Weight(ns, a.name)*/);\\n    }\\n    const spacer = 1;\\n    await GetSymbolAssociations(ns, servers);\\n    const columns = [\\n        { header: ' Servers', width: hackingOnly ? Math.max(...servers.map(s => s.name.length)) + 2 : 48 },\\n        { header: ' Sym', width: 6 },\\n        { header: ' Ram', width: 22 },\\n        { header: ' Money', width: 23 },\\n        { header: ' Sec', width: 7 },\\n        { header: ' MinSec', width: 8 },\\n        { header: ' HackReq', width: 9 },\\n        { header: ' Prepped', width: 9 },\\n        { header: ' Weight', width: 9 }\\n    ];\\n    if (HasFormulas(ns)) {\\n        columns.push({ header: ' Chance', width: 8 }, { header: ' Weaken Time', width: 24 }, { header: ' XP', width: 12 });\\n    }\\n    let data = [];\\n    let shortlist = servers.filter(s => Weight(ns, s.name) > 0);\\n    for (let i = 0; i < servers.length; i++) {\\n        const server = servers[i];\\n        let depth = server.route.length - 1;\\n        let nextDepth = i >= servers.length - 1 ? -1 : servers[i + 1].route.length - 1;\\n        let lastRootChild = lastChildAtDepth(servers, i, depth);\\n        let prefix = '';\\n        for (let j = 1; j <= depth; j++) {\\n            if (nextDepth >= depth && j == depth) {\\n                if (i == lastRootChild)\\n                    prefix += '└'.padEnd(spacer + 1, '─');\\n                else\\n                    prefix += '├'.padEnd(spacer + 1, '─');\\n            }\\n            else if (nextDepth < depth && j == depth)\\n                prefix += '└'.padEnd(spacer + 1, '─');\\n            else if (i == servers.length - 1 && i != lastChildAtDepth(servers, i, j))\\n                prefix += '└'.padEnd(spacer + 1, '─');\\n            else if (j == depth)\\n                prefix += '│'.padEnd(spacer + 1, ' ');\\n            else if (i != lastChildAtDepth(servers, i, j))\\n                prefix += '│'.padEnd(spacer + 1, ' ');\\n            else\\n                prefix += '  ';\\n        }\\n        let maxRam = ns.getServerMaxRam(server.name);\\n        let ramString = maxRam > 0 ? ns.nFormat(maxRam * 1000000000, '0.0b') : '';\\n        let freeRam = ns.getServerMaxRam(server.name) - ns.getServerUsedRam(server.name);\\n        let freeRamColor = freeRam > 0 ? 'white' : '#555555';\\n        let freeRamString = maxRam > 0 ? ns.nFormat(freeRam * 1000000000, '0.0b') : '';\\n        let ramPct = maxRam > 0 ? (freeRam / maxRam * 100).toFixed(0) + '%' : '';\\n        freeRamColor = pctColor(freeRam / maxRam);\\n        let money = ns.getServerMoneyAvailable(server.name);\\n        let moneyMax = ns.getServerMaxMoney(server.name);\\n        let moneyPct = moneyMax > 0 ? (money / moneyMax * 100).toFixed(0) + '%' : '';\\n        let moneyString = moneyMax > 0 ? ns.nFormat(money, '0.00a').padStart(8) : ''.padStart(8);\\n        let moneyColor = pctColor(money / moneyMax);\\n        let maxMoneyString = moneyMax > 0 ? ns.nFormat(moneyMax, '0.00a').padStart(8) : ''.padStart(8);\\n        let so = ns.getServer(server.name);\\n        let sec = so.hackDifficulty;\\n        let minSec = so.minDifficulty;\\n        let secPct = (sec - minSec) / (99 - minSec);\\n        let secColor = pctColor(1 - secPct);\\n        let cso = ns.getServer(server.name);\\n        cso.hackDifficulty = cso.minDifficulty;\\n        let player = ns.getPlayer();\\n        let prepped = so.hackDifficulty == so.minDifficulty && so.moneyAvailable == so.moneyMax && so.moneyMax > 0;\\n        ns.print(cso);\\n        let chance = GetHackChance(ns, cso, player);\\n        let weakTime = GetWeakenTime(ns, cso, player);\\n        let hackReqColor = 'lime';\\n        if (so.requiredHackingSkill <= player.skills.hacking / 2)\\n            hackReqColor = 'lime';\\n        else if (so.requiredHackingSkill < player.skills.hacking / 2)\\n            hackReqColor = 'orange';\\n        else\\n            hackReqColor = 'red';\\n        let hackable = so.moneyMax > 0 && so.hasAdminRights;\\n        let weight = shortlist.length > 0 ? Weight(ns, server.name) / Weight(ns, shortlist[shortlist.length - 1].name) : 0;\\n        let values = [\\n            { color: 'white', text: ' ' + (hackingOnly ? '' : prefix) + server.name },\\n            { color: 'white', text: server.sym ? ' ' + server.sym.padEnd(5) : ''.padStart(5) },\\n            { color: maxRam > 0 ? freeRamColor : '#555555', text: ' ' + freeRamString.padStart(7) + (maxRam == 0 ? ' ' : '/') + ramString.padStart(7) + ' ' + ramPct.padStart(4) },\\n            { color: moneyMax > 0 ? moneyColor : '#555555', text: moneyString + (moneyMax > 0 ? '/' : ' ') + maxMoneyString + moneyPct.padStart(5) },\\n            hackable ? { color: secColor, text: moneyMax > 0 ? (sec - minSec).toFixed(2).padStart(6) : ''.padEnd(6) } : '',\\n            hackable ? { color: 'white', text: ' ' + Math.round(so.minDifficulty).toString().padStart(4) } : '',\\n            { color: hackReqColor, text: ' ' + so.requiredHackingSkill.toString().padStart(5) },\\n            hackable ? { color: prepped ? 'lime' : '#555555', text: prepped ? '   Yes' : '    -' } : '',\\n            weight ? { color: 'white', text: ' ' + (weight).toFixed(0) } : ''\\n        ];\\n        if (HasFormulas(ns)) {\\n            ns.tprint(so.hostname);\\n            let xp = 0;\\n            try {\\n                xp = ns.formulas.hacking.hackExp(so, player) / weakTime * 100000;\\n            }\\n            catch { }\\n            values.push(hackable ? { color: pctColor(chance), text: ' ' + (Math.round(chance * 100) + '%').padStart(5) } : '', hackable ? { color: 'white', text: ' ' + formatTime(weakTime).padStart(22) } : '', ' ' + xp.toFixed(5));\\n        }\\n        data.push(values);\\n    }\\n    PrintTable(ns, data, columns, DefaultStyle(), ColorPrint);\\n}\\nfunction GetHackChance(ns, serverObject, player) {\\n    if (serverObject.hostname.startsWith('hacknet-node'))\\n        return 0;\\n    if (HasFormulas(ns))\\n        return ns.formulas.hacking.hackChance(serverObject, player);\\n    return ns.hackAnalyzeChance(serverObject.hostname);\\n}\\nfunction GetWeakenTime(ns, serverObject, player) {\\n    if (serverObject.hostname.startsWith('hacknet-node'))\\n        return 0;\\n    if (HasFormulas(ns))\\n        return ns.formulas.hacking.weakenTime(serverObject, player);\\n    return ns.getWeakenTime(serverObject.hostname);\\n}\\nfunction formatTime(time) {\\n    let seconds = time / 1000 % 60;\\n    let minutes = Math.floor(time / 1000 / 60);\\n    return (minutes > 0 ? minutes.toFixed(0) + ' minutes ' : '') + seconds.toFixed(0).padStart(2) + ' seconds';\\n}\\n// Selects a color based on a 1-based percentage\\nfunction pctColor(pct) {\\n    if (pct >= 1)\\n        return 'Lime';\\n    else if (pct >= 0.9)\\n        return 'Green';\\n    else if (pct >= 0.75)\\n        return 'ForestGreen';\\n    else if (pct >= 0.6)\\n        return 'GreenYellow';\\n    else if (pct >= 0.3)\\n        return 'Orange';\\n    else if (pct != 0)\\n        return 'DarkOrange';\\n    return 'Red';\\n}\\n// Centers text in a padded string of \\\"length\\\" long\\nfunction padCenter(str, length) {\\n    return str.padStart((length + str.length) / 2).padEnd(length);\\n}\\n// Finds the last child in the server list that is at the specified depth (for line closure)\\nfunction lastChildAtDepth(servers, start, depth) {\\n    let last = start;\\n    for (let i = start; i < servers.length; i++) {\\n        let currentDepth = servers[i].route.length - 1;\\n        if (currentDepth > depth)\\n            continue;\\n        if (currentDepth == depth) {\\n            last = i;\\n            continue;\\n        }\\n        if (currentDepth < depth)\\n            return last;\\n    }\\n    return last;\\n}\\nexport function GetAllServers(ns, root = 'home', found = new Array(), route = new Array()) {\\n    if (!found.find(p => p.name == root)) {\\n        let entry = { name: root, route: route };\\n        entry.route.push(root);\\n        found.push(entry);\\n    }\\n    for (const server of ns.scan(root)) {\\n        if (!found.find(p => p.name == server)) {\\n            let newRoute = route.map(p => p);\\n            GetAllServers(ns, server, found, newRoute);\\n        }\\n    }\\n    return [...found];\\n}\\nexport async function GetSymbolAssociations(ns, servers) {\\n    let data = [];\\n    // Load symbols if we already have them\\n    const filename = 'symbol-servers.txt';\\n    if (ns.fileExists(filename)) {\\n        data = JSON.parse(await ns.read(filename));\\n    }\\n    if (data.length == 0) {\\n        // Get source code enum data\\n        await ns.wget('https://raw.githubusercontent.com/danielyxie/bitburner/master/src/Locations/data/LocationNames.ts', 'locations.txt');\\n        ;\\n        await ns.wget('https://raw.githubusercontent.com/danielyxie/bitburner/master/src/StockMarket/data/StockSymbols.ts', 'stocksymbols.txt');\\n        let location = \\\"\\\";\\n        let company = \\\"\\\";\\n        let locations = ns.read('locations.txt');\\n        let locationMap = {};\\n        for (let line of locations.split(\\\"\\\\n\\\")) {\\n            if (line.includes('=')) {\\n                location = line.split(\\\" = \\\")[0];\\n                company = line.split(\\\" = \\\")[1];\\n                while (company.includes('\\\"')) {\\n                    company = company.replace('\\\"', '').replace(\\\",\\\", \\\"\\\");\\n                }\\n                while (location.includes(' ')) {\\n                    location = location.replace(' ', '');\\n                }\\n            }\\n            locationMap[location] = company;\\n        }\\n        let companies = ns.read('stocksymbols.txt');\\n        for (let line of companies.split(\\\"\\\\n\\\")) {\\n            let location;\\n            let sym;\\n            let serverName;\\n            if (line.includes(\\\"LocationName\\\")) {\\n                for (let line2 of Object.keys(locationMap)) {\\n                    if (line2.length > 3 && line.includes(line2)) {\\n                        location = locationMap[line2];\\n                        sym = line.split(\\\"=\\\")[1].replace(\\\";\\\", \\\"\\\").replace('\\\\\\\"', '').replace('\\\\\\\"', '').replace(' ', '');\\n                    }\\n                }\\n            }\\n            else {\\n                if (line.includes(\\\"StockSymbols\\\") && !line.includes(\\\"LocationName\\\") && !line.includes(\\\"export\\\")) {\\n                    location = line.substring(14, line.indexOf(']') - 1);\\n                    sym = line.substring(line.indexOf('=') + 3, line.length - 2);\\n                }\\n            }\\n            for (let server of servers) {\\n                let so = ns.getServer(server.name);\\n                if (so.organizationName == location)\\n                    serverName = server.name;\\n            }\\n            if (location != undefined && serverName != undefined) {\\n                data.push({ location: location, sym: sym, server: serverName });\\n            }\\n        }\\n        // Remove temporary files\\n        ns.rm('locations.txt');\\n        ns.rm('stocksymbols.txt');\\n        // Save data to a file so we don't need to fetch every time\\n        await ns.write(filename, JSON.stringify(data));\\n    }\\n    // Assign symbols to our server list\\n    for (let server of servers) {\\n        let match = data.find(s => s.server == server.name);\\n        if (match != undefined)\\n            server.sym = match.sym;\\n        else\\n            server.sym = '';\\n    }\\n    // Future use maybe?\\n    return data;\\n}\\nexport function HasFormulas(ns) {\\n    try {\\n        ns.formulas.hacknetNodes.constants();\\n        return true;\\n    }\\n    catch {\\n        return false;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieHRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveHNpbmsveHRyZWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRWhFLHlFQUF5RTtBQUN6RSxTQUFTLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTTtJQUN6QixJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRCLDJCQUEyQjtJQUMzQixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFFaEQsNkJBQTZCO0lBQzdCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUU1Qiw2QkFBNkI7SUFDN0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU5QiwyRUFBMkU7SUFDM0UsRUFBRSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBRXJDLHNGQUFzRjtJQUN0RixJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU87UUFBRSxPQUFPLENBQUMsQ0FBQztJQUU5RCxrSEFBa0g7SUFDbEgsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBRTVDLDREQUE0RDtJQUM1RCxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNwQix5RUFBeUU7UUFDekUseUhBQXlIO1FBQ3pILE1BQU0sR0FBRyxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMvRzs7SUFFQSxzSEFBc0g7SUFDdEgsSUFBSSxFQUFFLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLE1BQU0sSUFBSSxTQUFTO1FBQzdFLE9BQU8sQ0FBQyxDQUFDO0lBRVgsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBRUQscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQUU7SUFDNUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVyQixNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFFckMsSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLElBQUksV0FBVyxFQUFFO1FBQ2hCLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsMkNBQTJDLENBQUMsQ0FBQztLQUNwTjtJQUVELE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNqQixNQUFNLHFCQUFxQixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV6QyxNQUFNLE9BQU8sR0FBRztRQUNmLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNsRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUM1QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUM3QixFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUM1QixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUMvQixFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUNoQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtRQUNoQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtLQUMvQixDQUFDO0lBRUYsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDcEIsT0FBTyxDQUFDLElBQUksQ0FDWCxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUMvQixFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUNyQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUM1QixDQUFDO0tBQ0Y7SUFFRCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFFZCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdB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\",\"filename\":\"/xsink/xtree.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Originally from https://github.com/jorgebucaran/getopts (35dfad8)\\n *\\n * Slightly modified to work with Bitburner.\\n */\\n\\nconst EMPTYARR = []\\nconst SHORTSPLIT = /$|[!-@[-`{-~][\\\\s\\\\S]*/g\\nconst isArray = Array.isArray\\n\\nconst parseValue = function (any) {\\n  if (any === \\\"\\\") return \\\"\\\"\\n  if (any === \\\"false\\\") return false\\n  const maybe = +any\\n  return maybe * 0 === 0 ? maybe : any\\n}\\n\\nconst parseAlias = function (aliases) {\\n  let out = {},\\n    alias,\\n    prev,\\n    any\\n\\n  for (let key in aliases) {\\n    any = aliases[key]\\n    alias = out[key] = isArray(any) ? any : [any]\\n\\n    for (let i = 0; i < alias.length; i++) {\\n      prev = out[alias[i]] = [key]\\n\\n      for (let k = 0; k < alias.length; k++) {\\n        if (i !== k) prev.push(alias[k])\\n      }\\n    }\\n  }\\n\\n  return out\\n}\\n\\nconst parseDefault = function (aliases, defaults) {\\n  let out = {},\\n    alias,\\n    value\\n\\n  for (let key in defaults) {\\n    alias = aliases[key]\\n    value = defaults[key]\\n\\n    out[key] = value\\n\\n    if (alias === undefined) {\\n      aliases[key] = EMPTYARR\\n    } else {\\n      for (let i = 0; i < alias.length; i++) {\\n        out[alias[i]] = value\\n      }\\n    }\\n  }\\n\\n  return out\\n}\\n\\nconst parseOptions = function (aliases, options, value) {\\n  let out = {},\\n    key,\\n    alias\\n\\n  if (options !== undefined) {\\n    for (let i = 0; i < options.length; i++) {\\n      key = options[i]\\n      alias = aliases[key]\\n\\n      out[key] = value\\n\\n      if (alias === undefined) {\\n        aliases[key] = EMPTYARR\\n      } else {\\n        for (let k = 0, end = alias.length; k < end; k++) {\\n          out[alias[k]] = value\\n        }\\n      }\\n    }\\n  }\\n\\n  return out\\n}\\n\\nconst write = function (out, key, value, aliases, unknown) {\\n  let prev,\\n    alias = aliases[key],\\n    len = alias === undefined ? -1 : alias.length\\n\\n  if (len >= 0 || unknown === undefined || unknown(key)) {\\n    prev = out[key]\\n\\n    if (prev === undefined) {\\n      out[key] = value\\n    } else {\\n      if (isArray(prev)) {\\n        prev.push(value)\\n      } else {\\n        out[key] = [prev, value]\\n      }\\n    }\\n\\n    for (let i = 0; i < len; i++) {\\n      out[alias[i]] = out[key]\\n    }\\n  }\\n}\\n\\nexport default function getopts(argv, opts) {\\n  let unknown = (opts = opts || {}).unknown,\\n    aliases = parseAlias(opts.alias),\\n    strings = parseOptions(aliases, opts.string, \\\"\\\"),\\n    values = parseDefault(aliases, opts.default),\\n    bools = parseOptions(aliases, opts.boolean, false),\\n    stopEarly = opts.stopEarly,\\n    _ = [],\\n    out = { _ },\\n    key,\\n    arg,\\n    end,\\n    match,\\n    value\\n\\n  for (let i = 0, len = argv.length; i < len; i++) {\\n    arg = argv[i]\\n\\n    if (arg[0] !== \\\"-\\\" || arg === \\\"-\\\") {\\n      if (stopEarly) {\\n        while (i < len) {\\n          _.push(argv[i++])\\n        }\\n      } else {\\n        _.push(arg)\\n      }\\n    } else if (arg === \\\"--\\\") {\\n      while (++i < len) {\\n        _.push(argv[i])\\n      }\\n    } else if (arg[1] === \\\"-\\\") {\\n      end = arg.indexOf(\\\"=\\\", 2)\\n      if (arg[2] === \\\"n\\\" && arg[3] === \\\"o\\\" && arg[4] === \\\"-\\\") {\\n        key = arg.slice(5, end >= 0 ? end : undefined)\\n        value = false\\n      } else if (end >= 0) {\\n        key = arg.slice(2, end)\\n        value =\\n          bools[key] !== undefined ||\\n          (strings[key] === undefined\\n            ? parseValue(arg.slice(end + 1))\\n            : arg.slice(end + 1))\\n      } else {\\n        key = arg.slice(2)\\n        value =\\n          bools[key] !== undefined ||\\n          (len === i + 1 || argv[i + 1][0] === \\\"-\\\"\\n            ? strings[key] === undefined\\n              ? true\\n              : \\\"\\\"\\n            : strings[key] === undefined\\n            ? parseValue(argv[++i])\\n            : argv[++i])\\n      }\\n      write(out, key, value, aliases, unknown)\\n    } else {\\n      SHORTSPLIT.lastIndex = 2\\n      match = SHORTSPLIT.exec(arg)\\n      end = match.index\\n      value = match[0]\\n\\n      for (let k = 1; k < end; k++) {\\n        write(\\n          out,\\n          (key = arg[k]),\\n          k + 1 < end\\n            ? strings[key] === undefined ||\\n                arg.substring(k + 1, (k = end)) + value\\n            : value === \\\"\\\"\\n            ? len === i + 1 || argv[i + 1][0] === \\\"-\\\"\\n              ? strings[key] === undefined || \\\"\\\"\\n              : bools[key] !== undefined ||\\n                (strings[key] === undefined ? parseValue(argv[++i]) : argv[++i])\\n            : bools[key] !== undefined ||\\n              (strings[key] === undefined ? parseValue(value) : value),\\n          aliases,\\n          unknown\\n        )\\n      }\\n    }\\n  }\\n\\n  for (let key in values) if (out[key] === undefined) out[key] = values[key]\\n  for (let key in bools) if (out[key] === undefined) out[key] = false\\n  for (let key in strings) if (out[key] === undefined) out[key] = \\\"\\\"\\n\\n  return out\\n}\",\"filename\":\"/matrix/geopts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Download getopts.js from:\\n// https://raw.githubusercontent.com/mynameisneo7/bitburner-scripts/develop/lib/getopts.js\\nimport getopts from '/matrix/geopts.js';\\n\\n// Monitor if the script is already running\\nvar running;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n  if (running !== true)\\n    running = false;\\n\\n  // Parse options\\n  const opts = getopts(ns.args, matrixOpts(ns));\\n\\n  // Validate options\\n  if (opts.help === true) {\\n    help(ns);\\n  } else if (opts._.length) {\\n    error(ns, 'too many arguments.');\\n  } else if (typeof opts.blur == 'boolean' || opts.blur < 0 || opts.blur > 10 || !Number.isInteger(Math.floor(opts.blur))) {\\n    error(ns, 'blur must be an integer from 0 to 10.');\\n  } else if (typeof opts.color == 'boolean' || !Number.isInteger(Math.floor(opts.color))) { // We don't actually validate which integer (see later)\\n    error(ns, 'color must be an integer from 0 to 359.');\\n  } else if (typeof opts.delay == 'boolean' || opts.delay < 1 || opts.delay > 10000 || !Number.isInteger(Math.floor(opts.delay))) {\\n    error(ns, 'delay must be an integer from 1 to 10000.');\\n  } else if (opts.rainbow !== false && (opts.rainbow < 1 || opts.rainbow > 100 || !Number.isInteger(Math.floor(opts.rainbow)))) {\\n    error(ns, 'rainbow must be an integer from 1 to 100.');\\n  } else if (typeof opts.opacity == 'boolean' || opts.opacity < 0 || opts.opacity > 100 || !Number.isInteger(Math.floor(opts.opacity))) {\\n    error(ns, 'opacity must be an integer from 0 to 100.');\\n  }\\n\\n  if (opts.random === true) {\\n    opts.color = Math.floor(Math.random() * 360);\\n  }\\n\\n  if (opts.rainbow === true) {\\n    opts.rainbow = 10;\\n  } else {\\n    opts.rainbow = Math.floor(opts.rainbow);\\n  }\\n\\n  // Do not pass here if another script is running\\n  if (running) {\\n    ns.tprintf('%s: ERROR: script is already running.', ns.getScriptName());\\n    ns.tprint('ERROR: Script is already running with');\\n    ns.tprint('ERROR: other arguments. Kill previous');\\n    ns.tprint('ERROR: PIDs if you want to use new ');\\n    ns.tprint('ERROR: arguments.')\\n    ns.exit();\\n  }\\n\\n  // Grab our document and window...\\n  const doc = eval('document');\\n  const win = eval('window');\\n\\n  if (!running) mCleanup(); // Clean up in case of previous errors\\n  ns.atExit(mCleanup);      // and at exit.\\n\\n  // Make sure we're on the terminal first\\n  try {\\n    let tmp = doc.querySelector('#terminal').parentNode;\\n  } catch (e) {\\n    ns.tail()\\n    ns.print('ERROR: Could not find terminal.');\\n    ns.print('ERROR: Please switch back to the terminal');\\n    ns.print('ERROR: before running this script.');\\n    error(ns, 'could not find terminal.');\\n  }\\n\\n  ns.print('INFO: Matrix terminal background started.');\\n  ns.print(sprintf('INFO:  Delay: %dms  Hue: %d°  Opacity: %d%%', Math.floor(opts.delay), Math.floor(opts.color), Math.floor(opts.opacity)));\\n  ns.print(sprintf('INFO:  Blur: %dpx   Rainbow: %s', Math.floor(opts.blur), (opts.rainbow === false) ? 'Off' : Math.floor(opts.rainbow) + 's'));\\n\\n  // Add stylesheet for canvas\\n  var style = doc.createElement('style');\\n  Object.assign(style, { id: 'matrix-css' });\\n  style.type = 'text/css';\\n  style.innerHTML = matrixCSS(opts);\\n  doc.head.appendChild(style);\\n\\n  // We actually want the parent of the terminal\\n  const term = doc.querySelector('#terminal').parentNode;\\n  Object.assign(term.parentNode, { id: 'transparent-term' });\\n\\n  // Set up our canvas\\n  const canvas = doc.createElement('canvas');\\n  Object.assign(canvas, { id: 'matrix-canvas' });\\n  term.parentNode.insertBefore(canvas, term);\\n\\n  var ctx = canvas.getContext('2d');\\n  var columns = [];\\n  var chars = [];\\n\\n  canvas.height = win.screen.height;\\n  canvas.width = win.screen.width;\\n\\n  ctx.translate(canvas.width, 0);\\n  ctx.scale(-1, 1);\\n  ctx.shadowBlur = 2;\\n\\n  for (let i = 0; i < 300; columns[i] = 1, chars[i++] = '゠'); // aka 12448\\n\\n  running = true;\\n  while (true) {\\n    ctx.fillStyle = 'rgba(0,0,0,0.05)';\\n    ctx.shadowColor = '#000';\\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\\n\\n    columns.map(function (value, index) {\\n      // Overwrites the previous light-green char with a green one\\n      ctx.fillStyle = ctx.shadowColor = '#000';\\n      ctx.fillRect(index * 10, value - 10, 10, 10);\\n      // Defaults to green, but altered by the hue filter\\n      ctx.fillStyle = ctx.shadowColor = '#0F0';\\n      ctx.fillText(chars[index], index * 10, value - 10);\\n\\n      columns[index] = value > 758 + Math.random() * 1e4 ? 0 : value + 10;\\n      chars[index] = String.fromCharCode(12448 + Math.random() * 96);\\n\\n      ctx.fillStyle = ctx.shadowColor = '#AFA';\\n      ctx.fillText(chars[index], index * 10, value);\\n    });\\n\\n    await ns.sleep(opts.delay);\\n  }\\n}\\n\\n/** Return CSS\\n *  @param opts   getops options\\n *  @return Array\\n */\\nfunction matrixCSS(opts) {\\n  let anim = sprintf(' rainbow %ds infinite', (opts.rainbow !== false) ? opts.rainbow : 0);\\n  return [\\n    'canvas#matrix-canvas {',\\n    '  position: fixed;',\\n    '  top: 0;',\\n    '  left: 0;',\\n    '  pointer-events: none;',  // FIX #2: Let mouse events fall through\\n    '  opacity:' + sprintf(' %d%%;', Math.floor(opts.opacity)),\\n    '  filter:' + sprintf(' hue-rotate(%ddeg)', (Math.floor(opts.color) % 360)) // mod color degrees to 0-359\\n  /*         */ + sprintf(' blur(%dpx)', Math.floor(opts.blur))\\n  /*         */ + ';',\\n    ((opts.rainbow !== false) ?\\n    '  -webkit-animation:' + anim + ';':''),\\n    '}',\\n    '',\\n    '@-webkit-keyframes rainbow {',\\n    '  0%   { -webkit-filter: hue-rotate(0deg); }',\\n    '  100% { -webkit-filter: hue-rotate(359deg); }',\\n    '}',\\n  ].join('\\\\n');\\n}\\n\\n/** Cleanup DOM */\\nfunction mCleanup() {\\n  running = false;\\n  const doc = eval('document');\\n  try {\\n    doc.getElementById('matrix-canvas').remove();\\n    doc.getElementById('matrix-css').remove();\\n  } catch (e) { };\\n}\\n\\n/** Prints standardized error messages\\n *  @param {NS}   ns\\n *  @param msg    message to print\\n */\\nfunction error(ns, msg, where = 0) {\\n  ns.tprintf('%s: %s', ns.getScriptName(), msg);\\n  help(ns);\\n}\\n\\n/** Return getops configuration\\n *  @param {NS}   ns\\n *  @return Object\\n */\\nfunction matrixOpts(ns) {\\n  return {\\n    boolean: {\\n      help: ['h', 'help'],\\n      random: ['r', 'random'],\\n    },\\n    string: {\\n      blur: ['b', 'blur'],\\n      color: ['c', 'color'],\\n      delay: ['d', 'delay'],\\n      opacity: ['o', 'opacity'],\\n      rainbow: ['R', 'rainbow'],\\n    },\\n    default: {\\n      blur: 0,\\n      color: 0,\\n      delay: 33,\\n      help: false,\\n      opacity: 25,\\n      rainbow: false,\\n      random: false,\\n    },\\n    alias: {\\n      blur: ['b', 'blur'],\\n      color: ['c', 'color'],\\n      delay: ['d', 'delay'],\\n      help: ['h', 'help'],\\n      opacity: ['o', 'opacity'],\\n      random: ['r', 'random'],\\n      rainbow: ['R', 'rainbow'],\\n    },\\n    unknown: (arg) => {\\n      if (arg == 't')\\n        ns.tail();\\n      error(ns, sprintf('invalid option: %s\\\\n', ((arg.length > 1) ? '--' : '-') + arg));\\n    }\\n  };\\n}\\n\\n/** Help output\\n *  Will also forcibly exit the script.\\n *  @param {NS} ns\\n */\\nfunction help(ns) {\\n  let p = ns.tprintf;\\n  p('Usage: %s [OPTIONS]', ns.getScriptName());\\n  p(['',\\n    'Changes your terminal background to a green matrix style output.',\\n    '',\\n    '  -b, --blur N         Apply blur with N pixels. (default: 0)',\\n    '  -c, --color DEG      Color hue in degrees from the base. (default: 0)',\\n    '  -d, --delay MS       Delay in milliseconds between updates. (default: 33)',\\n    '                       Lower values result in faster animation.',\\n    '  -o, --opacity PCT    Percentage of opacity. (default: 25)',\\n    '  -R, --rainbow [SEC]  Loop through rainbow colors in seconds. (default: Off|10)',\\n    '',\\n    '  -r, --random         Chooses a random color. Overrides -c and --color.',\\n    '  -t, --tail           Tail the output log.',\\n    '',\\n    '  -h, --help           This help.',\\n    '',\\n    'NOTE: Can only be run when the terminal is visible.',\\n  ].join('\\\\n'));\\n\\n  ns.exit();\\n}\",\"filename\":\"/matrix/matrix.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/matrix/geopts.js\",\"url\":\"blob:https://hydroflame.github.io/dcfd6c24-0e1f-4d13-8203-59d9a7ec53c8\",\"moduleSequenceNumber\":288},{\"filename\":\"/matrix/matrix.js\",\"url\":\"blob:https://hydroflame.github.io/668a17a7-aca5-4281-abab-51f3df0e0bdd\",\"moduleSequenceNumber\":1819}],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\r\\n    run Bitburner-Sounds.js\\r\\n    Author Zombean\\r\\n    Examples\\r\\n    run Bitburner-Sounds.js\\r\\n    to disable just re-run the script\\r\\n\\r\\n*/\\r\\n\\r\\n/* SETTINGS */\\r\\n/* GAINS DECIMAL 0 - 1 */\\r\\nconst musicGain = 0\\r\\nconst fadeOutOnUnFocus = true\\r\\nconst fadeOutSpeed = .00025\\r\\nconst serverRackFansGain = 1\\r\\nconst dialUpTonesGain = 1\\r\\nconst terminalTyperWriterGain = 1\\r\\nconst masterGain = 1\\r\\n\\r\\n/* SOUNDS IN SCRIPTS */\\r\\n/*\\r\\n\\r\\nimport { sound } from 'Bitburner-Sounds.js'\\r\\n\\r\\nsound.bell()\\r\\nsound.speak('Hello World')\\r\\nsound.bell().speak('Chaining is possible but will occur all at once')\\r\\nsound.beep()\\r\\nsound.beep().speak('This is text to speach')\\r\\n\\r\\nsound.beep options examples\\r\\nsound.beep({freq : 500})\\r\\nsound.beep({duration : 1000})\\r\\nsound.beep({type : 'sine'})\\r\\nsound.beep({gain : 0.2})\\r\\n\\r\\nAll are optional, you can declare a specific beep like this\\r\\n\\r\\nconst lowTone = {freq : 420, type : 'sine', gain: 1}\\r\\nsound.beep(lowTone)\\r\\n\\r\\nconst quiteLongHighTone = {freq : 840, gain: 0.1, duration : 5000}\\r\\nsound.beep(quiteLongHighTone).speak('Playing quite long high tone')\\r\\n\\r\\n*/\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    const urlMap = {}\\r\\n    urlMap['URL_SONG']  = `https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/HypnocityReverb.mp3`\\r\\n    urlMap['URL_CLICK'] = `https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/click.mp3`\\r\\n    urlMap['URL_SWIPE'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/swipe.mp3'\\r\\n    urlMap['URL_TYPING']  = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/typing.mp3'\\r\\n    urlMap['URL_DIALUP'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/dialup.mp3'\\r\\n    urlMap['URL_SERVER_AIR'] =  'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/server_air.mp3'\\r\\n    urlMap['URL_SERVER_RACK'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/server_rack.mp3'\\r\\n    urlMap['URL_SERVER_FANS'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/server_fans.mp3'\\r\\n    urlMap['URL_LONGCLICK'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/longclick.mp3'\\r\\n    urlMap['URL_POP'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/pop.mp3'\\r\\n\\turlMap['URL_CYBER'] = 'https://raw.githubusercontent.com/frogbean/Bitburner-Sounds/main/sounds/cyberroom.mp3'\\r\\n\\r\\n    globalThis.BitburnerSounds ??= ({disabled : false, gainNodes : {}, cache : {}, isTyping : 0, typewriteTimeout : 0}) \\r\\n    \\r\\n    BitburnerSounds.urlMap = urlMap\\r\\n    \\r\\n    if(BitburnerSounds?.AudioContext?.state != undefined) {\\r\\n        let isOn = BitburnerSounds.AudioContext.state == 'running'\\r\\n        BitburnerSounds.isOn = !isOn\\r\\n        BitburnerSounds.AudioContext[(isOn?'suspend':'resume')]()\\r\\n        return ns.tprint(`${isOn?'WARN:':'INFO'} Bitburner-Sounds ${isOn ? 'paused' : 'resumed'}`)\\r\\n    }\\r\\n    \\r\\n    ns.tprint('INFO: INITIALIZING SOUNDS')\\r\\n\\r\\n    BitburnerSounds.newAudioContext = () => new (globalThis.AudioContext ?? globalThis.webkitAudioContext)() \\r\\n\\r\\n    BitburnerSounds.isOn = true\\r\\n\\r\\n    BitburnerSounds.AudioContext = BitburnerSounds.newAudioContext()\\r\\n    BitburnerSounds.masterGain = BitburnerSounds.AudioContext.createGain()\\r\\n    BitburnerSounds.masterGain.gain.value = 1\\r\\n    BitburnerSounds.masterGain['connect'](BitburnerSounds.AudioContext.destination)\\r\\n\\r\\n    BitburnerSounds.play = async (url, gain = 1) => {\\r\\n        gain *= masterGain\\r\\n        if(!BitburnerSounds.isOn) return\\r\\n        if(BitburnerSounds.cache[url] === undefined) {\\r\\n            let response = await fetch(url)\\r\\n            let dataArray = await response.arrayBuffer()\\r\\n            let buffer = await BitburnerSounds.AudioContext.decodeAudioData(dataArray)\\r\\n            BitburnerSounds.gainNodes[url] = BitburnerSounds.AudioContext.createGain()\\r\\n            BitburnerSounds.gainNodes[url].gain.value = gain\\r\\n            BitburnerSounds.gainNodes[url]['connect'](BitburnerSounds.masterGain)\\r\\n            BitburnerSounds.cache[url] = buffer\\r\\n        }\\r\\n        let bufferSource = BitburnerSounds.AudioContext.createBufferSource()\\r\\n        bufferSource.buffer = BitburnerSounds.cache[url]\\r\\n        bufferSource['connect'](BitburnerSounds.gainNodes[url])\\r\\n        bufferSource.start(0)\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.loop = async(url, gain = 1) => {\\r\\n        gain *= masterGain\\r\\n        if(BitburnerSounds.gainNodes[url]) {\\r\\n            let isSilent = gainNodes[url].gain.value == 0\\r\\n            gainNodes[url].gain.value = isSilent ? gain : 0\\r\\n            return\\r\\n        }\\r\\n\\r\\n        BitburnerSounds.gainNodes[url] = BitburnerSounds.AudioContext.createGain()\\r\\n        BitburnerSounds.gainNodes[url].gain.value = gain\\r\\n        BitburnerSounds.gainNodes[url]['connect'](BitburnerSounds.masterGain)\\r\\n        let bufferSource = BitburnerSounds.AudioContext.createBufferSource()\\r\\n        let response = await fetch(url)\\r\\n        let dataArray = await response.arrayBuffer()\\r\\n        let buffer = await BitburnerSounds.AudioContext.decodeAudioData(dataArray)\\r\\n        bufferSource.buffer = buffer\\r\\n        bufferSource.loop = true\\r\\n        bufferSource['connect'](BitburnerSounds.gainNodes[url])\\r\\n        bufferSource.start(0)\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.terminalType = () => {\\r\\n        clearTimeout(BitburnerSounds.typewriteTimeout)\\r\\n        BitburnerSounds.gainNodes[BitburnerSounds.urlMap.URL_TYPING].gain.value = 1 * terminalTyperWriterGain\\r\\n        setTimeout(BitburnerSounds.terminalStopped, 100)\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.bind2elements = (selector, sound, gain = 1) => {\\r\\n        for (const button of globalThis['document'].querySelectorAll(selector)) {\\r\\n            if(button === undefined) continue\\r\\n            if(button?.hasSound) continue\\r\\n            button.addEventListener('click', ()=>{\\r\\n                BitburnerSounds.play(sound, gain)\\r\\n            })\\r\\n            button.hasSound = true\\r\\n        }\\r\\n    }\\r\\n\\r\\n    BitburnerSounds.terminalStopped = () => {\\r\\n        BitburnerSounds.gainNodes[BitburnerSounds.urlMap.URL_TYPING].gain.value = 0\\r\\n    }\\r\\n    \\r\\n    BitburnerSounds.bindEnforcer = () => {\\r\\n\\r\\n        BitburnerSounds.bind2elements('.MuiTouchRipple-root', BitburnerSounds.urlMap.URL_SWIPE, 0.3)\\r\\n        BitburnerSounds.bind2elements('.MuiListItem-button' , BitburnerSounds.urlMap.URL_LONGCLICK, 0.2)\\r\\n        BitburnerSounds.bind2elements('.MuiButton-sizeMedium', BitburnerSounds.urlMap.URL_CLICK, 2)\\r\\n        BitburnerSounds.bind2elements('div[role=button]', BitburnerSounds.urlMap.URL_POP, 0.1)\\r\\n        BitburnerSounds.bind2elements('button', BitburnerSounds.urlMap.URL_POP, 0.1)\\r\\n        BitburnerSounds.bind2elements('span[aria-label]', BitburnerSounds.urlMap.URL_SWIPE, 0.3)\\r\\n        \\r\\n        let terminal = globalThis['document'].getElementById('terminal-input')\\r\\n        if(!terminal) return\\r\\n        if(terminal?.hasSounds) return\\r\\n        terminal.addEventListener('input', BitburnerSounds.terminalType)\\r\\n        terminal.hasSounds = true\\r\\n    }\\r\\n\\r\\n    setInterval(BitburnerSounds.bindEnforcer, 100)\\r\\n    await BitburnerSounds.play(BitburnerSounds.urlMap.URL_DIALUP, 0.5)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_CYBER, 0.5)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SERVER_RACK, 0.7 * serverRackFansGain)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SERVER_FANS, 0.25 * serverRackFansGain)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_TYPING, 0)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SERVER_AIR, 0.3 * serverRackFansGain)\\r\\n    await BitburnerSounds.loop(BitburnerSounds.urlMap.URL_SONG, musicGain)\\r\\n\\t\\r\\n\\r\\n    setInterval(()=>{BitburnerSounds.play(BitburnerSounds.urlMap.URL_DIALUP, 0.5 * dialUpTonesGain)}, 1000*60*3)\\r\\n\\t\\r\\n  \\r\\n\\r\\n    ns.tprint('INFO: Bitburner-Sounds enabled')\\r\\n\\r\\n\\r\\n    BitburnerSounds.gainSlide = 1\\r\\n    if(fadeOutOnUnFocus) setInterval(()=>{\\r\\n        \\r\\n        let focus = globalThis['document'].hasFocus() \\r\\n        BitburnerSounds.gainSlide += focus ? .1 : -fadeOutSpeed\\r\\n        if(BitburnerSounds.gainSlide >= 1) BitburnerSounds.gainSlide = 1\\r\\n        if(BitburnerSounds.gainSlide <= .01) BitburnerSounds.gainSlide = .01\\r\\n        BitburnerSounds.masterGain.gain.value = BitburnerSounds.gainSlide\\r\\n        BitburnerSounds.gainNodes[BitburnerSounds.urlMap.URL_SONG].gain.value = BitburnerSounds.gainSlide * musicGain\\r\\n    }, 50)\\r\\n}\\r\\n\\r\\nexport const sound = {timeout : 0}\\r\\n\\r\\nsound.speak = (string) => { \\r\\n    let utterance = new SpeechSynthesisUtterance(string)\\r\\n    utterance.pitch = 0\\r\\n    speechSynthesis.speak(utterance)\\r\\n    return sound\\r\\n}\\r\\nsound.bell = () => { sound.makeSound(\\\"https://freesound.org/data/previews/299/299147_2050105-lq.mp3\\\"); return sound }\\r\\nsound.click = () => { sound.makeSound('https://cdn.freesound.org/previews/243/243772_3255970-lq.mp3'); return sound }\\r\\n\\r\\nsound.makeSound = async (soundUrl, loop = false) => { \\r\\n    globalThis.audioCache ??= {}\\r\\n    globalThis.gAudioCtx ??= BitburnerSounds.newAudioContext()\\r\\n\\r\\n    clearTimeout(sound.timeout)\\r\\n    sound.timeout = setTimeout(()=> {\\r\\n        gAudioCtx = BitburnerSounds.newAudioContext()\\r\\n    }, 1000) //refresh audio context to reduce potential jitter after lots of buffers\\r\\n\\r\\n    let bufferSource = gAudioCtx.createBufferSource()\\r\\n    if(!audioCache[soundUrl]) {\\r\\n        let response = await fetch(soundUrl)\\r\\n        let dataArray = await response.arrayBuffer()\\r\\n        let buffer = await gAudioCtx.decodeAudioData(dataArray)\\r\\n        audioCache[soundUrl] = buffer\\r\\n    }\\r\\n    bufferSource.buffer = audioCache[soundUrl]\\r\\n    bufferSource.loop = loop\\r\\n    bufferSource['connect'](gAudioCtx.destination)\\r\\n    bufferSource.start(0)\\r\\n} \\r\\n\\r\\nsound.beep = ({freq = 800, type = 'sine', duration = 50, gain = 0.5} = {}) => {\\r\\n    console.log(freq)\\r\\n    if(!isFinite(freq)) return console.error('none finite freq')\\r\\n    freq = Math.round(freq)\\r\\n    globalThis.beepChannels ??= {}\\r\\n    globalThis.beepContext ??= new (globalThis.AudioContext ?? globalThis.webkitAudioContext)\\r\\n    if(!beepChannels[[freq, type]]) {\\r\\n        let oscillator = beepContext.createOscillator()\\r\\n        let gainNode = beepContext.createGain()\\r\\n        gainNode['connect'](beepContext.destination)\\r\\n        oscillator.type = type\\r\\n        oscillator.frequency.value = freq\\r\\n        oscillator['connect'](gainNode)\\r\\n        gainNode.gain.value = 0\\r\\n        oscillator.start(0)\\r\\n        beepChannels[[freq, type]] = gainNode\\r\\n    }\\r\\n    beepChannels[[freq, type]].gain.value = 0\\r\\n    setTimeout(()=>{\\r\\n        beepChannels[[freq, type]].gain.value = gain\\r\\n    }, duration>=100?50:0)\\r\\n    clearTimeout(beepChannels[[freq, type]].timeout)\\r\\n    beepChannels[[freq, type]].timeout = setTimeout(()=>{\\r\\n        beepChannels[[freq, type]].gain.value = 0\\r\\n    }, duration)\\r\\n\\r\\n    return sound\\r\\n}\",\"filename\":\"Bitburner-Sounds.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"Bitburner-Sounds.js\",\"url\":\"blob:file:///e7772ee8-db21-4968-871f-9132f6744955\",\"moduleSequenceNumber\":1255}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://pegasus.pimpninjas.org/code/javascript/bitburner/second-terminal.js\\n// for BitBurner - https://danielyxie.github.io/bitburner/\\n// by \\\"The Almighty Pegasus Epsilon\\\" <pegasus@pimpninjas.org>\\n// version 2.3 (C)opyright March 13 2022\\n// Distribute Unmodifed - https://pegasus.pimpninjas.org/license\\n/** @param {NS} ns **/\\nexport async function main (ns) {\\n\\tawait terminal(ns, ns.getScriptName(), e => {\\n\\t\\tns.print(e.target.value);\\n\\t\\te.target.value = \\\"\\\";\\n\\t});\\n}\\nexport async function terminal (ns, scriptName, handler) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tconst style = globalThis.getComputedStyle(document\\n\\t\\t.querySelector(\\\".MuiTypography-root\\\"));\\n\\tlet input = document.createElement(\\\"input\\\");\\n\\tinput.style.boxSizing = \\\"border-box\\\";\\n\\tinput.style.position = \\\"relative\\\";\\n\\tinput.style[\\\"width\\\"] = \\\"100%\\\";\\n\\tinput.style.outline = \\\"none\\\";\\n\\tinput.style.padding = \\\"2px\\\";\\n\\tinput.style.fontFamily = style.fontFamily;\\n\\tinput.style.fontSize = style.fontSize;\\n\\tinput.style.color = style.color;\\n\\tinput.style.background = style.backgroundColor;\\n\\tinput.style.borderTop = \\\"1px solid \\\" + style.color;\\n\\tinput.onkeydown = e => {\\n\\t\\te.cancelBubble = true;\\n\\t\\tif (\\\"Enter\\\" != e.code && \\\"NumpadEnter\\\" != e.code) return true;\\n\\t\\thandler(e);\\n\\t};\\n\\tns.clearLog();\\n\\tns.tail();\\n\\tfunction addInputBox () {\\n\\t\\tlet log = document.querySelector(\\\"h6[title=\\\\\\\"\\\"\\n\\t\\t\\t+ scriptName + \\\" \\\" + ns.args.join(\\\" \\\") + \\\"\\\\\\\"]\\\");\\n\\t\\tif (!log) return;\\n\\t\\tlog = log.parentNode.parentNode;\\n\\t\\tlet old_input = log.querySelector(\\\"input\\\");\\n\\t\\tif (old_input) {\\n\\t\\t\\told_input.onkeydown = input.onkeydown;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\ttry { log.appendChild(input); }\\n\\t\\tcatch (e) { console.log(e); }\\n\\t}\\n\\tfor (;;) {\\n\\t\\taddInputBox();\\n\\t\\tawait ns.asleep(1000);\\n\\t}\\n}\",\"filename\":\"sTerm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"sTerm.js\",\"url\":\"blob:file:///c5098c56-d06a-48c2-9f07-e4bdc41ef1ae\",\"moduleSequenceNumber\":30308}],\"dependents\":[],\"ramUsage\":26.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let css=`body{--prilt:#fd0;--pri:#fd0;--pridk:#fd0;--successlt:#ce5;--success:#ce5;--successdk:#ce5;--errlt:#c04;--err:#c04;--errdk:#c04;--seclt:#28c;--sec:#28c;--secdk:#28c;--warnlt:#f70;--warn:#f70;--warndk:#f70;--infolt:#3ef;--info:#3ef;--infodk:#3ef;--welllt:#146;--well:#222;--white:#fff;--black:#000;--hp:#c04;--money:#fc7;--hack:#ce5;--combat:#f70;--cha:#b8f;--int:#3ef;--rep:#b8f;--disabled:#888;--bgpri:#000;--bgsec:#111;--button:#146;--ff:\\\"Lucida Console\\\";overflow:hidden;display:flex}#root{flex:1 1 calc(100vw - 248px);overflow:scroll}.sb{font:12px var(--ff);color:var(--pri);background:var(--bgsec);overflow:hidden scroll;width:247px;min-height:100%;border-left:1px solid var(--welllt)}.sb *{vertical-align:middle;margin:0;font:inherit}.sb.c{width:45px}.sb.t, .sb.t>div{transition:height 200ms, width 200ms, color 200ms}.sbitem,.box{overflow:hidden;min-height:28px;max-height:90%}.sbitem{border-top:1px solid var(--welllt);resize:vertical;width:unset !important}.sbitem.c{color:var(--sec)}.box{position:fixed;width:min-content;min-width:min-content;resize:both;background:var(--bgsec)}.box.c{height:unset !important;width:unset !important;background:none}.head{display:flex;white-space:pre;font-weight:bold;user-select:none;height:28px;align-items:center}:is(.sb,.sbitem)>.head{direction:rtl;cursor:pointer;padding:3px 0px}.box>.head{background:var(--pri);color:var(--bgpri);padding:0px 3px;cursor:move}.body{font-size:12px;flex-direction:column;height:calc(100% - 31px)}.flex,:not(.noflex)>.body{display:flex}.flex>*,.body>*{flex:1 1 auto}.box>.body{border:1px solid var(--welllt)}.sb .title{margin:0 auto;font-size:14px;line-height:}.sbitem .close{display:none}.c:not(.sb),.c>.sbitem{height:28px !important;resize:none}.box.c>.body{display:none}.box.prompt{box-shadow:0 0 0 10000px #0007;min-width:400px}.box.prompt>.head>.icon{display:none}.sb .contextMenu{opacity:0.95;resize:none;background:var(--bgpri)}.sb .contextMenu .head{display:none}.sb .contextMenu .body{height:unset;border-radius:5px}.sb .icon{cursor:pointer;font:25px \\\"codicon\\\";line-height:0.9;display:flex;align-items:center}.sb .icon span{display:inline-block;font:25px -ff;width:25px;text-align:center}.sb .icon svg{height:21px;width:21px;margin:2px}:is(.sb,.sbitem)>.head>.icon{padding:0px 10px}.c>.head>.collapser{transform:rotate(180deg)}.sb :is(input,select,button,textarea){color:var(--pri);outline:none;border:none;white-space:pre}.sb :is(textarea,.log){white-space:pre-wrap;background:none;padding:0px;overflow-y:scroll}.sb :is(input,select){padding:3px;background:var(--well);border-bottom:1px solid var(--prilt);transition:border-bottom 250ms}.sb input:hover{border-bottom:1px solid var(--black)}.sb input:focus{border-bottom:1px solid var(--prilt)}.sb :is(button,input[type=checkbox]){background:var(--button);transition:background 250ms;border:1px solid var(--well)}.sb :is(button,input[type=checkbox]):hover{background:var(--bgsec)}.sb :is(button,input[type=checkbox]):focus, .sb select{border:1px solid var(--sec)}.sb button{padding:3px 6px;user-select:none}.sb .ts{color:var(--infolt)}.sb input[type=checkbox]{appearance:none;display:inline-flex;align-items:center;justify-content:center;width:22px;height:22px}.sb input[type=checkbox]:checked::after{font:22px codicon;content:\\\"\\\"}.g2{display:grid;grid:auto-flow auto / auto auto;gap:6px;margin:5px;place-items:center}.g2>.l{justify-self:start}.g2>.r{justify-self:end}.g2>.f{grid-column:1 / span 2;text-align:center}.hidden, .tooltip{display:none}*:hover>.tooltip{display:block;position:absolute;left:-5px;bottom:calc(100% + 5px);border:1px solid var(--welllt);background:var(--bgsec);color:var(--pri);font:14px var(--ff);padding:5px;white-space:pre}.nogrow{flex:0 1 auto !important}`;\\nexport let win=globalThis, doc=win[\\\"document\\\"], sidebar=doc.querySelector(\\\".sb\\\"),\\n  ts=()=>`[<span class=ts>${new Date().toLocaleTimeString(\\\"en-gb\\\")}</span>]`,\\n  slp=ms=>new Promise(r=>setTimeout(r,ms)),\\n  elemFromHTML=html=>new Range().createContextualFragment(html).firstElementChild;\\nif (!sidebar){\\n  sidebar=doc.body.appendChild(elemFromHTML(`<div class=\\\"sb\\\"><style>${css}</style><div class=\\\"head\\\"><a class=\\\"icon collapser\\\">\\\\ueab6</a><span class=title>box.sidebar v1.1</span></div>`));\\n  sidebar.addEventListener('keydown',e=>e.stopPropagation());\\n  sidebar.querySelector('.head').addEventListener('click',()=>{\\n    transition(()=>sidebar.classList.toggle('c'));\\n    setTimeout(()=>doc.querySelector(\\\".monaco-editor\\\")&&Object.assign(doc.querySelector(\\\".monaco-editor\\\").style,{width:\\\"0px\\\"}),255);\\n  });\\n  win._boxEdgeDetect=()=>doc.querySelectorAll('.sb .box').forEach(box=>Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth,box.offsetLeft),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight,box.offsetTop),0)+\\\"px\\\"}));\\n  win.addEventListener(\\\"resize\\\",win._boxEdgeDetect);\\n}\\nlet createItem=(title, content, icon, ...classes)=>{\\n  let item=sidebar.appendChild(elemFromHTML(`<div class=\\\"${classes.join(\\\" \\\")}\\\"><div class=\\\"head\\\"><a class=\\\"icon\\\">${icon}</a><span class=title>${title}</span><a class=\\\"icon collapser\\\">\\\\ueab7</a><a class=\\\"icon close\\\">\\\\ueab8</a></div><div class=\\\"body\\\">${content}</div></div>`));\\n  Object.assign(item,{\\n    head:item.querySelector(\\\".head\\\"),\\n    body:item.querySelector(\\\".body\\\"),\\n    toggleType:()=>[\\\"box\\\",\\\"sbitem\\\"].forEach(cl=>item.classList.toggle(cl)),\\n    logTarget:item.querySelector(\\\".log\\\"),\\n    log:(html, timestamp=true)=>{\\n      if (!item.logTarget || !doc.contains(item.logTarget)) item.logTarget=item.body.appendChild(elemFromHTML(\\\"<div class=log></div>\\\"));\\n      let logEntry=item.logTarget.appendChild(elemFromHTML(`<p>${timestamp?ts():\\\"\\\"} ${html}</p>`));\\n      item.logTarget.scrollTop=item.logTarget.scrollHeight;\\n      return logEntry;\\n    },\\n    recalcHeight:()=>{item.style.height=\\\"\\\";item.style.height=item.offsetHeight+\\\"px\\\"},\\n    contextItems:{},\\n    addContextItem:(name,fn,cFn=()=>1)=>item.contextItems[name]={fn:fn,cFn:cFn},\\n  });\\n\\n  [[\\\"Remove Item\\\",()=>item[\\\"remove\\\"]()],\\n  [\\\"Cancel\\\",()=>0],\\n  [\\\"Float to Top\\\",()=>sidebar.querySelector(\\\".head\\\").insertAdjacentElement(\\\"afterEnd\\\",item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Sink to Bottom\\\",()=>sidebar.appendChild(item),()=>item.classList.contains(\\\"sbitem\\\")],\\n  [\\\"Toggle Type\\\",()=>item.toggleType()],\\n  [\\\"Recalculate Height\\\",item.recalcHeight]].forEach(args=>item.addContextItem(...args));\\n    \\n  item.addEventListener('mousedown',e=>item.classList.contains(\\\"box\\\")&&Object.assign(item.style,{zIndex:zIndex()}));\\n  item.head.addEventListener('mousedown',e=>{\\n    if(item.classList.contains(\\\"sbitem\\\")) return e.button||transition(()=>item.classList.toggle(\\\"c\\\"));\\n    if (e.target.tagName===\\\"A\\\") return;\\n    let x=e.clientX,y=e.clientY,l=item.offsetLeft,t=item.offsetTop;\\n    let boxDrag=e=>Object.assign(item.style,{left:Math.max(Math.min(win.innerWidth-item.offsetWidth,l+e.clientX-x),0)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-item.offsetHeight,t+e.clientY-y),0)+\\\"px\\\"});\\n    let boxDragEnd=e=>doc.removeEventListener('mouseup',boxDragEnd)||doc.removeEventListener('mousemove',boxDrag);\\n    doc.addEventListener('mouseup',boxDragEnd)||doc.addEventListener('mousemove',boxDrag);\\n  });\\n  item.head.querySelector(\\\".close\\\").addEventListener('click',e=>item[\\\"remove\\\"]());\\n  item.head.querySelector(\\\".collapser\\\").addEventListener('click',e=>item.classList.contains(\\\"box\\\")&&transition(()=>item.classList.toggle(\\\"c\\\")||win._boxEdgeDetect()));\\n  item.head.addEventListener(\\\"contextmenu\\\",e=>e.preventDefault()||contextMenu(item,e.clientX,e.clientY));\\n  Object.assign(item.style,{left:Math.floor(win.innerWidth/2-item.offsetWidth/2)+\\\"px\\\",top:Math.floor(win.innerHeight/2-item.offsetHeight/2)+\\\"px\\\",height:(item.offsetHeight||200)+\\\"px\\\",width:(item.offsetWidth||200)+\\\"px\\\",zIndex:zIndex()});\\n  return item;\\n};\\nexport let createBox=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"box\\\");\\nexport let createSidebarItem=(title, content, icon=\\\"\\\\uea74\\\", ...classes)=>createItem(title, content, icon, ...classes, \\\"sbitem\\\");\\nexport let confirm=text=>{\\n  let box=createBox(\\\"Confirmation Prompt\\\",`<div class=g2><div class=f>${text}</div><button class=r><u>Y</u>es</button><button class=l><u>N</u>o</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  box.addEventListener('keyup',e=>(e.key.toLowerCase()===\\\"y\\\"&&box.querySelector(\\\"button\\\").click())||(e.key.toLowerCase()===\\\"n\\\"&&box.querySelectorAll(\\\"button\\\")[1].click()));\\n  return new Promise(r=>box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',()=>box[\\\"remove\\\"](r(i==0)))));\\n};\\nexport let prompt=text=>{\\n  let box=createBox(\\\"Input Prompt\\\",`<div class=g2><div class=f>${text}</div><input class=r /><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"input\\\").focus();\\n  box.querySelector(\\\"input\\\").addEventListener('keyup',e=>e.key=='Enter'&&box.querySelector(\\\"button\\\").click());\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"input\\\").value))));\\n};\\nexport let select=(text,options)=>{\\n  let box=createBox(\\\"Selection Prompt\\\",`<div class=g2><div class=f>${text}</div><select class=r>${options.map(option=>`<option value=\\\"${option}\\\">${option}</option>`).join(\\\"\\\")}</select><button class=l>Submit</button></div>`,\\\"\\\",\\\"prompt\\\");\\n  box.querySelector(\\\"select\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>box[\\\"remove\\\"](r(box.querySelector(\\\"select\\\").value))));\\n};\\nexport let alert=text=>{\\n  let box=createBox(\\\"Alert Message\\\",`<div class=g2><div class=f>${text}</div><button class=f>Ok</button></div>`,\\\"\\\", \\\"prompt\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  return new Promise(r=>box.querySelector(\\\"button\\\").addEventListener('click',()=>r(box[\\\"remove\\\"]())));\\n};\\nlet contextMenu=(item,x,y)=>{\\n  if (item.classList.contains(\\\"prompt\\\")) return;\\n  let options = Object.entries(item.contextItems).filter(([name,entry])=>entry.cFn());\\n  let box=createBox(\\\"\\\",`<div class=g2><div class=f>${item.querySelector(\\\".title\\\").innerText}.context</div>${options.map(([name,entry])=>`<button class=n>${name}</button>`).join(\\\"\\\")}</div>`,\\\"\\\", \\\"contextMenu\\\");\\n  box.querySelector(\\\"button\\\").focus();\\n  Object.assign(box.style,{left:Math.max(Math.min(win.innerWidth-box.offsetWidth/2,x),box.offsetWidth/2)+\\\"px\\\",top:Math.max(Math.min(win.innerHeight-box.offsetHeight/2,y),box.offsetHeight/2)+\\\"px\\\",transform:\\\"translate(-50%, -50%)\\\"});\\n  box.querySelectorAll(\\\"button\\\").forEach(button=>button.addEventListener(\\\"click\\\",()=>box[\\\"remove\\\"](item.contextItems[button.innerText].fn())));\\n  box.addEventListener(\\\"mousedown\\\",e=>e.stopPropagation());\\n  let docFunction=()=>box[\\\"remove\\\"](doc.removeEventListener(\\\"mousedown\\\",docFunction));\\n  setTimeout(()=>doc.addEventListener(\\\"mousedown\\\",docFunction),10);\\n};\\nlet transition=fn=>{\\n  sidebar.classList.add(\\\"t\\\");\\n  fn();\\n  setTimeout(()=>sidebar.classList[\\\"remove\\\"](\\\"t\\\"),200);\\n}\\nlet zIndex=()=>Math.max(9000,...[...doc.querySelectorAll(\\\".sb .box\\\")].map(box=>box.style.zIndex))+1;\\n\",\"filename\":\"/box/box.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/box/box.js\",\"url\":\"blob:file:///ffa64d9a-d6a1-4b8c-927d-94ef649fe977\",\"moduleSequenceNumber\":36761}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {createBox,doc,sidebar,slp} from \\\"/box/box.js\\\"\\nexport let main=async ns=>{\\n  let shorthand={pri:\\\"primary\\\",sec:\\\"secondary\\\",bg:\\\"background\\\",err:\\\"error\\\",warn:\\\"warning\\\",lt:\\\"light\\\",dk:\\\"dark\\\"}\\n  let convert=(str,k,v=k?0:1)=>{\\n    for (let entry of Object.entries(shorthand)) str=str.replaceAll(entry[k],entry[v]);\\n    return str;\\n  }\\n  let box=createBox('styler', `<div class=\\\"flex nogrow\\\"><button>Hard Load</button><button>Soft Load</button><button>Hard Save</button><button>Soft Save</button></div><textarea spellcheck=false></textarea><div class=\\\"flex nogrow\\\"><button>Theme Load</button><button>Theme Save</button><button>Minify</button><button>Beautify</button></div>`,\\\"\\\\ueb5c\\\"),\\n    pageCSS=sidebar.querySelector('style'),\\n    textArea=box.querySelector('textarea'),\\n    minify=css=>css.replace(/(?<=[{:;}])\\\\s+/g, \\\"\\\").replace(/\\\\s+(?={)|;(?=})/g, \\\"\\\"),\\n    beautify=css=>css.replace(/(?<=[{;}])|(?=})/g, \\\"\\\\n  \\\").replace(/\\\\n  }\\\\s+/g, \\\";\\\\n}\\\\n\\\").trim();\\n  box.style.height=\\\"400px\\\";\\n  let fn={\\n    \\\"Hard Load\\\":()=>textArea.value = beautify(/(?<=let css=`)[\\\\s\\\\S]*?(?=`)/.exec(ns.read(\\\"/box/box.js\\\"))[0]),\\n    \\\"Soft Load\\\":()=>textArea.value = beautify(pageCSS.innerHTML),\\n    \\\"Hard Save\\\":()=>ns.write(\\\"/box/box.js\\\", ns.read(\\\"/box/box.js\\\").replace(/(?<=let css=`)[\\\\s\\\\S]*?(?=`)/, minify(textArea.value)), \\\"w\\\"),\\n    \\\"Soft Save\\\":()=>pageCSS.innerHTML = minify(textArea.value),\\n    \\\"Theme Load\\\":()=>textArea.value = beautify(minify(textArea.value).replace(/(?<=body{).*?(?=;overflow)/,Object.entries(ns.ui.getTheme()).map(([k,v])=>`--${convert(k,1)}:${v};`).join(\\\"\\\")+`--ff:\\\"${ns.ui.getStyles().fontFamily.replace(/,.*/,\\\"\\\")}\\\"`)),\\n    \\\"Theme Save\\\":()=>ns.ui.setTheme((JSON.parse(convert((`{\\\"`+minify(textArea.value).match(/(?<=body{).*?(?=;--ff)/)[0]+`\\\"}`).replace(/;/g,'\\\",\\\"').replace(/--/g,\\\"\\\").replace(/:/g,'\\\":\\\"'),0)))),\\n    \\\"Minify\\\":()=>textArea.value = minify(textArea.value),\\n    \\\"Beautify\\\":()=>textArea.value = beautify(minify(textArea.value))\\n  }\\n  box.querySelectorAll(\\\"button\\\").forEach((button,i)=>button.addEventListener('click',fn[button.innerText]));\\n  fn[\\\"Soft Load\\\"]();\\n  while (doc.body.contains(box)) await slp(1000);  \\n}\\n\",\"filename\":\"/box/styler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @type { { terminalInputId: string, siblingBtnSelector: string, terminalBtnSelector: string, siblingButtonLabel: string, fileExplorerBtnId: string, hiddenClass: string, myCustomWindowId: string, windowFocusedClass: string} } */\\r\\nexport const DOM_CONSTANTS = {\\r\\n\\tterminalInputId: 'terminal-input',\\r\\n\\tsiblingBtnSelector: '.MuiList-root .MuiButtonBase-root',\\r\\n\\tterminalBtnSelector: '.MuiList-root .MuiList-root .MuiButtonBase-root',\\r\\n\\tsiblingButtonLabel: 'Active Scripts',\\r\\n\\thiddenClass: 'block-but-hidden',\\r\\n\\tmyCustomWindowId: 'custom-window',\\r\\n\\twindowFocusedClass: 'window--focused'\\r\\n};\\r\\n\\r\\n\\r\\nexport const GENERAL_CSS = `\\r\\n.btn {\\r\\n\\tbackground-color: #d6cec8;\\r\\n\\tborder: none;\\r\\n\\tbox-shadow: inset -1px -1px #404040,inset 1px 1px #fff,inset -2px -2px gray,inset 2px 2px #eceae7;\\r\\n\\tfont-size: 13px;\\r\\n\\theight: 26px;\\r\\n\\tpadding: 4px 6px;\\r\\n\\ttext-decoration: none;\\r\\n\\tvertical-align: middle;\\r\\n}\\r\\n\\r\\n.btn:active {\\r\\n\\tbox-shadow: inset -1px -1px #fff,inset 1px 1px #404040,inset -2px -2px #eceae7,inset 2px 2px gray;\\r\\n\\tpadding: 5px 5px 3px 7px;\\r\\n}\\r\\n\\r\\n.btn--small {\\r\\n\\tfont-size: 10px;\\r\\n\\theight: 18px;\\r\\n\\tmin-width: 18px;\\r\\n}\\r\\n\\r\\n.btn--small, .btn--small:active {\\r\\n\\tpadding: 3px;\\r\\n}\\r\\n\\r\\n.btn > * {\\r\\n\\tpointer-events: none;\\r\\n}\\r\\n\\r\\n.block-but-hidden {\\r\\n\\tdisplay: block !important;\\r\\n\\tvisibility: hidden !important;\\r\\n}\\r\\n\\r\\n.whiteScrollbar::-webkit-scrollbar {\\r\\n\\tdisplay: unset;\\r\\n\\tbackground-color: #DFDFDF;\\r\\n}\\r\\n.greenScrollbar::-webkit-scrollbar {\\r\\n\\tdisplay: unset;\\r\\n\\tbackground-color: #4d5d4e;\\r\\n}\\r\\n.whiteScrollbar::-webkit-scrollbar-thumb {\\r\\n\\t-webkit-border-radius: 10px;\\r\\n\\tbackground: rgb(150 150 150);\\r\\n\\t-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);\\r\\n}\\r\\n.greenScrollbar::-webkit-scrollbar-thumb {\\r\\n\\t-webkit-border-radius: 10px;\\r\\n\\tbackground: rgb(7 156 7);\\r\\n\\t-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);\\r\\n}\\r\\n`;\\r\\n\\r\\nexport const WINDOW_WIDGET_CSS = `\\r\\n.window-container {\\r\\n\\ttop: 0;\\r\\n\\tleft: 0;\\r\\n\\tpointer-events: none;\\r\\n\\tposition: fixed;\\r\\n\\twidth: 100%;\\r\\n\\tz-index: 9999;\\r\\n}\\r\\n\\r\\n.window-container * {\\r\\n\\tbox-sizing: border-box;\\r\\n}\\r\\n\\r\\n.window {\\r\\n\\tbox-shadow: inset -1px -1px #404040,inset 1px 1px #eceae7,inset -2px -2px gray,inset 2px 2px #fff;\\r\\n\\tfont-family: Tahoma, \\\"Segoe UI\\\", Geneva, sans-serif;\\r\\n\\tpadding: 2px;\\r\\n\\tpointer-events: auto;\\r\\n\\tbackground-color: white;\\r\\n\\tuser-select: none;\\r\\n\\toverflow: auto;\\r\\n\\twidth: 30vw;\\r\\n\\tmin-height: 220px;\\r\\n\\tmin-width: 220px;\\r\\n\\tmax-height: 95vh;\\r\\n\\tmax-width: 95vw;\\r\\n\\tresize: both;\\r\\n\\talign-items: flex-start;\\r\\n\\tdisplay: inline-flex;\\r\\n\\tflex-direction: column;\\r\\n}\\r\\n\\r\\n\\r\\n.window__toolbar {\\r\\n\\tbackground: gray;\\r\\n\\tborder: 1px solid #D4D0C8;\\r\\n\\tdisplay: flex;\\r\\n\\tpadding: 3px 3px 3px 8px;\\r\\n\\twidth: 100%;\\r\\n}\\r\\n\\r\\n.window__icon {\\r\\n\\talign-self: center;\\r\\n\\tmax-height: 16px;\\r\\n\\tmargin-right: 6px;\\r\\n\\tobject-fit: contain;\\r\\n\\twidth: 16px;\\r\\n}\\r\\n\\r\\n.window__menu{\\r\\n\\twidth: 100%;\\r\\n\\tbackground: rgb(212, 208, 200);\\r\\n\\tcolor: #333;\\r\\n\\tpadding-left: 5px;\\r\\n\\tpadding-bottom: 3px;\\r\\n}\\r\\n.window__menu span{\\r\\n\\tpadding: 0 1px;\\r\\n\\tmargin-right: 12px;\\r\\n\\tfont-size: 15px;\\r\\n\\tborder: 1px inset transparent;\\r\\n\\tcursor: pointer;\\r\\n\\toverflow: hidden;\\r\\n}\\r\\n.window__menu span:hover{\\r\\n\\tborder: 1px inset #bdbdbd;\\r\\n}\\r\\n\\r\\n.window__title {\\r\\n\\talign-self: center;\\r\\n\\tflex: 0 1 100%;\\r\\n\\tfont-size: 13px;\\r\\n\\tfont-weight: bold;\\r\\n\\tline-height: 20px;\\r\\n\\tmargin: 0 20px 0 0;\\r\\n\\toverflow: hidden;\\r\\n\\ttext-overflow: ellipsis;\\r\\n\\twhite-space: nowrap;\\r\\n}\\r\\n\\r\\n.window--focused .window__toolbar {\\r\\n\\tbackground: linear-gradient(to right,#0A246A 0%,#A6CAF0 100%);\\r\\n\\tcolor: #fff;\\r\\n}\\r\\n\\r\\n.window__cta-group {\\r\\n\\talign-items: center;\\r\\n\\tdisplay: flex;\\r\\n\\tflex: 1 0 auto;\\r\\n\\tmargin-left: auto;\\r\\n}\\r\\n\\r\\n.window__cta-group > * {\\r\\n\\tbackground-position: 50% 50%;\\r\\n\\tbackground-size: 14px auto;\\r\\n}\\r\\n\\r\\n.window__cta-close {\\r\\n\\tbackground-image:  url('data:image/svg+xml;base64,PCFET0NUWVBFIGh0bWw+DQo8aHRtbCB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+PGhlYWQ+PG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCIgLz48dGl0bGU+aHR0cHM6Ly93aWdnbHliZWVzLmNvbS9hc3NldHMvY2xvc2UuMmJiZGU5ZDguc3ZnPC90aXRsZT48bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJyZXNvdXJjZTovL2NvbnRlbnQtYWNjZXNzaWJsZS92aWV3c291cmNlLmNzcyIgLz48L2hlYWQ+PGJvZHkgaWQ9InZpZXdzb3VyY2UiIGNsYXNzPSJ3cmFwIGhpZ2hsaWdodCIgc3R5bGU9InRhYi1zaXplOiA0Ij48cHJlIGlkPSJsaW5lMSI+PHNwYW4+PC9zcGFuPjxzcGFuPiZsdDs8c3BhbiBjbGFzcz0ic3RhcnQtdGFnIj5zdmc8L3NwYW4+IDxzcGFuIGNsYXNzPSJhdHRyaWJ1dGUtbmFtZSI+eG1sbnM8L3NwYW4+PSI8YSBjbGFzcz0iYXR0cmlidXRlLXZhbHVlIj5odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZzwvYT4iIDxzcGFuIGNsYXNzPSJhdHRyaWJ1dGUtbmFtZSI+dmlld0JveDwvc3Bhbj49IjxhIGNsYXNzPSJhdHRyaWJ1dGUtdmFsdWUiPjAgMCAxOCAxODwvYT4iJmd0Ozwvc3Bhbj48c3Bhbj4NCjxzcGFuIGlkPSJsaW5lMiI+PC9zcGFuPgk8L3NwYW4+PHNwYW4+Jmx0OzxzcGFuIGNsYXNzPSJzdGFydC10YWciPmc8L3NwYW4+IDxzcGFuIGNsYXNzPSJhdHRyaWJ1dGUtbmFtZSI+c3Ryb2tlPC9zcGFuPj0iPGEgY2xhc3M9ImF0dHJpYnV0ZS12YWx1ZSI+IzAwMDwvYT4iIDxzcGFuIGNsYXNzPSJhdHRyaWJ1dGUtbmFtZSI+c3Ryb2tlLXdpZHRoPC9zcGFuPj0iPGEgY2xhc3M9ImF0dHJpYnV0ZS12YWx1ZSI+MS41PC9hPiImZ3Q7PC9zcGFuPjxzcGFuPg0KPHNwYW4gaWQ9ImxpbmUzIj48L3NwYW4+CQk8L3NwYW4+PHNwYW4+Jmx0OzxzcGFuIGNsYXNzPSJzdGFydC10YWciPmxpbmU8L3NwYW4+IDxzcGFuIGNsYXNzPSJhdHRyaWJ1dGUtbmFtZSI+eDE8L3NwYW4+PSI8YSBjbGFzcz0iYXR0cmlidXRlLXZhbHVlIj4zPC9hPiIgPHNwYW4gY2xhc3M9ImF0dHJpYnV0ZS1uYW1lIj55MTwvc3Bhbj49IjxhIGNsYXNzPSJhdHRyaWJ1dGUtdmFsdWUiPjM8L2E+IiA8c3BhbiBjbGFzcz0iYXR0cmlidXRlLW5hbWUiPngyPC9zcGFuPj0iPGEgY2xhc3M9ImF0dHJpYnV0ZS12YWx1ZSI+MTU8L2E+IiA8c3BhbiBjbGFzcz0iYXR0cmlidXRlLW5hbWUiPnkyPC9zcGFuPj0iPGEgY2xhc3M9ImF0dHJpYnV0ZS12YWx1ZSI+MTU8L2E+IiA8c3Bhbj4vPC9zcGFuPiZndDs8L3NwYW4+PHNwYW4+DQo8c3BhbiBpZD0ibGluZTQiPjwvc3Bhbj4JCTwvc3Bhbj48c3Bhbj4mbHQ7PHNwYW4gY2xhc3M9InN0YXJ0LXRhZyI+bGluZTwvc3Bhbj4gPHNwYW4gY2xhc3M9ImF0dHJpYnV0ZS1uYW1lIj54Mjwvc3Bhbj49IjxhIGNsYXNzPSJhdHRyaWJ1dGUtdmFsdWUiPjM8L2E+IiA8c3BhbiBjbGFzcz0iYXR0cmlidXRlLW5hbWUiPnkxPC9zcGFuPj0iPGEgY2xhc3M9ImF0dHJpYnV0ZS12YWx1ZSI+MzwvYT4iIDxzcGFuIGNsYXNzPSJhdHRyaWJ1dGUtbmFtZSI+eDE8L3NwYW4+PSI8YSBjbGFzcz0iYXR0cmlidXRlLXZhbHVlIj4xNTwvYT4iIDxzcGFuIGNsYXNzPSJhdHRyaWJ1dGUtbmFtZSI+eTI8L3NwYW4+PSI8YSBjbGFzcz0iYXR0cmlidXRlLXZhbHVlIj4xNTwvYT4iIDxzcGFuPi88L3NwYW4+Jmd0Ozwvc3Bhbj48c3Bhbj4NCjxzcGFuIGlkPSJsaW5lNSI+PC9zcGFuPgk8L3NwYW4+PHNwYW4+Jmx0Oy88c3BhbiBjbGFzcz0iZW5kLXRhZyI+Zzwvc3Bhbj4mZ3Q7PC9zcGFuPjxzcGFuPg0KPHNwYW4gaWQ9ImxpbmU2Ij48L3NwYW4+PC9zcGFuPjxzcGFuPiZsdDsvPHNwYW4gY2xhc3M9ImVuZC10YWciPnN2Zzwvc3Bhbj4mZ3Q7PC9zcGFuPjxzcGFuPg0KPHNwYW4gaWQ9ImxpbmU3Ij48L3NwYW4+PC9zcGFuPjwvcHJlPjwvYm9keT48L2h0bWw+');\\r\\n}\\r\\n\\r\\n/* TODO: buttons */\\r\\n\\r\\n.window__content {\\r\\n\\tbackground: #f1f1f1;\\r\\n\\tborder: 2px solid #D4D0C8;\\r\\n\\tborder-top: none;\\r\\n\\tdisplay: flex;\\r\\n\\tflex: 0 1 100%;\\r\\n\\twidth: 100%;\\r\\n\\toverflow-x: auto;\\r\\n}\\r\\n`;\\r\\n\\r\\n\\r\\nexport const windowIcon = 'data:image/webp;base64,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'\\r\\n\\r\\n\\r\\nexport const icons = {\\r\\n\\trefresh: `\\r\\n\\t\\t<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n\\t\\t\\t<path fill=\\\"none\\\" d=\\\"M19.305,9.61c-0.235-0.235-0.615-0.235-0.85,0l-1.339,1.339c0.045-0.311,0.073-0.626,0.073-0.949\\r\\n\\t\\t\\t\\tc0-3.812-3.09-6.901-6.901-6.901c-2.213,0-4.177,1.045-5.44,2.664l0.897,0.719c1.053-1.356,2.693-2.232,4.543-2.232\\r\\n\\t\\t\\t\\tc3.176,0,5.751,2.574,5.751,5.751c0,0.342-0.037,0.675-0.095,1l-1.746-1.39c-0.234-0.235-0.614-0.235-0.849,0\\r\\n\\t\\t\\t\\tc-0.235,0.235-0.235,0.615,0,0.85l2.823,2.25c0.122,0.121,0.282,0.177,0.441,0.172c0.159,0.005,0.32-0.051,0.44-0.172l2.25-2.25\\r\\n\\t\\t\\t\\tC19.539,10.225,19.539,9.845,19.305,9.61z M10.288,15.752c-3.177,0-5.751-2.575-5.751-5.752c0-0.276,0.025-0.547,0.062-0.813\\r\\n\\t\\t\\t\\tl1.203,1.203c0.235,0.234,0.615,0.234,0.85,0c0.234-0.235,0.234-0.615,0-0.85l-2.25-2.25C4.281,7.169,4.121,7.114,3.961,7.118\\r\\n\\t\\t\\t\\tC3.802,7.114,3.642,7.169,3.52,7.291l-2.824,2.25c-0.234,0.235-0.234,0.615,0,0.85c0.235,0.234,0.615,0.234,0.85,0l1.957-1.559\\r\\n\\t\\t\\t\\tC3.435,9.212,3.386,9.6,3.386,10c0,3.812,3.09,6.901,6.902,6.901c2.083,0,3.946-0.927,5.212-2.387l-0.898-0.719\\r\\n\\t\\t\\t\\tC13.547,14.992,12.008,15.752,10.288,15.752z\\\"></path>\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\tforward: `\\r\\n\\t\\t<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n\\t\\t\\t<path fill=\\\"none\\\" d=\\\"M1.729,9.212h14.656l-4.184-4.184c-0.307-0.306-0.307-0.801,0-1.107c0.305-0.306,0.801-0.306,1.106,0\\r\\n\\t\\t\\tl5.481,5.482c0.018,0.014,0.037,0.019,0.053,0.034c0.181,0.181,0.242,0.425,0.209,0.66c-0.004,0.038-0.012,0.071-0.021,0.109\\r\\n\\t\\t\\tc-0.028,0.098-0.075,0.188-0.143,0.271c-0.021,0.026-0.021,0.061-0.045,0.085c-0.015,0.016-0.034,0.02-0.051,0.033l-5.483,5.483\\r\\n\\t\\t\\tc-0.306,0.307-0.802,0.307-1.106,0c-0.307-0.305-0.307-0.801,0-1.105l4.184-4.185H1.729c-0.436,0-0.788-0.353-0.788-0.788\\r\\n\\t\\t\\tS1.293,9.212,1.729,9.212z\\\"></path>\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\tbackward: `\\r\\n\\t\\t<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n\\t\\t\\t<path fill=\\\"none\\\" d=\\\"M18.271,9.212H3.615l4.184-4.184c0.306-0.306,0.306-0.801,0-1.107c-0.306-0.306-0.801-0.306-1.107,0\\r\\n\\t\\t\\tL1.21,9.403C1.194,9.417,1.174,9.421,1.158,9.437c-0.181,0.181-0.242,0.425-0.209,0.66c0.005,0.038,0.012,0.071,0.022,0.109\\r\\n\\t\\t\\tc0.028,0.098,0.075,0.188,0.142,0.271c0.021,0.026,0.021,0.061,0.045,0.085c0.015,0.016,0.034,0.02,0.05,0.033l5.484,5.483\\r\\n\\t\\t\\tc0.306,0.307,0.801,0.307,1.107,0c0.306-0.305,0.306-0.801,0-1.105l-4.184-4.185h14.656c0.436,0,0.788-0.353,0.788-0.788\\r\\n\\t\\t\\tS18.707,9.212,18.271,9.212z\\\"></path>\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\thome: `\\r\\n\\t\\t<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n\\t\\t<path fill=\\\"none\\\" d=\\\"M15.971,7.708l-4.763-4.712c-0.644-0.644-1.769-0.642-2.41-0.002L3.99,7.755C3.98,7.764,3.972,7.773,3.962,7.783C3.511,8.179,3.253,8.74,3.253,9.338v6.07c0,1.146,0.932,2.078,2.078,2.078h9.338c1.146,0,2.078-0.932,2.078-2.078v-6.07c0-0.529-0.205-1.037-0.57-1.421C16.129,7.83,16.058,7.758,15.971,7.708z M15.68,15.408c0,0.559-0.453,1.012-1.011,1.012h-4.318c0.04-0.076,0.096-0.143,0.096-0.232v-3.311c0-0.295-0.239-0.533-0.533-0.533c-0.295,0-0.534,0.238-0.534,0.533v3.311c0,0.09,0.057,0.156,0.096,0.232H5.331c-0.557,0-1.01-0.453-1.01-1.012v-6.07c0-0.305,0.141-0.591,0.386-0.787c0.039-0.03,0.073-0.066,0.1-0.104L9.55,3.75c0.242-0.239,0.665-0.24,0.906,0.002l4.786,4.735c0.024,0.033,0.053,0.063,0.084,0.09c0.228,0.196,0.354,0.466,0.354,0.76V15.408z\\\"></path>\\r\\n\\t</svg>\\r\\n\\t`,\\r\\n}\\r\\n\",\"filename\":\"/os/constants.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nexport class Log {\\r\\n\\tstatic DEBUG_LEVEL = 'debug'\\r\\n\\tstatic INFO_LEVEL = 'info'\\r\\n\\tstatic WARN_LEVEL = 'warn'\\r\\n\\tstatic ERROR_LEVEL = 'error'\\r\\n}\\r\\n\\r\\nexport class Logger {\\r\\n\\t/**\\r\\n\\t * @param {object} parent\\r\\n\\t * @param {import('/os/app/logger_render.js').LoggerRender} logRenderer\\r\\n\\t */\\r\\n\\tconstructor(parent, logRenderer) {\\r\\n\\t\\tthis.#parentName = (parent.constructor ? parent.constructor.name : '' + parent);\\r\\n\\t\\tthis.#console = logRenderer;\\r\\n\\t}\\r\\n\\r\\n\\tdebug(...args) {\\r\\n\\t\\tthis.#console.write(Log.DEBUG_LEVEL, this.#parentName, args);\\r\\n\\t}\\r\\n\\r\\n\\tinfo(...args) {\\r\\n\\t\\tthis.#console.write(Log.INFO_LEVEL, this.#parentName, args);\\r\\n\\t}\\r\\n\\r\\n\\twarn(...args) {\\r\\n\\t\\tthis.#console.write(Log.WARN_LEVEL, this.#parentName, args);\\r\\n\\t}\\r\\n\\r\\n\\terror(...args) {\\r\\n\\t\\tthis.#console.write(Log.ERROR_LEVEL, this.#parentName, args);\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {string} severity @param {...any} args */\\r\\n\\tprint(severity, ...args) {\\r\\n\\t\\tif (!Logger.#debugLevels.includes(severity)) {\\r\\n\\t\\t\\targs.unshift(severity);\\r\\n\\t\\t\\tseverity = 'info';\\r\\n\\t\\t}\\r\\n\\t\\tthis.#console.write(severity, this.#parentName, args);\\r\\n\\t}\\r\\n\\r\\n\\t#console\\r\\n\\t#parentName\\r\\n\\r\\n\\tstatic #debugLevels = Object.values(Log)\\r\\n}\\r\\n\",\"filename\":\"/os/logger.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nexport class EventListener{\\r\\n\\t/** @param {object} [parent] - only in case this class was not derivered */\\r\\n\\tconstructor(parent){\\r\\n\\t\\tthis.#parent = parent || this;\\r\\n\\t\\tthis.#parentName = this.#parent.constructor.name\\r\\n\\t\\tthis.#listeners = {};\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * this method is needed, because classes extending from EventListener cannot create a Logger object before super()\\r\\n\\t * @param {import('/os/logger.js').Logger} log */\\r\\n\\teventListener_initLog(log) {\\r\\n\\t\\tthis.#log = log;\\r\\n\\t}\\r\\n\\r\\n\\tlisten(event, func){\\r\\n\\t\\tif (!event) console.log('empty event for listen', this.#parentName, func);\\r\\n\\t\\tif (!func) console.log('empty func for listen', this.#parentName, event);\\r\\n\\t\\tif(!this.#listeners[event]) this.#listeners[event] = [];\\r\\n\\t\\tthis.#listeners[event].push(func);\\r\\n\\t}\\r\\n\\r\\n\\tfire(event, ...args) {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tif (!event) console.log('empty event for fire');\\r\\n\\t\\t\\tif (!this.#listeners[event]) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.#listeners[event].forEach(listener => listener.call(this.#parent, ...args));\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tthis.#log.error(`Event listener for ${this.#parentName} - error for event ${event}`, e.message, e);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#parent\\r\\n\\t#parentName\\r\\n\\t#listeners\\r\\n\\t/** @type {import('/os/logger.js').Logger} */\\r\\n\\t#log\\r\\n}\\r\\n\\r\\n\\r\\nexport const OS_EVENT = {};\\r\\nObject.defineProperties(OS_EVENT, {\\r\\n\\tINIT: { value: 'init' },\\r\\n\\tLOOP_STEP: { value: 'loop_step' },\\r\\n\\tON_EXIT: { value: 'on_exit' },\\r\\n});\\r\\n\\r\\nexport const WindowWidget_EVENT = {};\\r\\nObject.defineProperties(WindowWidget_EVENT, {\\r\\n\\tSHOW: { value: 'show' },\\r\\n\\tHIDE: { value: 'hide' },\\r\\n\\tCLOSE: { value: 'close' },\\r\\n});\\r\\n\\r\\nexport const ServersManager_EVENT = {};\\r\\nObject.defineProperties(ServersManager_EVENT, {\\r\\n\\tCONNECTED_SERV_CHANGED: { value: 'connected_serv_changed' },\\r\\n});\\r\\n\\r\\n\",\"filename\":\"/os/event_listener.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DOM_CONSTANTS, GENERAL_CSS } from '/os/constants.js'\\r\\nimport { OS_EVENT } from '/os/event_listener.js'\\r\\nimport { Logger } from '/os/logger.js'\\r\\nimport { WindowWidget } from '/os/window_widget.js'\\r\\n\\r\\nexport class GUI {\\r\\n\\t/** @param {import('/os/os.js').OS} os */\\r\\n\\tconstructor(os){\\r\\n\\t\\tthis.#os = os;\\r\\n\\t\\tthis.#log = new Logger(this, os.logRenderer);\\r\\n\\t\\tthis.#doc = globalThis['document'];\\r\\n\\t\\tthis.#buttons = [];\\r\\n\\t\\tthis.#styles = [];\\r\\n\\t\\tthis.#os.listen(OS_EVENT.INIT, () => this.#init());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.ON_EXIT, () => this.#on_exit());\\r\\n\\t}\\r\\n\\r\\n\\tcreateButton(params) {\\r\\n\\t\\tlet { btnOptions, btnLabel, callback } = params;\\r\\n\\r\\n\\t\\tlet btn = this.#doc.createElement('button');\\r\\n\\t\\tbtn.type = 'button';\\r\\n\\t\\tbtn.style['color'] = 'rgb(0, 204, 0)';\\r\\n\\t\\tbtn.style['background-color'] = 'rgb(51, 51, 51)';\\r\\n\\t\\tbtn.style['border'] = '1px solid rgb(34, 34, 34)';\\r\\n\\t\\tbtn.textContent = btnLabel;\\r\\n\\r\\n\\t\\tfor (let it in btnOptions) {\\r\\n\\t\\t\\tbtn.style[it] = btnOptions[it];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbtn._gui_listener = callback;\\r\\n\\t\\tbtn.addEventListener('click', btn._gui_listener)\\r\\n\\r\\n\\t\\tthis.#buttons.push({ btn });\\r\\n\\t\\treturn btn;\\r\\n\\t}\\r\\n\\t\\r\\n\\taddMenuButton(params) {\\r\\n\\t\\tlet { btnLabel, btnIconPath, btnIconViewBox, btnId, callback } = params;\\r\\n\\t\\t\\r\\n\\t\\tconst siblingButton = Array.from(this.#doc.querySelectorAll(DOM_CONSTANTS.siblingBtnSelector))\\r\\n\\t\\t\\t.find(({ textContent }) => textContent === DOM_CONSTANTS.siblingButtonLabel)\\r\\n\\t\\t\\t\\r\\n\\t\\tif (!siblingButton) {\\r\\n\\t\\t\\tthis.#log.debug(\\\"GUI.injectButton: can't find siblingButton\\\");\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tlet newButtonMarkup = siblingButton.outerHTML.replace(DOM_CONSTANTS.siblingButtonLabel, btnLabel)\\r\\n\\t\\t\\r\\n\\t\\tlet path_from = newButtonMarkup.indexOf('<path')\\r\\n\\t\\tlet path_to = newButtonMarkup.indexOf('</path>')\\r\\n\\t\\t\\r\\n\\t\\tif(btnIconPath && btnIconPath.length){\\r\\n\\t\\t\\tnewButtonMarkup = newButtonMarkup.substr(0, path_from) + btnIconPath + newButtonMarkup.substr(path_to);\\r\\n\\t\\t}\\r\\n\\t\\tif(btnIconViewBox && btnIconViewBox.length){\\r\\n\\t\\t\\tnewButtonMarkup = newButtonMarkup.replace('viewBox=\\\"0 0 24 24\\\"', btnIconViewBox)\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tsiblingButton.insertAdjacentHTML('afterend', newButtonMarkup)\\r\\n\\t\\t\\r\\n\\t\\tlet btn = siblingButton.nextElementSibling\\r\\n\\t\\tbtn.id = btnId\\r\\n\\t\\t\\r\\n\\t\\tbtn._gui_listener = callback;\\r\\n\\t\\tbtn.addEventListener('click', btn._gui_listener)\\r\\n\\t\\t\\r\\n\\t\\tthis.#buttons.push( { btn } );\\r\\n\\t}\\r\\n\\r\\n\\tinjectCSS(css_string, css_id) {\\r\\n\\t\\tif (!css_id) throw \\\"injectCSS: css_id missing\\\";\\r\\n\\r\\n\\t\\tlet stylesheet = this.#doc.getElementById(css_id);\\r\\n\\t\\tif (!stylesheet) {\\r\\n\\t\\t\\tstylesheet = this.#doc.createElement('style')\\r\\n\\t\\t\\tstylesheet.innerHTML = css_string\\r\\n\\t\\t\\tstylesheet.id = css_id;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.#styles.push(stylesheet);\\r\\n\\t\\tthis.#doc.head.insertAdjacentElement('beforeend', stylesheet)\\r\\n\\t}\\r\\n\\r\\n\\tcreateAboutWindow(data) {\\r\\n\\t\\tlet aboutWindow = new WindowWidget(this, this.#os);\\r\\n\\t\\taboutWindow.init();\\r\\n\\t\\taboutWindow.getContentDiv().innerHTML =\\r\\n\\t\\t\\t\\\"<div class='window-about'><table><tbody><tr>\\\" +\\r\\n\\t\\t\\tObject.entries(\\r\\n\\t\\t\\t\\tdata).map(([k, v]) => {\\r\\n\\t\\t\\t\\t\\tif (v.startsWith(\\\"https\\\")) v = `<a target='_blank' href=${v}>${v}</a>`;\\r\\n\\t\\t\\t\\t\\treturn `<td><b>${k}</b></td><td>${v}</td>`\\r\\n\\t\\t\\t\\t}).join('</tr><tr>')\\r\\n\\t\\t\\t+ \\\"</tr></tbody></table></div>\\\";\\r\\n\\t\\taboutWindow.setTitle('About')\\r\\n\\t\\treturn aboutWindow;\\r\\n\\t}\\r\\n\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#os\\r\\n\\t#doc\\r\\n\\t#buttons\\r\\n\\t#styles\\r\\n\\t#log\\r\\n\\r\\n\\t#init() {\\r\\n\\t\\tthis.#injectStartBtn()\\r\\n\\t\\tthis.#injectDefaultCSS()\\r\\n\\t}\\r\\n\\r\\n\\t#onStartBtnClick() {\\r\\n\\t\\tthis.#doc.addEventListener('click', () => {\\r\\n\\t\\t\\t// if clicked elment = menu, activate\\r\\n\\t\\t\\t// else, hide\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t#injectStartBtn() {\\r\\n\\t\\t\\r\\n\\t\\treturn;\\r\\n\\t\\t/*\\r\\n\\t\\t// make sure that our text (that is wider than menu) is visible outside Menu div\\r\\n\\t\\tlet menu = this.#doc.querySelectorAll('.MuiDrawer-paperAnchorLeft')\\r\\n\\t\\tif (!menu) {\\r\\n\\t\\t\\tthis.#log.warn('injectStartBtn');\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\t//let { btnLabel, btnIconPath, btnIconViewBox, btnId, callback } = params;\\r\\n\\t\\tlet btnLabel = \\\"OS\\\";\\r\\n\\t\\tlet btnIconPath = \\\"\\\";\\r\\n\\t\\tlet btnIconViewBox = \\\"\\\";\\r\\n\\t\\tlet btnId = \\\"\\\";\\r\\n\\t\\tlet callback = this.#onStartBtnClick.bind(this);\\r\\n\\r\\n\\t\\tconst siblingButton = Array.from(this.#doc.querySelectorAll(DOM_CONSTANTS.siblingBtnSelector))\\r\\n\\t\\t\\t.find(({ textContent }) => textContent === DOM_CONSTANTS.siblingButtonLabel)\\r\\n\\r\\n\\t\\tif (!siblingButton) {\\r\\n\\t\\t\\tthis.#log.warn(\\\"GUI.injectButton: can't find siblingButton\\\");\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet newButtonMarkup = siblingButton.outerHTML.replace(DOM_CONSTANTS.siblingButtonLabel, btnLabel)\\r\\n\\r\\n\\t\\tlet path_from = newButtonMarkup.indexOf('<path')\\r\\n\\t\\tlet path_to = newButtonMarkup.indexOf('</path>')\\r\\n\\r\\n\\t\\tif (btnIconPath && btnIconPath.length) {\\r\\n\\t\\t\\tnewButtonMarkup = newButtonMarkup.substr(0, path_from) + btnIconPath + newButtonMarkup.substr(path_to);\\r\\n\\t\\t}\\r\\n\\t\\tif (btnIconViewBox && btnIconViewBox.length) {\\r\\n\\t\\t\\tnewButtonMarkup = newButtonMarkup.replace('viewBox=\\\"0 0 24 24\\\"', btnIconViewBox)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsiblingButton.insertAdjacentHTML('afterend', newButtonMarkup)\\r\\n\\r\\n\\t\\tlet btn = siblingButton.nextElementSibling\\r\\n\\t\\tbtn.id = btnId\\r\\n\\r\\n\\t\\tbtn._gui_listener = callback;\\r\\n\\t\\tbtn.addEventListener('click', btn._gui_listener)\\r\\n\\r\\n\\t\\tthis.#buttons.push({ btn });\\r\\n\\t\\t*/\\r\\n\\t}\\r\\n\\r\\n\\t#injectDefaultCSS() {\\r\\n\\t\\tthis.injectCSS(GENERAL_CSS, 'GENERAL_CSS')\\r\\n\\t\\tthis.injectCSS(GUI_CSS, 'GUI_CSS');\\r\\n\\t}\\r\\n\\r\\n\\t#on_exit() {\\r\\n\\t\\tthis.#clearInjected();\\r\\n\\t}\\r\\n\\r\\n\\t#clearInjected() {\\r\\n\\t\\tthis.#buttons.forEach(({ btn }) => {\\r\\n\\t\\t\\tif (btn._gui_listener) {\\r\\n\\t\\t\\t\\tbtn.removeEventListener('click', btn._gui_listener)\\r\\n\\t\\t\\t\\tbtn._gui_listener = null\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tbtn.remove()\\r\\n\\t\\t});\\r\\n\\t\\tthis.#styles.forEach(elem => {\\r\\n\\t\\t\\telem.remove()\\r\\n\\t\\t});\\r\\n\\t}\\r\\n};\\r\\n\\r\\nconst GUI_CSS = `\\r\\n.window-about table{\\r\\n\\tborder: none;\\r\\n\\tuser-select: text;\\r\\n}\\r\\n`\\r\\n\",\"filename\":\"/os/gui.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OS } from '/os/os.js'\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog('sleep')\\r\\n\\ttry{\\r\\n\\t\\tvar os = new OS(ns);\\r\\n\\t\\tawait ns.sleep(10);\\r\\n\\t\\tawait os.run();\\r\\n\\t}catch(e){\\r\\n\\t\\tif(os){\\r\\n\\t\\t\\tos.on_exit();\\r\\n\\t\\t}\\r\\n\\t\\tthrow e;\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/os/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///6d6cfead-e3c2-4614-99b6-33a75b66506f\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///96460c97-9955-47bf-93cc-9bd5dc3078a5\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///2fe68523-f7d8-47ee-a2da-955d2431f0e0\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///2e3b79bf-9feb-45c9-8fd2-acf88584127c\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///ab0ae3a3-d116-425f-9e85-c11126fcd3a5\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/window_widget.js\",\"url\":\"blob:file:///31f66707-db8f-4cda-a42e-64c1c9e3bcc1\",\"moduleSequenceNumber\":34949},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///47d7377f-4400-483a-842e-123b9a9f41ef\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///522555ed-4ad6-4da1-ae7e-2113fc10962e\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///e9cb9a4f-4843-4e23-9a4d-4dac2a85e424\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/window_widget.js\",\"url\":\"blob:file:///fc105ecc-aa52-40e6-9d75-ab9279695df3\",\"moduleSequenceNumber\":34949},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///adb57cb6-5694-42c5-a336-9ffc82479f5d\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///11ba9e46-f28d-4b77-aedc-2901f9a18fe5\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///08b78fe5-5ad6-4d80-b680-c53b97d0b057\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/gui.js\",\"url\":\"blob:file:///3df354ee-e402-4823-af4d-5e06119b8acc\",\"moduleSequenceNumber\":34939},{\"filename\":\"/os/utils.js\",\"url\":\"blob:file:///fc58c9ee-11ae-4193-95c3-e8d0ddff5b32\",\"moduleSequenceNumber\":34947},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///380bacf2-9444-4fa2-9d53-bdc26573e378\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///b8540b44-00f8-49bb-bf76-650f130a6d1c\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/servers_manager.js\",\"url\":\"blob:file:///3e29548d-6773-407b-ad22-b151d2a566a0\",\"moduleSequenceNumber\":34951},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///79067392-9348-4710-b4be-d00d2eaf6309\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///397d11ee-5abe-4aea-b292-9d5c80485ba6\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///31740473-15ce-454a-aabc-5d8a7d4bc21b\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///b320bbf5-6b38-4b2c-8fec-a28ecb977333\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/window_widget.js\",\"url\":\"blob:file:///3254ae6f-3d95-45be-ae58-fe878806b1f8\",\"moduleSequenceNumber\":34949},{\"filename\":\"/os/plugins/api_adapter.js\",\"url\":\"blob:file:///0f654260-9f7b-4325-9657-bb16989da0b9\",\"moduleSequenceNumber\":35230},{\"filename\":\"/os/plugins/plugins_utils.js\",\"url\":\"blob:file:///7320576c-7468-40dd-b527-0b897e8be5d0\",\"moduleSequenceNumber\":35228},{\"filename\":\"/os/plugins/plugins_manager.js\",\"url\":\"blob:file:///3de48120-52e5-4c04-909e-1580f52829dd\",\"moduleSequenceNumber\":35226},{\"filename\":\"/os/app/servers_explorer/servers_explorer_css.js\",\"url\":\"blob:file:///c6ba7332-418c-4f2f-86dc-85c90551d4f0\",\"moduleSequenceNumber\":35224},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///14239a60-719a-4925-9d4c-83ab8cc9abb6\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/utils.js\",\"url\":\"blob:file:///4530427e-9c3d-4975-87dc-eb4d07a4409d\",\"moduleSequenceNumber\":34947},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///ef807fe5-d0a3-45e8-b5b1-118d72a73859\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///54b0e9d0-0aaf-466d-bf69-cae07baa4c56\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///b431aaac-eed4-4a9e-9682-6c824f17852d\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/window_widget.js\",\"url\":\"blob:file:///9ead0447-2490-471c-af62-39e521811ac7\",\"moduleSequenceNumber\":34949},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///80b4c460-e551-4401-9cf2-dac0233976ed\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/app/servers_explorer/servers_explorer.js\",\"url\":\"blob:file:///a9c62701-156f-4041-a158-69445664eda3\",\"moduleSequenceNumber\":35222},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///74702d84-3fc2-423b-b58b-f214ad6eb02b\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///d6614f5a-3d96-471a-879a-e0aa6498e0de\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/servers_manager.js\",\"url\":\"blob:file:///c10a1cf2-7a57-4c02-95e6-43b07ee45242\",\"moduleSequenceNumber\":34951},{\"filename\":\"/os/utils.js\",\"url\":\"blob:file:///67598941-1128-4f4e-a6f3-4b2899902016\",\"moduleSequenceNumber\":34947},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///84eedf8e-e6ac-492e-a74c-338f6423c26a\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/terminal.js\",\"url\":\"blob:file:///c1ceed4a-9b59-45f4-8160-2407bd599ca9\",\"moduleSequenceNumber\":34945},{\"filename\":\"/os/utils.js\",\"url\":\"blob:file:///1a53ab08-2439-48e8-822a-71b7841be130\",\"moduleSequenceNumber\":34947},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///c6a09027-2f80-4ec6-8472-f818abc2381f\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///6a906dcf-9e65-4fea-8948-0093d4757092\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///bbe4a8b5-474b-4dd1-8756-24df15c891bf\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/window_widget.js\",\"url\":\"blob:file:///07060217-7547-4e01-af8d-8d8df0d18828\",\"moduleSequenceNumber\":34949},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///1d369507-fdc7-49ff-9c6a-d1dd6ce26c8e\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///138550d9-f7a1-4a23-bd13-2856d37a7310\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///adfb2d57-59b7-464e-9f84-231b6cf2b792\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/gui.js\",\"url\":\"blob:file:///c29ff894-1320-48b0-b020-92ed98fe8b7a\",\"moduleSequenceNumber\":34939},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///d3e98c26-912e-40db-ae58-a73247bdbbe4\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///f9a90bfa-d6e5-4e58-9a21-ef7d170243e7\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///c7d2e17e-b9ad-418a-a148-7b6377d68e8e\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///c982b0d1-83e3-43d5-9bda-432251a274f9\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/window_widget.js\",\"url\":\"blob:file:///01dbeb5e-9ce9-4cd5-a6b5-40a46ed18b6c\",\"moduleSequenceNumber\":34949},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///3556bd62-767c-4130-899e-49a821bbabea\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///9153160a-fd9f-413c-9057-309984e0ad86\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/app/files_explorer.js\",\"url\":\"blob:file:///f016b307-8348-4c45-ad2b-65883ef39268\",\"moduleSequenceNumber\":34953},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///db0c12f0-95b1-4706-871e-63189c146cc5\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///1fb6fa3a-c36b-4a67-89e0-b4fda3f1fbbd\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///16700864-f474-4254-922d-2714c2c0cc0f\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/constants.js\",\"url\":\"blob:file:///fc90bd52-32b6-449c-9f61-036261ec37ac\",\"moduleSequenceNumber\":34933},{\"filename\":\"/os/window_widget.js\",\"url\":\"blob:file:///ab388f6d-945d-4d77-b981-4e1de8da9ed7\",\"moduleSequenceNumber\":34949},{\"filename\":\"/os/event_listener.js\",\"url\":\"blob:file:///ce9d3c32-5ee2-4439-8bbd-31e478d157af\",\"moduleSequenceNumber\":34937},{\"filename\":\"/os/app/logger_render.js\",\"url\":\"blob:file:///2dc21306-4990-46fc-9acc-ef56acdcdb25\",\"moduleSequenceNumber\":34955},{\"filename\":\"/os/logger.js\",\"url\":\"blob:file:///2ea07ee6-75d9-4d73-86cc-f7cc1b5fe36d\",\"moduleSequenceNumber\":34935},{\"filename\":\"/os/os.js\",\"url\":\"blob:file:///44a92eed-b709-47d1-9159-8c9483ee842a\",\"moduleSequenceNumber\":34943},{\"filename\":\"/os/main.js\",\"url\":\"blob:file:///2a455e07-23be-43a2-bfc2-c8f2461492ae\",\"moduleSequenceNumber\":35251}],\"dependents\":[],\"ramUsage\":7.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Logger } from '/os/logger.js'\\r\\nimport { DebugConsoleRender } from '/os/app/logger_render.js'\\r\\nimport { EventListener, OS_EVENT } from '/os/event_listener.js'\\r\\nimport { FilesExplorer } from '/os/app/files_explorer.js'\\r\\nimport { GUI } from '/os/gui.js'\\r\\nimport { Utils } from '/os/utils.js'\\r\\nimport { Terminal } from '/os/terminal.js'\\r\\nimport { ServersManager } from '/os/servers_manager.js'\\r\\nimport { ServersExplorer } from '/os/app/servers_explorer/servers_explorer.js'\\r\\nimport { PluginsManager } from '/os/plugins/plugins_manager.js'\\r\\n\\r\\nexport class OS extends EventListener {\\r\\n\\r\\n\\tconstructor(ns) {\\r\\n\\t\\tsuper();\\r\\n\\r\\n\\t\\tthis.#initNSInternals(ns);\\r\\n\\r\\n\\t\\tthis.#NSqueue = [];\\r\\n\\t\\tthis.#doLoop = true;\\r\\n\\r\\n\\t\\tthis.logRenderer = new DebugConsoleRender(this);\\r\\n\\t\\tthis.#log = new Logger(this, this.logRenderer);\\r\\n\\t\\tthis.eventListener_initLog(this.#log);\\r\\n\\t\\tthis.filesExplorer = new FilesExplorer(this);\\r\\n\\t\\tthis.gui = new GUI(this);\\r\\n\\t\\tthis.terminal = new Terminal();\\r\\n\\t\\tthis.serversManager = new ServersManager(this);\\r\\n\\t\\tthis.serversExplorer = new ServersExplorer(this);\\r\\n\\r\\n\\t\\tthis.plugins = new PluginsManager(this);\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {(NS) => void} func @returns Promise */\\r\\n\\tgetNS(func) {\\r\\n\\t\\tlet def = new Utils.Deferred();\\r\\n\\t\\tthis.#NSqueue.push({ func, def })\\r\\n\\t\\treturn def.promise;\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {(NS) => void} func */\\r\\n\\tgetNS_noPromise(func) {\\r\\n\\t\\tthis.#NSqueue.push({ func })\\r\\n\\t}\\r\\n\\r\\n\\tcloseAndExit() {\\r\\n\\t\\tthis.getNS_noPromise(ns => ns.exit());\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#doLoop\\r\\n\\t#internal_NS\\r\\n\\t#NSqueue\\r\\n\\t#log\\r\\n\\r\\n\\t/** @param {NS} ns */\\r\\n\\t#initNSInternals(ns) {\\r\\n\\t\\t// this is the only function that has direct access to NS object,\\r\\n\\t\\t// its *carefuly* used in runNSQueue\\r\\n\\r\\n\\t\\tlet _hasAccessToNS = false;\\r\\n\\r\\n\\t\\tthis.#internal_NS = function () {\\r\\n\\t\\t\\tif (_hasAccessToNS)\\r\\n\\t\\t\\t\\treturn ns;\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\t\\tthis.run = async function () {\\r\\n\\t\\t\\tthis.fire(OS_EVENT.INIT);\\r\\n\\r\\n\\t\\t\\tconst delay = 50\\r\\n\\t\\t\\twhile (this.#doLoop) {\\r\\n\\t\\t\\t\\t_hasAccessToNS = true;\\r\\n\\r\\n\\t\\t\\t\\tthis.fire(OS_EVENT.LOOP_STEP);\\r\\n\\t\\t\\t\\tawait this.#runNSQueue();\\r\\n\\r\\n\\t\\t\\t\\t_hasAccessToNS = false;\\r\\n\\r\\n\\t\\t\\t\\tif (!this.#doLoop) return; // safety check\\r\\n\\t\\t\\t\\tawait ns.sleep(delay);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync #runNSQueue() {\\r\\n\\t\\tlet stopwatch = 0;\\r\\n\\t\\tlet ns = this.#internal_NS();\\r\\n\\t\\twhile (this.#NSqueue.length) {\\r\\n\\t\\t\\tlet q = this.#NSqueue;\\r\\n\\t\\t\\tthis.#NSqueue = [];\\r\\n\\r\\n\\t\\t\\tif (++stopwatch > 100) {\\r\\n\\t\\t\\t\\tq.forEach(({ def }) => { def && def.reject('stopwatch (there is too big recursion in getNS calls)'); })\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor (let { func, def } of q) {\\r\\n\\t\\t\\t\\tif (!this.#doLoop) return; // safety check\\r\\n\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\tlet res = await func(ns);\\r\\n\\t\\t\\t\\t\\tdef && def.resolve(res);\\r\\n\\t\\t\\t\\t} catch (e) {\\r\\n\\t\\t\\t\\t\\tthis.#log.error(\\\"Exception in NS promise\\\", e.message, e.stack);\\r\\n\\t\\t\\t\\t\\tdef && def.reject(e);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\ton_exit() {\\r\\n\\t\\tthis.#doLoop = false;\\r\\n\\t\\tthis.#log.debug(\\\"on_exit\\\");\\r\\n\\r\\n\\t\\t// clear references to make GC life easier with closures\\r\\n\\t\\tthis.run = null;\\r\\n\\t\\tthis.#internal_NS = null;\\r\\n\\t\\tthis.#NSqueue = null;\\r\\n\\t\\tObject.keys(this).forEach(key => this[key] = null);\\r\\n\\r\\n\\t\\tthis.fire(OS_EVENT.ON_EXIT);\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/os/os.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DOM_CONSTANTS } from '/os/constants.js'\\r\\nimport { Utils } from '/os/utils.js'\\r\\n\\r\\nexport class Terminal {\\r\\n\\tconstructor() {\\r\\n\\t\\tthis.#doc = globalThis['document'];\\r\\n\\t}\\r\\n\\tasync inputToTerminal(command) {\\r\\n\\t\\tlet terminal = this.#doc.getElementById(DOM_CONSTANTS.terminalInputId)\\r\\n\\r\\n\\t\\tif (!terminal) {\\r\\n\\t\\t\\tconst terminalButton = this.#doc.querySelector(DOM_CONSTANTS.terminalBtnSelector)\\r\\n\\r\\n\\t\\t\\tif (terminalButton) {\\r\\n\\t\\t\\t\\tterminalButton.click()\\r\\n\\t\\t\\t\\treturn Utils.sleep(300).then(() => Terminal.executeTerminalCommand( terminal, command));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn Terminal.executeTerminalCommand(terminal, command);\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {HTMLElement} terminal  @param {string} command */\\r\\n\\tstatic executeTerminalCommand(terminal, command) {\\r\\n\\t\\tterminal = terminal || globalThis['document'].getElementById(DOM_CONSTANTS.terminalInputId)\\r\\n\\r\\n\\t\\tif (terminal) {\\r\\n\\t\\t\\tterminal.value = command\\r\\n\\t\\t\\tconst handler = Object.keys(terminal)[1];\\r\\n\\t\\t\\tterminal[handler].onChange({ target: terminal });\\r\\n\\t\\t\\tterminal[handler].onKeyDown({ key: 'Enter', preventDefault: () => null })\\r\\n\\r\\n\\t\\t\\treturn true\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn false\\r\\n\\t}\\r\\n\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#doc\\r\\n}\\r\\n\",\"filename\":\"/os/terminal.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nexport const Utils = {\\r\\n\\tsleep : (ms) => {\\r\\n\\t\\treturn new Promise(resolve => setTimeout(resolve, ms));\\r\\n\\t},\\r\\n\\t\\r\\n\\t// usage: x = new Utils.Deferred()\\r\\n\\t// x.promise.then(...)\\r\\n\\t// x.resolve(args)\\r\\n\\tDeferred: function () {\\r\\n\\t\\tvar self = this;\\r\\n\\t\\tthis.promise = new Promise(function(resolve, reject) {\\r\\n\\t\\t\\tself.reject = reject\\r\\n\\t\\t\\tself.resolve = resolve\\r\\n\\t\\t})\\r\\n\\t},\\r\\n}\\r\\n\",\"filename\":\"/os/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DOM_CONSTANTS, windowIcon, WINDOW_WIDGET_CSS } from '/os/constants.js'\\r\\nimport { EventListener, WindowWidget_EVENT, OS_EVENT  } from '/os/event_listener.js'\\r\\nimport { Logger } from '/os/logger.js'\\r\\n\\r\\nexport class WindowWidgetFactory extends EventListener {\\r\\n}\\r\\n\\r\\nexport class WindowWidget extends EventListener {\\r\\n\\t/**\\r\\n\\t * @param {object} parent\\r\\n\\t * @param {import('/os/os.js').OS} os\\r\\n\\t * @param {string} [id]\\r\\n\\t */\\r\\n\\tconstructor(parent, os, id) {\\r\\n\\t\\tsuper();\\r\\n\\t\\tthis.#parent = parent;\\r\\n\\t\\tthis.#windowId = id;\\r\\n\\t\\tthis.#doc = globalThis['document'];\\r\\n\\t\\tthis.#menuItems = [];\\r\\n\\t\\tthis.#os = os;\\r\\n\\r\\n\\t\\tthis.#log = new Logger(this, os.logRenderer);\\r\\n\\t\\tthis.eventListener_initLog(this.#log);\\r\\n\\r\\n\\t\\tos.listen(OS_EVENT.ON_EXIT, () => this.on_exit());\\r\\n\\t}\\r\\n\\t\\r\\n\\tinit() {\\r\\n\\t\\tthis.#os.gui.injectCSS(WINDOW_WIDGET_CSS, 'window_widget_css');\\r\\n\\t\\tthis.#initialiseWindow(this.#windowId)\\r\\n\\t}\\r\\n\\r\\n\\tget isVisible() {\\r\\n\\t\\treturn this.#isVisible\\r\\n\\t}\\r\\n\\r\\n\\tshow() {\\r\\n\\t\\tthis.windowVisibility(true);\\r\\n\\t}\\r\\n\\r\\n\\thide() {\\r\\n\\t\\tthis.windowVisibility(false);\\r\\n\\t}\\r\\n\\r\\n\\twindowVisibilityToggle() {\\r\\n\\t\\tthis.windowVisibility(!this.#isVisible);\\r\\n\\t}\\r\\n\\r\\n\\twindowVisibility(visible) {\\r\\n\\t\\tif (visible != this.#isVisible) {\\r\\n\\t\\t\\tthis.#isVisible = visible;\\r\\n\\r\\n\\t\\t\\tif (!this.#container) return;\\r\\n\\r\\n\\t\\t\\tif (this.#isVisible) {\\r\\n\\t\\t\\t\\tthis.#container.style.display = ''\\r\\n\\t\\t\\t\\tthis.#initialiseWindowPosition()\\r\\n\\t\\t\\t\\tthis.fire(WindowWidget_EVENT.SHOW);\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tthis.#container.style.display = 'none'\\r\\n\\t\\t\\t\\tthis.fire(WindowWidget_EVENT.HIDE);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/** @param { {label: string, callback: Function} } params */\\r\\n\\taddMenuItem(params) {\\r\\n\\t\\tthis.#menuItems.push({ ...params, div: null });\\r\\n\\r\\n\\t\\tif (!this.menuDiv) return;\\r\\n\\r\\n\\t\\tlet item = this.#menuItems[this.#menuItems.length - 1];\\r\\n\\t\\tthis.#renderMenuItem(item);\\r\\n\\t}\\r\\n\\r\\n\\tsetTitle(title) {\\r\\n\\t\\tthis.#container.querySelector('.window__title').textContent = title\\r\\n\\t}\\r\\n\\r\\n\\tgetContentDiv() {\\r\\n\\t\\treturn this.#contentWindow\\r\\n\\t}\\r\\n\\r\\n\\tgetContainer() {\\r\\n\\t\\treturn this.#container\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#parent\\r\\n\\t#windowId\\r\\n\\t#doc\\r\\n\\t#menuItems\\r\\n\\t#os\\r\\n\\t#log\\r\\n\\t#container\\r\\n\\t#contentWindow\\r\\n\\t#explorerWindow\\r\\n\\t#isVisible\\r\\n\\r\\n\\t#left\\r\\n\\t#top\\r\\n\\t#elementWidth\\r\\n\\t#elementHeight\\r\\n\\t#windowWidth\\r\\n\\t#windowHeight\\r\\n\\t#grabStart = {}\\r\\n\\t#modalStart = {}\\r\\n\\t#boundBeginGrabbing = (event) => this.#beginGrabbing(event)\\r\\n\\t#boundEndGrabbing = (event) => this.#endGrabbing(event)\\r\\n\\t#boundMouseMove = (event) => this.#mouseMove(event)\\r\\n\\r\\n\\r\\n\\t#initialiseWindow(id) {\\r\\n\\t\\tif (this.#container) throw new Error(\\\"Window: already initialised\\\");\\r\\n\\t\\tthis.#container = this.#createWindow(id)\\r\\n\\t\\t/** @type {HTMLElement} */\\r\\n\\t\\tthis.#explorerWindow = this.#container.querySelector('.window')\\r\\n\\t\\t/** @type {HTMLElement} */\\r\\n\\t\\tthis.#contentWindow = this.#container.querySelector('.window__content')\\r\\n\\t}\\r\\n\\r\\n\\t#createWindow(id) {\\r\\n\\t\\tconst element = this.#createBodyDiv();\\r\\n\\t\\tif(id) element.id = id\\r\\n\\t\\telement.classList.add('window-container')\\r\\n\\t\\telement.style.display = 'none';\\r\\n\\t\\telement.innerHTML = `\\r\\n\\t\\t\\t<div class=\\\"window\\\">\\r\\n\\t\\t\\t<div class=\\\"window__toolbar\\\">\\r\\n\\t\\t\\t\\t<img src=\\\"${windowIcon}\\\" alt=\\\"\\\" class=\\\"window__icon\\\">\\r\\n\\t\\t\\t\\t<h1 class=\\\"window__title\\\"></h1>\\r\\n\\t\\t\\t\\t<div class=\\\"window__cta-group\\\">\\r\\n\\t\\t\\t\\t\\t<button class=\\\"btn btn--small window__cta-minimise\\\">\\r\\n\\t\\t\\t\\t\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 18 18\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<path d=\\\"m3 13h12v2h-12z\\\" fill=\\\"#000\\\" />\\r\\n\\t\\t\\t\\t\\t\\t</svg>\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button class=\\\"btn btn--small window__cta-maximise\\\">\\r\\n\\t\\t\\t\\t\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 18 18\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<path d=\\\"m3 3h12v2h-12z\\\" fill=\\\"#000\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t<path d=\\\"m3 3h12v12h-12z\\\" stroke=\\\"#000\\\" fill='none' />\\r\\n\\t\\t\\t\\t\\t\\t</svg>\\r\\n\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button class=\\\"btn btn--small window__cta-close\\\">\\r\\n\\t\\t\\t\\t\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 18 18\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<g stroke=\\\"#000\\\" stroke-width=\\\"1.5\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<line x1=\\\"3\\\" y1=\\\"3\\\" x2=\\\"15\\\" y2=\\\"15\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<line x2=\\\"3\\\" y1=\\\"3\\\" x1=\\\"15\\\" y2=\\\"15\\\" />\\r\\n\\t\\t\\t\\t\\t\\t\\t</g>\\r\\n\\t\\t\\t\\t\\t\\t</svg>\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"window__menu\\\">\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"window__content\\\">\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t\\t`\\r\\n\\r\\n\\t\\tthis.#addWindowEventListeners(element)\\r\\n\\t\\tthis.#renderMenu(element);\\r\\n\\t\\treturn element\\r\\n\\t}\\r\\n\\r\\n\\t#createBodyDiv() {\\r\\n\\t\\tlet div = this.#doc.createElement('div');\\r\\n\\t\\tthis.#doc.body.appendChild(div);\\r\\n\\t\\treturn div;\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {HTMLElement} element */\\r\\n\\t#addWindowEventListeners(element) {\\r\\n\\t\\telement.querySelector('.window__cta-minimise').addEventListener('click', () => {\\r\\n\\t\\t\\tthis.hide();\\r\\n\\t\\t})\\r\\n\\t\\telement.querySelector('.window__cta-close').addEventListener('click', () => {\\r\\n\\t\\t\\tthis.hide();\\r\\n\\t\\t\\tthis.fire(WindowWidget_EVENT.CLOSE);\\r\\n\\t\\t})\\r\\n\\t\\telement.querySelector('.window__toolbar').addEventListener('mousedown', this.#boundBeginGrabbing)\\r\\n\\t\\telement.querySelector('.window__toolbar').addEventListener('mousedown', () => {\\r\\n\\t\\t\\tWindowWidget.stealFocusHandler()\\r\\n\\t\\t\\tthis.#explorerWindow.classList.add(DOM_CONSTANTS.windowFocusedClass)\\r\\n\\t\\t})\\r\\n\\t\\telement.querySelector('.window').addEventListener('click', (e) => {\\r\\n\\t\\t\\te.stopPropagation()\\r\\n\\t\\t\\tWindowWidget.stealFocusHandler()\\r\\n\\t\\t\\tthis.#explorerWindow.classList.add(DOM_CONSTANTS.windowFocusedClass)\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\tif (!globalThis.hasBoundWindowFocusListener) {\\r\\n\\t\\t\\tglobalThis.hasBoundWindowFocusListener = true\\r\\n\\t\\t\\tthis.#doc.body.addEventListener('click', WindowWidget.stealFocusHandler)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t#renderMenu(parentDiv) {\\r\\n\\t\\tthis.menuDiv = parentDiv.querySelector('.window__menu')\\r\\n\\r\\n\\t\\tfor (let item of this.#menuItems) {\\r\\n\\t\\t\\tthis.#renderMenuItem(item);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t#renderMenuItem(menuItem) {\\r\\n\\t\\tlet { label, callback } = menuItem;\\r\\n\\t\\tlet div = this.#doc.createElement('span');\\r\\n\\t\\tmenuItem.div = div;\\r\\n\\t\\tdiv.textContent = label\\r\\n\\t\\tdiv.addEventListener('click', callback);\\r\\n\\t\\tthis.menuDiv.appendChild(div)\\r\\n\\t}\\r\\n\\r\\n\\t#initialiseWindowPosition() {\\r\\n\\t\\tthis.#container.classList.add(DOM_CONSTANTS.hiddenClass)\\r\\n\\r\\n\\t\\tsetTimeout(() => {\\r\\n\\t\\t\\tthis.#left = globalThis.innerWidth / 2 - this.#explorerWindow.offsetWidth / 2\\r\\n\\t\\t\\tthis.#top = globalThis.innerHeight / 2 - this.#explorerWindow.offsetHeight / 2\\r\\n\\r\\n\\t\\t\\tthis.#updateWindowPosition()\\r\\n\\r\\n\\t\\t\\tthis.#container.classList.remove(DOM_CONSTANTS.hiddenClass)\\r\\n\\t\\t}, 50)\\r\\n\\t}\\r\\n\\r\\n\\t#updateWindowPosition() {\\r\\n\\t\\tthis.#explorerWindow.style.transform = `translate(${this.#left}px, ${this.#top}px)`\\r\\n\\t}\\r\\n\\r\\n\\t#beginGrabbing({ x, y, button }) {\\r\\n\\t\\tif (!button) {\\r\\n\\t\\t\\tconst win = globalThis['window']\\r\\n\\t\\t\\tthis.#grabStart = { x, y }\\r\\n\\t\\t\\tthis.#elementWidth = this.#explorerWindow.offsetWidth\\r\\n\\t\\t\\tthis.#elementHeight = this.#explorerWindow.offsetHeight\\r\\n\\t\\t\\tthis.#modalStart = { x: this.#left, y: this.#top }\\r\\n\\t\\t\\tthis.#windowWidth = win.innerWidth\\r\\n\\t\\t\\tthis.#windowHeight = win.innerHeight\\r\\n\\r\\n\\t\\t\\tconst body = this.#doc.body\\r\\n\\t\\t\\tbody.addEventListener('mousemove', this.#boundMouseMove)\\r\\n\\t\\t\\tbody.addEventListener('mouseup', this.#boundEndGrabbing)\\r\\n\\t\\t\\tbody.addEventListener('mouseleave', this.#boundEndGrabbing)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t#endGrabbing(event) {\\r\\n\\t\\tconst body = this.#doc.body\\r\\n\\t\\tbody.removeEventListener('mousemove', this.#boundMouseMove)\\r\\n\\t\\tbody.removeEventListener('mouseup', this.#boundEndGrabbing)\\r\\n\\t\\tbody.removeEventListener('mouseleave', this.#boundEndGrabbing)\\r\\n\\t}\\r\\n\\r\\n\\t#mouseMove({ x, y }) {\\r\\n\\t\\tlet leftFinal = this.#modalStart.x + (x - this.#grabStart.x)\\r\\n\\t\\tlet topFinal = this.#modalStart.y + (y - this.#grabStart.y)\\r\\n\\r\\n\\t\\tconst leftIsBeforeScreen = leftFinal < 0\\r\\n\\t\\tconst leftIsAfterScreen = leftFinal + this.#elementWidth > this.#windowWidth\\r\\n\\t\\tif (leftIsBeforeScreen || leftIsAfterScreen) {\\r\\n\\t\\t\\tif (leftIsBeforeScreen) {\\r\\n\\t\\t\\t\\tleftFinal = 0\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tleftFinal = this.#windowWidth - this.#elementWidth\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.#modalStart.x = leftFinal\\r\\n\\t\\t\\tthis.#grabStart.x = Math.max(Math.min(x, this.#windowWidth - 5), 5)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconst topIsBeforeScreen = topFinal < 0\\r\\n\\t\\tconst topIsAfterScreen = topFinal + this.#elementHeight > this.#windowHeight\\r\\n\\t\\tif (topIsBeforeScreen || topIsAfterScreen) {\\r\\n\\t\\t\\tif (topIsBeforeScreen) {\\r\\n\\t\\t\\t\\ttopFinal = 0\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\ttopFinal = this.#windowHeight - this.#elementHeight\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.#modalStart.y = topFinal\\r\\n\\t\\t\\tthis.#grabStart.y = Math.max(Math.min(y, this.#windowHeight), 5)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.#left = leftFinal\\r\\n\\t\\tthis.#top = topFinal\\r\\n\\t\\tthis.#updateWindowPosition()\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\ton_exit() {\\r\\n\\t\\tthis.#dispose()\\r\\n\\t}\\r\\n\\r\\n\\t#dispose() {\\r\\n\\t\\tif (!this.#container) return;\\r\\n\\t\\tthis.#container.remove()\\r\\n\\t\\tthis.#container = null;\\r\\n\\t\\tthis.#contentWindow = null;\\r\\n\\t\\tthis.#parent = null;\\r\\n\\t\\tthis.#os = null;\\r\\n\\t\\tthis.#log = null;\\r\\n\\t\\tthis.#explorerWindow = null;\\r\\n\\t\\tthis.#isVisible = false;\\r\\n\\t}\\r\\n\\r\\n\\tstatic stealFocusHandler() {\\r\\n\\t\\tArray.from(globalThis['document'].querySelectorAll(`.window.${DOM_CONSTANTS.windowFocusedClass}`)).forEach((win) =>\\r\\n\\t\\t\\twin.classList.remove(DOM_CONSTANTS.windowFocusedClass)\\r\\n\\t\\t)\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/os/window_widget.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OS_EVENT, EventListener, ServersManager_EVENT } from '/os/event_listener.js'\\r\\nimport { Logger } from '/os/logger.js'\\r\\n\\r\\n/**\\r\\n * @typedef {{parent: string, neighbors: string[]}} ServerObject\\r\\n */\\r\\n\\r\\nexport class ServersManager extends EventListener {\\r\\n\\r\\n\\t/** @param {import('/os/os.js').OS} os */\\r\\n\\tconstructor(os) {\\r\\n\\t\\tsuper();\\r\\n\\t\\tthis.#os = os;\\r\\n\\r\\n\\t\\tthis.#log = new Logger(this, os.logRenderer);\\r\\n\\t\\tthis.eventListener_initLog(this.#log);\\r\\n\\r\\n\\t\\t//this.#server = this.#getCurrentServer()\\r\\n\\t\\tthis.#lastWatchTime = Date.now();\\r\\n\\r\\n\\t\\tthis.#os.listen(OS_EVENT.INIT, () => this.#init());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.LOOP_STEP, () => this.#run());\\r\\n\\r\\n\\t\\tthis.#getCurrentConnectedServer();\\r\\n\\t}\\r\\n\\r\\n\\t/** @return {String} */\\r\\n\\tget connectedServer() {\\r\\n\\t\\treturn this.#server\\r\\n\\t}\\r\\n\\r\\n\\t#init() {\\r\\n\\t\\tthis.#fetchAllServersFull()\\r\\n\\t}\\r\\n\\r\\n\\t/** @return {ServerObject[]} */\\r\\n\\tget serversArray() {\\r\\n\\t\\treturn this.#serversArray ? [...this.#serversArray] : []\\r\\n\\t}\\r\\n\\r\\n\\t/** @returns {Object.<string, ServerObject>} */\\r\\n\\tget serversObj() {\\r\\n\\t\\tif (!this.#serversObj) return {};\\r\\n\\r\\n\\t\\tlet copy = { ...this.#serversObj };\\r\\n\\t\\tObject.freeze(copy);\\r\\n\\t\\tObject.values(copy).forEach(obj => obj.neighbors = [...obj.neighbors]);\\r\\n\\t\\treturn copy;\\r\\n\\t}\\r\\n\\r\\n\\tget purchasedServers() {\\r\\n\\t\\treturn this.#purchasedServers ? [...this.#purchasedServers] : [];\\r\\n\\t}\\r\\n\\r\\n\\tget serversObjFull() {\\r\\n\\t\\tif (!this.#serversObjFull) {\\r\\n\\t\\t\\tthis.#fetchAllServersFull()\\r\\n\\t\\t\\treturn [];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet copy = [...this.#serversObjFull ];\\r\\n\\t\\tObject.freeze(copy);\\r\\n\\t\\treturn copy;\\r\\n\\t}\\r\\n\\t\\r\\n\\t\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#os\\r\\n\\t#log\\r\\n\\t#server = 'home'\\r\\n\\t#serversArray // array of name\\r\\n\\t#serversObj   // map<name, {parent: string, neighbors: string[]}>\\r\\n\\t#serversObjFull // map<name, NS::Server>\\r\\n\\t#purchasedServers\\r\\n\\t#lastWatchTime\\r\\n\\r\\n\\t#run() {\\r\\n\\t\\tconst watchDelay = 2000;\\r\\n\\r\\n\\t\\tlet diff = Date.now() - this.#lastWatchTime;\\r\\n\\t\\tif (diff < 0) { this.#lastWatchTime = Date.now() } // OS error\\r\\n\\r\\n\\t\\tif (diff > watchDelay) {\\r\\n\\t\\t\\tthis.#lastWatchTime = Date.now();\\r\\n\\t\\t\\tthis.#serverWatch()\\r\\n\\r\\n\\t\\t\\tthis.#fetchAllServersFull()\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync #getCurrentConnectedServer() {\\r\\n\\t\\tif (!this.#serversObj) await this.#fetchAllServers()\\r\\n\\r\\n\\t\\tlet connectedServer = await this.#os.getNS(ns => {\\r\\n\\t\\t\\tfor (const name of this.#serversArray) {\\r\\n\\t\\t\\t\\tif (ns.serverExists(name) && ns.getServer(name).isConnectedTo) {\\r\\n\\t\\t\\t\\t\\treturn name\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\tif (!connectedServer) connectedServer = 'home'\\r\\n\\t\\treturn connectedServer\\r\\n\\t}\\r\\n\\r\\n\\tasync #serverWatch() {\\r\\n\\t\\tconst currentServer = await this.#getCurrentConnectedServer()\\r\\n\\r\\n\\t\\tif (currentServer !== this.connectedServer) {\\r\\n\\t\\t\\tthis.#server = currentServer\\r\\n\\t\\t\\tthis.fire(ServersManager_EVENT.CONNECTED_SERV_CHANGED)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync #fetchAllServers() {\\r\\n\\t\\tawait this.#os.getNS(ns => {\\r\\n\\t\\t\\tlet serversObj = { \\\"home\\\": { parent: null } };\\r\\n\\t\\t\\tlet serversArray = [];\\r\\n\\r\\n\\t\\t\\tlet scanned = {};\\r\\n\\t\\t\\tlet stack = [\\\"home\\\"];\\r\\n\\r\\n\\t\\t\\twhile (stack.length) {\\r\\n\\t\\t\\t\\tlet target = stack.pop();\\r\\n\\r\\n\\t\\t\\t\\tif (scanned[target]) continue;\\r\\n\\r\\n\\t\\t\\t\\tlet neighbors = ns.scan(target);\\r\\n\\t\\t\\t\\tserversObj[target].neighbors = neighbors;\\r\\n\\t\\t\\t\\tserversArray.push(target);\\r\\n\\t\\t\\t\\tscanned[target] = 1;\\r\\n\\r\\n\\t\\t\\t\\tstack.push(...neighbors);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tneighbors.forEach(serv => {\\r\\n\\t\\t\\t\\t\\tif (!serversObj[serv]) {\\r\\n\\t\\t\\t\\t\\t\\tserversObj[serv] = { parent: target };\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.#serversObj = serversObj;\\r\\n\\t\\t\\tthis.#serversArray = serversArray;\\r\\n\\t\\t\\tthis.#purchasedServers = ns.getPurchasedServers();\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tasync #fetchAllServersFull() {\\r\\n\\t\\tawait this.#fetchAllServers();\\r\\n\\r\\n\\t\\tthis.#serversObjFull = await this.#os.getNS(ns => {\\r\\n\\t\\t\\treturn this.#serversArray\\r\\n\\t\\t\\t\\t.filter(ns.serverExists)\\r\\n\\t\\t\\t\\t.map(ns.getServer)\\r\\n\\t\\t});\\r\\n\\t}\\r\\n}\",\"filename\":\"/os/servers_manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DOM_CONSTANTS } from '/os/constants.js'\\r\\nimport { EventListener, OS_EVENT, WindowWidget_EVENT, ServersManager_EVENT } from '/os/event_listener.js'\\r\\nimport { WindowWidget } from '/os/window_widget.js'\\r\\nimport { Logger } from '/os/logger.js'\\r\\n\\r\\nexport class FilesExplorer {\\r\\n\\t/** @param {import('/os/os.js').OS} os */\\r\\n\\tconstructor(os) {\\r\\n\\t\\tthis.#os = os;\\r\\n\\r\\n\\t\\tthis.#winRenderer = new FilesExplorerRenderer(os, this);\\r\\n\\r\\n\\t\\tthis.#os.listen(OS_EVENT.INIT, () => this.#init());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.ON_EXIT, () => this.#on_exit());\\r\\n\\t\\t//this.#os.filesExplorer.render()\\r\\n\\t}\\r\\n\\r\\n\\tchangeDirectory_oneUp() {\\r\\n\\t\\tlet currentDirectory = this.#currentDir.replace(/\\\\/+$/g, '')\\r\\n\\r\\n\\t\\tcurrentDirectory = currentDirectory.substring(0, currentDirectory.lastIndexOf('/') + 1);\\r\\n\\r\\n\\t\\tthis.changeCurrentDir(currentDirectory);\\r\\n\\t}\\r\\n\\r\\n\\tchangeDirectoryTo(dir) {\\r\\n\\t\\tlet targetPath = this.#currentDir + '/' + dir;\\r\\n\\t\\ttargetPath = targetPath.replace(/^\\\\/+/g, '')\\r\\n\\r\\n\\t\\tthis.changeCurrentDir(targetPath);\\r\\n\\t}\\r\\n\\r\\n\\tchangeCurrentDir(dir) {\\r\\n\\t\\tif (this.#currentDir == dir) return;\\r\\n\\r\\n\\t\\tif (dir.endsWith('/')) dir = dir.substring(0, dir.length - 1);\\r\\n\\t\\tconsole.log('changing to ', dir);\\r\\n\\t\\tthis.#currentDir = dir;\\r\\n\\r\\n\\t\\tlet currentFiles = FilesExplorer.narrowFilesToGivenDir(this.#files, this.#currentDir) ?? { files: [], dirs: {} };\\r\\n\\t\\t//this.#winRenderer.renderFiles(currentFiles, this.#currentDir);\\r\\n\\t\\tthis.#winRenderer.rerender();\\r\\n\\t}\\r\\n\\r\\n\\topenFile(fileName) {\\r\\n\\t\\tconst fileHandlers = {\\r\\n\\t\\t\\tnano: ['.js', '.ns', '.script'],\\r\\n\\t\\t\\trun: ['.exe', '.cct'],\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet command = Object.entries(fileHandlers).find(([, extensions]) => extensions.find((extension) => fileName.endsWith(extension)))?.[0]\\r\\n\\r\\n\\t\\tif (!command) {\\r\\n\\t\\t\\tcommand = 'cat'\\r\\n\\t\\t}\\r\\n\\t\\tlet dir = this.#currentDir ? this.#currentDir + '/' : ''\\r\\n\\t\\tthis.#os.terminal.inputToTerminal(`${command} ${dir+fileName}`);\\r\\n\\t\\tthis.#winRenderer.hide();\\r\\n\\t}\\r\\n\\r\\n\\tget currentServer() {\\r\\n\\t\\treturn this.#currentServer\\r\\n\\t}\\r\\n\\r\\n\\tget currentDir() {\\r\\n\\t\\treturn this.#currentDir\\r\\n\\t}\\r\\n\\r\\n\\tasync readServerFiles() {\\r\\n\\t\\tif (this.#currentServer != this.#os.serversManager.connectedServer) {\\r\\n\\t\\t\\tthis.#setCurrentServer(this.#os.serversManager.connectedServer);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet mainDirs = { files: [], dirs: {} };\\r\\n\\t\\tif (!this.#currentServer) return mainDirs;\\r\\n\\r\\n\\t\\tlet files = await this.#os.getNS((ns) => {\\r\\n\\t\\t\\treturn ns.ls(this.#currentServer);\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tfor (let file of files) {\\r\\n\\t\\t\\tlet arr = file.split('/');\\r\\n\\t\\t\\tlet { files, dirs } = mainDirs;\\r\\n\\t\\t\\tfor (let i = 0; i < arr.length - 1; ++i) {\\r\\n\\t\\t\\t\\tlet part = arr[i];\\r\\n\\t\\t\\t\\tif (!part) continue;\\r\\n\\r\\n\\t\\t\\t\\tif (!dirs[part]) dirs[part] = { files: [], dirs: {} };\\r\\n\\t\\t\\t\\tfiles = dirs[part].files;\\r\\n\\t\\t\\t\\tdirs = dirs[part].dirs;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfiles.push(arr[arr.length - 1]);\\r\\n\\t\\t}\\r\\n\\t\\tthis.#files = mainDirs;\\r\\n\\t\\treturn mainDirs;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#os\\r\\n\\t#winRenderer\\r\\n\\t#currentServer = 'home'; // current rendered server\\r\\n\\t#currentDir = ''\\r\\n\\t#files\\r\\n\\r\\n\\t#init() {\\r\\n\\t\\tthis.#injectFileExplorerButton();\\r\\n\\t\\tthis.#os.serversManager.listen(ServersManager_EVENT.CONNECTED_SERV_CHANGED, () => this.#winRenderer.rerender());\\r\\n\\t}\\r\\n\\r\\n\\t#injectFileExplorerButton() {\\r\\n\\t\\tlet fileExplorer_newPath = '<path d=\\\"M17.927,5.828h-4.41l-1.929-1.961c-0.078-0.079-0.186-0.125-0.297-0.125H4.159c-0.229,0-0.417,0.188-0.417,0.417v1.669H2.073c-0.229,0-0.417,0.188-0.417,0.417v9.596c0,0.229,0.188,0.417,0.417,0.417h15.854c0.229,0,0.417-0.188,0.417-0.417V6.245C18.344,6.016,18.156,5.828,17.927,5.828 M4.577,4.577h6.539l1.231,1.251h-7.77V4.577z M17.51,15.424H2.491V6.663H17.51V15.424z\\\">'\\r\\n\\r\\n\\t\\tthis.#os.gui.addMenuButton({\\r\\n\\t\\t\\tbtnLabel: 'File Explorer',\\r\\n\\t\\t\\tcallback: () => this.#windowVisibilityToggle(),\\r\\n\\t\\t\\tbtnIconPath: fileExplorer_newPath,\\r\\n\\t\\t\\tbtnIconViewBox: 'viewBox=\\\"0 2 18 17\\\"',\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t/** when something (button) wants us to be shown or hiden */\\r\\n\\t#windowVisibilityToggle() {\\r\\n\\t\\tthis.#winRenderer.windowVisibilityToggle()\\r\\n\\t}\\r\\n\\r\\n\\t#setCurrentServer(server) {\\r\\n\\t\\tthis.#currentDir = '';\\r\\n\\t\\tthis.#currentServer = server;\\r\\n\\t}\\r\\n\\r\\n\\t#on_exit() {\\r\\n\\t}\\r\\n\\r\\n\\tstatic narrowFilesToGivenDir(files, currentDirName) {\\r\\n\\t\\tlet arr = currentDirName.split('/');\\r\\n\\t\\tlet currDir = files;\\r\\n\\t\\tarr.forEach(part => {\\r\\n\\t\\t\\tif (!part) return;\\r\\n\\t\\t\\tcurrDir = currDir && currDir.dirs[part];\\r\\n\\t\\t});\\r\\n\\t\\treturn currDir;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nclass FilesExplorerRenderer extends EventListener {\\r\\n\\t/** @param {import('/os/os.js').OS} os, @param {FilesExplorer} filesExplorer */\\r\\n\\tconstructor(os, filesExplorer) {\\r\\n\\t\\tsuper();\\r\\n\\t\\tthis.#os = os;\\r\\n\\t\\tthis.#filesExplorer = filesExplorer;\\r\\n\\r\\n\\t\\tthis.#log = new Logger(this, os.logRenderer);\\r\\n\\t\\tthis.eventListener_initLog(this.#log);\\r\\n\\r\\n\\t\\tthis.#windowWidget = new WindowWidget(this, os);\\r\\n\\t\\tthis.#windowWidget.listen(WindowWidget_EVENT.SHOW, () => this.#onShow());\\r\\n\\r\\n\\t\\tthis.#os.listen(OS_EVENT.ON_EXIT, () => this.#on_exit());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.INIT, () => this.#init());\\r\\n\\t}\\r\\n\\r\\n\\t/** @return {String} */\\r\\n\\tget title() {\\r\\n\\t\\treturn `${this.#filesExplorer.currentServer}: /${this.#filesExplorer.currentDir}`\\r\\n\\t}\\r\\n\\r\\n\\thide() {\\r\\n\\t\\tthis.#windowWidget.hide();\\r\\n\\t}\\r\\n\\r\\n\\twindowVisibilityToggle() {\\r\\n\\t\\tthis.#windowWidget.windowVisibilityToggle();\\r\\n\\t}\\r\\n\\r\\n\\trerender() {\\r\\n\\t\\tthis.#render(true);\\r\\n\\t}\\r\\n\\r\\n\\t// private fields, methods\\r\\n\\r\\n\\t#os\\r\\n\\t#filesExplorer\\r\\n\\t#windowWidget\\r\\n\\t#log\\r\\n\\t#isRendered = false\\r\\n\\t#aboutWindow\\r\\n\\r\\n\\t#onShow() {\\r\\n\\t\\tthis.#render();\\r\\n\\t}\\r\\n\\r\\n\\t#render(rerender = false) {\\r\\n\\t\\tif (this.#isRendered && !rerender) return;\\r\\n\\r\\n\\t\\tthis.#isRendered = true;\\r\\n\\r\\n\\t\\tthis.#filesExplorer.readServerFiles().then((files) => {\\r\\n\\t\\t\\tlet currentFiles = FilesExplorer.narrowFilesToGivenDir(files, this.#filesExplorer.currentDir) || [];\\r\\n\\t\\t\\tthis.#renderFiles(currentFiles, this.#filesExplorer.currentDir);\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t#renderFiles(currentFiles, currentDirName) {\\r\\n\\t\\tthis.#windowWidget.setTitle(this.title)\\r\\n\\r\\n\\t\\tlet windowDiv = this.#windowWidget.getContainer()\\r\\n\\r\\n\\t\\t// Update file list\\r\\n\\t\\tconst fileList = windowDiv.querySelector('.file-list')\\r\\n\\r\\n\\t\\tfileList.innerHTML =\\r\\n\\t\\t\\t(currentDirName ? this.#renderIcon('..', 'upDirectory') : '') +\\r\\n\\t\\t\\tObject.keys(currentFiles.dirs).map((elem) => this.#renderIcon(elem, 'directory')).join('') +\\r\\n\\t\\t\\tcurrentFiles.files.map((elem) => this.#renderIcon(elem, 'file')).join('');\\r\\n\\r\\n\\t\\t// Add icon event listeners\\r\\n\\t\\tArray.from(windowDiv.querySelectorAll('.file-list__button')).forEach((button) => {\\r\\n\\t\\t\\tbutton.addEventListener('dblclick', (event) => this.#fileListedOnClick(event))\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t#fileListedOnClick(event) {\\r\\n\\t\\tthis.#log.debug(\\\"file on click\\\", event.target);\\r\\n\\t\\tlet button = event.currentTarget;\\r\\n\\r\\n\\t\\tevent.stopPropagation()\\r\\n\\t\\tconst fileName = button.dataset.fileName\\r\\n\\r\\n\\t\\tswitch (button.dataset.fileType) {\\r\\n\\t\\t\\tcase 'upDirectory':\\r\\n\\t\\t\\t\\tthis.#filesExplorer.changeDirectory_oneUp()\\r\\n\\t\\t\\t\\tbreak\\r\\n\\t\\t\\tcase 'directory':\\r\\n\\t\\t\\t\\tthis.#filesExplorer.changeDirectoryTo(fileName)\\r\\n\\t\\t\\t\\tbreak\\r\\n\\t\\t\\tcase 'file':\\r\\n\\t\\t\\t\\tthis.#filesExplorer.openFile(fileName)\\r\\n\\t\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t#renderIcon(name, type) {\\r\\n\\t\\treturn `\\r\\n\\t\\t\\t<li class=\\\"file-list__item\\\">\\r\\n\\t\\t\\t\\t<button class=\\\"file-list__button\\\" data-file-name=\\\"${name}\\\" data-file-type=\\\"${type}\\\">\\r\\n\\t\\t\\t\\t\\t${files_icons[type]}\\r\\n\\t\\t\\t\\t\\t<span class=\\\"file-list__label\\\">${name}</span>\\r\\n\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t</li>\\r\\n\\t\\t`\\r\\n\\t}\\r\\n\\r\\n\\t#init() {\\r\\n\\t\\tthis.#os.gui.injectCSS(files_explorer_css, 'files_explorer_css');\\r\\n\\t\\t\\r\\n\\t\\tthis.#windowWidget.init();\\r\\n\\t\\tthis.#windowWidget.getContentDiv().innerHTML = '<ul class=\\\"file-list\\\" />';\\r\\n\\t\\tthis.#windowWidget.getContentDiv().classList.add('whiteScrollbar')\\r\\n\\t\\tthis.#windowWidget.addMenuItem({ label: 'Debug', callback: () => this.#onDebugMenuClick() })\\r\\n\\t\\tthis.#windowWidget.addMenuItem({ label: 'Test', callback: () => this.#onTestMenuClick() })\\r\\n\\t\\tthis.#windowWidget.addMenuItem({ label: 'About', callback: () => this.#onAboutMenuClick() })\\r\\n\\t\\t//this.listenForTerminalHidden();\\r\\n\\t}\\r\\n\\r\\n\\t#onDebugMenuClick() {\\r\\n\\t\\tthis.#log.debug(\\\"MENU OPEN\\\");\\r\\n\\t\\tthis.#os.logRenderer.showWindow()\\r\\n\\t}\\r\\n\\r\\n\\t#onTestMenuClick() {\\r\\n\\t\\tthis.#log.debug(\\\"test dbg\\\");\\r\\n\\t\\tthis.#log.info(\\\"test info\\\");\\r\\n\\t\\tthis.#log.warn(\\\"test warn\\\");\\r\\n\\t\\tthis.#log.error(\\\"test error\\\");\\r\\n\\t}\\r\\n\\r\\n\\t#onAboutMenuClick() {\\r\\n\\t\\tif (!this.#aboutWindow) {\\r\\n\\t\\t\\tthis.#aboutWindow = this.#os.gui.createAboutWindow({\\r\\n\\t\\t\\t\\t'Name': 'Files Explorer',\\r\\n\\t\\t\\t\\t'Author': 'Phil#7068',\\r\\n\\t\\t\\t\\t'Contributor': 'lethern',\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t\\tthis.#aboutWindow.show()\\r\\n\\t}\\r\\n\\r\\n\\t#on_exit() {\\r\\n\\t\\tObject.keys(this).forEach(key => this[key] = null);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\nconst files_explorer_css = `\\r\\n.file-list {\\r\\n\\talign-content: flex-start;\\r\\n\\tdisplay: flex;\\r\\n\\tflex-wrap: wrap;\\r\\n\\tlist-style: none;\\r\\n\\tmargin: 0;\\r\\n\\tpadding: 6px;\\r\\n}\\r\\n\\r\\n.file-list__item {\\r\\n\\tmargin-bottom: 8px;\\r\\n\\ttext-align: center;\\r\\n\\twidth: 100px;\\r\\n}\\r\\n\\r\\n.file-list__button {\\r\\n\\talign-items: center;\\r\\n\\tappearance: none;\\r\\n\\tborder: 1px dotted transparent;\\r\\n\\tborder-radius: 2px;\\r\\n\\tbackground: none;\\r\\n\\tdisplay: flex;\\r\\n\\tflex-direction: column;\\r\\n\\tmargin: 0;\\r\\n\\tpadding: 2px;\\r\\n\\twidth: inherit;\\r\\n}\\r\\n\\r\\n.file-list__button:focus {\\r\\n\\tbackground: rgba(15, 75, 255, .3);\\r\\n\\tborder-color: #222;\\r\\n}\\r\\n\\r\\n.file-list__icon {\\r\\n\\theight: 38px;\\r\\n\\twidth: 32px;\\r\\n}\\r\\n\\r\\n.file-list__label {\\r\\n\\tcolor: #222;\\r\\n\\ttext-shadow: none;\\r\\n\\tword-wrap: anywhere;\\r\\n}`;\\r\\n\\r\\nconst files_icons = {\\r\\n\\tupDirectory: `\\r\\n\\t\\t<svg viewBox=\\\"0 0 64 64\\\" class=\\\"file-list__icon\\\">\\r\\n\\t\\t\\t<path d=\\\"M5 8v43a4 4 0 0 0 4 4h46a4 4 0 0 0 4-4V13H25l-5-5H5zm50 11v32H9V20l46-1zm-15.84 4-12.965 1.586 3.494 3.492C27.62 30.333 26 33.221 26 36.814 26 43.711 31 48 31 48l3-2s-3-3.977-3-8c0-2.346 1.18-4.115 3.037-5.574l3.54 3.539L39.16 23z\\\" />\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\tdirectory: `\\r\\n\\t\\t<svg viewBox=\\\"0 0 64 64\\\" class=\\\"file-list__icon\\\">\\r\\n\\t\\t\\t<path d=\\\"M5 8v43a4 4 0 0 0 4 4h46a4 4 0 0 0 4-4V13H25l-5-5H5zm50 11v32H9V20l46 0z\\\" />\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\tfile: `\\r\\n\\t\\t<svg viewBox=\\\"0 0 24 24\\\" class=\\\"file-list__icon\\\">\\r\\n\\t\\t\\t<path\\r\\n\\t\\t\\t\\tfill=\\\"#5B5B5B\\\"\\r\\n\\t\\t\\t\\td=\\\"M11.5 12h-3a.5.5 0 0 0 0 1H11v3.5c0 .827-.673 1.5-1.5 1.5S8 17.327 8 16.5a.5.5 0 0 0-1 0C7 17.879 8.121 19 9.5 19s2.5-1.121 2.5-2.5v-4a.5.5 0 0 0-.5-.5zM14.736 13H16.5c.275 0 .5.225.5.5a.5.5 0 0 0 1 0c0-.827-.673-1.5-1.5-1.5h-1.764c-.957 0-1.736.779-1.736 1.736 0 .661.368 1.256.96 1.553l2.633 1.316A.737.737 0 0 1 16.264 18H14.5a.501.501 0 0 1-.5-.5.5.5 0 0 0-1 0c0 .827.673 1.5 1.5 1.5h1.764c.957 0 1.736-.779 1.736-1.736a1.73 1.73 0 0 0-.96-1.553l-2.633-1.316A.737.737 0 0 1 14.736 13z\\\"\\r\\n\\t\\t\\t/>\\r\\n\\t\\t\\t<path\\r\\n\\t\\t\\t\\tfill=\\\"#5B5B5B\\\"\\r\\n\\t\\t\\t\\td=\\\"M22.5 10H21V1.5a.5.5 0 0 0-.5-.5h-11c-.023 0-.044.01-.066.013a.509.509 0 0 0-.288.133l-5 5a.505.505 0 0 0-.133.289C4.01 6.457 4 6.477 4 6.5V10H2.5a.5.5 0 0 0-.5.5v10a.5.5 0 0 0 .5.5H4v2.5a.5.5 0 0 0 .5.5h16a.5.5 0 0 0 .5-.5V21h1.5a.5.5 0 0 0 .5-.5v-10a.5.5 0 0 0-.5-.5zM9 2.707V6H5.707L9 2.707zM5 7h4.5a.5.5 0 0 0 .5-.5V2h10v8H5V7zm15 16H5v-2h15v2zm2-3H3v-9h19v9z\\\"\\r\\n\\t\\t\\t/>\\r\\n\\t\\t</svg>\\r\\n\\t`\\r\\n};\",\"filename\":\"/os/app/files_explorer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OS_EVENT, WindowWidget_EVENT } from '/os/event_listener.js'\\r\\nimport { WindowWidget } from '/os/window_widget.js'\\r\\n\\r\\n/** @typedef {{write: function(string, string, any[]):void, showWindow: function}} LoggerRender */\\r\\n\\r\\n/** @implements { LoggerRender} */\\r\\nexport class DebugConsoleRender {\\r\\n\\t/** @param {import('/os/os.js').OS} os */\\r\\n\\tconstructor(os) {\\r\\n\\t\\tthis.#os = os;\\r\\n\\t\\tthis.#logs = [];\\r\\n\\t\\tthis.#doc = globalThis['document'];\\r\\n\\r\\n\\t\\tthis.#os.listen(OS_EVENT.ON_EXIT, () => this.#on_exit());\\r\\n\\t}\\r\\n\\r\\n\\twrite(severity, className, args) {\\r\\n\\t\\tlet text = '[' + severity.toUpperCase() + '] ' + (className ? className + ': ' : '') + args;\\r\\n\\t\\tconsole.log(text);\\r\\n\\r\\n\\t\\tlet log = this.#storeLog(severity, className, text);\\r\\n\\r\\n\\t\\tthis.#renderLog(log);\\r\\n\\t\\tthis.#scrollDown()\\r\\n\\t}\\r\\n\\r\\n\\tshowWindow() {\\r\\n\\t\\tif (!this.#rendered) {\\r\\n\\t\\t\\tthis.#injectCSS();\\r\\n\\t\\t\\tthis.#renderWindow();\\r\\n\\t\\t}\\r\\n\\t\\tthis.#windowWidget.show();\\r\\n\\t\\tthis.#visible = true;\\r\\n\\t\\tthis.#logs.forEach(log => this.#renderLog(log));\\r\\n\\t\\tthis.#scrollDown()\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// private\\r\\n\\r\\n\\t/** @param {{severity, text, className, dom}} log */\\r\\n\\t#renderLog(log) {\\r\\n\\t\\tif (!this.#visible) return;\\r\\n\\t\\tif (log.dom) return;\\r\\n\\r\\n\\t\\tlet elem = this.#doc.createElement('div');\\r\\n\\t\\telem.textContent = log.text\\r\\n\\r\\n\\t\\tlet css = this.#severityToCss(log.severity);\\r\\n\\t\\tif (css) { elem.classList.add(css); }\\r\\n\\t\\tif (log.className) { elem.classList.add(log.className); }\\r\\n\\r\\n\\t\\tthis.#windowWidget.getContentDiv().appendChild(elem);\\r\\n\\t\\tlog.dom = elem;\\r\\n\\t}\\r\\n\\r\\n\\t#scrollDown() {\\r\\n\\t\\tif (!this.#visible) return;\\r\\n\\t\\tlet element = this.#windowWidget.getContentDiv()\\r\\n\\t\\telement.scrollTop = element.scrollHeight\\r\\n\\t}\\r\\n\\r\\n\\t#storeLog(severity, className, text) {\\r\\n\\t\\tthis.#logs.push({ severity, text, className, dom: null });\\r\\n\\t\\tif (this.#logs.length > this.#logsMax) {\\r\\n\\t\\t\\tthis.#removeSomeLogs();\\r\\n\\t\\t}\\r\\n\\t\\treturn this.#logs[this.#logs.length - 1];\\r\\n\\t}\\r\\n\\r\\n\\t#removeSomeLogs() {\\r\\n\\t\\tlet removed = this.#logs.splice(0, 20);\\r\\n\\t\\tremoved.forEach(log => {\\r\\n\\t\\t\\tif (log.dom && log.dom.parentNode) {\\r\\n\\t\\t\\t\\tlog.dom.parentNode.removeChild(log.dom);\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t#severityToCss(severity) {\\r\\n\\t\\tswitch (severity) {\\r\\n\\t\\t\\tcase 'debug': return 'consoleDebug';\\r\\n\\t\\t\\tcase 'info': return 'consoleInfo';\\r\\n\\t\\t\\tcase 'warn': return 'consoleWarn';\\r\\n\\t\\t\\tcase 'error': return 'consoleError';\\r\\n\\t\\t\\tdefault: return null;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t#injectCSS() {\\r\\n\\t\\tthis.#os.gui.injectCSS(console_render_css, 'console_render_css');\\r\\n\\t}\\r\\n\\r\\n\\t#renderWindow() {\\r\\n\\t\\tthis.#windowWidget = new WindowWidget(this, this.#os);\\r\\n\\t\\tthis.#windowWidget.init()\\r\\n\\t\\tthis.#windowWidget.getContentDiv().classList.add('debugWindow')\\r\\n\\t\\tthis.#windowWidget.getContentDiv().classList.add('whiteScrollbar')\\r\\n\\t\\tthis.#windowWidget.listen(WindowWidget_EVENT.HIDE, ()=>this.#onHide())\\r\\n\\t\\tthis.#rendered = true;\\r\\n\\t}\\r\\n\\r\\n\\t#onHide() {\\r\\n\\t\\tthis.#visible = false;\\r\\n\\t}\\r\\n\\r\\n\\t#on_exit() {\\r\\n\\t}\\r\\n\\r\\n\\t#os\\r\\n\\t#rendered = false\\r\\n\\t#visible = false\\r\\n\\t/** @type {{severity, text, className, dom}[]} */\\r\\n\\t#logs\\r\\n\\t#logsMax = 150\\r\\n\\t#doc\\r\\n\\t/** @type {WindowWidget} */\\r\\n\\t#windowWidget\\r\\n}\\r\\n\\r\\n\\r\\nconst console_render_css =\\r\\n\\t`\\r\\n.debugWindow{\\r\\n\\tdisplay: block;\\r\\n\\toverflow-y: scroll;\\r\\n\\tuser-select: text;\\r\\n\\tflex-direction: column;\\r\\n}\\r\\n.consoleDebug{\\r\\n\\tcolor: #828282;\\r\\n}\\r\\n.consoleInfo{\\r\\n\\tcolor: #252525;\\r\\n}\\r\\n.consoleWarn{\\r\\n\\tcolor: #9e6c12;\\r\\n}\\r\\n.consoleError{\\r\\n\\tcolor: #ec3131;\\r\\n}\\r\\n`;\\r\\n\",\"filename\":\"/os/app/logger_render.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0];\\r\\n\\tlet paths = { \\\"home\\\": \\\"\\\" };\\r\\n\\tlet queue = Object.keys(paths);\\r\\n\\tlet name;\\r\\n\\tlet output;\\r\\n\\tlet pathToTarget = [];\\r\\n\\twhile ((name = queue.shift())) {\\r\\n\\t\\tlet path = paths[name];\\r\\n\\t\\tlet scanRes = ns.scan(name);\\r\\n\\t\\tfor (let newSv of scanRes) {\\r\\n\\t\\t\\tif (paths[newSv] === undefined) {\\r\\n\\t\\t\\t\\tqueue.push(newSv);\\r\\n\\t\\t\\t\\tpaths[newSv] = `${path},${newSv}`;\\r\\n\\t\\t\\t\\tif (newSv == target)\\r\\n\\t\\t\\t\\t\\tpathToTarget = paths[newSv].substr(1).split(\\\",\\\");\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\toutput = \\\"home; \\\";\\r\\n\\r\\n\\tpathToTarget.forEach(server=> output += \\\" connect \\\" + server + \\\";\\\");\\r\\n\\r\\n\\tconst terminalInput = globalThis['document'].getElementById(\\\"terminal-input\\\");\\r\\n\\tterminalInput.value=output;\\r\\n\\tconst handler = Object.keys(terminalInput)[1];\\r\\n\\tterminalInput[handler].onChange({target:terminalInput});\\r\\n\\tterminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\r\\n}\\r\\n\\r\\nexport function autocomplete(data, args) {\\r\\n\\treturn [...data.servers];\\r\\n}\",\"filename\":\"/os/app/servers_explorer/connect.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { EventListener, OS_EVENT, WindowWidget_EVENT } from '/os/event_listener.js'\\r\\nimport { WindowWidget } from '/os/window_widget.js'\\r\\nimport { Utils } from '/os/utils.js'\\r\\nimport { Logger } from '/os/logger.js'\\r\\nimport { servers_explorer_css, server_icons } from '/os/app/servers_explorer/servers_explorer_css.js'\\r\\n\\r\\n// |-----------------------------------------------------------------------|\\r\\n// |\\t\\t\\t\\tservers_explorer.js\\r\\n// |\\t\\t\\tCreated by: TheDroidUrLookingFor\\r\\n// |\\r\\n// |\\tGithub: https://github.com/TheDroidYourLookingFor/BitBurner-Scripts\\r\\n// |\\r\\n// |      Last Modified by: TheDroidUrLookingFor\\r\\n// |\\r\\n// |\\t\\tVersion:\\t1.0.3\\r\\n// |\\r\\n// | Information: Currently you can only connect, backdoor, or NUKE targets.\\r\\n// |\\tMore features will be added in future versions.\\r\\n// |\\r\\n// |-----------------------------------------------------------------------|\\r\\n\\r\\nexport class ServersExplorer {\\r\\n\\t/** @param {import('/os/os.js').OS} os */\\r\\n\\tconstructor(os) {\\r\\n\\t\\tthis.#os = os;\\r\\n\\r\\n\\t\\tthis.#winRenderer = new ServersExplorerRenderer(os, this);\\r\\n\\r\\n\\t\\tthis.#os.listen(OS_EVENT.INIT, () => this.#init());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.ON_EXIT, () => this.#on_exit());\\r\\n\\t}\\r\\n\\r\\n\\tasync loop() {\\r\\n\\t\\tif (this.#isRendered) return;\\r\\n\\t\\tthis.#isRendered = true;\\r\\n\\r\\n\\t\\twhile (this.#isRendered) {\\r\\n\\t\\t\\tlet serverObjs = await this.#getServers();\\r\\n\\t\\t\\tthis.#winRenderer.renderServers(serverObjs);\\r\\n\\t\\t\\tawait Utils.sleep(5000);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync svConnect(serverName) {\\r\\n\\r\\n\\t\\tif (this.#os.serversManager.connectedServer == serverName) return;\\r\\n\\r\\n\\t\\tlet command = 'home'\\r\\n\\t\\tthis.#os.terminal.inputToTerminal(`${command}`);\\r\\n\\t\\tawait Utils.sleep(250);\\r\\n\\r\\n\\t\\tlet serversObj = this.#os.serversManager.serversObj;\\r\\n\\t\\tlet stack = [];\\r\\n\\t\\tlet serverTarget = serversObj[serverName];\\r\\n\\t\\tlet watchdog = 0;\\r\\n\\r\\n\\t\\twhile (serverName != 'home') {\\r\\n\\t\\t\\tstack.push(`connect ${serverName}`);\\r\\n\\r\\n\\t\\t\\tserverName = serverTarget.parent;\\r\\n\\t\\t\\tserverTarget = serversObj[serverName];\\r\\n\\t\\t\\tif (watchdog++ > 100) throw \\\"svConnect watchdog\\\";\\r\\n\\t\\t}\\r\\n\\t\\tstack.reverse();\\r\\n\\r\\n\\t\\tthis.#os.terminal.inputToTerminal(`${stack.join('; ')}`);\\r\\n\\t\\t//command = 'run /os/app/servers_explorer/connect.js'\\r\\n\\t\\t//this.#os.terminal.inputToTerminal(`${command} ${svName}`);\\r\\n\\t\\t//this.#winRenderer.hide();\\r\\n\\t}\\r\\n\\r\\n\\tasync svBackdoor(svName) {\\r\\n\\t\\tawait this.svConnect(svName)\\r\\n\\t\\tawait Utils.sleep(250);\\r\\n\\t\\tthis.#os.terminal.inputToTerminal('backdoor');\\r\\n\\t}\\r\\n\\r\\n\\tasync svHack(svName) {\\r\\n\\t\\tawait this.svConnect(svName)\\r\\n\\t\\tawait Utils.sleep(250);\\r\\n\\t\\tthis.#os.terminal.inputToTerminal('run BruteSSH.exe;run FTPCrack.exe;run HTTPWorm.exe;run SQLInject.exe;run relaySMTP.exe;run NUKE.exe');\\r\\n\\t}\\r\\n\\r\\n\\t/** @returns {Promise<{name: string, rooty: boolean, backy: boolean}[]>} */\\r\\n\\tasync #getServers() {\\r\\n\\t\\treturn this.#os.serversManager.serversObjFull\\r\\n\\t\\t\\t.map(serverObj => ({\\r\\n\\t\\t\\t\\tname: serverObj.hostname,\\r\\n\\t\\t\\t\\trooty: serverObj.hasAdminRights,\\r\\n\\t\\t\\t\\tbacky: serverObj.backdoorInstalled,\\r\\n\\t\\t\\t}))\\r\\n\\t\\t\\t.sort((a, b) => a.name.localeCompare(b.name))\\r\\n\\t}\\r\\n\\r\\n\\t// private\\r\\n\\r\\n\\t#os\\r\\n\\t#winRenderer\\r\\n\\t#isRendered = false\\r\\n\\r\\n\\t#init() {\\r\\n\\t\\tthis.#injectMenuButton();\\r\\n\\t}\\r\\n\\r\\n\\t#injectMenuButton() {\\r\\n\\t\\tlet btn_newPath = '<path d=\\\"M17.927,5.828h-4.41l-1.929-1.961c-0.078-0.079-0.186-0.125-0.297-0.125H4.159c-0.229,0-0.417,0.188-0.417,0.417v1.669H2.073c-0.229,0-0.417,0.188-0.417,0.417v9.596c0,0.229,0.188,0.417,0.417,0.417h15.854c0.229,0,0.417-0.188,0.417-0.417V6.245C18.344,6.016,18.156,5.828,17.927,5.828 M4.577,4.577h6.539l1.231,1.251h-7.77V4.577z M17.51,15.424H2.491V6.663H17.51V15.424z\\\">'\\r\\n\\r\\n\\t\\tthis.#os.gui.addMenuButton({\\r\\n\\t\\t\\tbtnLabel: 'Network Explorer',\\r\\n\\t\\t\\tcallback: () => this.#winRenderer.windowVisibilityToggle(),\\r\\n\\t\\t\\tbtnIconPath: btn_newPath,\\r\\n\\t\\t\\tbtnIconViewBox: 'viewBox=\\\"0 2 18 17\\\"',\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t#on_exit() {\\r\\n\\t\\tthis.#isRendered = false;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nclass ServersExplorerRenderer extends EventListener {\\r\\n\\t/** @param {import('/os/os.js').OS} os, @param {ServersExplorer} serversExplorer */\\r\\n\\tconstructor(os, serversExplorer) {\\r\\n\\t\\tsuper();\\r\\n\\t\\tthis.#os = os;\\r\\n\\t\\tthis.#serversExplorer = serversExplorer;\\r\\n\\r\\n\\t\\tthis.#log = new Logger(this, os.logRenderer);\\r\\n\\t\\tthis.eventListener_initLog(this.#log);\\r\\n\\r\\n\\t\\tthis.#windowWidget = new WindowWidget(this, os);\\r\\n\\t\\tthis.#windowWidget.listen(WindowWidget_EVENT.SHOW, () => this.#onShow());\\r\\n\\r\\n\\t\\tthis.#os.listen(OS_EVENT.ON_EXIT, () => this.#on_exit());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.INIT, () => this.#init());\\r\\n\\t}\\r\\n\\r\\n\\t/** @return {String} */\\r\\n\\tget title() {\\r\\n\\t\\treturn `Network Explorer`\\r\\n\\t}\\r\\n\\r\\n\\t/** @param {{name: string, rooty: boolean, backy: boolean}[]} serverObjs */\\r\\n\\trenderServers(serverObjs) {\\r\\n\\t\\tif (!this.#windowWidget.isVisible) return;\\r\\n\\t\\t\\r\\n\\t\\tlet windowDiv = this.#windowWidget.getContainer()\\r\\n\\t\\tserverObjs.unshift({\\r\\n\\t\\t\\tname: 'home',\\r\\n\\t\\t\\trooty: true,\\r\\n\\t\\t\\tbacky: true,\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tconst serverList = windowDiv.querySelector('.server-list')\\r\\n\\t\\tserverList.innerHTML = serverObjs.map(({ name, rooty, backy }) => this.#renderIcon(name, rooty, backy)).join('');\\r\\n\\r\\n\\t\\tArray.from(windowDiv.querySelectorAll('.server-connect__button')).forEach((button) => {\\r\\n\\t\\t\\tbutton.addEventListener('dblclick', (event) => this.svConnectOnClick(event))\\r\\n\\t\\t});\\r\\n\\t\\tArray.from(windowDiv.querySelectorAll('.server-run__backdoor')).forEach((button) => {\\r\\n\\t\\t\\tbutton.addEventListener('dblclick', (event) => this.svBackdoorOnClick(event))\\r\\n\\t\\t});\\r\\n\\t\\tArray.from(windowDiv.querySelectorAll('.server-run__status')).forEach((button) => {\\r\\n\\t\\t\\tbutton.addEventListener('dblclick', (event) => this.svHackOnClick(event))\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\tasync rootCheck(svName) {\\r\\n\\t\\tvar checkRoot = await this.#os.getNS((ns) => {\\r\\n\\t\\t\\t\\treturn ns.hasRootAccess(svName)\\r\\n\\t\\t\\t});\\r\\n\\t\\treturn checkRoot;\\r\\n\\t}\\r\\n\\t*/\\r\\n\\r\\n\\tsvConnectOnClick(event) {\\r\\n\\t\\tlet button = event.currentTarget;\\r\\n\\r\\n\\t\\tevent.stopPropagation()\\r\\n\\t\\tconst serverName = button.dataset.serverName\\r\\n\\r\\n\\t\\tthis.#serversExplorer.svConnect(serverName)\\r\\n\\t}\\r\\n\\r\\n\\tsvBackdoorOnClick(event) {\\r\\n\\t\\tlet button = event.currentTarget;\\r\\n\\r\\n\\t\\tevent.stopPropagation()\\r\\n\\t\\tconst serverName = button.dataset.serverName\\r\\n\\r\\n\\t\\tthis.#serversExplorer.svBackdoor(serverName)\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tsvHackOnClick(event) {\\r\\n\\t\\tlet button = event.currentTarget;\\r\\n\\r\\n\\t\\tevent.stopPropagation()\\r\\n\\t\\tconst serverName = button.dataset.serverName\\r\\n\\r\\n\\t\\tthis.#serversExplorer.svHack(serverName)\\r\\n\\t}\\r\\n\\r\\n\\thide() {\\r\\n\\t\\tthis.#windowWidget.hide();\\r\\n\\t}\\r\\n\\r\\n\\twindowVisibilityToggle() {\\r\\n\\t\\tthis.#windowWidget.windowVisibilityToggle();\\r\\n\\t}\\r\\n\\r\\n\\t// private\\r\\n\\r\\n\\t#os\\r\\n\\t#log\\r\\n\\t#serversExplorer\\r\\n\\t#windowWidget\\r\\n\\t#aboutWindow\\r\\n\\r\\n\\t#init() {\\r\\n\\t\\tthis.#os.gui.injectCSS(servers_explorer_css, 'servers_explorer_css');\\r\\n\\r\\n\\t\\tthis.#windowWidget.init();\\r\\n\\t\\tthis.#windowWidget.getContentDiv().innerHTML = '<ul class=\\\"server-list server-list--layout-icon-row\\\" />';\\r\\n\\t\\tthis.#windowWidget.getContentDiv().classList.add('whiteScrollbar')\\r\\n\\t\\tthis.#windowWidget.addMenuItem({ label: 'About', callback: () => this.#onAboutMenuClick() })\\r\\n\\t}\\r\\n\\r\\n\\t#onAboutMenuClick() {\\r\\n\\t\\tif (!this.#aboutWindow) {\\r\\n\\t\\t\\tthis.#aboutWindow = this.#os.gui.createAboutWindow({\\r\\n\\t\\t\\t\\t'Name': 'Servers Explorer',\\r\\n\\t\\t\\t\\t'Main author': 'TheDroidUrLookingFor#4655',\\r\\n\\t\\t\\t\\t'Contributor': 'lethern',\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t\\tthis.#aboutWindow.show()\\r\\n\\t}\\r\\n\\r\\n\\t#onShow() {\\r\\n\\t\\t// We allow no-await on async\\r\\n\\t\\tthis.#windowWidget.setTitle(this.title)\\r\\n\\t\\tthis.#serversExplorer.loop();\\r\\n\\t}\\r\\n\\r\\n\\t#renderIcon(name, svhacked, svbackdoored) {\\r\\n\\t\\tlet facServers = [\\r\\n\\t\\t\\t\\\"CSEC\\\",\\r\\n\\t\\t\\t\\\"avmnite-02h\\\",\\r\\n\\t\\t\\t\\\"I.I.I.I\\\",\\r\\n\\t\\t\\t\\\"run4theh111z\\\",\\r\\n\\t\\t\\t\\\"The-Cave\\\",\\r\\n\\t\\t\\t\\\"w0r1d_d43m0n\\\"\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tlet type = 'server'\\r\\n\\t\\tvar systemColor = \\\"server-connect__button\\\";\\r\\n\\t\\tlet rootStatus = \\\"red\\\";\\r\\n\\t\\tlet backdoorStatus = \\\"red\\\";\\r\\n\\t\\tlet backdoorSVG = 'doorClosed';\\r\\n\\t\\tlet statusSVG = 'xmark';\\r\\n\\t\\tlet canHack = 'black';\\r\\n\\t\\tif (facServers.includes(name)) {\\r\\n\\t\\t\\ttype = 'firewall'\\r\\n\\t\\t\\tif ([\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I\\\", \\\"run4theh111z\\\"].includes(name)) systemColor += \\\" gold\\\";\\r\\n\\t\\t\\tif (name == \\\"The-Cave\\\") systemColor += \\\" darkorange\\\";\\r\\n\\t\\t\\tif (name == \\\"w0r1d_d43m0n\\\") systemColor += \\\" red\\\";\\r\\n\\t\\t}\\r\\n\\t\\tif (name == \\\"home\\\") {\\r\\n\\t\\t\\ttype = 'networkPC'\\r\\n\\t\\t}\\r\\n\\t\\tif (name == \\\"n00dles\\\") {\\r\\n\\t\\t\\ttype = 'noodles'\\r\\n\\t\\t}\\r\\n\\t\\tif (svhacked) {\\r\\n\\t\\t\\trootStatus = \\\"green\\\";\\r\\n\\t\\t\\tstatusSVG = 'check';\\r\\n\\t\\t}\\r\\n\\t\\tif (svbackdoored) {\\r\\n\\t\\t\\tbackdoorStatus = \\\"green\\\";\\r\\n\\t\\t\\tbackdoorSVG = 'doorOpen';\\r\\n\\t\\t}\\r\\n\\t\\treturn `\\r\\n\\t\\t\\t<li class=\\\"server-list__item\\\">\\r\\n\\t\\t\\t<div class=\\\"server-list__item-title\\\">\\r\\n\\t\\t\\t\\t<button class=\\\"server-run__backdoor\\\" style=\\\"color:${backdoorStatus}\\\" data-server-name=\\\"${name}\\\">\\r\\n\\t\\t\\t\\t\\t${server_icons[backdoorSVG]}\\r\\n\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t<button class=\\\"server-run__scripts\\\" data-server-name=\\\"${name}\\\">\\r\\n\\t\\t\\t\\t\\t${server_icons['ihack']}\\r\\n\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t<button class=\\\"server-run__status\\\" style=\\\"color:${rootStatus}\\\" data-server-name=\\\"${name}\\\">\\r\\n\\t\\t\\t\\t\\t${server_icons[statusSVG]}\\r\\n\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<button class=\\\"${systemColor}\\\" data-server-name=\\\"${name}\\\" data-server-type=\\\"${type}\\\">\\r\\n\\t\\t\\t\\t\\t${server_icons[type]}\\r\\n\\t\\t\\t\\t<div class=\\\"server-list__label\\\">${name}</div>\\r\\n\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</li>\\r\\n\\t\\t`\\r\\n\\t}\\r\\n\\r\\n\\t#on_exit() {\\r\\n\\t}\\r\\n}\",\"filename\":\"/os/app/servers_explorer/servers_explorer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nexport const servers_explorer_css = `\\r\\n.server-list {\\r\\n\\talign-content: flex-start;\\r\\n\\tdisplay: flex;\\r\\n\\tflex-wrap: wrap;\\r\\n\\tlist-style: none;\\r\\n\\tmargin: 0;\\r\\n\\theight: 38em;\\r\\n\\twidth: 98em;\\r\\n\\tpadding: 0;\\r\\n}\\r\\n.server-list__item {\\r\\n\\tmargin-bottom: 8px;\\r\\n\\ttext-align: center;\\r\\n\\twidth: 100px;\\r\\n}\\r\\n.server-list__item-title{\\r\\n\\tdisplay: flex;\\r\\n\\talign-items: center;\\r\\n\\tjustify-content: center;\\r\\n}\\r\\n.server-list__item-title button{\\r\\n\\tpadding: 0\\r\\n}\\r\\n.server-list__item-title svg {\\r\\n\\tmax-width: 25px;\\r\\n\\tmax-height: 25px;\\r\\n}\\r\\n.server-list__icon {\\r\\n\\theight: 20px;\\r\\n\\twidth: 20px;\\r\\n}\\r\\n\\r\\n.server-list__label {\\r\\n\\tcolor: #222;\\r\\n\\ttext-shadow: none;\\r\\n\\tword-wrap: anywhere;\\r\\n\\tfont-size: 12px;\\r\\n}\\r\\n\\r\\n.server-connect__button {\\r\\n\\tappearance: none;\\r\\n\\tborder: none;\\r\\n\\tmargin: 0;\\r\\n\\tpadding: 2px;\\r\\n}\\r\\n.server-connect__button svg{\\r\\n\\twidth: 44px;\\r\\n\\theight: 44px;\\r\\n}\\r\\n.server-connect__button.gold {\\r\\n\\tfill: gold;\\r\\n\\tcolor: gold;\\r\\n}\\r\\n.server-connect__button.orange {\\r\\n\\tfill: orange;\\r\\n\\tcolor: orange;\\r\\n}\\r\\n.server-connect__button.darkorange {\\r\\n\\tfill: darkorange;\\r\\n\\tcolor: darkorange;\\r\\n}\\r\\n.server-connect__button.red {\\r\\n\\tfill: red;\\r\\n\\tcolor: red;\\r\\n}\\r\\n.server-connect__button.orange svg,\\r\\n.server-connect__button.gold svg{\\r\\n\\tmargin-left: 10px;\\r\\n}\\r\\n.server-list__bs_center {\\r\\n\\tmargin-left:-10px;\\r\\n\\tmarin-right:-10px;\\r\\n\\ttext-align:center;\\r\\n\\tdisplay: flex;\\r\\n\\tflex-direction: row;\\r\\n\\talign-items: center;\\r\\n\\tjustify-content: center;\\r\\n}\\r\\n.server-run__backdoor {\\r\\n\\tfill: red;\\r\\n\\tcolor: red;\\r\\n\\t\\r\\n}\\r\\n.server-run__backdoor_complete {\\r\\n\\tfill: green;\\r\\n\\tcolor: green;\\r\\n}\\r\\n.server-run__scripts,\\r\\n.server-run__status,\\r\\n.server-run__backdoor_complete,\\r\\n.server-run__backdoor\\r\\n{\\r\\n\\tappearance: none;\\r\\n\\tborder: none;\\r\\n\\tmargin: 0;\\r\\n}\\r\\n.server-run__scripts {\\r\\n}\\r\\n.server-run__status {\\r\\n\\tfill: red;\\r\\n\\tcolor: red;\\r\\n}\\r\\n.server-connect__button:focus {\\r\\n\\tbackground: rgba(15, 75, 255, .3);\\r\\n\\tborder-color: #222;\\r\\n}\\r\\n.server-run__scripts:focus {\\r\\n\\tbackground: rgba(15, 75, 255, .3);\\r\\n\\tborder-color: #222;\\r\\n}\\r\\n.server-run__status:focus {\\r\\n\\tbackground: rgba(15, 75, 255, .3);\\r\\n\\tborder-color: #222;\\r\\n}\\r\\n.server-run__backdoor:focus {\\r\\n\\tbackground: rgba(15, 75, 255, .3);\\r\\n\\tborder-color: #222;\\r\\n}`;\\r\\n\\r\\n/*\\r\\ndstar: `\\r\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 64 64\\\" aria-labelledby=\\\"title\\\"\\r\\naria-describedby=\\\"desc\\\" role=\\\"img\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\r\\n  <title>Classic Computer</title>\\r\\n  <desc>A line styled icon from Orion Icon Library.</desc>\\r\\n  <path data-name=\\\"layer2\\\"\\r\\n  fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"\\r\\n  stroke-width=\\\"2\\\" d=\\\"M6 44h52m0 18H6V2h52v60zm-8-10H38\\\"></path>\\r\\n  <rect data-name=\\\"layer1\\\" x=\\\"14\\\" y=\\\"10\\\" width=\\\"36\\\" height=\\\"26\\\" rx=\\\"2\\\"\\r\\n  ry=\\\"2\\\" fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"\\r\\n  stroke-width=\\\"2\\\"></rect>\\r\\n</svg>\\r\\n\\t`,\\r\\n */\\r\\n\\r\\nexport const server_icons = {\\r\\n\\tnetworkPC: `\\r\\n\\t\\t<svg class=\\\"svg-icon\\\" viewBox=\\\"0 0 20 20\\\">\\r\\n\\t\\t\\t<path d=\\\"M17.237,3.056H2.93c-0.694,0-1.263,0.568-1.263,1.263v8.837c0,0.694,0.568,1.263,1.263,1.263h4.629v0.879c-0.015,0.086-0.183,0.306-0.273,0.423c-0.223,0.293-0.455,0.592-0.293,0.92c0.07,0.139,0.226,0.303,0.577,0.303h4.819c0.208,0,0.696,0,0.862-0.379c0.162-0.37-0.124-0.682-0.374-0.955c-0.089-0.097-0.231-0.252-0.268-0.328v-0.862h4.629c0.694,0,1.263-0.568,1.263-1.263V4.319C18.5,3.625,17.932,3.056,17.237,3.056 M8.053,16.102C8.232,15.862,8.4,15.597,8.4,15.309v-0.89h3.366v0.89c0,0.303,0.211,0.562,0.419,0.793H8.053z M17.658,13.156c0,0.228-0.193,0.421-0.421,0.421H2.93c-0.228,0-0.421-0.193-0.421-0.421v-1.263h15.149V13.156z M17.658,11.052H2.509V4.319c0-0.228,0.193-0.421,0.421-0.421h14.308c0.228,0,0.421,0.193,0.421,0.421V11.052z\\\"></path>\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\tfirewall: `\\r\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 512.023 512.023\\\" style=\\\"enable-background:new 0 0 512.023 512.023;\\\" xml:space=\\\"preserve\\\">\\r\\n\\t\\t<path d=\\\"M465.773,266.105c-1.707-1.707-5.12-2.56-8.533-1.707c-3.413,0.853-5.973,3.413-5.973,6.827\\r\\n\\t\\t\\tc-1.707,13.653-5.973,26.453-10.24,37.547c-5.886-55.18-26.348-89.403-32.427-98.888v-65.805V75.811v-51.2\\r\\n\\t\\t\\tc0-14.507-11.093-25.6-25.6-25.6H263.533H92.867H24.6C10.093-0.989-1,10.105-1,24.611v51.2v68.267v68.267v68.267v68.267v51.2\\r\\n\\t\\t\\tc0,14.507,11.093,25.6,25.6,25.6h119.467h133.981c5.105,15.926,13.371,30.798,24.739,43.52\\r\\n\\t\\t\\tc23.04,26.453,57.173,41.813,93.013,41.813c35.84,0,69.12-14.507,92.16-40.96C532.333,421.411,505.88,307.065,465.773,266.105z\\r\\n\\t\\t\\t M144.067,340.345H101.4v-51.2h42.667H255v51.2H144.067z M16.067,340.345v-51.2h68.267v51.2H16.067z M92.867,84.345h42.667v51.2\\r\\n\\t\\t\\tH92.867h-76.8v-51.2H92.867z M263.533,84.345H306.2v51.2h-42.667H152.6v-51.2H263.533z M391.533,84.345v51.2h-68.267v-51.2\\r\\n\\t\\t\\tH391.533z M92.867,272.078h-76.8v-51.2h76.8h42.667v51.2H92.867z M16.067,152.611h68.267v51.2H16.067V152.611z M144.067,152.611\\r\\n\\t\\t\\tH255v51.2H144.067H101.4v-51.2H144.067z M314.733,152.611h76.8v51.2h-76.8h-42.667v-51.2H314.733z M152.6,220.878h110.933H306.2\\r\\n\\t\\t\\tv51.2h-42.667H152.6V220.878z M323.267,272.078v-51.2h53.379c-15.822,15.496-28.323,32.636-37.533,51.2H323.267z M297.667,314.745\\r\\n\\t\\t\\tc-2.56,0-5.973,1.707-6.827,1.707c-1.707,3.413-4.267,7.68-5.973,11.947l-1.707,3.413c-0.492,1.477-0.985,2.949-1.477,4.263\\r\\n\\t\\t\\tc-0.257,0.636-0.527,1.269-0.773,1.908c-0.103,0.23-0.206,0.45-0.309,0.656h-8.533v-49.493h42.667h16.437\\r\\n\\t\\t\\tc-2.344,6.384-4.63,13.361-6.197,19.627v1.707c-1.707,5.12-5.12,29.867-5.12,36.693c0,3.413,0,5.973,0,9.387\\r\\n\\t\\t\\tc-1.707-3.413-4.267-7.68-5.973-11.947c-0.359-0.717-0.717-1.479-1.076-2.264c-2.885-6.754-5.565-14.059-7.457-21.629\\r\\n\\t\\t\\tc-0.853-3.413-3.413-5.12-6.827-5.973H297.667z M391.533,24.611v42.667h-76.8h-42.667v-51.2H383\\r\\n\\t\\t\\tC388.12,16.078,391.533,19.491,391.533,24.611z M255,67.278H144.067H101.4v-51.2H255V67.278z M16.067,24.611\\r\\n\\t\\t\\tc0-5.12,3.413-8.533,8.533-8.533h59.733v51.2H16.067V24.611z M16.067,400.078v-42.667h76.8h42.667v51.2H24.6\\r\\n\\t\\t\\tC19.48,408.611,16.067,405.198,16.067,400.078z M152.6,408.611v-51.2h110.933h11.523c-3.747,17.006-4.104,34.448-1.192,51.2H152.6\\r\\n\\t\\t\\tz M475.16,459.811c-20.48,22.187-48.64,34.987-79.36,34.987h-0.853c-29.867-0.853-58.88-13.653-79.36-36.693\\r\\n\\t\\t\\tc-10.322-11.987-17.641-25.796-21.936-40.457c0.148-1.021,0.089-2.042-0.251-3.063c-5.062-20.25-5.108-42.165,1.491-62.452\\r\\n\\t\\t\\tc0.083-0.227,0.157-0.457,0.216-0.693c0-0.001,0-0.001,0.001-0.002v0l0,0c0.683-1.366,0.825-2.731,1.29-4.097\\r\\n\\t\\t\\tc11.034,25.933,25.208,45.124,28.577,50.177c1.707,2.56,5.12,4.267,8.533,3.413c2.544-0.509,4.474-2.235,5.624-4.446\\r\\n\\t\\t\\tc1.645-1.798,2.541-4.222,2.056-6.647c-2.56-13.653-3.413-27.307-2.56-40.96c0-5.12,3.413-29.013,4.267-33.28v-0.853\\r\\n\\t\\t\\tc2.189-8.755,5.007-17.506,8.443-25.728c10.105-23.348,25.801-44.402,47.023-63.018c8.533,16.213,27.307,56.32,27.307,115.2\\r\\n\\t\\t\\tc0,4.267,2.56,7.68,5.973,8.533c3.413,0.853,7.68,0,9.387-3.413c0-0.853,15.36-23.893,23.04-52.907\\r\\n\\t\\t\\tC492.227,336.931,507.587,423.118,475.16,459.811z\\\"/>\\r\\n\\t`,\\r\\n\\tserver: `\\r\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 64 64\\\" aria-labelledby=\\\"title\\\"\\r\\naria-describedby=\\\"desc\\\" role=\\\"img\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\r\\n  <title>Server</title>\\r\\n  <desc>A line styled icon from Orion Icon Library.</desc>\\r\\n  <rect data-name=\\\"layer2\\\"\\r\\n  x=\\\"2\\\" y=\\\"14\\\" width=\\\"60\\\" height=\\\"48\\\" rx=\\\"2\\\" ry=\\\"2\\\" fill=\\\"none\\\" stroke=\\\"#202020\\\"\\r\\n  stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"></rect>\\r\\n  <path data-name=\\\"layer2\\\" d=\\\"M2.4 14.8L7.4 4A3 3 0 0 1 10 2h44a2.9 2.9 0 0 1 2.5 2l5.2 10.8\\\"\\r\\n  fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"\\r\\n  stroke-width=\\\"2\\\"></path>\\r\\n  <path data-name=\\\"layer1\\\" fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\"\\r\\n  stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M54 54H34\\\"></path>\\r\\n  <path data-name=\\\"layer2\\\" fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\"\\r\\n  stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M2 46h60\\\"></path>\\r\\n  <path data-name=\\\"layer1\\\" fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\"\\r\\n  stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M54 38H34m20-16H34\\\"></path>\\r\\n  <path data-name=\\\"layer2\\\" fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\"\\r\\n  stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" d=\\\"M2 30h60\\\"></path>\\r\\n  <circle data-name=\\\"layer1\\\" cx=\\\"11\\\" cy=\\\"22\\\" r=\\\"2\\\" fill=\\\"none\\\" stroke=\\\"#202020\\\"\\r\\n  stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"></circle>\\r\\n  <circle data-name=\\\"layer1\\\" cx=\\\"11\\\" cy=\\\"38\\\" r=\\\"2\\\" fill=\\\"none\\\"\\r\\n  stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"></circle>\\r\\n  <circle data-name=\\\"layer1\\\" cx=\\\"11\\\" cy=\\\"54\\\" r=\\\"2\\\" fill=\\\"none\\\"\\r\\n  stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"></circle>\\r\\n</svg>\\r\\n\\t`,\\r\\n\\tnoodles: `\\r\\n\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 64 64\\\" aria-labelledby=\\\"title\\\"\\r\\naria-describedby=\\\"desc\\\" role=\\\"img\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\r\\n  <title>Asian Cuisine</title>\\r\\n  <desc>A line styled icon from Orion Icon Library.</desc>\\r\\n  <path data-name=\\\"layer2\\\"\\r\\n  fill=\\\"none\\\" stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"\\r\\n  stroke-width=\\\"2\\\" d=\\\"M46 2L32.1 30M58 10L40 30M22 62h20\\\"></path>\\r\\n  <path data-name=\\\"layer1\\\" d=\\\"M2.1 30a30 30 0 0 0 59.8 0z\\\" fill=\\\"none\\\"\\r\\n  stroke=\\\"#202020\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\"></path>\\r\\n</svg>\\r\\n\\t`,\\r\\n\\tcheck: `\\r\\n\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-check-circle\\\" viewBox=\\\"0 0 16 16\\\">\\r\\n\\t\\t\\t<path d=\\\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\\\"/>\\r\\n\\t\\t\\t<path d=\\\"M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z\\\"/>\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\txmark: `\\r\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-x-circle\\\" viewBox=\\\"0 0 16 16\\\">\\r\\n  <path d=\\\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\\\"/>\\r\\n  <path d=\\\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\\\"/>\\r\\n</svg>\\r\\n\\t`,\\r\\n\\tdoorClosed: `\\r\\n\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-door-closed\\\" viewBox=\\\"0 0 16 16\\\">\\r\\n\\t\\t\\t<path d=\\\"M3 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v13h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V2zm1 13h8V2H4v13z\\\"/>\\r\\n\\t\\t\\t<path d=\\\"M9 9a1 1 0 1 0 2 0 1 1 0 0 0-2 0z\\\"/>\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\tdoorOpen: `\\r\\n\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-door-open\\\" viewBox=\\\"0 0 16 16\\\">\\r\\n\\t\\t\\t<path d=\\\"M8.5 10c-.276 0-.5-.448-.5-1s.224-1 .5-1 .5.448.5 1-.224 1-.5 1z\\\"/>\\r\\n\\t\\t\\t<path d=\\\"M10.828.122A.5.5 0 0 1 11 .5V1h.5A1.5 1.5 0 0 1 13 2.5V15h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V1.5a.5.5 0 0 1 .43-.495l7-1a.5.5 0 0 1 .398.117zM11.5 2H11v13h1V2.5a.5.5 0 0 0-.5-.5zM4 1.934V15h6V1.077l-6 .857z\\\"/>\\r\\n\\t\\t</svg>\\r\\n\\t`,\\r\\n\\tihack: `\\r\\n\\t<svg width=\\\"32px\\\" height=\\\"32px\\\" viewBox=\\\"0 0 32 32\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M 15.998047 3 C 14.225047 3 5.5352031 7.9839062 4.6582031 9.5039062 C 3.7802031 11.024906 3.7802031 20.983047 4.6582031 22.498047 C 5.5392031 24.017047 14.229047 29 15.998047 29 C 17.762047 29 26.451938 24.019953 27.335938 22.501953 C 28.222938 20.979953 28.222938 11.014047 27.335938 9.4980469 L 27.335938 9.4960938 C 26.444937 7.9790937 17.756047 3 15.998047 3 z M 15.996094 5.0117188 C 17.693094 5.3647187 24.417703 9.2167656 25.595703 10.509766 C 26.135703 12.150766 26.134703 19.844281 25.595703 21.488281 C 24.425703 22.779281 17.695094 26.636281 15.996094 26.988281 C 14.298094 26.638281 7.5723906 22.783234 6.4003906 21.490234 C 5.8653906 19.842234 5.8653906 12.155766 6.4003906 10.509766 C 7.5693906 9.2167656 14.297094 5.3617187 15.996094 5.0117188 z M 13 9 L 11 11 L 12 11 L 12 21 L 14 21 L 14 17 L 18 17 L 18 21 L 17 21 L 19 23 L 21 21 L 20 21 L 20 12 L 18 12 L 18 15 L 14 15 L 14 11 L 15 11 L 13 9 z\\\"/></svg>\\r\\n\\t`,\\r\\n\\tdroid: `\\r\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-robot\\\" viewBox=\\\"0 0 16 16\\\">\\r\\n  <path d=\\\"M6 12.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5ZM3 8.062C3 6.76 4.235 5.765 5.53 5.886a26.58 26.58 0 0 0 4.94 0C11.765 5.765 13 6.76 13 8.062v1.157a.933.933 0 0 1-.765.935c-.845.147-2.34.346-4.235.346-1.895 0-3.39-.2-4.235-.346A.933.933 0 0 1 3 9.219V8.062Zm4.542-.827a.25.25 0 0 0-.217.068l-.92.9a24.767 24.767 0 0 1-1.871-.183.25.25 0 0 0-.068.495c.55.076 1.232.149 2.02.193a.25.25 0 0 0 .189-.071l.754-.736.847 1.71a.25.25 0 0 0 .404.062l.932-.97a25.286 25.286 0 0 0 1.922-.188.25.25 0 0 0-.068-.495c-.538.074-1.207.145-1.98.189a.25.25 0 0 0-.166.076l-.754.785-.842-1.7a.25.25 0 0 0-.182-.135Z\\\"/>\\r\\n  <path d=\\\"M8.5 1.866a1 1 0 1 0-1 0V3h-2A4.5 4.5 0 0 0 1 7.5V8a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1v1a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-1a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1v-.5A4.5 4.5 0 0 0 10.5 3h-2V1.866ZM14 7.5V13a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7.5A3.5 3.5 0 0 1 5.5 4h5A3.5 3.5 0 0 1 14 7.5Z\\\"/>\\r\\n</svg>\\r\\n\\t`\\r\\n};\\r\\n\",\"filename\":\"/os/app/servers_explorer/servers_explorer_css.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runPlugin } from '/os/plugins/plugins_utils.js'\\r\\nimport { WindowWidget } from '/os/window_widget.js'\\r\\nimport { OS_EVENT, WindowWidget_EVENT } from '/os/event_listener.js'\\r\\nimport { Logger } from '/os/logger.js'\\r\\n\\r\\n/** @typedef {{path: string, pluginDir: string, pluginFile: string, pluginExtension: string}} PluginLsFile  */\\r\\n/** @typedef {{result?: any, error?: any, time_diff?: number}} PluginExecution */\\r\\n/** @typedef {{script?: string, configFile?, error, config?, executions: PluginExecution[]}} PluginData  */\\r\\n\\r\\nexport class PluginsManager {\\r\\n\\t/** @param {import('/os/os.js').OS} os */\\r\\n\\tconstructor(os) {\\r\\n\\t\\tthis.#os = os;\\r\\n\\t\\tthis.#log = new Logger(this, os.logRenderer);\\r\\n\\t\\tthis.#windowWidget = new WindowWidget(this, os);\\r\\n\\t\\tthis.#windowWidget.listen(WindowWidget_EVENT.SHOW, () => this.#onShow());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.INIT, () => this.#init());\\r\\n\\t\\tthis.#os.listen(OS_EVENT.ON_EXIT, () => this.#on_exit());\\r\\n\\t}\\r\\n\\r\\n\\t// private\\r\\n\\r\\n\\t#os\\r\\n\\t#windowWidget\\r\\n\\t#rendered = false\\r\\n\\t#log\\r\\n\\t/** @type {Object.<string, PluginData>}  */\\r\\n\\t#pluginsMap\\r\\n\\r\\n\\t#init() {\\r\\n\\t\\tthis.#injectMenuButton();\\r\\n\\r\\n\\t\\tthis.#os.gui.injectCSS(plugins_manager_css, 'plugins_manager_css');\\r\\n\\r\\n\\t\\tthis.#windowWidget.init();\\r\\n\\t\\tthis.#windowWidget.getContentDiv().innerHTML = '<div class=\\\"plugins-list\\\" />';\\r\\n\\t\\tthis.#windowWidget.getContentDiv().classList.add('whiteScrollbar')\\r\\n\\t\\tthis.#windowWidget.getContentDiv().classList.add('grayBackground')\\r\\n\\t\\t//this.#windowWidget.addMenuItem({ label: 'Debug', callback: this.#onDebugMenuClick.bind(this) })\\r\\n\\t}\\r\\n\\r\\n\\t#injectMenuButton() {\\r\\n\\t\\tlet btn_newPath = '<path d=\\\"M17.927,5.828h-4.41l-1.929-1.961c-0.078-0.079-0.186-0.125-0.297-0.125H4.159c-0.229,0-0.417,0.188-0.417,0.417v1.669H2.073c-0.229,0-0.417,0.188-0.417,0.417v9.596c0,0.229,0.188,0.417,0.417,0.417h15.854c0.229,0,0.417-0.188,0.417-0.417V6.245C18.344,6.016,18.156,5.828,17.927,5.828 M4.577,4.577h6.539l1.231,1.251h-7.77V4.577z M17.51,15.424H2.491V6.663H17.51V15.424z\\\">'\\r\\n\\r\\n\\t\\tthis.#os.gui.addMenuButton({\\r\\n\\t\\t\\tbtnLabel: 'OS Plugins',\\r\\n\\t\\t\\tcallback: () => this.#windowVisibilityToggle(),\\r\\n\\t\\t\\tbtnIconPath: btn_newPath,\\r\\n\\t\\t\\tbtnIconViewBox: 'viewBox=\\\"0 2 18 17\\\"',\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t#windowVisibilityToggle() {\\r\\n\\t\\tthis.#windowWidget.windowVisibilityToggle()\\r\\n\\t}\\r\\n\\r\\n\\t#onShow() {\\r\\n\\t\\tif (this.#rendered) return;\\r\\n\\t\\tthis.#rendered = true;\\r\\n\\r\\n\\t\\tthis.#render();\\r\\n\\t}\\r\\n\\r\\n\\t/** @returns {Promise<PluginLsFile[]>} */\\r\\n\\tasync #scanForPlugins() {\\r\\n\\t\\t// only stuff that is in subfolders of folder /os/plugins/. Also we don't care for initial /\\r\\n\\t\\treturn (await this.#os.getNS(ns => {\\r\\n\\t\\t\\t\\treturn ns.ls('home');\\r\\n\\t\\t\\t})).map(file => file.match(/^\\\\/{0,1}os\\\\/plugins\\\\/(.+)\\\\/(.*)\\\\.(.*)/))\\r\\n\\t\\t\\t.filter(res => res)\\r\\n\\t\\t\\t.map(res => ({\\r\\n\\t\\t\\t\\tpath: res[0],\\r\\n\\t\\t\\t\\tpluginDir: res[1],\\r\\n\\t\\t\\t\\tpluginFile: res[2],\\r\\n\\t\\t\\t\\tpluginExtension: res[3]\\r\\n\\t\\t\\t}))\\r\\n\\t}\\r\\n\\t\\r\\n\\tasync #getPluginsData() {\\r\\n\\t\\tif (this.#pluginsMap) return;\\r\\n\\r\\n\\t\\t/** @type { Object.<string, PluginData>} */\\r\\n\\t\\tlet pluginsMap = {};\\r\\n\\t\\tlet plugins = await this.#scanForPlugins();\\r\\n\\r\\n\\t\\tplugins.forEach(p => {\\r\\n\\t\\t\\tlet obj = pluginsMap[p.pluginDir];\\r\\n\\t\\t\\tif (!obj) pluginsMap[p.pluginDir] = obj = { error: [], executions: [] };\\r\\n\\r\\n\\t\\t\\tif (p.pluginExtension == 'txt') {\\r\\n\\t\\t\\t\\tif (!obj.configFile) {\\r\\n\\t\\t\\t\\t\\tthis.#log.debug(`Plugin ${p.pluginDir}: config found ${p.path}`);\\r\\n\\t\\t\\t\\t\\tobj.configFile = p.path;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tthis.#log.warn(`Plugin ${p.pluginDir}: Multiple config files ${p.path}`);\\r\\n\\t\\t\\t\\t\\tobj.error.push('Multiple config files')\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (p.pluginExtension == 'js' || p.pluginExtension == 'ns') {\\r\\n\\t\\t\\t\\tif (p.pluginFile == p.pluginDir) {\\r\\n\\t\\t\\t\\t\\tthis.#log.debug(`Plugin ${p.pluginDir}: script found ${p.path}`);\\r\\n\\t\\t\\t\\t\\tobj.script = p.path;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tlet configs = Object.entries(pluginsMap)\\r\\n\\t\\t\\t.filter(([name, { configFile, error }]) => !error.length && configFile)\\r\\n\\t\\t\\t.map(([name, { configFile }]) => ([name, configFile]));\\r\\n\\r\\n\\t\\tlet jsons = await this.#os.getNS(ns => {\\r\\n\\t\\t\\treturn configs\\r\\n\\t\\t\\t\\t.filter(([name, configFile]) => configFile && ns.fileExists(configFile))\\r\\n\\t\\t\\t\\t.map(([name, configFile]) =>\\r\\n\\t\\t\\t\\t\\t({ name, configJSON: ns.read(configFile) }))\\r\\n\\t\\t});\\r\\n\\t\\tjsons.forEach(({ name, configJSON }) => {\\r\\n\\t\\t\\tlet obj = pluginsMap[name];\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tobj.config = JSON.parse(configJSON);\\r\\n\\t\\t\\t\\tif (!obj.config.id) obj.error.push('Config missing id');\\r\\n\\t\\t\\t\\tif (!obj.script) obj.error.push('Script file missing');\\r\\n\\t\\t\\t} catch (e) {\\r\\n\\t\\t\\t\\tthis.#log.error('Error parsing JSON for file ', name, e.message);\\r\\n\\t\\t\\t\\tobj.error.push('Error parsing config');\\r\\n\\t\\t\\t}\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\tthis.#pluginsMap = pluginsMap;\\r\\n\\t}\\r\\n\\r\\n\\tasync #render() {\\r\\n\\t\\tthis.#windowWidget.setTitle('OS Plugins Manager')\\r\\n\\r\\n\\t\\tlet windowDiv = this.#windowWidget.getContainer()\\r\\n\\t\\tconst fileList = windowDiv.querySelector('.plugins-list')\\r\\n\\r\\n\\t\\tawait this.#getPluginsData();\\r\\n\\r\\n\\t\\tfileList.innerHTML = Object.entries(this.#pluginsMap)\\r\\n\\t\\t\\t//.filter( ( [name, { configFile, error }] ) => !error && configFile)\\r\\n\\t\\t\\t.map(([name, { config, error }]) => {\\r\\n\\t\\t\\t\\tif (!config) error.push('Missing config');\\r\\n\\t\\t\\t\\tlet btn_name = error.length ? '' : 'Run';\\r\\n\\t\\t\\t\\tlet id = (config || {}).id || name;\\r\\n\\t\\t\\t\\tlet error_msg = error.join(' ');\\r\\n\\t\\t\\t\\treturn `\\r\\n\\t\\t\\t\\t<div class=\\\"plugins-list__row ${(error.length) ? 'plugin-error' : ''}\\\">\\r\\n\\t\\t\\t\\t\\t<div>`\\r\\n\\t\\t\\t\\t\\t\\t+ (btn_name ? `<button class=\\\"plugins-list__button\\\" data-plugin-name=\\\"${name}\\\" >${btn_name}</button>` : '') +`\\r\\n\\t\\t\\t\\t\\t</div >\\r\\n\\t\\t\\t\\t\\t<div>${id}</div>\\r\\n\\t\\t\\t\\t\\t<div>${error_msg ? error_msg : (config.description || '')}</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t`\\r\\n\\t\\t\\t}).join('');\\r\\n\\r\\n\\t\\t// Add btn listeners\\r\\n\\t\\tArray.from(fileList.querySelectorAll('.plugins-list__button')).forEach((button) => {\\r\\n\\t\\t\\tbutton.addEventListener('click', (event) => this.#onClickPluginRun(event))\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t#onClickPluginRun(event) {\\r\\n\\t\\tlet button = event.currentTarget;\\r\\n\\t\\tevent.stopPropagation()\\r\\n\\r\\n\\t\\tconst pluginName = button.dataset.pluginName\\r\\n\\t\\tthis.#log.debug(`Running ${pluginName}`);\\r\\n\\r\\n\\t\\t/* we can ignore async */\\r\\n\\t\\tthis.#runPlugin(pluginName);\\r\\n\\t}\\r\\n\\r\\n\\tasync #runPlugin(pluginName) {\\r\\n\\t\\tlet obj = this.#pluginsMap[pluginName];\\r\\n\\t\\tif (!obj) return;\\r\\n\\r\\n\\t\\tlet imports_path = '/os/plugins/' + pluginName;\\r\\n\\r\\n\\t\\tlet res = await runPlugin(this.#os, this.#log, obj.script, imports_path)\\r\\n\\t\\tobj.executions.push(res);\\r\\n\\t\\tthis.#log.debug(JSON.stringify(res));\\r\\n\\t}\\r\\n\\r\\n\\t#on_exit() {\\r\\n\\t}\\r\\n}\\r\\n\\r\\nconst plugins_manager_css = `\\r\\n.grayBackground{\\r\\n\\tbackground: #dadada;\\r\\n}\\r\\n.plugins-list {\\r\\n\\tmargin: 0;\\r\\n\\tpadding: 1px;\\r\\n\\twidth: 100%;\\r\\n}\\r\\n.plugins-list__row{\\r\\n\\tpadding: 0px 2px 3px;\\r\\n\\tmargin 3px 0;\\r\\n}\\r\\n.plugins-list__row:nth-child(2n+1){\\r\\n\\tbackground: #ececec;\\r\\n}\\r\\n.plugin-error{\\r\\n\\tbackground: #cccccc !important;\\r\\n}\\r\\n\\r\\n.plugins-list__button{\\r\\n\\tborder-left: 1px solid white;\\r\\n\\tborder-top: 1px solid white;\\r\\n\\tborder-right: 2px solid rgb(128,128,128);\\r\\n\\tborder-bottom: 1px solid rgb(128,128,128);\\r\\n\\tbackground: rgb(192, 192, 192);\\r\\n\\tmargin: 0;\\r\\n\\tpadding: 1px 2px;\\r\\n}\\r\\n.plugins-list__button:active {\\r\\n\\tborder-left: 2px solid rgb(128,128,128);\\r\\n\\tborder-top: 1px solid rgb(128,128,128);\\r\\n\\tborder-right: 1px solid white;\\r\\n\\tborder-bottom: 1px solid white;\\r\\n}\\r\\n.plugins-list__row{\\r\\n\\tdisplay: table-row;\\r\\n}\\r\\n.plugins-list__row div{\\r\\n\\tdisplay: table-cell;\\r\\n\\tvertical-align: middle;\\r\\n\\tpadding-right: 5px;\\r\\n}\\r\\n.plugins-list__row div:nth-child(1){ /*btn*/\\r\\n\\twidth: 45px;\\r\\n\\twhite-space: nowrap;\\r\\n}\\r\\n.plugins-list__row div:nth-child(2){ /*id*/\\r\\n\\twidth: 130px;\\r\\n\\twhite-space: nowrap;\\r\\n}\\r\\n.plugins-list__row div:nth-child(3){ /*message/error*/\\r\\n\\tmin-width: 200px;\\r\\n}\\r\\n.plugins-list__row.plugin-error div:nth-child(3){ /*error*/\\r\\n\\tcolor: #a90000;\\r\\n}\\r\\n\\r\\n`;\",\"filename\":\"/os/plugins/plugins_manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { API_Adapter } from '/os/plugins/api_adapter.js'\\r\\n\\r\\n/** @param {import('/os/os.js').OS} os @param {import('/os/logger.js').Logger} log @param {string} filepath @param {string} imports_path\\r\\n  @returns {Promise<{result?: any, error?: any, stack?: any, time_diff?: number}>} */\\r\\nexport async function runPlugin(os, log, filepath, imports_path) {\\r\\n\\tlog.debug(\\\"runPlugin\\\", imports_path, filepath)\\r\\n\\ttry {\\r\\n\\t\\tlet sources = await os.getNS(ns => {\\r\\n\\t\\t\\tlet js = ns.read(filepath)\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tlet watchdog = 0;\\r\\n\\t\\t\\tlet filesToCheck = [js];\\r\\n\\t\\t\\tlet importsMap = {};\\r\\n\\r\\n\\t\\t\\tlet sources = [];\\r\\n\\r\\n\\t\\t\\twhile (true) {\\r\\n\\t\\t\\t\\tif (filesToCheck.length == 0) break;\\r\\n\\r\\n\\t\\t\\t\\tlet file_js = filesToCheck.pop();\\r\\n\\r\\n\\t\\t\\t\\t// find import\\r\\n\\t\\t\\t\\tArray.from(file_js.matchAll(/(^|\\\\n)(\\\\s*)import(\\\\s+)[^'\\\"]*['\\\"](?<file>.*)['\\\"]/g))\\r\\n\\t\\t\\t\\t//Array.from(file_js.matchAll(/(^|\\\\n)(\\\\s*)import(\\\\s+)(?<file>.*)\\\\n/g))\\r\\n\\t\\t\\t\\t\\t.map(res => (res.groups.file))\\r\\n\\t\\t\\t\\t\\t.filter(path => path)\\r\\n\\t\\t\\t\\t\\t//.map(path => path.replace(/['\\\"]/g, ''))\\r\\n\\t\\t\\t\\t\\t.forEach(path => {\\r\\n\\t\\t\\t\\t\\t\\tif (importsMap[path]) return;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\timportsMap[path] = 1;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t// get file from path\\r\\n\\t\\t\\t\\t\\t\\tlet res = path.match(/^[a-zA-Z0-9_\\\\/\\\\-]*(^|\\\\/)(?<file>[a-zA-Z0-9_\\\\.\\\\-]+)$/)\\r\\n\\t\\t\\t\\t\\t\\tif (!res) return;\\r\\n\\t\\t\\t\\t\\t\\tlet file = imports_path+'/'+res.groups.file;\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tlet import_js = ns.read(file)\\r\\n\\t\\t\\t\\t\\t\\tlog.debug(`Read ${file}, length: ${import_js.length}, original name: ${path}`)\\r\\n\\t\\t\\t\\t\\t\\tfilesToCheck.push(import_js);\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\t\\t// remove import\\r\\n\\t\\t\\t\\tsources.push(file_js.replace(/(^|\\\\n)(\\\\s*)import(\\\\s+)[^'\\\"]*['\\\"](.*)['\\\"]/g, '\\\\n'));\\r\\n\\t\\t\\t\\t//sources.push(file_js.replace(/(^|\\\\n)(\\\\s*)import(\\\\s+)[^'\\\"](?<file>.*)\\\\n/g, '\\\\n'));\\r\\n\\r\\n\\t\\t\\t\\tif (watchdog++ > 50) throw \\\"runPlugin - watchdog - too much recursive imports\\\";\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tlog.debug(\\\"sources: \\\", sources.length, \\\" importsMap: \\\", Object.keys(importsMap));\\r\\n\\t\\t\\treturn sources;\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\tsources.reverse();\\r\\n\\t\\tlet js = sources.join('\\\\n');\\r\\n\\r\\n\\t\\tjs = js.replace(/(^|\\\\n)(\\\\s*)export /g, '\\\\n')\\r\\n\\r\\n\\t\\tlet adapter = new API_Adapter(os, filepath);\\r\\n\\t\\tlet API = adapter.getAPI_Object();\\r\\n\\t\\tlet start_time = performance.now();\\r\\n\\r\\n\\t\\tlet wrap_js = `\\r\\n{\\r\\n\\tconst os = null;\\r\\n\\tconst runPlugin = null;\\r\\n\\t(async function(){ \\r\\n\\t\\t${js}\\r\\n\\t\\t;return await mainPlugin(API)\\r\\n\\t}).bind({})()\\r\\n}`\\r\\n\\t\\tlet result = await eval(wrap_js)\\r\\n\\r\\n\\t\\tlet end_time = performance.now();\\r\\n\\t\\treturn { result, time_diff: (end_time - start_time) };\\r\\n\\t} catch (e) {\\r\\n\\t\\treturn { error: e.message, stack: e.stack }\\r\\n\\t}\\r\\n}\",\"filename\":\"/os/plugins/plugins_utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WindowWidget } from '/os/window_widget.js'\\r\\nimport { Logger } from '/os/logger.js'\\r\\nimport { ServersManager } from '/os/servers_manager.js'\\r\\nimport { Utils } from '/os/utils.js'\\r\\nimport { GUI } from '/os/gui.js';\\r\\n\\r\\n/**\\r\\n * @typedef {Object} API_Object\\r\\n * @property {OS_API} os\\r\\n * @property {ClassesAPI} classes\\r\\n * @property {Utils} utils\\r\\n * @property {function(): void} exit\\r\\n */\\r\\n\\r\\n\\r\\n/**\\r\\n * @typedef {Object} ClassesAPI\\r\\n * @property { (parent: any) => WindowWidget } newWindowWidget\\r\\n */\\r\\n\\r\\n/**\\r\\n * @typedef {Object} NS\\r\\n * */\\r\\n/**\\r\\n * @typedef {Object} OS_API\\r\\n * @property { (callback: (ns: NS) => Promise<any> | any) => Promise} getNS\\r\\n * @property { (callback: (ns: NS) => void) => void} getNS_noPromise\\r\\n * @property { () => ServersManager} getServersManager\\r\\n * @property { () => GUI} getGUI\\r\\n */\\r\\n\\r\\nexport class API_Adapter {\\r\\n\\t/** @param {import('/os/os.js').OS} os @param {string} pluginName */\\r\\n\\tconstructor(os, pluginName) {\\r\\n\\t\\tthis.#os = os;\\r\\n\\t\\tthis.#log = new Logger(this, os.logRenderer);\\r\\n\\t\\tthis.#pluginName = pluginName\\r\\n\\t}\\r\\n\\r\\n\\tgetAPI_Object() {\\r\\n\\t\\tif (!this.#apiObject) {\\r\\n\\t\\t\\tlet utils = { ...Utils };\\r\\n\\t\\t\\tObject.freeze(utils)\\r\\n\\r\\n\\t\\t\\tthis.#apiObject = {\\r\\n\\t\\t\\t\\tos: this.#getOS_API(),\\r\\n\\t\\t\\t\\tclasses: this.#getClassesAPI(),\\r\\n\\t\\t\\t\\tutils: utils,\\r\\n\\r\\n\\t\\t\\t\\texit: () => this.#exit(),\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\t\\treturn this.#apiObject;\\r\\n\\t}\\r\\n\\r\\n\\t#getOS_API() {\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tgetNS: async (func) => {\\r\\n\\t\\t\\t\\tif (!this.#active) return;\\r\\n\\t\\t\\t\\t//this.#log.debug(\\\"API.getNS for \\\" + this.#pluginName);\\r\\n\\t\\t\\t\\treturn this.#os.getNS(func);\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t/** @param {(NS) => void} func */\\r\\n\\t\\t\\tgetNS_noPromise: (func) => {\\r\\n\\t\\t\\t\\tif (!this.#active) return;\\r\\n\\t\\t\\t\\tthis.#os.getNS_noPromise(func)\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t/** @returns {ServersManager} */\\r\\n\\t\\t\\tgetServersManager: () => {\\r\\n\\t\\t\\t\\treturn this.#os.serversManager\\r\\n\\t\\t\\t},\\r\\n\\r\\n\\t\\t\\t/** @returns {GUI} */\\r\\n\\t\\t\\tgetGUI: () => {\\r\\n\\t\\t\\t\\treturn this.#os.gui;\\r\\n\\t\\t\\t},\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t#getClassesAPI() {\\r\\n\\t\\treturn {\\r\\n\\t\\t\\tnewWindowWidget: (parent) => {\\r\\n\\t\\t\\t\\tif (!this.#active) return;\\r\\n\\t\\t\\t\\tlet winWidget = new WindowWidget(parent, this.#os);\\r\\n\\t\\t\\t\\tthis.#createdWindows.push(winWidget)\\r\\n\\t\\t\\t\\treturn winWidget;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t#exit() {\\r\\n\\t\\tthis.#createdWindows.forEach(win => {\\r\\n\\t\\t\\twin.on_exit();\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\tthis.#active = false;\\r\\n\\t}\\r\\n\\r\\n\\t#os\\r\\n\\t#log\\r\\n\\t#pluginName\\r\\n\\t/** @type {WindowWidget[]} */\\r\\n\\t#createdWindows = []\\r\\n\\t#active = true\\r\\n\\r\\n\\t#apiObject\\r\\n\\r\\n}\\r\\n\",\"filename\":\"/os/plugins/api_adapter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// based on: https://github.com/Redmega/bitburner-scripts/blob/main/dist/repl.js\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').API_Object} api */\\r\\nasync function mainPlugin(api){\\r\\n\\tlet repl = new REPL_API(api);\\r\\n\\trepl.run();\\r\\n}\\r\\n\\r\\nclass REPL_API {\\r\\n\\t/** @param {import('/os/plugins/api_adapter').API_Object} api */\\r\\n\\tconstructor(api) {\\r\\n\\t\\tthis.version = \\\"v0.0.1\\\";\\r\\n\\t\\t\\r\\n\\t\\tthis.#api = api;\\r\\n\\t\\tthis.#os = api.os;\\r\\n\\t\\tthis.#doc = globalThis[\\\"document\\\"]\\r\\n\\r\\n\\t\\tthis.focusInputCallback = (event) => this.focusInput(event);\\r\\n\\t\\tthis.formSubmitCallback = (event) => this.formSubmit(event);\\r\\n\\t}\\r\\n\\r\\n\\trun() {\\r\\n\\t\\tthis.#createWindow();\\r\\n\\t\\tthis.#mount();\\r\\n\\t}\\r\\n\\r\\n\\tfocusInput(event) {\\r\\n\\t\\tthis.input.focus();\\r\\n\\t}\\r\\n\\r\\n\\tformSubmit(event) {\\r\\n\\t\\tevent.preventDefault();\\r\\n\\r\\n\\t\\tconst command = this.input.value;\\r\\n\\t\\tthis.runCommand(command);\\r\\n\\t\\tthis.input.value = \\\"\\\";\\r\\n\\t\\tthis.input.focus();\\r\\n\\t}\\r\\n\\r\\n\\t#createWindow() {\\r\\n\\t\\tlet windowWidget = this.#api.classes.newWindowWidget(this);\\r\\n\\t\\tthis.#windowWidget = windowWidget;\\r\\n\\t\\twindowWidget.init();\\r\\n\\r\\n\\t\\tlet content = windowWidget.getContentDiv();\\r\\n\\t\\tcontent.classList.add('whiteScrollbar')\\r\\n\\t\\tcontent.style['background-color'] = 'black';\\r\\n\\t\\tcontent.style.height = '100%';\\r\\n\\t\\tcontent.parentNode.style['align-items'] = 'stretch'\\r\\n\\t\\twindowWidget.setTitle('REPL')\\r\\n\\t\\twindowWidget.show();\\r\\n\\t\\twindowWidget.addMenuItem({ label: 'About', callback: () => this.#onAboutMenuClick() })\\r\\n\\t}\\r\\n\\r\\n\\t// FIXME: Probably brittle and will break at any update (possibly even between launches)\\r\\n\\t#mount() {\\r\\n\\r\\n\\t\\tthis.wrapper = this.#doc.createElement(\\\"form\\\");\\r\\n\\t\\tthis.wrapper.className = \\\"MuiCollapse-wrapperInner MuiCollapse-vertical repl-wrapper\\\"; // css-8atqhb \\r\\n\\t\\tthis.wrapper.style.width = '100%'\\r\\n\\r\\n\\t\\tthis.log = this.#doc.createElement(\\\"div\\\");\\r\\n\\t\\tthis.log.className = \\\"MuiBox-root repl-log MuiTypography-root MuiTypography-body1\\\"; // css-14bb8ng\\\";\\r\\n\\t\\tconst inputContainer = this.#doc.createElement(\\\"div\\\");\\r\\n\\r\\n\\t\\tlet foundListItem = this.#doc.querySelector('.MuiListItem-root.MuiListItem-gutters .MuiTypography-root.MuiTypography-body1');\\r\\n\\t\\tif (!foundListItem) {\\r\\n\\t\\t\\tfoundListItem = this.#doc.querySelector('.MuiTypography-root.MuiTypography-body1')\\r\\n\\t\\t}\\r\\n\\t\\tif (foundListItem) {\\r\\n\\t\\t\\tfoundListItem.classList.forEach(cl => {\\r\\n\\t\\t\\t\\tinputContainer.classList.add(cl)\\r\\n\\t\\t\\t\\tthis.log.classList.add(cl)\\r\\n\\t\\t\\t})\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tinputContainer.style['color'] = 'rgb(0, 204, 0)';\\r\\n\\t\\t\\tinputContainer.style['position'] = 'relative';\\r\\n\\t\\t\\tinputContainer.style['background-color'] = 'rgb(34, 34, 34)';\\r\\n\\t\\t\\tthis.log.style['color'] = 'rgb(0, 204, 0)';\\r\\n\\t\\t\\tthis.log.style['position'] = 'relative';\\r\\n\\t\\t\\tthis.log.style['background-color'] = 'rgb(34, 34, 34)';\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//inputContainer.className = \\\"MuiTypography-root MuiTypography-body1 css-14bb8ng repl-input-wrapper\\\";\\r\\n\\t\\tconst replPreText = this.#doc.createElement(\\\"span\\\");\\r\\n\\t\\treplPreText.textContent = \\\"REPL >>\\\";\\r\\n\\t\\treplPreText.style['white-space'] = 'nowrap';\\r\\n\\t\\treplPreText.style['margin-right'] = '8px';\\r\\n\\t\\tinputContainer.appendChild(replPreText);\\r\\n\\r\\n\\t\\tthis.input = this.#doc.createElement(\\\"input\\\");\\r\\n\\t\\tthis.input.type = \\\"text\\\";\\r\\n\\t\\tthis.input.id = \\\"repl-input\\\";\\r\\n\\t\\t//this.input.className = \\\"repl-input\\\";\\r\\n\\r\\n\\t\\tfoundListItem = this.#doc.querySelector('#terminal-input');\\r\\n\\t\\tif (foundListItem) {\\r\\n\\t\\t\\tfoundListItem.classList.forEach(cl => {\\r\\n\\t\\t\\t\\tthis.input.classList.add(cl)\\r\\n\\t\\t\\t})\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tthis.input.style['color'] = 'rgb(0, 204, 0)';\\r\\n\\t\\t\\tthis.input.style['position'] = 'relative';\\r\\n\\t\\t\\tthis.input.style['background-color'] = 'rgb(34, 34, 34)';\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.#os.getGUI().injectCSS(REPL_css, \\\"REPL_css\\\");\\r\\n\\r\\n\\t\\tinputContainer.appendChild(this.input);\\r\\n\\t\\tthis.wrapper.appendChild(this.log);\\r\\n\\t\\tthis.wrapper.appendChild(inputContainer);\\r\\n\\t\\t\\r\\n\\t\\tthis.#windowWidget.getContentDiv().appendChild(this.wrapper);\\r\\n\\t\\t\\r\\n\\t\\tthis.input.addEventListener('keydown', e => e.stopPropagation());\\r\\n\\t\\tthis.wrapper.addEventListener(\\\"click\\\", this.focusInputCallback);\\r\\n\\t\\tthis.wrapper.addEventListener(\\\"submit\\\", this.formSubmitCallback);\\r\\n\\t\\tthis.printLine(`BitburnerOS REPL ${this.version}`);\\r\\n\\t\\tthis.printLine('Type \\\"exit\\\" to quit.');\\r\\n\\t}\\r\\n\\r\\n\\tunmount() {\\r\\n\\t\\tthis.wrapper.removeEventListener(\\\"click\\\", this.focusInputCallback);\\r\\n\\t\\tthis.wrapper.removeEventListener(\\\"submit\\\", this.formSubmitCallback);\\r\\n\\t\\tthis.wrapper.remove();\\r\\n\\t}\\r\\n\\r\\n\\tasync runCommand(command) {\\r\\n\\t\\tconsole.log(\\\"runCommand\\\");\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tif (command === \\\"exit\\\") {\\r\\n\\t\\t\\t\\tthis.#api.exit();\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tlet result = await this.#os.getNS(async ns=> {\\r\\n\\t\\t\\t\\treturn await eval(command);\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tthis.printLine(result);\\r\\n\\r\\n\\t\\t}\\r\\n\\t\\tcatch (error) {\\r\\n\\t\\t\\tglobalThis[\\\"window\\\"].console.error(error);\\r\\n\\t\\t\\tthis.printLine(error.toString(), \\\"error\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tprintLine(value, className) {\\r\\n\\t\\tlet text;\\r\\n\\t\\tif (typeof value === \\\"object\\\") {\\r\\n\\t\\t\\ttext = JSON.stringify(value);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\ttext = value;\\r\\n\\t\\t}\\r\\n\\t\\tconst line = this.#doc.createElement(\\\"p\\\");\\r\\n\\t\\tline.className = \\\"MuiTypography-root MuiTypography-body1 css-18ubon4 repl-line\\\";\\r\\n\\t\\tline.classList.add(className);\\r\\n\\t\\tline.textContent = text;\\r\\n\\t\\tthis.log.appendChild(line);\\r\\n\\t\\tthis.#windowWidget.getContentDiv().scrollTo({ top: this.#windowWidget.getContentDiv().scrollHeight });\\r\\n\\t\\t// @TODO: Clear log when reaching line cap (1000?)\\r\\n\\t}\\r\\n\\r\\n\\t#windowWidget\\r\\n\\t#aboutWindow\\r\\n\\t#doc\\r\\n\\t#os\\r\\n\\t#api\\r\\n\\r\\n\\t#onAboutMenuClick() {\\r\\n\\t\\tif (!this.#aboutWindow) {\\r\\n\\t\\t\\tthis.#aboutWindow = this.#os.getGUI().createAboutWindow({\\r\\n\\t\\t\\t\\t'Name': 'Bitburner REPL',\\r\\n\\t\\t\\t\\t'Description': 'Allows to execute any single line of javascript, including most of NS functions',\\r\\n\\t\\t\\t\\t'Author': 'Redmega#9832',\\r\\n\\t\\t\\t\\t'URL': 'https://github.com/Redmega/bitburner-scripts/blob/main/dist/repl.js'\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t\\tthis.#aboutWindow.show()\\r\\n\\t}\\r\\n}\\r\\n\\r\\nconst REPL_css = `\\r\\n.repl-wrapper {\\r\\n\\tborder-right: 1px solid rgb(68, 68, 68);\\r\\n\\tdisplay: flex;\\r\\n\\tflex-direction: column;\\r\\n\\tmax-height: 312px;\\r\\n\\tpadding: 0 0.5rem;\\r\\n}\\r\\n\\r\\n.repl-log {\\r\\n\\tflex: 1;\\r\\n\\tdisplay: flex;\\r\\n\\tflex-direction: column;\\r\\n\\tjustify-content: flex-end;\\r\\n\\tuser-select: text;\\r\\n}\\r\\n\\r\\n.repl-line {\\r\\n\\twhite-space: pre-wrap;\\r\\n\\toverflow-wrap: anywhere;\\r\\n\\tmargin: 0;\\r\\n}\\r\\n\\r\\n.repl-line.error {\\r\\n\\tcolor: #c00;\\r\\n}\\r\\n\\r\\n.repl-line.info {\\r\\n\\tcolor: #36c;\\r\\n}\\r\\n\\r\\n.repl-line.success {\\r\\n\\tcolor: #0c0;\\r\\n}\\r\\n\\r\\n.repl-line.warn {\\r\\n\\tcolor: #cc0;\\r\\n}\\r\\n\\r\\n.repl-input-wrapper {\\r\\n\\tdisplay: flex;\\r\\n\\talign-items: baseline;\\r\\n\\tgap: 0.5rem;\\r\\n}\\r\\n\\r\\n.repl-input-wrapper > span {\\r\\n\\twhite-space: nowrap\\r\\n}\\r\\n\\r\\n.repl-input {\\r\\n}\\r\\n`;\\r\\n\",\"filename\":\"/os/plugins/repl/repl.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/os/plugins/repl/repl.js\",\"url\":\"blob:file:///ba07a212-5e4b-4bea-8cb7-84501890b7fa\",\"moduleSequenceNumber\":86297}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import 'jit-yc.js'\\r\\nimport { AttacksMonitor } from '/os/plugins/rgraph/attacks_monitor.js'\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').API_Object} api */\\r\\nasync function mainPlugin(api) {\\r\\n\\r\\n\\tlet widget = new RGraphWidget(api);\\r\\n\\r\\n\\twidget.initAll();\\r\\n}\\r\\n\\r\\nclass RGraphWidget {\\r\\n\\tconstructor(api) {\\r\\n\\t\\tthis.#api = api;\\r\\n\\t\\tthis.#doc = globalThis['document'];\\r\\n\\t\\tthis.renderWorld = false;\\r\\n\\t\\tthis.nodeAlpha = 0.4;\\r\\n\\t}\\r\\n\\r\\n\\tinitAll() {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tthis.active = true;\\r\\n\\r\\n\\t\\t\\tthis.initWindow();\\r\\n\\r\\n\\t\\t\\tthis.#attacksMonitor = new AttacksMonitor(this.#api);\\r\\n\\r\\n\\t\\t\\tthis.#api.os.getGUI().injectCSS(RGraphCSS, 'RGraphCSS');\\r\\n\\r\\n\\t\\t\\tthis.initGraph();\\r\\n\\r\\n\\t\\t\\tthis.#contentDiv.scrollLeft = 540\\r\\n\\t\\t\\tthis.#contentDiv.scrollTop = 540\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tthis.dispose();\\r\\n\\t\\t\\tif (this.#infovis_div) this.#infovis_div.remove();\\r\\n\\t\\t\\tthrow e;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tinitWindow() {\\r\\n\\t\\tlet classes = this.#api.classes;\\r\\n\\r\\n\\t\\tlet windowWidget = classes.newWindowWidget();\\r\\n\\t\\tthis.#windowWidget = windowWidget;\\r\\n\\t\\twindowWidget.init();\\r\\n\\r\\n\\t\\tlet contentDiv = windowWidget.getContentDiv();\\r\\n\\t\\tthis.#contentDiv = contentDiv;\\r\\n\\t\\tcontentDiv.classList.add('greenScrollbar')\\r\\n\\t\\tcontentDiv.classList.add('grayBackground')\\r\\n\\t\\tcontentDiv.style['background-color'] = '#1a1a1a';\\r\\n\\r\\n\\t\\twindowWidget.setTitle('Network Graph')\\r\\n\\t\\twindowWidget.show();\\r\\n\\r\\n\\r\\n\\t\\tlet infovis_div = this.#doc.getElementById('infovis');\\r\\n\\t\\tthis.#infovis_div = infovis_div;\\r\\n\\r\\n\\t\\tif (!infovis_div) {\\r\\n\\t\\t\\tinfovis_div = this.#doc.createElement('div');\\r\\n\\t\\t\\tinfovis_div.style.width = '1200px';\\r\\n\\t\\t\\tinfovis_div.style.height = '900px';\\r\\n\\t\\t\\tinfovis_div.id = 'infovis'\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tinfovis_div.innerHTML = '';\\r\\n\\r\\n\\t\\tcontentDiv.appendChild(infovis_div);\\r\\n\\r\\n\\t\\tthis.initButtons();\\r\\n\\t}\\r\\n\\r\\n\\tinitButtons() {\\r\\n\\t\\tlet btnOptions = {\\r\\n\\t\\t\\t'position': 'absolute',\\r\\n\\t\\t\\t'top': '50px',\\r\\n\\t\\t\\t'left': '50px',\\r\\n\\t\\t\\t'z-index': '10',\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet gui = this.#api.os.getGUI();\\r\\n\\r\\n\\t\\tlet btn = gui.createButton({ btnOptions, btnLabel: \\\"+/- Purchased\\\", callback: () => this.onBtn_purchased() });\\r\\n\\t\\tthis.#contentDiv.appendChild(btn);\\r\\n\\r\\n\\t\\tbtnOptions.top = '80px';\\r\\n\\t\\tbtn = gui.createButton({ btnOptions, btnLabel: \\\"Network/World\\\", callback: () => this.onBtn_world() });\\r\\n\\t\\tthis.#contentDiv.appendChild(btn);\\r\\n\\t}\\r\\n\\r\\n\\tonBtn_purchased() {\\r\\n\\t\\tthis.#filterServers = !this.#filterServers\\r\\n\\t\\tthis.renderGraph();\\r\\n\\t}\\r\\n\\r\\n\\tonBtn_world() {\\r\\n\\t\\tthis.#worldRender.toggleActive();\\r\\n\\t\\tthis.renderWorld = !this.renderWorld;\\r\\n\\t\\tthis.nodeAlpha = (this.renderWorld) ? 0.4 : 0.8;\\r\\n\\t\\tthis.renderGraph();\\r\\n\\t}\\r\\n\\r\\n\\tinitGraph() { // , attacksMonitor, handlers\\r\\n\\r\\n\\t\\tthis.#createRGraph();\\r\\n\\r\\n\\t\\tthis.#rgraph._refresh = this.#rgraph.refresh;\\r\\n\\t\\tthis.#rgraph.refresh = (arg) => {\\r\\n\\t\\t\\tif (!this.#windowWidget.getContainer()) {\\r\\n\\t\\t\\t\\tconsole.log(\\\"clearTimeout\\\")\\r\\n\\t\\t\\t\\tclearTimeout(this.#loop_handler)\\r\\n\\t\\t\\t\\tthis.#loop_handler = null;\\r\\n\\t\\t\\t\\tthis.active = false;\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (!this.#windowWidget.isVisible) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tthis.draw_lines(arg);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tthis.#worldRender = new WorldRender(this.#rgraph.canvas.getCtx(), this.renderWorld)\\r\\n\\r\\n\\t\\tthis.renderGraph();\\r\\n\\r\\n\\t\\tthis.last_time = (Date.now() / 1000);\\r\\n\\t\\tif (this.active) this.#loop_handler = setTimeout(() => this.loop(), 40);\\r\\n\\t}\\r\\n\\r\\n\\trenderGraph() {\\r\\n\\t\\tthis.loadServers();\\r\\n\\r\\n\\t\\tthis.#rgraph.canvas.getCtx().clearRect(0, 0, this.#rgraph.canvas.width, this.#rgraph.canvas.height);\\r\\n\\r\\n\\t\\tthis.#worldRender.renderNodes(this.#rgraph);\\r\\n\\r\\n\\t\\t//rgraph.refresh(false);\\r\\n\\t\\tthis.#rgraph.plot();\\r\\n\\t}\\r\\n\\r\\n\\tloadServers() {\\r\\n\\t\\tlet servers = this.#api.os.getServersManager().serversObj\\r\\n\\r\\n\\t\\tlet json = this.#initServersData(servers);\\r\\n\\r\\n\\t\\tthis.#rgraph.loadJSON(json, 1);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tdispose() {\\r\\n\\t\\tthis.active = false;\\r\\n\\t\\tif (this.#loop_handler) {\\r\\n\\t\\t\\tclearTimeout(this.#loop_handler)\\r\\n\\t\\t\\tthis.#loop_handler = null;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t#doc\\r\\n\\t#contentDiv\\r\\n\\t#windowWidget\\r\\n\\t#api\\r\\n\\t#attacksMonitor\\r\\n\\t#rgraph\\r\\n\\t#loop_handler\\r\\n\\t#worldRender\\r\\n\\t#infovis_div\\r\\n\\t#filterServers\\r\\n\\r\\n\\r\\n\\t#initServersData(servers) {\\r\\n\\t\\tlet json = [];\\r\\n\\t\\tlet exclude = (serv) => false;\\r\\n\\t\\tlet purchased = this.#api.os.getServersManager().purchasedServers;\\r\\n\\t\\tif (this.#filterServers) {\\r\\n\\t\\t\\texclude = (serv) => {\\r\\n\\t\\t\\t\\tif (serv.startsWith('hacknet-node-')) return true;\\r\\n\\t\\t\\t\\treturn purchased.includes(serv);\\r\\n\\t\\t\\t};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (let serv in servers) {\\r\\n\\t\\t\\tif (exclude(serv)) {\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tlet { neighbors } = servers[serv];\\r\\n\\r\\n\\t\\t\\tlet adjacencies = neighbors.map(n => ({\\r\\n\\t\\t\\t\\t\\\"nodeTo\\\": n,\\r\\n\\t\\t\\t\\t\\\"data\\\": {\\r\\n\\t\\t\\t\\t\\t\\\"weight\\\": 3,\\r\\n\\t\\t\\t\\t\\tlineWidth: 3,\\r\\n\\t\\t\\t\\t\\t\\\"$alpha\\\": this.nodeAlpha,\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t})).filter(a => !exclude(a.nodeTo));\\r\\n\\r\\n\\t\\t\\tjson.push({\\r\\n\\t\\t\\t\\t\\\"id\\\": serv,\\r\\n\\t\\t\\t\\t\\\"name\\\": serv,\\r\\n\\t\\t\\t\\t\\\"data\\\": {\\r\\n\\t\\t\\t\\t\\t\\\"$dim\\\": (serv == 'home') ? 20 : 10,\\r\\n\\t\\t\\t\\t\\t\\\"$type\\\": (serv == 'home') ? \\\"star\\\" : \\\"circle\\\",\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\t\\\"adjacencies\\\": adjacencies,\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t\\treturn json;\\r\\n\\t}\\r\\n\\r\\n\\t#createRGraph() {\\r\\n\\t\\tthis.#rgraph = new $jit.RGraph({\\r\\n\\t\\t\\t'injectInto': 'infovis',\\r\\n\\t\\t\\twidth: 2000,\\r\\n\\t\\t\\theight: 2000,\\r\\n\\t\\t\\tNode: {\\r\\n\\t\\t\\t\\t'overridable': true,\\r\\n\\t\\t\\t\\t'color': '#cc0000'\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tEdge: {\\r\\n\\t\\t\\t\\t'overridable': true,\\r\\n\\t\\t\\t\\t'color': '#cccc00'\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\t//\\t\\tinterpolation: 'polar',\\r\\n\\t\\t\\tduration: 10, //3500,\\r\\n\\t\\t\\tfps: 30, //30,\\r\\n\\t\\t\\tlevelDistance: 60,\\r\\n\\r\\n\\t\\t\\tonCreateLabel: function (domElement, node) {\\r\\n\\t\\t\\t\\tdomElement.innerHTML = node.name;\\r\\n\\t\\t\\t\\tdomElement.onclick = function () {\\r\\n\\t\\t\\t\\t\\t//rgraph.onClick(node.id, {\\r\\n\\t\\t\\t\\t\\t//\\thideLabels: false,\\r\\n\\t\\t\\t\\t\\t//\\tonComplete: function () {\\r\\n\\t\\t\\t\\t\\t//\\t}\\r\\n\\t\\t\\t\\t\\t//});\\r\\n\\t\\t\\t\\t};\\r\\n\\t\\t\\t},\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tloop() {\\r\\n\\t\\tthis.loop_impl();\\r\\n\\t\\tif (this.active && this.#loop_handler) this.#loop_handler = setTimeout(() => this.loop(), 40);\\r\\n\\t}\\r\\n\\r\\n\\tloop_impl() {\\r\\n\\t\\tif (!this.#windowWidget.getContainer()) {\\r\\n\\t\\t\\tconsole.log(\\\"clearTimeout\\\")\\r\\n\\t\\t\\tclearTimeout(this.#loop_handler)\\r\\n\\t\\t\\tthis.#loop_handler = null;\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tif (!this.#windowWidget.isVisible) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet curr_time = (Date.now() / 1000);\\r\\n\\t\\tlet diff = curr_time - this.last_time;\\r\\n\\t\\tif (diff < 0) { this.last_time = curr_time; diff = 0; }\\r\\n\\r\\n\\t\\tif (diff > 2000) {\\r\\n\\t\\t\\tthis.#rgraph.refresh();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tthis.draw_lines(false);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync draw_lines(arg) { // rgraph, attacksMonitor, \\r\\n\\t\\tlet disableGrouping = true;\\r\\n\\t\\tlet attacks = await this.#attacksMonitor.populateProcesses(disableGrouping, { param: \\\"expiry\\\", isDescending: true, });\\r\\n\\r\\n\\t\\tthis.#rgraph._refresh(arg);\\r\\n\\r\\n\\t\\tlet ctx = this.#rgraph.canvas.getCtx();\\r\\n\\t\\tctx.save();\\r\\n\\r\\n\\t\\tthis.#worldRender.draw();\\r\\n\\r\\n\\t\\tlet min = 100;\\r\\n\\t\\tlet max = 0;\\r\\n\\t\\tattacks.forEach(serv => {\\r\\n\\t\\t\\tserv._scale = Math.log10(serv.threads);\\r\\n\\t\\t\\tif (serv._scale > max) max = serv._scale;\\r\\n\\t\\t\\tif (serv._scale && serv._scale < min) min = serv._scale;\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tlet div = 2;\\r\\n\\t\\tlet time = Date.now()\\r\\n\\t\\tlet time_delta = time / 1000;\\r\\n\\t\\ttime_delta = time_delta / div; // % (2*Math.PI);\\r\\n\\r\\n\\t\\tattacks.forEach(serv => {\\r\\n\\t\\t\\tlet target = serv.target;\\r\\n\\r\\n\\t\\t\\tctx.lineWidth = Math.max((serv._scale - min) / (max - min) * 5, 0) + 1;\\r\\n\\t\\t\\tswitch (serv.type) {\\r\\n\\t\\t\\t\\tcase 'weaken': ctx.strokeStyle = '#f3f330'; break;\\r\\n\\t\\t\\t\\tcase 'hack': ctx.strokeStyle = '#33d833'; break;\\r\\n\\t\\t\\t\\tdefault: ctx.strokeStyle = '#00a5f3'; break;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tserv.hosts.forEach(target2 => {\\r\\n\\t\\t\\t\\tarc_line(ctx, this.#rgraph, target, target2, time); // time_delta, serv.type\\r\\n\\t\\t\\t})\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\tctx.restore();\\r\\n\\t}\\r\\n}\\r\\n\\r\\nclass WorldRender {\\r\\n\\tconstructor(ctx, active) {\\r\\n\\t\\tthis.active = active;\\r\\n\\t\\tthis.ctx = ctx;\\r\\n\\t\\tthis.arr = [];\\r\\n\\t\\tthis.edges = [];\\r\\n\\t\\tthis.cities = {};\\r\\n\\t\\tthis.scale = 20;\\r\\n\\t\\tthis.x_adjust = -600;\\r\\n\\t\\tthis.y_adjust = -200;\\r\\n\\r\\n\\t\\tthis.nodesCache = {};\\r\\n\\r\\n\\t\\tlet arr = this.arr;\\r\\n\\t\\tlet edges = this.edges;\\r\\n\\r\\n\\t\\t//#region x\\r\\n\\t\\t/*\\r\\n\\t\\t`               ,_   .  .-.-_.  .\\r\\n           , _-\\\\'    \\\\ -     ~/      ;-'_   _       ,;_;_,   .~~-\\r\\n    ~-\\\\_/-'~'  ' \\\\~~| ',    ,'      /  / ~|- \\\\_/~/~.     ~~--   ~'- _\\r\\n   .                -/~ '\\\\ ,' _  ,.'V ' ~                   .     /~\\r\\n    -'~\\\\_,       '-,  '|. '   ~  ,   '~                /    /   /~\\r\\n         '|        '' \\\\~|\\\\       _\\\\~.        ,     C         /,.\\r\\n          '\\\\     S  /'           |        ~  \\\\ \\\"         ,_ / |\\r\\n           |       /            ._-~'\\\\_ _~ ..            \\\\ ) N\\r\\n            \\\\   __-\\\\           '/      ~ |   \\\\_          /  ~\\r\\n  .,         '\\\\     ~-_      - |          \\\\  ' ~|  /\\\\  \\\\~ ,\\r\\n               ~-     ;       '\\\\           '-,   \\\\,' / /  |\\r\\n                 '\\\\_ ~'\\\\_       \\\\_ _        /'    '  |,  |'\\r\\n                   /     \\\\_       ~ |      /         \\\\   '; -,_.\\r\\n                   |       ~         |    |  ,        '-_, ,;   ~\\\\\\r\\n                    \\\\,   A  /        \\\\    / /|            , , ,   -,\\r\\n                     |    ,/          |  |  |/          ,-   ~ \\\\   '.\\r\\n                    ,|   ,/           \\\\ ,/              \\\\   I   |\\r\\n                    /    |             ~                 -~~-, /   _\\r\\n                    |  -'                                    ~    /\\r\\n                    /  '.                                     ~\\r\\n                    ',   ~\\r\\n                      ~'`;\\r\\n\\t\\t*/\\r\\n\\t\\t//#endregion\\r\\n`               ++    + ++   +\\r\\n           + + +     + +  + +             +       ++++ +   ++\\r\\n     ++++++ + + ++++ +     +      +  ++ ++ +++++++    + +++  +++ +\\r\\n    +               +   + +  +  ++ + + +                   + +  +\\r\\n     ++++       +++  +   +   +  +  V++                +     +\\r\\n         ++        +  +++      + +++      +     +  C       +\\r\\n          +     +   +           +   ++   +   +         ++ +    +\\r\\n           +++   S +            +++   + + ++             + ++N+\\r\\n              +  ++            +   + + +   +              +  +\\r\\n             +  +  +          +     +      + ++  +  ++   +\\r\\n              ++              +           + + +    + +    +\\r\\n                +++ +++++      ++        +     + ++   +  +\\r\\n                   +     ++      + +      +     +      ++ + ++  +\\r\\n                   +       +      + ++    +  +        +   +   ++ +\\r\\n                    +  + A+           +   +              + ++   + +\\r\\n                     +    +           +  +  ++          +    +++\\r\\n                    +    +             ++              +   +I   +   +\\r\\n                    +    +             +                +++ + ++   +\\r\\n                    +   +                                    +\\r\\n                    +   +\\r\\n                    ++  +\\r\\n                      ++`\\r\\n\\r\\n\\t\\t\\t.split('\\\\n').forEach((s, row) => {\\r\\n\\t\\t\\t\\tlet a = arr[row] = [];\\r\\n\\t\\t\\t\\ts.split('').forEach((ch, col) => {\\r\\n\\t\\t\\t\\t\\tif (!ch || ch==' ') return;\\r\\n\\r\\n\\t\\t\\t\\t\\tif (['A', 'S', 'C', 'I', 'N', 'V'].includes(ch)) {\\r\\n\\t\\t\\t\\t\\t\\tarr[row][col] = ch;\\r\\n\\t\\t\\t\\t\\t\\tthis.cities[ch] = [col, row];\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tfor (let x = -1; x <= 0; ++x) {\\r\\n\\t\\t\\t\\t\\t\\t\\tfor (let y = -1; y <= 1; ++y) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tlet neigh = (x != 0 || y != 0) && arr[row + x] && arr[row + x][col + y];\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (neigh) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (!['A', 'S', 'C', 'I', 'N', 'V'].includes(neigh)) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconnect(col + y, row + x, col, row);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tarr[row][col] = 1;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\tfunction connect(x1, y1, x2, y2) {\\r\\n\\t\\t\\tedges.push([x1, y1, x2, y2]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\trenderNodes(rgraph) {\\r\\n\\t\\tconsole.log(\\\"nodes\\\");\\r\\n\\t\\tif (!this.active) return;\\r\\n\\t\\tlet scale = this.scale;\\r\\n\\t\\tlet x_adjust = this.x_adjust;\\r\\n\\t\\tlet y_adjust = this.y_adjust;\\r\\n\\r\\n\\t\\tfor (let id in rgraph.graph.nodes) {\\r\\n\\t\\t\\tlet node = rgraph.graph.nodes[id];\\r\\n\\r\\n\\t\\t\\tif (!this.nodesCache[id]) {\\r\\n\\t\\t\\t\\tif (SERV_DATA[id]) {\\r\\n\\t\\t\\t\\t\\tif (this.cities[SERV_DATA[id]]) {\\r\\n\\t\\t\\t\\t\\t\\tlet [col, row] = this.cities[SERV_DATA[id]];\\r\\n\\t\\t\\t\\t\\t\\tlet randx = Math.random() * 140 - 70;\\r\\n\\t\\t\\t\\t\\t\\tlet randy = Math.random() * 140 - 70;\\r\\n\\t\\t\\t\\t\\t\\tthis.nodesCache[id] = [x_adjust + col * scale + randx, y_adjust + row * scale * 1.9 + randy];\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (!this.nodesCache[id]) {\\r\\n\\t\\t\\t\\t\\tlet x = (12 + Math.random() * 50) * scale\\r\\n\\t\\t\\t\\t\\tlet y = (1 + Math.random() * 19) * scale * 1.9;\\r\\n\\t\\t\\t\\t\\tthis.nodesCache[id] = [x_adjust + x, y_adjust + y];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tlet cache = this.nodesCache[id];\\r\\n\\t\\t\\tnode.pos.setc(cache[0], cache[1]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (!this.rgraph) {\\r\\n\\t\\t\\tthis.rgraph = rgraph;\\r\\n\\t\\t\\tfor (let id in rgraph.graph.nodes) {\\r\\n\\t\\t\\t\\tthis._node_prototype = Object.getPrototypeOf(rgraph.graph.nodes[id]);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis._setPos = this._node_prototype.setPos;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (let id in rgraph.graph.nodes) {\\r\\n\\t\\t\\tthis._node_prototype.setPos = () => { };\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tdraw() {\\r\\n\\t\\tif (!this.active) return;\\r\\n\\t\\tlet ctx = this.ctx;\\r\\n\\t\\tlet scale = this.scale;\\r\\n\\t\\tlet x_adjust = this.x_adjust;\\r\\n\\t\\tlet y_adjust = this.y_adjust;\\r\\n\\t\\tctx.save();\\r\\n\\t\\tctx.strokeStyle = 'rgb(173,216,230)';\\r\\n\\t\\tctx.lineWidth = 2;\\r\\n\\t\\tfor (let edge of this.edges) {\\r\\n\\t\\t\\tctx.beginPath();\\r\\n\\t\\t\\tctx.moveTo(x_adjust+edge[0]*scale, y_adjust+edge[1]*scale*2);\\r\\n\\t\\t\\tctx.lineTo(x_adjust+edge[2]*scale, y_adjust+edge[3]*scale*2);\\r\\n\\t\\t\\tctx.stroke();\\r\\n\\t\\t}\\r\\n\\t\\tctx.restore();\\r\\n\\t}\\r\\n\\r\\n\\ttoggleActive() {\\r\\n\\t\\tthis.active = !this.active;\\r\\n\\t\\tif (this._node_prototype) {\\r\\n\\t\\t\\tthis._node_prototype.setPos = this._setPos;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction arc_line(ctx, rgraph, idfrom, idto, time) { // dt, type\\r\\n\\tlet nodeFrom = rgraph.graph.getNode(idfrom)\\r\\n\\tlet nodeTo = rgraph.graph.getNode(idto)\\r\\n\\tif (!nodeFrom) { return }\\r\\n\\tif (!nodeTo) { return }\\r\\n\\r\\n\\tvar from = nodeFrom.pos.getc(),\\r\\n\\t\\tto = nodeTo.pos.getc();\\r\\n\\r\\n\\tlet begin = from;\\r\\n\\tlet end = to;\\r\\n\\r\\n\\tlet dim = (Math.abs(begin.x - end.x) + Math.abs(begin.y - end.y))/2\\r\\n\\tlet d = Math.sqrt((begin.x - end.x) ** 2 + (begin.y - end.y) ** 2);\\r\\n\\r\\n\\tlet dist = 15+ d / 15;\\r\\n\\tctx.setLineDash([dist / 2, dist / 2])\\r\\n\\tctx.lineDashOffset = Math.ceil((time * Math.sqrt(d) / 400 ) % (dist));\\r\\n\\r\\n\\t\\r\\n\\tctx.beginPath();\\r\\n\\tctx.moveTo(begin.x, begin.y);\\r\\n\\r\\n\\tctx.quadraticCurveTo((begin.x + end.x) / 2, (begin.y + end.y) / 2 - dim, end.x, end.y);\\r\\n\\tctx.stroke();\\r\\n}\\r\\n\\r\\n\\r\\nconst RGraphCSS = `\\r\\n.node {\\r\\n\\tfont-size: 14px;\\r\\n\\tcursor: pointer;\\r\\n\\tfontSize: 14px;\\r\\n\\tcolor: #fff;\\r\\n}\\r\\n#infovis::-webkit-scrollbar {\\r\\n\\tdisplay: unset;\\r\\n\\tborder-radius: 10px;\\r\\n\\tbackground-color: #4d5d4e;\\r\\n}\\r\\n#infovis::-webkit-scrollbar-thumb {\\r\\n\\t-webkit-border-radius: 10px;\\r\\n\\tborder-radius: 10px;\\r\\n\\tbackground: rgb(7 156 7);; \\r\\n\\t-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);\\r\\n}\\r\\n`;\\r\\n\\r\\nconst SERV_DATA = {\\r\\n\\t\\\"home\\\": \\\"\\\",\\r\\n\\t\\\"darkweb\\\": \\\"\\\",\\r\\n\\t\\\"iron-gym\\\": \\\"S\\\",\\r\\n\\t\\\"max-hardware\\\": \\\"\\\",\\r\\n\\t\\\"silver-helix\\\": \\\"\\\",\\r\\n\\t\\\"crush-fitness\\\": \\\"A\\\",\\r\\n\\t\\\"harakiri-sushi\\\": \\\"\\\",\\r\\n\\t\\\"CSEC\\\": \\\"\\\",\\r\\n\\t\\\"neo-net\\\": \\\"\\\",\\r\\n\\t\\\"hong-fang-tea\\\": \\\"\\\",\\r\\n\\t\\\"nectar-net\\\": \\\"\\\",\\r\\n\\t\\\"omega-net\\\": \\\"I\\\",\\r\\n\\t\\\"avmnite-02h\\\": \\\"\\\",\\r\\n\\t\\\"catalyst\\\": \\\"\\\",\\r\\n\\t\\\"millenium-fitness\\\": \\\"V\\\",\\r\\n\\t\\\"aerocorp\\\": \\\"A\\\",\\r\\n\\t\\\"unitalife\\\": \\\"\\\",\\r\\n\\t\\\"zeus-med\\\": \\\"\\\",\\r\\n\\t\\\"zb-def\\\": \\\"\\\",\\r\\n\\t\\\"johnson-ortho\\\": \\\"\\\",\\r\\n\\t\\\"zb-institute\\\": \\\"V\\\",\\r\\n\\t\\\"rothman-uni\\\": \\\"S\\\",\\r\\n\\t\\\"joesguns\\\": \\\"S\\\",\\r\\n\\t\\\"sigma-cosmetics\\\": \\\"\\\",\\r\\n\\t\\\"foodnstuff\\\": \\\"S\\\",\\r\\n\\t\\\"n00dles\\\": \\\"N\\\",\\r\\n\\t\\\"zer0\\\": \\\"\\\",\\r\\n\\t\\\"phantasy\\\": \\\"\\\",\\r\\n\\t\\\"netlink\\\": \\\"A\\\",\\r\\n\\t\\\"syscore\\\": \\\"V\\\",\\r\\n\\t\\\"rho-construction\\\": \\\"A\\\",\\r\\n\\t\\\"summit-uni\\\": \\\"A\\\",\\r\\n\\t\\\"alpha-ent\\\": \\\"S\\\",\\r\\n\\t\\\"snap-fitness\\\": \\\"A\\\",\\r\\n\\t\\\"omnia\\\": \\\"V\\\",\\r\\n\\t\\\"defcomm\\\": \\\"N\\\",\\r\\n\\t\\\"nova-med\\\": \\\"I\\\",\\r\\n\\t\\\"lexo-corp\\\": \\\"V\\\",\\r\\n\\t\\\"comptek\\\": \\\"V\\\",\\r\\n\\t\\\"the-hub\\\": \\\"\\\",\\r\\n\\t\\\"I.I.I.I\\\": \\\"\\\",\\r\\n\\t\\\"aevum-police\\\": \\\"A\\\",\\r\\n\\t\\\"global-pharm\\\": \\\"N\\\",\\r\\n\\t\\\"deltaone\\\": \\\"S\\\",\\r\\n\\t\\\"solaris\\\": \\\"C\\\",\\r\\n\\t\\\"infocomm\\\": \\\"\\\",\\r\\n\\t\\\"run4theh111z\\\": \\\"\\\",\\r\\n\\t\\\"helios\\\": \\\"V\\\",\\r\\n\\t\\\"applied-energetics\\\": \\\"\\\",\\r\\n\\t\\\"vitalife\\\": \\\"N\\\",\\r\\n\\t\\\".\\\": \\\"\\\",\\r\\n\\t\\\"nwo\\\": \\\"V\\\",\\r\\n\\t\\\"ecorp\\\": \\\"A\\\",\\r\\n\\t\\\"kuai-gong\\\": \\\"C\\\",\\r\\n\\t\\\"powerhouse-fitness\\\": \\\"S\\\",\\r\\n\\t\\\"The-Cave\\\": \\\"\\\",\\r\\n\\t\\\"4sigma\\\": \\\"S\\\",\\r\\n\\t\\\"clarkinc\\\": \\\"A\\\",\\r\\n\\t\\\"blade\\\": \\\"S\\\",\\r\\n\\t\\\"fulcrumassets\\\": \\\"\\\",\\r\\n\\t\\\"megacorp\\\": \\\"S\\\",\\r\\n\\t\\\"b-and-a\\\": \\\"A\\\",\\r\\n\\t\\\"omnitek\\\": \\\"V\\\",\\r\\n\\t\\\"fulcrumtech\\\": \\\"A\\\",\\r\\n\\t\\\"titan-labs\\\": \\\"\\\",\\r\\n\\t\\\"univ-energy\\\": \\\"S\\\",\\r\\n\\t\\\"icarus\\\": \\\"S\\\",\\r\\n\\t\\\"taiyang-digital\\\": \\\"\\\",\\r\\n\\t\\\"microdyne\\\": \\\"\\\",\\r\\n\\t\\\"stormtech\\\": \\\"I\\\",\\r\\n\\t\\\"galactic-cyber\\\": \\\"A\\\"\\r\\n};\\r\\n\",\"filename\":\"/os/plugins/rgraph/rgraph.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":688}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { processListPayloads } from \\\"/os/plugins/rgraph/process-list.config.js\\\"\\r\\n\\r\\nexport class AttacksMonitor {\\r\\n\\t/** @param {import('/os/plugins/api_adapter').API_Object} api */\\r\\n\\tconstructor(api) {\\r\\n\\t\\tthis.#os = api.os;\\r\\n\\t\\t//this.#classes = api.classes;\\r\\n\\t\\t//this.#utils = api.utils\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @param {Boolean} disableGrouping\\r\\n\\t * @param {{param: String, isDescending: Boolean}} sort\\r\\n\\t **/\\r\\n\\tasync populateProcesses(disableGrouping, sort) {\\r\\n\\t\\tlet processes = await this.#getRunningProcesses()\\r\\n\\r\\n\\t\\tprocesses = processes.map(serv =>\\r\\n\\t\\t\\t[\\r\\n\\t\\t\\t\\t...serv.ps\\r\\n\\t\\t\\t\\t\\t.filter(({ args }) => args.length)\\r\\n\\t\\t\\t\\t\\t.map(({ filename, args, threads }) => ({\\r\\n\\t\\t\\t\\t\\t\\thosts: [serv.hostname],\\r\\n\\t\\t\\t\\t\\t\\targs,\\r\\n\\t\\t\\t\\t\\t\\ttarget: args[0],\\r\\n\\t\\t\\t\\t\\t\\tthreads,\\r\\n\\t\\t\\t\\t\\t\\tfilename,\\r\\n\\t\\t\\t\\t\\t\\ttype: Object.keys(processListPayloads).find((key) => processListPayloads[key].includes(filename)),\\r\\n\\t\\t\\t\\t\\t}))\\r\\n\\t\\t\\t\\t .filter(({ type }) => type)\\r\\n\\t\\t\\t])\\r\\n\\t\\t\\t.flat();\\r\\n\\r\\n\\t\\tawait this.#os.getNS(ns => {\\r\\n\\t\\t\\tprocesses = processes.map((process) => ({ ...process, expiry: this.#getProcessExpiryDetails(ns, process) }))\\r\\n\\t\\t})\\r\\n\\r\\n\\r\\n\\t\\tif (!disableGrouping) {\\r\\n\\t\\t\\tfor (let i = 0; i < processes.length; ++i) {\\r\\n\\t\\t\\t\\tlet j = processes.length\\r\\n\\t\\t\\t\\twhile (--j > i) {\\r\\n\\t\\t\\t\\t\\tif (processes[i].type === processes[j].type && JSON.stringify(processes[i].args) === JSON.stringify(processes[j].args)) {\\r\\n\\t\\t\\t\\t\\t\\tprocesses[i].threads += processes[j].threads\\r\\n\\t\\t\\t\\t\\t\\tprocesses[i].hosts = [...processes[i].hosts, ...processes[j].hosts]\\r\\n\\t\\t\\t\\t\\t\\tprocesses.splice(j, 1)\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn processes.sort((a, b) => {\\r\\n\\t\\t\\tconst valueA = a[sort.param]\\r\\n\\t\\t\\tconst valueB = b[sort.param]\\r\\n\\r\\n\\t\\t\\tif (sort.param === \\\"expiry\\\") {\\r\\n\\t\\t\\t\\treturn valueB.timeRunning / valueB.duration - valueA.timeRunning / valueA.duration\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tif (typeof valueA === \\\"string\\\") {\\r\\n\\t\\t\\t\\t\\treturn sort.isDescending ? valueB.localeCompare(valueA) : valueA.localeCompare(valueB)\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\treturn sort.isDescending ? valueB - valueA : valueA - valueB\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t})\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @param {NS} ns\\r\\n\\t * @param {{ filename: String, args: String[], hosts: String[] }} process\\r\\n\\t * @return {{duration: Number, timeRunning: Number}|null}\\r\\n\\t */\\r\\n\\t#getProcessExpiryDetails(ns, { filename, hosts, args }) {\\r\\n\\t\\tlet empty = { duration: 0, timeRunning: 0 };\\r\\n\\t\\tif (!ns.serverExists(hosts[0])) return empty;\\r\\n\\r\\n\\t\\tconst logs = ns.getScriptLogs(filename, hosts[0], ...args)\\r\\n\\t\\tlet i = logs.length\\r\\n\\t\\tlet log\\r\\n\\t\\tlet scriptData = ns.getRunningScript(filename, hosts[0], ...args)\\r\\n\\t\\tif (!scriptData) return empty;\\r\\n\\r\\n\\t\\tconst { onlineRunningTime, offlineRunningTime } = scriptData\\r\\n\\t\\tconst timeRunning = onlineRunningTime + offlineRunningTime\\r\\n\\t\\tconst pattern = new RegExp(/^sleep:.+?([\\\\d.]+)/)\\r\\n\\t\\tconst duration = logs.reduce((total, logOutput) => {\\r\\n\\t\\t\\tconst match = logOutput.match(pattern)\\r\\n\\t\\t\\treturn total + (match?.[1] ? Number(match?.[1]) : 0)\\r\\n\\t\\t}, 0) / 1000\\r\\n\\t\\tconst returnValue = {\\r\\n\\t\\t\\tduration,\\r\\n\\t\\t\\ttimeRunning\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\twhile (!log && i--) {\\r\\n\\t\\t\\tif (logs[i].indexOf(\\\": Executing\\\") !== -1) {\\r\\n\\t\\t\\t\\tlog = logs[i]\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (log) {\\r\\n\\t\\t\\tconst time = log.match(/([0-9.])+ /g).map(Number)\\r\\n\\t\\t\\treturnValue.duration += time.length > 1 ? time[0] * 60 + time[1] : time[0]\\r\\n\\t\\t}\\r\\n\\t\\treturn returnValue\\r\\n\\t}\\r\\n\\r\\n\\tasync #getRunningProcesses() {\\r\\n\\t\\tlet processes = this.#getRootedServers()\\r\\n\\t\\t\\t.filter(server => server.ramUsed)\\r\\n\\r\\n\\t\\tawait this.#os.getNS(ns => {\\r\\n\\t\\t\\tprocesses = processes.filter(serv => ns.serverExists(serv.hostname))\\r\\n\\t\\t\\tprocesses.forEach(server => {\\r\\n\\t\\t\\t\\tserver.ps = ns.ps(server.hostname)\\r\\n\\t\\t\\t})\\r\\n\\t\\t})\\r\\n\\r\\n\\t\\treturn processes;\\r\\n\\t}\\r\\n\\r\\n\\t#getRootedServers() {\\r\\n\\t\\tlet servers = this.#os.getServersManager().serversObjFull;\\r\\n\\t\\treturn servers.filter(serv => serv.hasAdminRights)\\r\\n\\t}\\r\\n\\r\\n\\t#os\\r\\n}\\r\\n\",\"filename\":\"/os/plugins/rgraph/attacks_monitor.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":689}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*\\nCopyright (c) 2011 Sencha Inc. - Author: Nicolas Garcia Belmonte (http://philogb.github.com/)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n */\\n// https://philogb.github.io/jit/static/v20/Docs/files/Visualizations/RGraph-js.html\\n let win = globalThis['window'];\\n let doc = globalThis['document'];\\n let height;\\n win.$jit=function(x){x=x||win;for(var y in $jit){if($jit[y].$extend){x[y]=$jit[y]}}};$jit.version=\\\"2.0.1\\\";var c=function(w){return doc.getElementById(w)};c.empty=function(){};c.extend=function(y,w){for(var x in (w||{})){y[x]=w[x]}return y};c.lambda=function(w){return(typeof w==\\\"function\\\")?w:function(){return w}};c.time=Date.now||function(){return +new Date};c.splat=function(x){var w=c.type(x);return w?((w!=\\\"array\\\")?[x]:x):[]};c.type=function(x){var w=c.type.s.call(x).match(/^\\\\[object\\\\s(.*)\\\\]$/)[1].toLowerCase();if(w!=\\\"object\\\"){return w}if(x&&x.$$family){return x.$$family}return(x&&x.nodeName&&x.nodeType==1)?\\\"element\\\":w};c.type.s=Object.prototype.toString;c.each=function(B,A){var z=c.type(B);if(z==\\\"object\\\"){for(var y in B){A(B[y],y)}}else{for(var x=0,w=B.length;x<w;x++){A(B[x],x)}}};c.indexOf=function(z,y){if(Array.indexOf){return z.indexOf(y)}for(var x=0,w=z.length;x<w;x++){if(z[x]===y){return x}}return -1};c.map=function(y,x){var w=[];c.each(y,function(A,z){w.push(x(A,z))});return w};c.reduce=function(A,y,x){var w=A.length;if(w==0){return x}var z=arguments.length==3?x:A[--w];while(w--){z=y(z,A[w])}return z};c.merge=function(){var A={};for(var z=0,w=arguments.length;z<w;z++){var x=arguments[z];if(c.type(x)!=\\\"object\\\"){continue}for(var y in x){var C=x[y],B=A[y];A[y]=(B&&c.type(C)==\\\"object\\\"&&c.type(B)==\\\"object\\\")?c.merge(B,C):c.unlink(C)}}return A};c.unlink=function(y){var x;switch(c.type(y)){case\\\"object\\\":x={};for(var A in y){x[A]=c.unlink(y[A])}break;case\\\"array\\\":x=[];for(var z=0,w=y.length;z<w;z++){x[z]=c.unlink(y[z])}break;default:return y}return x};c.zip=function(){if(arguments.length===0){return[]}for(var y=0,x=[],w=arguments.length,B=arguments[0].length;y<B;y++){for(var z=0,A=[];z<w;z++){A.push(arguments[z][y])}x.push(A)}return x};c.rgbToHex=function(A,z){if(A.length<3){return null}if(A.length==4&&A[3]==0&&!z){return\\\"transparent\\\"}var x=[];for(var w=0;w<3;w++){var y=(A[w]-0).toString(16);x.push(y.length==1?\\\"0\\\"+y:y)}return z?x:\\\"#\\\"+x.join(\\\"\\\")};c.hexToRgb=function(y){if(y.length!=7){y=y.match(/^#?(\\\\w{1,2})(\\\\w{1,2})(\\\\w{1,2})$/);y.shift();if(y.length!=3){return null}var w=[];for(var x=0;x<3;x++){var z=y[x];if(z.length==1){z+=z}w.push(parseInt(z,16))}return w}else{y=parseInt(y.slice(1),16);return[y>>16,y>>8&255,y&255]}};c.destroy=function(w){c.clean(w);if(w.parentNode){w.parentNode.removeChild(w)}if(w.clearAttributes){w.clearAttributes()}};c.clean=function(z){for(var y=z.childNodes,x=0,w=y.length;x<w;x++){c.destroy(y[x])}};c.addEvent=function(y,x,w){if(y.addEventListener){y.addEventListener(x,w,false)}else{y.attachEvent(\\\"on\\\"+x,w)}};c.addEvents=function(x,y){for(var w in y){c.addEvent(x,w,y[w])}};c.hasClass=function(x,w){return(\\\" \\\"+x.className+\\\" \\\").indexOf(\\\" \\\"+w+\\\" \\\")>-1};c.addClass=function(x,w){if(!c.hasClass(x,w)){x.className=(x.className+\\\" \\\"+w)}};c.removeClass=function(x,w){x.className=x.className.replace(new RegExp(\\\"(^|\\\\\\\\s)\\\"+w+\\\"(?:\\\\\\\\s|$)\\\"),\\\"$1\\\")};c.getPos=function(y){var B=A(y);var w=z(y);return{x:B.x-w.x,y:B.y-w.y};function A(D){var C={x:0,y:0};while(D&&!x(D)){C.x+=D.offsetLeft;C.y+=D.offsetTop;D=D.offsetParent}return C}function z(D){var C={x:0,y:0};while(D&&!x(D)){C.x+=D.scrollLeft;C.y+=D.scrollTop;D=D.parentNode}return C}function x(C){return(/^(?:body|html)$/i).test(C.tagName)}};c.event={get:function(x,w){w=w||win;return x||w.event},getWheel:function(w){return w.wheelDelta?w.wheelDelta/120:-(w.detail||0)/3},isRightClick:function(w){return(w.which==3||w.button==2)},getPos:function(z,y){y=y||win;z=z||y.event;var x=y.doc;x=x.documentElement||x.body;if(z.touches&&z.touches.length){z=z.touches[0]}var w={x:z.pageX||(z.clientX+x.scrollLeft),y:z.pageY||(z.clientY+x.scrollTop)};return w},stop:function(w){if(w.stopPropagation){w.stopPropagation()}w.cancelBubble=true;if(w.preventDefault){w.preventDefault()}else{w.returnValue=false}}};$jit.util=$jit.id=c;var q=function(x){x=x||{};var w=function(){for(var A in this){if(typeof this[A]!=\\\"function\\\"){this[A]=c.unlink(this[A])}}this.constructor=w;if(q.prototyping){return this}var z=this.initialize?this.initialize.apply(this,arguments):this;this.$$family=\\\"class\\\";return z};for(var y in q.Mutators){if(!x[y]){continue}x=q.Mutators[y](x,x[y]);delete x[y]}c.extend(w,this);w.constructor=q;w.prototype=x;return w};q.Mutators={Implements:function(w,x){c.each(c.splat(x),function(z){q.prototyping=z;var y=(typeof z==\\\"function\\\")?new z:z;for(var A in y){if(!(A in w)){w[A]=y[A]}}delete q.prototyping});return w}};c.extend(q,{inherit:function(w,z){for(var y in z){var x=z[y];var B=w[y];var A=c.type(x);if(B&&A==\\\"function\\\"){if(x!=B){q.override(w,y,x)}}else{if(A==\\\"object\\\"){w[y]=c.merge(B,x)}else{w[y]=x}}}return w},override:function(x,w,A){var z=q.prototyping;if(z&&x[w]!=z[w]){z=null}var y=function(){var B=this.parent;this.parent=z?z[w]:x[w];var C=A.apply(this,arguments);this.parent=B;return C};x[w]=y}});q.prototype.implement=function(){var w=this.prototype;c.each(Array.prototype.slice.call(arguments||[]),function(x){q.inherit(w,x)});return this};$jit.Class=q;$jit.json={prune:function(x,w){this.each(x,function(z,y){if(y==w&&z.children){delete z.children;z.children=[]}})},getParent:function(w,A){if(w.id==A){return false}var z=w.children;if(z&&z.length>0){for(var y=0;y<z.length;y++){if(z[y].id==A){return w}else{var x=this.getParent(z[y],A);if(x){return x}}}}return false},getSubtree:function(w,A){if(w.id==A){return w}for(var y=0,z=w.children;z&&y<z.length;y++){var x=this.getSubtree(z[y],A);if(x!=null){return x}}return null},eachLevel:function(w,B,y,A){if(B<=y){A(w,B);if(!w.children){return}for(var x=0,z=w.children;x<z.length;x++){this.eachLevel(z[x],B+1,y,A)}}},each:function(w,x){this.eachLevel(w,0,Number.MAX_VALUE,x)}};$jit.Trans={$extend:true,linear:function(w){return w}};var i=$jit.Trans;(function(){var w=function(z,y){y=c.splat(y);return c.extend(z,{easeIn:function(A){return z(A,y)},easeOut:function(A){return 1-z(1-A,y)},easeInOut:function(A){return(A<=0.5)?z(2*A,y)/2:(2-z(2*(1-A),y))/2}})};var x={Pow:function(z,y){return Math.pow(z,y[0]||6)},Expo:function(y){return Math.pow(2,8*(y-1))},Circ:function(y){return 1-Math.sin(Math.acos(y))},Sine:function(y){return 1-Math.sin((1-y)*Math.PI/2)},Back:function(z,y){y=y[0]||1.618;return Math.pow(z,2)*((y+1)*z-y)},Bounce:function(B){var A;for(var z=0,y=1;1;z+=y,y/=2){if(B>=(7-4*z)/11){A=y*y-Math.pow((11-6*z-11*B)/4,2);break}}return A},Elastic:function(z,y){return Math.pow(2,10*--z)*Math.cos(20*z*Math.PI*(y[0]||1)/3)}};c.each(x,function(z,y){i[y]=w(z)});c.each([\\\"Quad\\\",\\\"Cubic\\\",\\\"Quart\\\",\\\"Quint\\\"],function(z,y){i[z]=w(function(A){return Math.pow(A,[y+2])})})})();var u=new q({initialize:function(w){this.setOptions(w)},setOptions:function(w){var x={duration:2500,fps:40,transition:i.Quart.easeInOut,compute:c.empty,complete:c.empty,link:\\\"ignore\\\"};this.opt=c.merge(x,w||{});return this},step:function(){var x=c.time(),w=this.opt;if(x<this.time+w.duration){var y=w.transition((x-this.time)/w.duration);w.compute(y)}else{this.timer=clearInterval(this.timer);w.compute(1);w.complete()}},start:function(){if(!this.check()){return this}this.time=0;this.startTimer();return this},startTimer:function(){var w=this,x=this.opt.fps;if(this.timer){return false}this.time=c.time()-this.time;this.timer=setInterval((function(){w.step()}),Math.round(1000/x));return true},pause:function(){this.stopTimer();return this},resume:function(){this.startTimer();return this},stopTimer:function(){if(!this.timer){return false}this.time=c.time()-this.time;this.timer=clearInterval(this.timer);return true},check:function(){if(!this.timer){return true}if(this.opt.link==\\\"cancel\\\"){this.stopTimer();return true}return false}});var n=function(){var y=arguments;for(var A=0,w=y.length,x={};A<w;A++){var z=n[y[A]];if(z.$extend){c.extend(x,z)}else{x[y[A]]=z}}return x};n.AreaChart={$extend:true,animate:true,labelOffset:3,type:\\\"stacked\\\",Tips:{enable:false,onShow:c.empty,onHide:c.empty},Events:{enable:false,onClick:c.empty},selectOnHover:true,showAggregates:true,showLabels:true,filterOnClick:false,restoreOnRightClick:false};n.Margin={$extend:false,top:0,left:0,right:0,bottom:0};n.Canvas={$extend:true,injectInto:\\\"id\\\",type:\\\"2D\\\",width:false,height:false,useCanvas:false,withLabels:true,background:false,Scene:{Lighting:{enable:false,ambient:[1,1,1],directional:{direction:{x:-100,y:-100,z:-100},color:[0.5,0.3,0.1]}}}};n.Tree={$extend:true,orientation:\\\"left\\\",subtreeOffset:8,siblingOffset:5,indent:10,multitree:false,align:\\\"center\\\"};n.Node={$extend:false,overridable:false,type:\\\"circle\\\",color:\\\"#ccb\\\",alpha:1,dim:3,height:20,width:90,autoHeight:false,autoWidth:false,lineWidth:1,transform:true,align:\\\"center\\\",angularWidth:1,span:1,CanvasStyles:{}};n.Edge={$extend:false,overridable:false,type:\\\"line\\\",color:\\\"#ccb\\\",lineWidth:1,dim:15,alpha:1,epsilon:7,CanvasStyles:{}};n.Fx={$extend:true,fps:40,duration:2500,transition:$jit.Trans.Quart.easeInOut,clearCanvas:true};n.Label={$extend:false,overridable:false,type:\\\"HTML\\\",style:\\\" \\\",size:10,family:\\\"sans-serif\\\",textAlign:\\\"center\\\",textBaseline:\\\"alphabetic\\\",color:\\\"#fff\\\"};n.Tips={$extend:false,enable:false,type:\\\"auto\\\",offsetX:20,offsetY:20,force:false,onShow:c.empty,onHide:c.empty};n.NodeStyles={$extend:false,enable:false,type:\\\"auto\\\",stylesHover:false,stylesClick:false};n.Events={$extend:false,enable:false,enableForEdges:false,type:\\\"auto\\\",onClick:c.empty,onRightClick:c.empty,onMouseMove:c.empty,onMouseEnter:c.empty,onMouseLeave:c.empty,onDragStart:c.empty,onDragMove:c.empty,onDragCancel:c.empty,onDragEnd:c.empty,onTouchStart:c.empty,onTouchMove:c.empty,onTouchEnd:c.empty,onMouseWheel:c.empty};n.Navigation={$extend:false,enable:false,type:\\\"auto\\\",panning:false,zooming:false};n.Controller={$extend:true,onBeforeCompute:c.empty,onAfterCompute:c.empty,onCreateLabel:c.empty,onPlaceLabel:c.empty,onComplete:c.empty,onBeforePlotLine:c.empty,onAfterPlotLine:c.empty,onBeforePlotNode:c.empty,onAfterPlotNode:c.empty,request:false};var t={initialize:function(y,w){this.viz=w;this.canvas=w.canvas;this.config=w.config[y];this.nodeTypes=w.fx.nodeTypes;var x=this.config.type;this.dom=x==\\\"auto\\\"?(w.config.Label.type!=\\\"Native\\\"):(x!=\\\"Native\\\");this.labelContainer=this.dom&&w.labels.getLabelContainer();this.isEnabled()&&this.initializePost()},initializePost:c.empty,setAsProperty:c.lambda(false),isEnabled:function(){return this.config.enable},isLabel:function(B,A,z){B=c.event.get(B,A);var w=this.labelContainer,y=B.target||B.srcElement,x=B.relatedTarget;if(z){return x&&x==this.viz.canvas.getCtx().canvas&&!!y&&this.isDescendantOf(y,w)}else{return this.isDescendantOf(y,w)}},isDescendantOf:function(x,w){while(x&&x.parentNode){if(x.parentNode==w){return x}x=x.parentNode}return false}};var h={onMouseUp:c.empty,onMouseDown:c.empty,onMouseMove:c.empty,onMouseOver:c.empty,onMouseOut:c.empty,onMouseWheel:c.empty,onTouchStart:c.empty,onTouchMove:c.empty,onTouchEnd:c.empty,onTouchCancel:c.empty};var s=new q({initialize:function(w){this.viz=w;this.canvas=w.canvas;this.node=false;this.edge=false;this.registeredObjects=[];this.attachEvents()},attachEvents:function(){var y=this.canvas.getElement(),x=this;y.oncontextmenu=c.lambda(false);c.addEvents(y,{mouseup:function(B,A){var z=c.event.get(B,A);x.handleEvent(\\\"MouseUp\\\",B,A,x.makeEventObject(B,A),c.event.isRightClick(z))},mousedown:function(B,A){var z=c.event.get(B,A);x.handleEvent(\\\"MouseDown\\\",B,A,x.makeEventObject(B,A),c.event.isRightClick(z))},mousemove:function(A,z){x.handleEvent(\\\"MouseMove\\\",A,z,x.makeEventObject(A,z))},mouseover:function(A,z){x.handleEvent(\\\"MouseOver\\\",A,z,x.makeEventObject(A,z))},mouseout:function(A,z){x.handleEvent(\\\"MouseOut\\\",A,z,x.makeEventObject(A,z))},touchstart:function(A,z){x.handleEvent(\\\"TouchStart\\\",A,z,x.makeEventObject(A,z))},touchmove:function(A,z){x.handleEvent(\\\"TouchMove\\\",A,z,x.makeEventObject(A,z))},touchend:function(A,z){x.handleEvent(\\\"TouchEnd\\\",A,z,x.makeEventObject(A,z))}});var w=function(C,B){var A=c.event.get(C,B);var z=c.event.getWheel(A);x.handleEvent(\\\"MouseWheel\\\",C,B,z)};if(!doc.getBoxObjectFor&&win.mozInnerScreenX==null){c.addEvent(y,\\\"mousewheel\\\",w)}else{y.addEventListener(\\\"DOMMouseScroll\\\",w,false)}},register:function(w){this.registeredObjects.push(w)},handleEvent:function(){var x=Array.prototype.slice.call(arguments),A=x.shift();for(var z=0,y=this.registeredObjects,w=y.length;z<w;z++){y[z][\\\"on\\\"+A].apply(y[z],x)}},makeEventObject:function(C,B){var z=this,A=this.viz.graph,y=this.viz.fx,x=y.nodeTypes,w=y.edgeTypes;return{pos:false,node:false,edge:false,contains:false,getNodeCalled:false,getEdgeCalled:false,getPos:function(){var F=z.viz.canvas,G=F.getSize(),H=F.getPos(),E=F.translateOffsetX,D=F.translateOffsetY,K=F.scaleOffsetX,I=F.scaleOffsetY,J=c.event.getPos(C,B);this.pos={x:(J.x-H.x-G.width/2-E)*1/K,y:(J.y-H.y-G.height/2-D)*1/I};return this.pos},getNode:function(){if(this.getNodeCalled){return this.node}this.getNodeCalled=true;for(var G in A.nodes){var F=A.nodes[G],E=F&&x[F.getData(\\\"type\\\")],D=E&&E.contains&&E.contains.call(y,F,this.getPos());if(D){this.contains=D;return z.node=this.node=F}}return z.node=this.node=false},getEdge:function(){if(this.getEdgeCalled){return this.edge}this.getEdgeCalled=true;var F={};for(var J in A.edges){var H=A.edges[J];F[J]=true;for(var I in H){if(I in F){continue}var G=H[I],E=G&&w[G.getData(\\\"type\\\")],D=E&&E.contains&&E.contains.call(y,G,this.getPos());if(D){this.contains=D;return z.edge=this.edge=G}}}return z.edge=this.edge=false},getContains:function(){if(this.getNodeCalled){return this.contains}this.getNode();return this.contains}}}});var o={initializeExtras:function(){var x=new s(this),w=this;c.each([\\\"NodeStyles\\\",\\\"Tips\\\",\\\"Navigation\\\",\\\"Events\\\"],function(y){var z=new o.Classes[y](y,w);if(z.isEnabled()){x.register(z)}if(z.setAsProperty()){w[y.toLowerCase()]=z}})}};o.Classes={};o.Classes.Events=new q({Implements:[t,h],initializePost:function(){this.fx=this.viz.fx;this.ntypes=this.viz.fx.nodeTypes;this.etypes=this.viz.fx.edgeTypes;this.hovered=false;this.pressed=false;this.touched=false;this.touchMoved=false;this.moved=false},setAsProperty:c.lambda(true),onMouseUp:function(A,z,x,y){var w=c.event.get(A,z);if(!this.moved){if(y){this.config.onRightClick(this.hovered,x,w)}else{this.config.onClick(this.pressed,x,w)}}if(this.pressed){if(this.moved){this.config.onDragEnd(this.pressed,x,w)}else{this.config.onDragCancel(this.pressed,x,w)}this.pressed=this.moved=false}},onMouseOut:function(B,A,z){var x=c.event.get(B,A),y;if(this.dom&&(y=this.isLabel(B,A,true))){this.config.onMouseLeave(this.viz.graph.getNode(y.id),z,x);this.hovered=false;return}var w=x.relatedTarget,C=this.canvas.getElement();while(w&&w.parentNode){if(C==w.parentNode){return}w=w.parentNode}if(this.hovered){this.config.onMouseLeave(this.hovered,z,x);this.hovered=false}},onMouseOver:function(A,z,y){var w=c.event.get(A,z),x;if(this.dom&&(x=this.isLabel(A,z,true))){this.hovered=this.viz.graph.getNode(x.id);this.config.onMouseEnter(this.hovered,y,w)}},onMouseMove:function(C,B,A){var x,w=c.event.get(C,B);if(this.pressed){this.moved=true;this.config.onDragMove(this.pressed,A,w);return}if(this.dom){this.config.onMouseMove(this.hovered,A,w)}else{if(this.hovered){var D=this.hovered;var z=D.nodeFrom?this.etypes[D.getData(\\\"type\\\")]:this.ntypes[D.getData(\\\"type\\\")];var y=z&&z.contains&&z.contains.call(this.fx,D,A.getPos());if(y){this.config.onMouseMove(D,A,w);return}else{this.config.onMouseLeave(D,A,w);this.hovered=false}}if(this.hovered=(A.getNode()||(this.config.enableForEdges&&A.getEdge()))){this.config.onMouseEnter(this.hovered,A,w)}else{this.config.onMouseMove(false,A,w)}}},onMouseWheel:function(x,w,y){this.config.onMouseWheel(y,c.event.get(x,w))},onMouseDown:function(A,z,y){var w=c.event.get(A,z),x;if(this.dom){if(x=this.isLabel(A,z)){this.pressed=this.viz.graph.getNode(x.id)}}else{this.pressed=y.getNode()||(this.config.enableForEdges&&y.getEdge())}this.pressed&&this.config.onDragStart(this.pressed,y,w)},onTouchStart:function(A,z,y){var w=c.event.get(A,z),x;if(this.dom&&(x=this.isLabel(A,z))){this.touched=this.viz.graph.getNode(x.id)}else{this.touched=y.getNode()||(this.config.enableForEdges&&y.getEdge())}this.touched&&this.config.onTouchStart(this.touched,y,w)},onTouchMove:function(z,y,x){var w=c.event.get(z,y);if(this.touched){this.touchMoved=true;this.config.onTouchMove(this.touched,x,w)}},onTouchEnd:function(z,y,x){var w=c.event.get(z,y);if(this.touched){if(this.touchMoved){this.config.onTouchEnd(this.touched,x,w)}else{this.config.onTouchCancel(this.touched,x,w)}this.touched=this.touchMoved=false}}});o.Classes.Tips=new q({Implements:[t,h],initializePost:function(){if(doc.body){var w=c(\\\"_tooltip\\\")||doc.createElement(\\\"div\\\");w.id=\\\"_tooltip\\\";w.className=\\\"tip\\\";c.extend(w.style,{position:\\\"absolute\\\",display:\\\"none\\\",zIndex:13000});doc.body.appendChild(w);this.tip=w;this.node=false}},setAsProperty:c.lambda(true),onMouseOut:function(z,y){var x=c.event.get(z,y);if(this.dom&&this.isLabel(z,y,true)){this.hide(true);return}var w=z.relatedTarget,A=this.canvas.getElement();while(w&&w.parentNode){if(A==w.parentNode){return}w=w.parentNode}this.hide(false)},onMouseOver:function(y,x){var w;if(this.dom&&(w=this.isLabel(y,x,false))){this.node=this.viz.graph.getNode(w.id);this.config.onShow(this.tip,this.node,w)}},onMouseMove:function(z,y,w){if(this.dom&&this.isLabel(z,y)){this.setTooltipPosition(c.event.getPos(z,y))}if(!this.dom){\\n\\t var x=w.getNode();if(!x){this.hide(true);return}if(this.config.force||!this.node||this.node.id!=x.id){this.node=x;this.config.onShow(this.tip,x,w.getContains())}this.setTooltipPosition(c.event.getPos(z,y))}},setTooltipPosition:function(F){var B=this.tip,A=B.style,z=this.config;A.display=\\\"\\\";var D={height:doc.body.clientHeight,width:doc.body.clientWidth};var C={width:B.offsetWidth,height:B.offsetHeight};var w=z.offsetX,E=z.offsetY;A.top=((F.y+E+C.height>D.height)?(F.y-C.height-E):F.y+E)+\\\"px\\\";A.left=((F.x+C.width+w>D.width)?(F.x-C.width-w):F.x+w)+\\\"px\\\"},hide:function(w){this.tip.style.display=\\\"none\\\";w&&this.config.onHide()}});o.Classes.NodeStyles=new q({Implements:[t,h],initializePost:function(){this.fx=this.viz.fx;this.types=this.viz.fx.nodeTypes;this.nStyles=this.config;this.nodeStylesOnHover=this.nStyles.stylesHover;this.nodeStylesOnClick=this.nStyles.stylesClick;this.hoveredNode=false;this.fx.nodeFxAnimation=new u();this.down=false;this.move=false},onMouseOut:function(y,x){this.down=this.move=false;if(!this.hoveredNode){return}if(this.dom&&this.isLabel(y,x,true)){this.toggleStylesOnHover(this.hoveredNode,false)}var w=y.relatedTarget,z=this.canvas.getElement();while(w&&w.parentNode){if(z==w.parentNode){return}w=w.parentNode}this.toggleStylesOnHover(this.hoveredNode,false);this.hoveredNode=false},onMouseOver:function(z,y){var w;if(this.dom&&(w=this.isLabel(z,y,true))){var x=this.viz.graph.getNode(w.id);if(x.selected){return}this.hoveredNode=x;this.toggleStylesOnHover(this.hoveredNode,true)}},onMouseDown:function(A,z,x,y){if(y){return}var w;if(this.dom&&(w=this.isLabel(A,z))){this.down=this.viz.graph.getNode(w.id)}else{if(!this.dom){this.down=x.getNode()}}this.move=false},onMouseUp:function(z,y,w,x){if(x){return}if(!this.move){this.onClick(w.getNode())}this.down=this.move=false},getRestoredStyles:function(x,w){var z={},y=this[\\\"nodeStylesOn\\\"+w];for(var A in y){z[A]=x.styles[\\\"$\\\"+A]}return z},toggleStylesOnHover:function(w,x){if(this.nodeStylesOnHover){this.toggleStylesOn(\\\"Hover\\\",w,x)}},toggleStylesOnClick:function(w,x){if(this.nodeStylesOnClick){this.toggleStylesOn(\\\"Click\\\",w,x)}},toggleStylesOn:function(A,w,C){var D=this.viz;var B=this.nStyles;if(C){var z=this;if(!w.styles){w.styles=c.merge(w.data,{})}for(var E in this[\\\"nodeStylesOn\\\"+A]){var x=\\\"$\\\"+E;if(!(x in w.styles)){w.styles[x]=w.getData(E)}}D.fx.nodeFx(c.extend({elements:{id:w.id,properties:z[\\\"nodeStylesOn\\\"+A]},transition:i.Quart.easeOut,duration:300,fps:40},this.config))}else{var y=this.getRestoredStyles(w,A);D.fx.nodeFx(c.extend({elements:{id:w.id,properties:y},transition:i.Quart.easeOut,duration:300,fps:40},this.config))}},onClick:function(w){if(!w){return}var x=this.nodeStylesOnClick;if(!x){return}if(w.selected){this.toggleStylesOnClick(w,false);delete w.selected}else{this.viz.graph.eachNode(function(z){if(z.selected){for(var y in x){z.setData(y,z.styles[\\\"$\\\"+y],\\\"end\\\")}delete z.selected}});this.toggleStylesOnClick(w,true);w.selected=true;delete w.hovered;this.hoveredNode=false}},onMouseMove:function(C,B,z){if(this.down){this.move=true}if(this.dom&&this.isLabel(C,B)){return}var A=this.nodeStylesOnHover;if(!A){return}if(!this.dom){if(this.hoveredNode){var x=this.types[this.hoveredNode.getData(\\\"type\\\")];var w=x&&x.contains&&x.contains.call(this.fx,this.hoveredNode,z.getPos());if(w){return}}var y=z.getNode();if(!this.hoveredNode&&!y){return}if(y.hovered){return}if(y&&!y.selected){this.fx.nodeFxAnimation.stopTimer();this.viz.graph.eachNode(function(E){if(E.hovered&&!E.selected){for(var D in A){E.setData(D,E.styles[\\\"$\\\"+D],\\\"end\\\")}delete E.hovered}});y.hovered=true;this.hoveredNode=y;this.toggleStylesOnHover(y,true)}else{if(this.hoveredNode&&!this.hoveredNode.selected){this.fx.nodeFxAnimation.stopTimer();this.toggleStylesOnHover(this.hoveredNode,false);delete this.hoveredNode.hovered;this.hoveredNode=false}}}}});o.Classes.Navigation=new q({Implements:[t,h],initializePost:function(){this.pos=false;this.pressed=false},onMouseWheel:function(z,y,w){if(!this.config.zooming){return}c.event.stop(c.event.get(z,y));var A=this.config.zooming/1000,x=1+w*A;this.canvas.scale(x,x)},onMouseDown:function(B,A,z){if(!this.config.panning){return}if(this.config.panning==\\\"avoid nodes\\\"&&(this.dom?this.isLabel(B,A):z.getNode())){return}this.pressed=true;this.pos=z.getPos();var y=this.canvas,x=y.translateOffsetX,w=y.translateOffsetY,D=y.scaleOffsetX,C=y.scaleOffsetY;this.pos.x*=D;this.pos.x+=x;this.pos.y*=C;this.pos.y+=w},onMouseMove:function(D,C,F){if(!this.config.panning){return}if(!this.pressed){return}if(this.config.panning==\\\"avoid nodes\\\"&&(this.dom?this.isLabel(D,C):F.getNode())){return}var B=this.pos,E=F.getPos(),z=this.canvas,A=z.translateOffsetX,w=z.translateOffsetY,J=z.scaleOffsetX,H=z.scaleOffsetY;E.x*=J;E.y*=H;E.x+=A;E.y+=w;var I=E.x-B.x,G=E.y-B.y;this.pos=E;this.canvas.translate(I*1/J,G*1/H)},onMouseUp:function(z,y,x,w){if(!this.config.panning){return}this.pressed=false}});var l;(function(){var w=typeof HTMLCanvasElement,y=(w==\\\"object\\\"||w==\\\"function\\\");function x(z,A){var B=doc.createElement(z);for(var C in A){if(typeof A[C]==\\\"object\\\"){c.extend(B[C],A[C])}else{B[C]=A[C]}}if(z==\\\"canvas\\\"&&!y&&G_vmlCanvasManager){B=G_vmlCanvasManager.initElement(doc.body.appendChild(B))}return B}$jit.Canvas=l=new q({canvases:[],pos:false,element:false,labelContainer:false,translateOffsetX:0,translateOffsetY:0,scaleOffsetX:1,scaleOffsetY:1,initialize:function(L,E){this.viz=L;this.opt=this.config=E;var B=c.type(E.injectInto)==\\\"string\\\"?E.injectInto:E.injectInto.id,K=E.type,C=B+\\\"-label\\\",z=c(B),D=E.width||z.offsetWidth,M=E.height||z.offsetHeight;this.id=B;var F={injectInto:B,width:D,height:M};this.element=x(\\\"div\\\",{id:B+\\\"-canvaswidget\\\",style:{position:\\\"relative\\\",width:D+\\\"px\\\",height:M+\\\"px\\\"}});this.labelContainer=this.createLabelContainer(E.Label.type,C,F);this.canvases.push(new l.Base[K]({config:c.extend({idSuffix:\\\"-canvas\\\"},F),plot:function(N){L.fx.plot()},resize:function(){L.refresh()}}));var G=E.background;if(G){var J=new l.Background[G.type](L,c.extend(G,F));this.canvases.push(new l.Base[K](J))}var I=this.canvases.length;while(I--){this.element.appendChild(this.canvases[I].canvas);if(I>0){this.canvases[I].plot()}}this.element.appendChild(this.labelContainer);z.appendChild(this.element);var A=null,H=this;c.addEvent(win,\\\"scroll\\\",function(){clearTimeout(A);A=setTimeout(function(){H.getPos(true)},500)})},getCtx:function(z){return this.canvases[z||0].getCtx()},getConfig:function(){return this.opt},getElement:function(){return this.element},getSize:function(z){return this.canvases[z||0].getSize()},resize:function(D,z){this.getPos(true);this.translateOffsetX=this.translateOffsetY=0;this.scaleOffsetX=this.scaleOffsetY=1;for(var B=0,A=this.canvases.length;B<A;B++){this.canvases[B].resize(D,z)}var C=this.element.style;C.width=D+\\\"px\\\";C.height=z+\\\"px\\\";if(this.labelContainer){this.labelContainer.style.width=D+\\\"px\\\"}},translate:function(z,D,C){this.translateOffsetX+=z*this.scaleOffsetX;this.translateOffsetY+=D*this.scaleOffsetY;for(var B=0,A=this.canvases.length;B<A;B++){this.canvases[B].translate(z,D,C)}},scale:function(E,B,C){var F=this.scaleOffsetX*E,D=this.scaleOffsetY*B;var H=this.translateOffsetX*(E-1)/F,G=this.translateOffsetY*(B-1)/D;this.scaleOffsetX=F;this.scaleOffsetY=D;for(var A=0,z=this.canvases.length;A<z;A++){this.canvases[A].scale(E,B,true)}this.translate(H,G,false)},getPos:function(z){if(z||!this.pos){return this.pos=c.getPos(this.getElement())}return this.pos},clear:function(z){this.canvases[z||0].clear()},path:function(A,B){var z=this.canvases[0].getCtx();z.beginPath();B(z);z[A]();z.closePath()},createLabelContainer:function(B,F,E){var D=\\\"http://www.w3.org/2000/svg\\\";if(B==\\\"HTML\\\"||B==\\\"Native\\\"){return x(\\\"div\\\",{id:F,style:{overflow:\\\"visible\\\",position:\\\"absolute\\\",top:0,left:0,width:E.width+\\\"px\\\",height:0}})}else{if(B==\\\"SVG\\\"){var C=doc.createElementNS(D,\\\"svg:svg\\\");C.setAttribute(\\\"width\\\",E.width);C.setAttribute(\\\"height\\\",E.height);var A=C.style;A.position=\\\"absolute\\\";A.left=A.top=\\\"0px\\\";var z=doc.createElementNS(D,\\\"svg:g\\\");z.setAttribute(\\\"width\\\",E.width);z.setAttribute(\\\"height\\\",E.height);z.setAttribute(\\\"x\\\",0);z.setAttribute(\\\"y\\\",0);z.setAttribute(\\\"id\\\",F);C.appendChild(z);return C}}}});l.Base={};l.Base[\\\"2D\\\"]=new q({translateOffsetX:0,translateOffsetY:0,scaleOffsetX:1,scaleOffsetY:1,initialize:function(z){this.viz=z;this.opt=z.config;this.size=false;this.createCanvas();this.translateToCenter()},createCanvas:function(){var A=this.opt,B=A.width,z=A.height;this.canvas=x(\\\"canvas\\\",{id:A.injectInto+A.idSuffix,width:B,height:z,style:{position:\\\"absolute\\\",top:0,left:0,width:B+\\\"px\\\",height:z+\\\"px\\\"}})},getCtx:function(){if(!this.ctx){return this.ctx=this.canvas.getContext(\\\"2d\\\")}return this.ctx},getSize:function(){if(this.size){return this.size}var z=this.canvas;return this.size={width:z.width,height:z.height}},translateToCenter:function(C){var A=this.getSize(),B=C?(A.width-C.width-this.translateOffsetX*2):A.width;height=C?(A.height-C.height-this.translateOffsetY*2):A.height;var z=this.getCtx();C&&z.scale(1/this.scaleOffsetX,1/this.scaleOffsetY);z.translate(B/2,height/2)},resize:function(C,z){var B=this.getSize(),A=this.canvas,D=A.style;this.size=false;A.width=C;A.height=z;D.width=C+\\\"px\\\";D.height=z+\\\"px\\\";if(!y){this.translateToCenter(B)}else{this.translateToCenter()}this.translateOffsetX=this.translateOffsetY=0;this.scaleOffsetX=this.scaleOffsetY=1;this.clear();this.viz.resize(C,z,this)},translate:function(z,D,A){var C=this.scaleOffsetX,B=this.scaleOffsetY;this.translateOffsetX+=z*C;this.translateOffsetY+=D*B;this.getCtx().translate(z,D);!A&&this.plot()},scale:function(z,B,A){this.scaleOffsetX*=z;this.scaleOffsetY*=B;this.getCtx().scale(z,B);!A&&this.plot()},clear:function(){var B=this.getSize(),A=this.translateOffsetX,z=this.translateOffsetY,D=this.scaleOffsetX,C=this.scaleOffsetY;this.getCtx().clearRect((-B.width/2-A)*1/D,(-B.height/2-z)*1/C,B.width*1/D,B.height*1/C)},plot:function(){this.clear();this.viz.plot(this)}});l.Background={};l.Background.Circles=new q({initialize:function(z,A){this.viz=z;this.config=c.merge({idSuffix:\\\"-bkcanvas\\\",levelDistance:100,numberOfCircles:6,CanvasStyles:{},offset:0},A)},resize:function(A,z,B){this.plot(B)},plot:function(z){var A=z.canvas,G=z.getCtx(),D=this.config,F=D.CanvasStyles;for(var H in F){G[H]=F[H]}var B=D.numberOfCircles,E=D.levelDistance;for(var C=1;C<=B;C++){G.beginPath();G.arc(0,0,E*C,0,2*Math.PI,false);G.stroke();G.closePath()}}})})();var b=function(x,w){this.theta=x||0;this.rho=w||0};$jit.Polar=b;b.prototype={getc:function(w){return this.toComplex(w)},getp:function(){return this},set:function(w){w=w.getp();this.theta=w.theta;this.rho=w.rho},setc:function(w,z){this.rho=Math.sqrt(w*w+z*z);this.theta=Math.atan2(z,w);if(this.theta<0){this.theta+=Math.PI*2}},setp:function(x,w){this.theta=x;this.rho=w},clone:function(){return new b(this.theta,this.rho)},toComplex:function(A){var w=Math.cos(this.theta)*this.rho;var z=Math.sin(this.theta)*this.rho;if(A){return{x:w,y:z}}return new p(w,z)},add:function(w){return new b(this.theta+w.theta,this.rho+w.rho)},scale:function(w){return new b(this.theta,this.rho*w)},equals:function(w){return this.theta==w.theta&&this.rho==w.rho},$add:function(w){this.theta=this.theta+w.theta;this.rho+=w.rho;return this},$madd:function(w){this.theta=(this.theta+w.theta)%(Math.PI*2);this.rho+=w.rho;return this},$scale:function(w){this.rho*=w;return this},isZero:function(){var x=0.0001,w=Math.abs;return w(this.theta)<x&&w(this.rho)<x},interpolate:function(y,F){var z=Math.PI,C=z*2;var x=function(H){var G=(H<0)?(H%C)+C:H%C;return G};var B=this.theta,E=y.theta;var A,D=Math.abs(B-E);if(D==z){if(B>E){A=x((E+((B-C)-E)*F))}else{A=x((E-C+(B-(E))*F))}}else{if(D>=z){if(B>E){A=x((E+((B-C)-E)*F))}else{A=x((E-C+(B-(E-C))*F))}}else{A=x((E+(B-E)*F))}}var w=(this.rho-y.rho)*F+y.rho;return{theta:A,rho:w}}};var k=function(x,w){return new b(x,w)};b.KER=k(0,0);var p=function(w,z){this.x=w||0;this.y=z||0};$jit.Complex=p;p.prototype={getc:function(){return this},getp:function(w){return this.toPolar(w)},set:function(w){w=w.getc(true);this.x=w.x;this.y=w.y},setc:function(w,z){this.x=w;this.y=z},setp:function(x,w){this.x=Math.cos(x)*w;this.y=Math.sin(x)*w},clone:function(){return new p(this.x,this.y)},toPolar:function(y){var w=this.norm();var x=Math.atan2(this.y,this.x);if(x<0){x+=Math.PI*2}if(y){return{theta:x,rho:w}}return new b(x,w)},norm:function(){return Math.sqrt(this.squaredNorm())},squaredNorm:function(){return this.x*this.x+this.y*this.y},add:function(w){return new p(this.x+w.x,this.y+w.y)},prod:function(w){return new p(this.x*w.x-this.y*w.y,this.y*w.x+this.x*w.y)},conjugate:function(){return new p(this.x,-this.y)},scale:function(w){return new p(this.x*w,this.y*w)},equals:function(w){return this.x==w.x&&this.y==w.y},$add:function(w){this.x+=w.x;this.y+=w.y;return this},$prod:function(A){var w=this.x,z=this.y;this.x=w*A.x-z*A.y;this.y=z*A.x+w*A.y;return this},$conjugate:function(){this.y=-this.y;return this},$scale:function(w){this.x*=w;this.y*=w;return this},$div:function(B){var w=this.x,A=this.y;var z=B.squaredNorm();this.x=w*B.x+A*B.y;this.y=A*B.x-w*B.y;return this.$scale(1/z)},isZero:function(){var x=0.0001,w=Math.abs;return w(this.x)<x&&w(this.y)<x}};var r=function(x,w){return new p(x,w)};p.KER=r(0,0);$jit.Graph=new q({initialize:function(y,x,w,C){var A={klass:p,Node:{}};this.Node=x;this.Edge=w;this.Label=C;this.opt=c.merge(A,y||{});this.nodes={};this.edges={};var z=this;this.nodeList={};for(var B in j){z.nodeList[B]=(function(D){return function(){var E=Array.prototype.slice.call(arguments);z.eachNode(function(F){F[D].apply(F,E)})}})(B)}},getNode:function(w){if(this.hasNode(w)){return this.nodes[w]}return false},get:function(w){return this.getNode(w)},getByName:function(w){for(var y in this.nodes){var x=this.nodes[y];if(x.name==w){return x}}return false},getAdjacence:function(x,w){if(x in this.edges){return this.edges[x][w]}return false},addNode:function(x){if(!this.nodes[x.id]){var w=this.edges[x.id]={};this.nodes[x.id]=new e.Node(c.extend({id:x.id,name:x.name,data:c.merge(x.data||{},{}),adjacencies:w},this.opt.Node),this.opt.klass,this.Node,this.Edge,this.Label)}return this.nodes[x.id]},addAdjacence:function(z,y,x){if(!this.hasNode(z.id)){this.addNode(z)}if(!this.hasNode(y.id)){this.addNode(y)}z=this.nodes[z.id];y=this.nodes[y.id];if(!z.adjacentTo(y)){var A=this.edges[z.id]=this.edges[z.id]||{};var w=this.edges[y.id]=this.edges[y.id]||{};A[y.id]=w[z.id]=new e.Adjacence(z,y,x,this.Edge,this.Label);return A[y.id]}return this.edges[z.id][y.id]},removeNode:function(y){if(this.hasNode(y)){delete this.nodes[y];var x=this.edges[y];for(var w in x){delete this.edges[w][y]}delete this.edges[y]}},removeAdjacence:function(x,w){delete this.edges[x][w];delete this.edges[w][x]},hasNode:function(w){return w in this.nodes},empty:function(){this.nodes={};this.edges={}}});var e=$jit.Graph;var j;(function(){var w=function(D,F,A,C,E){var B;A=A||\\\"current\\\";D=\\\"$\\\"+(D?D+\\\"-\\\":\\\"\\\");if(A==\\\"current\\\"){B=this.data}else{if(A==\\\"start\\\"){B=this.startData}else{if(A==\\\"end\\\"){B=this.endData}}}var z=D+F;if(C){return B[z]}if(!this.Config.overridable){return E[F]||0}return(z in B)?B[z]:((z in this.data)?this.data[z]:(E[F]||0))};var y=function(C,D,B,z){z=z||\\\"current\\\";C=\\\"$\\\"+(C?C+\\\"-\\\":\\\"\\\");var A;if(z==\\\"current\\\"){A=this.data}else{if(z==\\\"start\\\"){A=this.startData}else{if(z==\\\"end\\\"){A=this.endData}}}A[C+D]=B};var x=function(B,z){B=\\\"$\\\"+(B?B+\\\"-\\\":\\\"\\\");var A=this;c.each(z,function(D){var C=B+D;delete A.data[C];delete A.endData[C];delete A.startData[C]})};\\n j={getData:function(B,z,A){return w.call(this,\\\"\\\",B,z,A,this.Config)},setData:function(B,A,z){y.call(this,\\\"\\\",B,A,z)},setDataset:function(C,D){C=c.splat(C);for(var z in D){for(var B=0,E=c.splat(D[z]),A=C.length;B<A;B++){this.setData(z,E[B],C[B])}}},removeData:function(){x.call(this,\\\"\\\",Array.prototype.slice.call(arguments))},getCanvasStyle:function(B,z,A){return w.call(this,\\\"canvas\\\",B,z,A,this.Config.CanvasStyles)},setCanvasStyle:function(B,A,z){y.call(this,\\\"canvas\\\",B,A,z)},setCanvasStyles:function(C,D){C=c.splat(C);for(var z in D){for(var B=0,E=c.splat(D[z]),A=C.length;B<A;B++){this.setCanvasStyle(z,E[B],C[B])}}},removeCanvasStyle:function(){x.call(this,\\\"canvas\\\",Array.prototype.slice.call(arguments))},getLabelData:function(B,z,A){return w.call(this,\\\"label\\\",B,z,A,this.Label)},setLabelData:function(B,A,z){y.call(this,\\\"label\\\",B,A,z)},setLabelDataset:function(C,D){C=c.splat(C);for(var z in D){for(var B=0,E=c.splat(D[z]),A=C.length;B<A;B++){this.setLabelData(z,E[B],C[B])}}},removeLabelData:function(){x.call(this,\\\"label\\\",Array.prototype.slice.call(arguments))}}})();e.Node=new q({initialize:function(z,w,y,x,B){var A={id:\\\"\\\",name:\\\"\\\",data:{},startData:{},endData:{},adjacencies:{},selected:false,drawn:false,exist:false,angleSpan:{begin:0,end:0},pos:new w,startPos:new w,endPos:new w};c.extend(this,c.extend(A,z));this.Config=this.Node=y;this.Edge=x;this.Label=B},adjacentTo:function(w){return w.id in this.adjacencies},getAdjacency:function(w){return this.adjacencies[w]},getPos:function(w){w=w||\\\"current\\\";if(w==\\\"current\\\"){return this.pos}else{if(w==\\\"end\\\"){return this.endPos}else{if(w==\\\"start\\\"){return this.startPos}}}},setPos:function(x,w){w=w||\\\"current\\\";var y;if(w==\\\"current\\\"){y=this.pos}else{if(w==\\\"end\\\"){y=this.endPos}else{if(w==\\\"start\\\"){y=this.startPos}}}y.set(x)}});e.Node.implement(j);e.Adjacence=new q({initialize:function(x,A,y,w,z){this.nodeFrom=x;this.nodeTo=A;this.data=y||{};this.startData={};this.endData={};this.Config=this.Edge=w;this.Label=z}});e.Adjacence.implement(j);e.Util={filter:function(x){if(!x||!(c.type(x)==\\\"string\\\")){return function(){return true}}var w=x.split(\\\" \\\");return function(z){for(var y=0;y<w.length;y++){if(z[w[y]]){return false}}return true}},getNode:function(w,x){return w.nodes[x]},eachNode:function(A,z,w){var y=this.filter(w);for(var x in A.nodes){if(y(A.nodes[x])){z(A.nodes[x])}}},each:function(y,x,w){this.eachNode(y,x,w)},eachAdjacency:function(B,C,x){var y=B.adjacencies,A=this.filter(x);for(var D in y){var w=y[D];if(A(w)){if(w.nodeFrom!=B){var z=w.nodeFrom;w.nodeFrom=w.nodeTo;w.nodeTo=z}C(w,D)}}},computeLevels:function(C,D,z,y){z=z||0;var A=this.filter(y);this.eachNode(C,function(E){E._flag=false;E._depth=-1},y);var x=C.getNode(D);x._depth=z;var w=[x];while(w.length!=0){var B=w.pop();B._flag=true;this.eachAdjacency(B,function(E){var F=E.nodeTo;if(F._flag==false&&A(F)){if(F._depth<0){F._depth=B._depth+1+z}w.unshift(F)}},y)}},eachBFS:function(B,C,A,x){var y=this.filter(x);this.clean(B);var w=[B.getNode(C)];while(w.length!=0){var z=w.pop();z._flag=true;A(z,z._depth);this.eachAdjacency(z,function(D){var E=D.nodeTo;if(E._flag==false&&y(E)){E._flag=true;w.unshift(E)}},x)}},eachLevel:function(A,E,x,B,z){var D=A._depth,w=this.filter(z),C=this;x=x===false?Number.MAX_VALUE-D:x;(function y(H,F,G){var I=H._depth;if(I>=F&&I<=G&&w(H)){B(H,I)}if(I<G){C.eachAdjacency(H,function(J){var K=J.nodeTo;if(K._depth>I){y(K,F,G)}})}})(A,E+D,x+D)},eachSubgraph:function(x,y,w){this.eachLevel(x,0,false,y,w)},eachSubnode:function(x,y,w){this.eachLevel(x,1,1,y,w)},anySubnode:function(z,y,x){var w=false;y=y||c.lambda(true);var A=c.type(y)==\\\"string\\\"?function(B){return B[y]}:y;this.eachSubnode(z,function(B){if(A(B)){w=true}},x);return w},getSubnodes:function(B,C,w){var y=[],A=this;C=C||0;var z,x;if(c.type(C)==\\\"array\\\"){z=C[0];x=C[1]}else{z=C;x=Number.MAX_VALUE-B._depth}this.eachLevel(B,z,x,function(D){y.push(D)},w);return y},getParents:function(x){var w=[];this.eachAdjacency(x,function(y){var z=y.nodeTo;if(z._depth<x._depth){w.push(z)}});return w},isDescendantOf:function(z,A){if(z.id==A){return true}var y=this.getParents(z),w=false;for(var x=0;!w&&x<y.length;x++){w=w||this.isDescendantOf(y[x],A)}return w},clean:function(w){this.eachNode(w,function(x){x._flag=false})},getClosestNodeToOrigin:function(x,y,w){return this.getClosestNodeToPos(x,b.KER,y,w)},getClosestNodeToPos:function(y,B,A,w){var x=null;A=A||\\\"current\\\";B=B&&B.getc(true)||p.KER;var z=function(D,C){var F=D.x-C.x,E=D.y-C.y;return F*F+E*E};this.eachNode(y,function(C){x=(x==null||z(C.getPos(A).getc(true),B)<z(x.getPos(A).getc(true),B))?C:x},w);return x}};c.each([\\\"get\\\",\\\"getNode\\\",\\\"each\\\",\\\"eachNode\\\",\\\"computeLevels\\\",\\\"eachBFS\\\",\\\"clean\\\",\\\"getClosestNodeToPos\\\",\\\"getClosestNodeToOrigin\\\"],function(w){e.prototype[w]=function(){return e.Util[w].apply(e.Util,[this].concat(Array.prototype.slice.call(arguments)))}});c.each([\\\"eachAdjacency\\\",\\\"eachLevel\\\",\\\"eachSubgraph\\\",\\\"eachSubnode\\\",\\\"anySubnode\\\",\\\"getSubnodes\\\",\\\"getParents\\\",\\\"isDescendantOf\\\"],function(w){e.Node.prototype[w]=function(){return e.Util[w].apply(e.Util,[this].concat(Array.prototype.slice.call(arguments)))}});e.Op={options:{type:\\\"nothing\\\",duration:2000,hideLabels:true,fps:30},initialize:function(w){this.viz=w},removeNode:function(B,z){var w=this.viz;var x=c.merge(this.options,w.controller,z);var D=c.splat(B);var y,A,C;switch(x.type){case\\\"nothing\\\":for(y=0;y<D.length;y++){w.graph.removeNode(D[y])}break;case\\\"replot\\\":this.removeNode(D,{type:\\\"nothing\\\"});w.labels.clearLabels();w.refresh(true);break;case\\\"fade:seq\\\":case\\\"fade\\\":A=this;for(y=0;y<D.length;y++){C=w.graph.getNode(D[y]);C.setData(\\\"alpha\\\",0,\\\"end\\\")}w.fx.animate(c.merge(x,{modes:[\\\"node-property:alpha\\\"],onComplete:function(){A.removeNode(D,{type:\\\"nothing\\\"});w.labels.clearLabels();w.reposition();w.fx.animate(c.merge(x,{modes:[\\\"linear\\\"]}))}}));break;case\\\"fade:con\\\":A=this;for(y=0;y<D.length;y++){C=w.graph.getNode(D[y]);C.setData(\\\"alpha\\\",0,\\\"end\\\");C.ignore=true}w.reposition();w.fx.animate(c.merge(x,{modes:[\\\"node-property:alpha\\\",\\\"linear\\\"],onComplete:function(){A.removeNode(D,{type:\\\"nothing\\\"});x.onComplete&&x.onComplete()}}));break;case\\\"iter\\\":A=this;w.fx.sequence({condition:function(){return D.length!=0},step:function(){A.removeNode(D.shift(),{type:\\\"nothing\\\"});w.labels.clearLabels()},onComplete:function(){x.onComplete&&x.onComplete()},duration:Math.ceil(x.duration/D.length)});break;default:this.doError()}},removeEdge:function(D,B){var w=this.viz;var z=c.merge(this.options,w.controller,B);var y=(c.type(D[0])==\\\"string\\\")?[D]:D;var A,C,x;switch(z.type){case\\\"nothing\\\":for(A=0;A<y.length;A++){w.graph.removeAdjacence(y[A][0],y[A][1])}break;case\\\"replot\\\":this.removeEdge(y,{type:\\\"nothing\\\"});w.refresh(true);break;case\\\"fade:seq\\\":case\\\"fade\\\":C=this;for(A=0;A<y.length;A++){x=w.graph.getAdjacence(y[A][0],y[A][1]);if(x){x.setData(\\\"alpha\\\",0,\\\"end\\\")}}w.fx.animate(c.merge(z,{modes:[\\\"edge-property:alpha\\\"],onComplete:function(){C.removeEdge(y,{type:\\\"nothing\\\"});w.reposition();w.fx.animate(c.merge(z,{modes:[\\\"linear\\\"]}))}}));break;case\\\"fade:con\\\":C=this;for(A=0;A<y.length;A++){x=w.graph.getAdjacence(y[A][0],y[A][1]);if(x){x.setData(\\\"alpha\\\",0,\\\"end\\\");x.ignore=true}}w.reposition();w.fx.animate(c.merge(z,{modes:[\\\"edge-property:alpha\\\",\\\"linear\\\"],onComplete:function(){C.removeEdge(y,{type:\\\"nothing\\\"});z.onComplete&&z.onComplete()}}));break;case\\\"iter\\\":C=this;w.fx.sequence({condition:function(){return y.length!=0},step:function(){C.removeEdge(y.shift(),{type:\\\"nothing\\\"});w.labels.clearLabels()},onComplete:function(){z.onComplete()},duration:Math.ceil(z.duration/y.length)});break;default:this.doError()}},sum:function(A,z){var w=this.viz;var y=c.merge(this.options,w.controller,z),x=w.root;var C;w.root=z.id||w.root;switch(y.type){case\\\"nothing\\\":C=w.construct(A);C.eachNode(function(E){E.eachAdjacency(function(F){w.graph.addAdjacence(F.nodeFrom,F.nodeTo,F.data)})});break;case\\\"replot\\\":w.refresh(true);this.sum(A,{type:\\\"nothing\\\"});w.refresh(true);break;case\\\"fade:seq\\\":case\\\"fade\\\":case\\\"fade:con\\\":that=this;C=w.construct(A);var D=this.preprocessSum(C);var B=!D?[\\\"node-property:alpha\\\"]:[\\\"node-property:alpha\\\",\\\"edge-property:alpha\\\"];w.reposition();if(y.type!=\\\"fade:con\\\"){w.fx.animate(c.merge(y,{modes:[\\\"linear\\\"],onComplete:function(){w.fx.animate(c.merge(y,{modes:B,onComplete:function(){y.onComplete()}}))}}))}else{w.graph.eachNode(function(E){if(E.id!=x&&E.pos.isZero()){E.pos.set(E.endPos);E.startPos.set(E.endPos)}});w.fx.animate(c.merge(y,{modes:[\\\"linear\\\"].concat(B)}))}break;default:this.doError()}},morph:function(E,x,z){z=z||{};var B=this.viz;var F=c.merge(this.options,B.controller,x),A=B.root;var C;B.root=x.id||B.root;switch(F.type){case\\\"nothing\\\":C=B.construct(E);C.eachNode(function(I){var H=B.graph.hasNode(I.id);I.eachAdjacency(function(M){var L=!!B.graph.getAdjacence(M.nodeFrom.id,M.nodeTo.id);B.graph.addAdjacence(M.nodeFrom,M.nodeTo,M.data);if(L){var K=B.graph.getAdjacence(M.nodeFrom.id,M.nodeTo.id);for(var N in (M.data||{})){K.data[N]=M.data[N]}}});if(H){var G=B.graph.getNode(I.id);for(var J in (I.data||{})){G.data[J]=I.data[J]}}});B.graph.eachNode(function(G){G.eachAdjacency(function(H){if(!C.getAdjacence(H.nodeFrom.id,H.nodeTo.id)){B.graph.removeAdjacence(H.nodeFrom.id,H.nodeTo.id)}});if(!C.hasNode(G.id)){B.graph.removeNode(G.id)}});break;case\\\"replot\\\":B.labels.clearLabels(true);this.morph(E,{type:\\\"nothing\\\"});B.refresh(true);B.refresh(true);break;case\\\"fade:seq\\\":case\\\"fade\\\":case\\\"fade:con\\\":that=this;C=B.construct(E);var D=(\\\"node-property\\\" in z)&&c.map(c.splat(z[\\\"node-property\\\"]),function(G){return\\\"$\\\"+G});B.graph.eachNode(function(H){var I=C.getNode(H.id);if(!I){H.setData(\\\"alpha\\\",1);H.setData(\\\"alpha\\\",1,\\\"start\\\");H.setData(\\\"alpha\\\",0,\\\"end\\\");H.ignore=true}else{var G=I.data;for(var J in G){if(D&&(c.indexOf(D,J)>-1)){H.endData[J]=G[J]}else{H.data[J]=G[J]}}}});B.graph.eachNode(function(G){if(G.ignore){return}G.eachAdjacency(function(H){if(H.nodeFrom.ignore||H.nodeTo.ignore){return}var I=C.getNode(H.nodeFrom.id);var J=C.getNode(H.nodeTo.id);if(!I.adjacentTo(J)){var H=B.graph.getAdjacence(I.id,J.id);w=true;H.setData(\\\"alpha\\\",1);H.setData(\\\"alpha\\\",1,\\\"start\\\");H.setData(\\\"alpha\\\",0,\\\"end\\\")}})});var w=this.preprocessSum(C);var y=!w?[\\\"node-property:alpha\\\"]:[\\\"node-property:alpha\\\",\\\"edge-property:alpha\\\"];y[0]=y[0]+((\\\"node-property\\\" in z)?(\\\":\\\"+c.splat(z[\\\"node-property\\\"]).join(\\\":\\\")):\\\"\\\");y[1]=(y[1]||\\\"edge-property:alpha\\\")+((\\\"edge-property\\\" in z)?(\\\":\\\"+c.splat(z[\\\"edge-property\\\"]).join(\\\":\\\")):\\\"\\\");if(\\\"label-property\\\" in z){y.push(\\\"label-property:\\\"+c.splat(z[\\\"label-property\\\"]).join(\\\":\\\"))}if(B.reposition){B.reposition()}else{B.compute(\\\"end\\\")}B.graph.eachNode(function(G){if(G.id!=A&&G.pos.getp().equals(b.KER)){G.pos.set(G.endPos);G.startPos.set(G.endPos)}});B.fx.animate(c.merge(F,{modes:[z.position||\\\"polar\\\"].concat(y),onComplete:function(){B.graph.eachNode(function(G){if(G.ignore){B.graph.removeNode(G.id)}});B.graph.eachNode(function(G){G.eachAdjacency(function(H){if(H.ignore){B.graph.removeAdjacence(H.nodeFrom.id,H.nodeTo.id)}})});F.onComplete()}}));break;default:}},contract:function(y,x){var w=this.viz;if(y.collapsed||!y.anySubnode(c.lambda(true))){return}x=c.merge(this.options,w.config,x||{},{modes:[\\\"node-property:alpha:span\\\",\\\"linear\\\"]});y.collapsed=true;(function z(A){A.eachSubnode(function(B){B.ignore=true;B.setData(\\\"alpha\\\",0,x.type==\\\"animate\\\"?\\\"end\\\":\\\"current\\\");z(B)})})(y);if(x.type==\\\"animate\\\"){w.compute(\\\"end\\\");if(w.rotated){w.rotate(w.rotated,\\\"none\\\",{property:\\\"end\\\"})}(function z(A){A.eachSubnode(function(B){B.setPos(y.getPos(\\\"end\\\"),\\\"end\\\");z(B)})})(y);w.fx.animate(x)}else{if(x.type==\\\"replot\\\"){w.refresh()}}},expand:function(y,x){if(!(\\\"collapsed\\\" in y)){return}var w=this.viz;x=c.merge(this.options,w.config,x||{},{modes:[\\\"node-property:alpha:span\\\",\\\"linear\\\"]});delete y.collapsed;(function z(A){A.eachSubnode(function(B){delete B.ignore;B.setData(\\\"alpha\\\",1,x.type==\\\"animate\\\"?\\\"end\\\":\\\"current\\\");z(B)})})(y);if(x.type==\\\"animate\\\"){w.compute(\\\"end\\\");if(w.rotated){w.rotate(w.rotated,\\\"none\\\",{property:\\\"end\\\"})}w.fx.animate(x)}else{if(x.type==\\\"replot\\\"){w.refresh()}}},preprocessSum:function(x){var w=this.viz;x.eachNode(function(z){if(!w.graph.hasNode(z.id)){w.graph.addNode(z);var A=w.graph.getNode(z.id);A.setData(\\\"alpha\\\",0);A.setData(\\\"alpha\\\",0,\\\"start\\\");A.setData(\\\"alpha\\\",1,\\\"end\\\")}});var y=false;x.eachNode(function(z){z.eachAdjacency(function(A){var B=w.graph.getNode(A.nodeFrom.id);var C=w.graph.getNode(A.nodeTo.id);if(!B.adjacentTo(C)){var A=w.graph.addAdjacence(B,C,A.data);if(B.startAlpha==B.endAlpha&&C.startAlpha==C.endAlpha){y=true;A.setData(\\\"alpha\\\",0);A.setData(\\\"alpha\\\",0,\\\"start\\\");A.setData(\\\"alpha\\\",1,\\\"end\\\")}}})});return y}};var a={none:{render:c.empty,contains:c.lambda(false)},circle:{render:function(z,A,w,y){var x=y.getCtx();x.beginPath();x.arc(A.x,A.y,w,0,Math.PI*2,true);x.closePath();x[z]()},contains:function(B,A,w){var y=B.x-A.x,x=B.y-A.y,z=y*y+x*x;return z<=w*w}},ellipse:{render:function(C,E,w,F,x){var G=x.getCtx(),z=1,y=1,D=1,B=1,A=0;if(w>F){A=w/2;y=F/w;B=w/F}else{A=F/2;z=w/F;D=F/w}G.save();G.scale(z,y);G.beginPath();G.arc(E.x*D,E.y*B,A,0,Math.PI*2,true);G.closePath();G[C]();G.restore()},contains:function(w,D,x,F){var C=0,B=1,A=1,z=0,y=0,E=0;if(x>F){C=x/2;A=F/x}else{C=F/2;B=x/F}z=(w.x-D.x)*(1/B);y=(w.y-D.y)*(1/A);E=z*z+y*y;return E<=C*C}},square:{render:function(x,z,y,w){w.getCtx()[x+\\\"Rect\\\"](z.x-y,z.y-y,2*y,2*y)},contains:function(y,x,w){return Math.abs(x.x-y.x)<=w&&Math.abs(x.y-y.y)<=w}},rectangle:{render:function(z,A,y,w,x){x.getCtx()[z+\\\"Rect\\\"](A.x-y/2,A.y-w/2,y,w)},contains:function(z,y,x,w){return Math.abs(y.x-z.x)<=x/2&&Math.abs(y.y-z.y)<=w/2}},triangle:{render:function(C,D,z,w){var G=w.getCtx(),y=D.x,x=D.y-z,F=y-z,E=D.y+z,B=y+z,A=E;G.beginPath();G.moveTo(y,x);G.lineTo(F,E);G.lineTo(B,A);G.closePath();G[C]()},contains:function(y,x,w){return a.circle.contains(y,x,w)}},star:{render:function(A,C,B,x){var w=x.getCtx(),z=Math.PI/5;w.save();w.translate(C.x,C.y);w.beginPath();w.moveTo(B,0);for(var y=0;y<9;y++){w.rotate(z);if(y%2==0){w.lineTo((B/0.525731)*0.200811,0)}else{w.lineTo(B,0)}}w.closePath();w[A]();w.restore()},contains:function(y,x,w){return a.circle.contains(y,x,w)}}};var m={line:{render:function(z,y,x){var w=x.getCtx();w.beginPath();w.moveTo(z.x,z.y);w.lineTo(y.x,y.y);w.stroke()},contains:function(G,y,B,E){var z=Math.min,C=Math.max,x=z(G.x,y.x),F=C(G.x,y.x),w=z(G.y,y.y),D=C(G.y,y.y);if(B.x>=x&&B.x<=F&&B.y>=w&&B.y<=D){if(Math.abs(y.x-G.x)<=E){return true}var A=(y.y-G.y)/(y.x-G.x)*(B.x-G.x)+G.y;return Math.abs(A-B.y)<=E}return false}},arrow:{render:function(F,G,z,x,w){var H=w.getCtx();if(x){var y=F;F=G;G=y}var C=new p(G.x-F.x,G.y-F.y);C.$scale(z/C.norm());var A=new p(G.x-C.x,G.y-C.y),B=new p(-C.y/2,C.x/2),E=A.add(B),D=A.$add(B.$scale(-1));H.beginPath();H.moveTo(F.x,F.y);H.lineTo(G.x,G.y);H.stroke();H.beginPath();H.moveTo(E.x,E.y);H.lineTo(D.x,D.y);H.lineTo(G.x,G.y);H.closePath();H.fill()},contains:function(x,w,z,y){return m.line.contains(x,w,z,y)}},hyperline:{render:function(D,E,w,y){var F=y.getCtx();var z=A(D,E);if(z.a>1000||z.b>1000||z.ratio<0){F.beginPath();F.moveTo(D.x*w,D.y*w);F.lineTo(E.x*w,E.y*w);F.stroke()}else{var C=Math.atan2(E.y-z.y,E.x-z.x);var B=Math.atan2(D.y-z.y,D.x-z.x);var x=x(C,B);F.beginPath();F.arc(z.x*w,z.y*w,z.ratio*w,C,B,x);F.stroke()}function A(S,R){var K=(S.x*R.y-S.y*R.x),G=K;var J=S.squaredNorm(),I=R.squaredNorm();if(K==0){return{x:0,y:0,ratio:-1}}var Q=(S.y*I-R.y*J+S.y-R.y)/K;var O=(R.x*J-S.x*I+R.x-S.x)/G;var P=-Q/2;var N=-O/2;var M=(Q*Q+O*O)/4-1;if(M<0){return{x:0,y:0,ratio:-1}}var L=Math.sqrt(M);var H={x:P,y:N,ratio:L>1000?-1:L,a:Q,b:O};return H}function x(G,H){return(G<H)?((G+Math.PI>H)?false:true):((H+Math.PI>G)?true:false)}},contains:c.lambda(false)}};e.Plot={initialize:function(x,w){this.viz=x;this.config=x.config;this.node=x.config.Node;this.edge=x.config.Edge;this.animation=new u;this.nodeTypes=new w.Plot.NodeTypes;this.edgeTypes=new w.Plot.EdgeTypes;this.labels=x.labels},nodeHelper:a,edgeHelper:m,Interpolator:{map:{border:\\\"color\\\",color:\\\"color\\\",width:\\\"number\\\",height:\\\"number\\\",dim:\\\"number\\\",alpha:\\\"number\\\",lineWidth:\\\"number\\\",angularWidth:\\\"number\\\",span:\\\"number\\\",valueArray:\\\"array-number\\\",dimArray:\\\"array-number\\\"},canvas:{globalAlpha:\\\"number\\\",fillStyle:\\\"color\\\",strokeStyle:\\\"color\\\",lineWidth:\\\"number\\\",shadowBlur:\\\"number\\\",shadowColor:\\\"color\\\",shadowOffsetX:\\\"number\\\",shadowOffsetY:\\\"number\\\",miterLimit:\\\"number\\\"},label:{size:\\\"number\\\",color:\\\"color\\\"},compute:function(y,x,w){return y+(x-y)*w},moebius:function(D,C,F,z){var B=z.scale(-F);if(B.norm()<1){var w=B.x,E=B.y;var A=D.startPos.getc().moebiusTransformation(B);D.pos.setc(A.x,A.y);B.x=w;B.y=E}},linear:function(x,w,A){var z=x.startPos.getc(true);var y=x.endPos.getc(true);x.pos.setc(this.compute(z.x,y.x,A),this.compute(z.y,y.y,A))},polar:function(y,x,B){var A=y.startPos.getp(true);var z=y.endPos.getp();var w=z.interpolate(A,B);y.pos.setp(w.theta,w.rho)},number:function(x,C,B,w,A){var z=x[w](C,\\\"start\\\");var y=x[w](C,\\\"end\\\");x[A](C,this.compute(z,y,B))},color:function(y,w,E,B,z){var C=c.hexToRgb(y[B](w,\\\"start\\\"));var D=c.hexToRgb(y[B](w,\\\"end\\\"));var A=this.compute;var x=c.rgbToHex([parseInt(A(C[0],D[0],E)),parseInt(A(C[1],D[1],E)),parseInt(A(C[2],D[2],E))]);y[z](w,x)},\\\"array-number\\\":function(z,y,J,G,B){var H=z[G](y,\\\"start\\\"),I=z[G](y,\\\"end\\\"),K=[];for(var E=0,A=H.length;E<A;E++){var x=H[E],w=I[E];if(x.length){for(var D=0,F=x.length,C=[];D<F;D++){C.push(this.compute(x[D],w[D],J))}K.push(C)}else{K.push(\\n this.compute(x,w,J))}}z[B](y,K)},node:function(x,C,E,w,D,y){w=this[w];if(C){var B=C.length;for(var z=0;z<B;z++){var A=C[z];this[w[A]](x,A,E,D,y)}}else{for(var A in w){this[w[A]](x,A,E,D,y)}}},edge:function(y,x,D,z,w,C){var B=y.adjacencies;for(var A in B){this[\\\"node\\\"](B[A],x,D,z,w,C)}},\\\"node-property\\\":function(x,w,y){this[\\\"node\\\"](x,w,y,\\\"map\\\",\\\"getData\\\",\\\"setData\\\")},\\\"edge-property\\\":function(x,w,y){this[\\\"edge\\\"](x,w,y,\\\"map\\\",\\\"getData\\\",\\\"setData\\\")},\\\"label-property\\\":function(x,w,y){this[\\\"node\\\"](x,w,y,\\\"label\\\",\\\"getLabelData\\\",\\\"setLabelData\\\")},\\\"node-style\\\":function(x,w,y){this[\\\"node\\\"](x,w,y,\\\"canvas\\\",\\\"getCanvasStyle\\\",\\\"setCanvasStyle\\\")},\\\"edge-style\\\":function(x,w,y){this[\\\"edge\\\"](x,w,y,\\\"canvas\\\",\\\"getCanvasStyle\\\",\\\"setCanvasStyle\\\")}},sequence:function(x){var y=this;x=c.merge({condition:c.lambda(false),step:c.empty,onComplete:c.empty,duration:200},x||{});var w=setInterval(function(){if(x.condition()){x.step()}else{clearInterval(w);x.onComplete()}y.viz.refresh(true)},x.duration)},prepare:function(C){var B=this.viz.graph,z={\\\"node-property\\\":{getter:\\\"getData\\\",setter:\\\"setData\\\"},\\\"edge-property\\\":{getter:\\\"getData\\\",setter:\\\"setData\\\"},\\\"node-style\\\":{getter:\\\"getCanvasStyle\\\",setter:\\\"setCanvasStyle\\\"},\\\"edge-style\\\":{getter:\\\"getCanvasStyle\\\",setter:\\\"setCanvasStyle\\\"}};var x={};if(c.type(C)==\\\"array\\\"){for(var A=0,w=C.length;A<w;A++){var y=C[A].split(\\\":\\\");x[y.shift()]=y}}else{for(var D in C){if(D==\\\"position\\\"){x[C.position]=[]}else{x[D]=c.splat(C[D])}}}B.eachNode(function(E){E.startPos.set(E.pos);c.each([\\\"node-property\\\",\\\"node-style\\\"],function(H){if(H in x){var I=x[H];for(var G=0,F=I.length;G<F;G++){E[z[H].setter](I[G],E[z[H].getter](I[G]),\\\"start\\\")}}});c.each([\\\"edge-property\\\",\\\"edge-style\\\"],function(F){if(F in x){var G=x[F];E.eachAdjacency(function(I){for(var J=0,H=G.length;J<H;J++){I[z[F].setter](G[J],I[z[F].getter](G[J]),\\\"start\\\")}})}})});return x},animate:function(z,y){z=c.merge(this.viz.config,z||{});var A=this,x=this.viz,C=x.graph,D=this.Interpolator,B=z.type===\\\"nodefx\\\"?this.nodeFxAnimation:this.animation;var w=this.prepare(z.modes);if(z.hideLabels){this.labels.hideLabels(true)}B.setOptions(c.extend(z,{$animating:false,compute:function(E){C.eachNode(function(F){for(var G in w){D[G](F,w[G],E,y)}});A.plot(z,this.$animating,E);this.$animating=true},complete:function(){if(z.hideLabels){A.labels.hideLabels(false)}A.plot(z);z.onComplete()}})).start()},nodeFx:function(y){var D=this.viz,E=D.graph,B=this.nodeFxAnimation,F=c.merge(this.viz.config,{elements:{id:false,properties:{}},reposition:false});y=c.merge(F,y||{},{onBeforeCompute:c.empty,onAfterCompute:c.empty});B.stopTimer();var C=y.elements.properties;if(!y.elements.id){E.eachNode(function(H){for(var G in C){H.setData(G,C[G],\\\"end\\\")}})}else{var w=c.splat(y.elements.id);c.each(w,function(I){var H=E.getNode(I);if(H){for(var G in C){H.setData(G,C[G],\\\"end\\\")}}})}var A=[];for(var x in C){A.push(x)}var z=[\\\"node-property:\\\"+A.join(\\\":\\\")];if(y.reposition){z.push(\\\"linear\\\");D.compute(\\\"end\\\")}this.animate(c.merge(y,{modes:z,type:\\\"nodefx\\\"}))},plot:function(x,G){var E=this.viz,B=E.graph,y=E.canvas,w=E.root,C=this,F=y.getCtx(),A=Math.min,x=x||this.viz.controller;x.clearCanvas&&y.clear();var D=B.getNode(w);if(!D){return}var z=!!D.visited;B.eachNode(function(I){var H=I.getData(\\\"alpha\\\");I.eachAdjacency(function(J){var K=J.nodeTo;if(!!K.visited===z&&I.drawn&&K.drawn){!G&&x.onBeforePlotLine(J);C.plotLine(J,y,G);!G&&x.onAfterPlotLine(J)}});if(I.drawn){!G&&x.onBeforePlotNode(I);C.plotNode(I,y,G);!G&&x.onAfterPlotNode(I)}if(!C.labelsHidden&&x.withLabels){if(I.drawn&&H>=0.95){C.labels.plotLabel(y,I,x)}else{C.labels.hideLabel(I,false)}}I.visited=!z})},plotTree:function(A,x,E){var B=this,C=this.viz,y=C.canvas,z=this.config,D=y.getCtx();var w=A.getData(\\\"alpha\\\");A.eachSubnode(function(G){if(x.plotSubtree(A,G)&&G.exist&&G.drawn){var F=A.getAdjacency(G.id);!E&&x.onBeforePlotLine(F);B.plotLine(F,y,E);!E&&x.onAfterPlotLine(F);B.plotTree(G,x,E)}});if(A.drawn){!E&&x.onBeforePlotNode(A);this.plotNode(A,y,E);!E&&x.onAfterPlotNode(A);if(!x.hideLabels&&x.withLabels&&w>=0.95){this.labels.plotLabel(y,A,x)}else{this.labels.hideLabel(A,false)}}else{this.labels.hideLabel(A,true)}},plotNode:function(y,x,F){var C=y.getData(\\\"type\\\"),B=this.node.CanvasStyles;if(C!=\\\"none\\\"){var w=y.getData(\\\"lineWidth\\\"),A=y.getData(\\\"color\\\"),z=y.getData(\\\"alpha\\\"),D=x.getCtx();D.save();D.lineWidth=w;D.fillStyle=D.strokeStyle=A;D.globalAlpha=z;for(var E in B){D[E]=y.getCanvasStyle(E)}this.nodeTypes[C].render.call(this,y,x,F);D.restore()}},plotLine:function(C,x,G){var B=C.getData(\\\"type\\\"),z=this.edge.CanvasStyles;if(B!=\\\"none\\\"){var w=C.getData(\\\"lineWidth\\\"),y=C.getData(\\\"color\\\"),E=x.getCtx(),A=C.nodeFrom,D=C.nodeTo;E.save();E.lineWidth=w;E.fillStyle=E.strokeStyle=y;E.globalAlpha=Math.min(A.getData(\\\"alpha\\\"),D.getData(\\\"alpha\\\"),C.getData(\\\"alpha\\\"));for(var F in z){E[F]=C.getCanvasStyle(F)}this.edgeTypes[B].render.call(this,C,x,G);E.restore()}}};e.Plot3D=c.merge(e.Plot,{Interpolator:{linear:function(x,w,A){var z=x.startPos.getc(true);var y=x.endPos.getc(true);x.pos.setc(this.compute(z.x,y.x,A),this.compute(z.y,y.y,A),this.compute(z.z,y.z,A))}},plotNode:function(x,w){if(x.getData(\\\"type\\\")==\\\"none\\\"){return}this.plotElement(x,w,{getAlpha:function(){return x.getData(\\\"alpha\\\")}})},plotLine:function(w,x){if(w.getData(\\\"type\\\")==\\\"none\\\"){return}this.plotElement(w,x,{getAlpha:function(){return Math.min(w.nodeFrom.getData(\\\"alpha\\\"),w.nodeTo.getData(\\\"alpha\\\"),w.getData(\\\"alpha\\\"))}})},plotElement:function(Y,E,z){var V=E.getCtx(),F=new Matrix4,x=E.config.Scene.Lighting,Z=E.canvases[0],K=Z.program,X=Z.camera;if(!Y.geometry){Y.geometry=new O3D[Y.getData(\\\"type\\\")]}Y.geometry.update(Y);if(!Y.webGLVertexBuffer){var J=[],B=[],P=[],N=0,S=Y.geometry;for(var W=0,U=S.vertices,H=S.faces,G=H.length;W<G;W++){var M=H[W],D=U[M.a],C=U[M.b],A=U[M.c],y=M.d?U[M.d]:false,R=M.normal;J.push(D.x,D.y,D.z);J.push(C.x,C.y,C.z);J.push(A.x,A.y,A.z);if(y){J.push(y.x,y.y,y.z)}P.push(R.x,R.y,R.z);P.push(R.x,R.y,R.z);P.push(R.x,R.y,R.z);if(y){P.push(R.x,R.y,R.z)}B.push(N,N+1,N+2);if(y){B.push(N,N+2,N+3);N+=4}else{N+=3}}Y.webGLVertexBuffer=V.createBuffer();V.bindBuffer(V.ARRAY_BUFFER,Y.webGLVertexBuffer);V.bufferData(V.ARRAY_BUFFER,new Float32Array(J),V.STATIC_DRAW);Y.webGLFaceBuffer=V.createBuffer();V.bindBuffer(V.ELEMENT_ARRAY_BUFFER,Y.webGLFaceBuffer);V.bufferData(V.ELEMENT_ARRAY_BUFFER,new Uint16Array(B),V.STATIC_DRAW);Y.webGLFaceCount=B.length;Y.webGLNormalBuffer=V.createBuffer();V.bindBuffer(V.ARRAY_BUFFER,Y.webGLNormalBuffer);V.bufferData(V.ARRAY_BUFFER,new Float32Array(P),V.STATIC_DRAW)}F.multiply(X.matrix,Y.geometry.matrix);V.uniformMatrix4fv(K.viewMatrix,false,F.flatten());V.uniformMatrix4fv(K.projectionMatrix,false,X.projectionMatrix.flatten());var L=Matrix4.makeInvert(F);L.$transpose();V.uniformMatrix4fv(K.normalMatrix,false,L.flatten());var T=c.hexToRgb(Y.getData(\\\"color\\\"));T.push(z.getAlpha());V.uniform4f(K.color,T[0]/255,T[1]/255,T[2]/255,T[3]);V.uniform1i(K.enableLighting,x.enable);if(x.enable){if(x.ambient){var O=x.ambient;V.uniform3f(K.ambientColor,O[0],O[1],O[2])}if(x.directional){var Q=x.directional,T=Q.color,I=Q.direction,w=new Vector3(I.x,I.y,I.z).normalize().$scale(-1);V.uniform3f(K.lightingDirection,w.x,w.y,w.z);V.uniform3f(K.directionalColor,T[0],T[1],T[2])}}V.bindBuffer(V.ARRAY_BUFFER,Y.webGLVertexBuffer);V.vertexAttribPointer(K.position,3,V.FLOAT,false,0,0);V.bindBuffer(V.ARRAY_BUFFER,Y.webGLNormalBuffer);V.vertexAttribPointer(K.normal,3,V.FLOAT,false,0,0);V.bindBuffer(V.ELEMENT_ARRAY_BUFFER,Y.webGLFaceBuffer);V.drawElements(V.TRIANGLES,Y.webGLFaceCount,V.UNSIGNED_SHORT,0)}});e.Label={};e.Label.Native=new q({initialize:function(w){this.viz=w},plotLabel:function(y,z,x){var w=y.getCtx();var A=z.pos.getc(true);w.font=z.getLabelData(\\\"style\\\")+\\\" \\\"+z.getLabelData(\\\"size\\\")+\\\"px \\\"+z.getLabelData(\\\"family\\\");w.textAlign=z.getLabelData(\\\"textAlign\\\");w.fillStyle=w.strokeStyle=z.getLabelData(\\\"color\\\");w.textBaseline=z.getLabelData(\\\"textBaseline\\\");this.renderLabel(y,z,x)},renderLabel:function(y,z,x){var w=y.getCtx();var A=z.pos.getc(true);w.fillText(z.name,A.x,A.y+z.getData(\\\"height\\\")/2)},hideLabel:c.empty,hideLabels:c.empty});e.Label.DOM=new q({labelsHidden:false,labelContainer:false,labels:{},getLabelContainer:function(){return this.labelContainer?this.labelContainer:this.labelContainer=doc.getElementById(this.viz.config.labelContainer)},getLabel:function(w){return(w in this.labels&&this.labels[w]!=null)?this.labels[w]:this.labels[w]=doc.getElementById(w)},hideLabels:function(x){var w=this.getLabelContainer();if(x){w.style.display=\\\"none\\\"}else{w.style.display=\\\"\\\"}this.labelsHidden=x},clearLabels:function(w){for(var x in this.labels){if(w||!this.viz.graph.hasNode(x)){this.disposeLabel(x);delete this.labels[x]}}},disposeLabel:function(x){var w=this.getLabel(x);if(w&&w.parentNode){w.parentNode.removeChild(w)}},hideLabel:function(A,w){A=c.splat(A);var x=w?\\\"\\\":\\\"none\\\",y,z=this;c.each(A,function(C){var B=z.getLabel(C.id);if(B){B.style.display=x}})},fitsInCanvas:function(y,w){var x=w.getSize();if(y.x>=x.width||y.x<0||y.y>=x.height||y.y<0){return false}return true}});e.Label.HTML=new q({Implements:e.Label.DOM,plotLabel:function(z,A,y){var B=A.id,w=this.getLabel(B);if(!w&&!(w=doc.getElementById(B))){w=doc.createElement(\\\"div\\\");var x=this.getLabelContainer();w.id=B;w.className=\\\"node\\\";w.style.position=\\\"absolute\\\";y.onCreateLabel(w,A);x.appendChild(w);this.labels[A.id]=w}this.placeLabel(w,A,y)}});e.Label.SVG=new q({Implements:e.Label.DOM,plotLabel:function(z,B,y){var D=B.id,w=this.getLabel(D);if(!w&&!(w=doc.getElementById(D))){var A=\\\"http://www.w3.org/2000/svg\\\";w=doc.createElementNS(A,\\\"svg:text\\\");var C=doc.createElementNS(A,\\\"svg:tspan\\\");w.appendChild(C);var x=this.getLabelContainer();w.setAttribute(\\\"id\\\",D);w.setAttribute(\\\"class\\\",\\\"node\\\");x.appendChild(w);y.onCreateLabel(w,B);this.labels[B.id]=w}this.placeLabel(w,B,y)}});e.Geom=new q({initialize:function(w){this.viz=w;this.config=w.config;this.node=w.config.Node;this.edge=w.config.Edge},translate:function(x,w){w=c.splat(w);this.viz.graph.eachNode(function(y){c.each(w,function(z){y.getPos(z).$add(x)})})},setRightLevelToShow:function(z,w,B){var A=this.getRightLevelToShow(z,w),y=this.viz.labels,x=c.merge({execShow:true,execHide:true,onHide:c.empty,onShow:c.empty},B||{});z.eachLevel(0,this.config.levelsToShow,function(D){var C=D._depth-z._depth;if(C>A){x.onHide(D);if(x.execHide){D.drawn=false;D.exist=false;y.hideLabel(D,false)}}else{x.onShow(D);if(x.execShow){D.exist=true}}});z.drawn=true},getRightLevelToShow:function(z,x){var w=this.config;var A=w.levelsToShow;var y=w.constrained;if(!y){return A}while(!this.treeFitsInCanvas(z,x,A)&&A>1){A--}return A}});var d={construct:function(x){var y=(c.type(x)==\\\"array\\\");var w=new e(this.graphOptions,this.config.Node,this.config.Edge,this.config.Label);if(!y){(function(z,B){z.addNode(B);if(B.children){for(var A=0,C=B.children;A<C.length;A++){z.addAdjacence(B,C[A]);arguments.callee(z,C[A])}}})(w,x)}else{(function(H,I){var A=function(M){for(var L=0,J=I.length;L<J;L++){if(I[L].id==M){return I[L]}}var K={id:M,name:M};return H.addNode(K)};for(var E=0,B=I.length;E<B;E++){H.addNode(I[E]);var F=I[E].adjacencies;if(F){for(var C=0,G=F.length;C<G;C++){var z=F[C],D={};if(typeof F[C]!=\\\"string\\\"){D=c.merge(z.data,{});z=z.nodeTo}H.addAdjacence(I[E],A(z),D)}}}})(w,x)}return w},loadJSON:function(x,w){this.json=x;if(this.labels&&this.labels.clearLabels){this.labels.clearLabels(true)}this.graph=this.construct(x);if(c.type(x)!=\\\"array\\\"){this.root=x.id}else{this.root=x[w?w:0].id}},toJSON:function(A){A=A||\\\"tree\\\";if(A==\\\"tree\\\"){var y={};var x=this.graph.getNode(this.root);var y=(function w(D){var B={};B.id=D.id;B.name=D.name;B.data=D.data;var C=[];D.eachSubnode(function(E){C.push(w(E))});B.children=C;return B})(x);return y}else{var y=[];var z=!!this.graph.getNode(this.root).visited;this.graph.eachNode(function(C){var B={};B.id=C.id;B.name=C.name;B.data=C.data;var D=[];C.eachAdjacency(function(E){var G=E.nodeTo;if(!!G.visited===z){var F={};F.nodeTo=G.id;F.data=E.data;D.push(F)}});B.adjacencies=D;y.push(B);C.visited=!z});return y}}};var g=$jit.Layouts={};var f={label:null,compute:function(z,A,x){this.initializeLabel(x);var w=this.label,y=w.style;z.eachNode(function(D){var H=D.getData(\\\"autoWidth\\\"),I=D.getData(\\\"autoHeight\\\");if(H||I){delete D.data.$width;delete D.data.$height;delete D.data.$dim;var B=D.getData(\\\"width\\\"),J=D.getData(\\\"height\\\");y.width=H?\\\"auto\\\":B+\\\"px\\\";y.height=I?\\\"auto\\\":J+\\\"px\\\";w.innerHTML=D.name;var F=w.offsetWidth,C=w.offsetHeight;var G=D.getData(\\\"type\\\");if(c.indexOf([\\\"circle\\\",\\\"square\\\",\\\"triangle\\\",\\\"star\\\"],G)===-1){D.setData(\\\"width\\\",F);D.setData(\\\"height\\\",C)}else{var E=F>C?F:C;D.setData(\\\"width\\\",E);D.setData(\\\"height\\\",E);D.setData(\\\"dim\\\",E)}}})},initializeLabel:function(w){if(!this.label){this.label=doc.createElement(\\\"div\\\");doc.body.appendChild(this.label)}this.setLabelStyles(w)},setLabelStyles:function(w){c.extend(this.label.style,{visibility:\\\"hidden\\\",position:\\\"absolute\\\",width:\\\"auto\\\",height:\\\"auto\\\"});this.label.className=\\\"jit-autoadjust-label\\\"}};g.Tree=(function(){var F=Array.prototype.slice;function D(P,K,H,N,I){var M=K.Node;var J=K.multitree;if(M.overridable){var O=-1,L=-1;P.eachNode(function(S){if(S._depth==H&&(!J||(\\\"$orn\\\" in S.data)&&S.data.$orn==N)){var Q=S.getData(\\\"width\\\",I);var R=S.getData(\\\"height\\\",I);O=(O<Q)?Q:O;L=(L<R)?R:L}});return{width:O<0?M.width:O,height:L<0?M.height:L}}else{return M}}function G(I,L,K,H){var J=(H==\\\"left\\\"||H==\\\"right\\\")?\\\"y\\\":\\\"x\\\";I.getPos(L)[J]+=K}function B(I,J){var H=[];c.each(I,function(K){K=F.call(K);K[0]+=J;K[1]+=J;H.push(K)});return H}function E(K,H){if(K.length==0){return H}if(H.length==0){return K}var J=K.shift(),I=H.shift();return[[J[0],I[1]]].concat(E(K,H))}function z(H,I){I=I||[];if(H.length==0){return I}var J=H.pop();return z(H,E(J,I))}function C(K,I,L,H,J){if(K.length<=J||I.length<=J){return 0}var N=K[J][1],M=I[J][0];return Math.max(C(K,I,L,H,++J)+L,N-M+H)}function A(K,I,H){function J(N,P,M){if(P.length<=M){return[]}var O=P[M],L=C(N,O,I,H,0);return[L].concat(J(E(N,B(O,L)),P,++M))}return J([],K,0)}function x(L,K,J){function H(O,Q,N){if(Q.length<=N){return[]}var P=Q[N],M=-C(P,O,K,J,0);return[M].concat(H(E(B(P,M),O),Q,++N))}L=F.call(L);var I=H([],L.reverse(),0);return I.reverse()}function w(N,L,I,O){var J=A(N,L,I),M=x(N,L,I);if(O==\\\"left\\\"){M=J}else{if(O==\\\"right\\\"){J=M}}for(var K=0,H=[];K<J.length;K++){H[K]=(J[K]+M[K])/2}return H}function y(H,R,I,Y,W){var K=Y.multitree;var Q=[\\\"x\\\",\\\"y\\\"],N=[\\\"width\\\",\\\"height\\\"];var J=+(W==\\\"left\\\"||W==\\\"right\\\");var O=Q[J],X=Q[1-J];var T=Y.Node;var M=N[J],V=N[1-J];var L=Y.siblingOffset;var U=Y.subtreeOffset;var S=Y.align;function P(ab,af,aj){var aa=ab.getData(M,I);var ai=af||(ab.getData(V,I));var am=[],ak=[],ag=false;var Z=ai+Y.levelDistance;ab.eachSubnode(function(ao){if(ao.exist&&(!K||(\\\"$orn\\\" in ao.data)&&ao.data.$orn==W)){if(!ag){ag=D(H,Y,ao._depth,W,I)}var an=P(ao,ag[V],aj+Z);am.push(an.tree);ak.push(an.extent)}});var ae=w(ak,U,L,S);for(var ad=0,ac=[],ah=[];ad<am.length;ad++){G(am[ad],I,ae[ad],W);ah.push(B(ak[ad],ae[ad]))}var al=[[-aa/2,aa/2]].concat(z(ah));ab.getPos(I)[O]=0;if(W==\\\"top\\\"||W==\\\"left\\\"){ab.getPos(I)[X]=aj}else{ab.getPos(I)[X]=-aj}return{tree:ab,extent:al}}P(R,false,0)}return new q({compute:function(J,I){var K=J||\\\"start\\\";var H=this.graph.getNode(this.root);c.extend(H,{drawn:true,exist:true,selected:true});f.compute(this.graph,K,this.config);if(!!I||!(\\\"_depth\\\" in H)){this.graph.computeLevels(this.root,0,\\\"ignore\\\")}this.computePositions(H,K)},computePositions:function(L,H){var J=this.config;var I=J.multitree;var O=J.align;var K=O!==\\\"center\\\"&&J.indent;\\n var P=J.orientation;var N=I?[\\\"top\\\",\\\"right\\\",\\\"bottom\\\",\\\"left\\\"]:[P];var M=this;c.each(N,function(Q){y(M.graph,L,H,M.config,Q,H);var R=[\\\"x\\\",\\\"y\\\"][+(Q==\\\"left\\\"||Q==\\\"right\\\")];(function S(T){T.eachSubnode(function(U){if(U.exist&&(!I||(\\\"$orn\\\" in U.data)&&U.data.$orn==Q)){U.getPos(H)[R]+=T.getPos(H)[R];if(K){U.getPos(H)[R]+=O==\\\"left\\\"?K:-K}S(U)}})})(L)})}})})();$jit.ST=(function(){var x=[];function y(D){D=D||this.clickedNode;if(!this.config.constrained){return[]}var A=this.geom;var H=this.graph;var B=this.canvas;var z=D._depth,E=[];H.eachNode(function(I){if(I.exist&&!I.selected){if(I.isDescendantOf(D.id)){if(I._depth<=z){E.push(I)}}else{E.push(I)}}});var F=A.getRightLevelToShow(D,B);D.eachLevel(F,F,function(I){if(I.exist&&!I.selected){E.push(I)}});for(var G=0;G<x.length;G++){var C=this.graph.getNode(x[G]);if(!C.isDescendantOf(D.id)){E.push(C)}}return E}function w(B){var A=[],z=this.config;B=B||this.clickedNode;this.clickedNode.eachLevel(0,z.levelsToShow,function(C){if(z.multitree&&!(\\\"$orn\\\" in C.data)&&C.anySubnode(function(D){return D.exist&&!D.drawn})){A.push(C)}else{if(C.drawn&&!C.anySubnode(\\\"drawn\\\")){A.push(C)}}});return A}return new q({Implements:[d,o,g.Tree],initialize:function(z){var B=$jit.ST;var A={levelsToShow:2,levelDistance:30,constrained:true,Node:{type:\\\"rectangle\\\"},duration:700,offsetX:0,offsetY:0};this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Fx\\\",\\\"Tree\\\",\\\"Node\\\",\\\"Edge\\\",\\\"Controller\\\",\\\"Tips\\\",\\\"NodeStyles\\\",\\\"Events\\\",\\\"Navigation\\\",\\\"Label\\\"),A,z);var C=this.config;if(C.useCanvas){this.canvas=C.useCanvas;this.config.labelContainer=this.canvas.id+\\\"-label\\\"}else{if(C.background){C.background=c.merge({type:\\\"Circles\\\"},C.background)}this.canvas=new l(this,C);this.config.labelContainer=(typeof C.injectInto==\\\"string\\\"?C.injectInto:C.injectInto.id)+\\\"-label\\\"}this.graphOptions={klass:p};this.graph=new e(this.graphOptions,this.config.Node,this.config.Edge);this.labels=new B.Label[C.Label.type](this);this.fx=new B.Plot(this,B);this.op=new B.Op(this);this.group=new B.Group(this);this.geom=new B.Geom(this);this.clickedNode=null;this.initializeExtras()},plot:function(){this.fx.plot(this.controller)},switchPosition:function(E,D,C){var z=this.geom,A=this.fx,B=this;if(!A.busy){A.busy=true;this.contract({onComplete:function(){z.switchOrientation(E);B.compute(\\\"end\\\",false);A.busy=false;if(D==\\\"animate\\\"){B.onClick(B.clickedNode.id,C)}else{if(D==\\\"replot\\\"){B.select(B.clickedNode.id,C)}}}},E)}},switchAlignment:function(B,A,z){this.config.align=B;if(A==\\\"animate\\\"){this.select(this.clickedNode.id,z)}else{if(A==\\\"replot\\\"){this.onClick(this.clickedNode.id,z)}}},addNodeInPath:function(z){x.push(z);this.select((this.clickedNode&&this.clickedNode.id)||this.root)},clearNodesInPath:function(z){x.length=0;this.select((this.clickedNode&&this.clickedNode.id)||this.root)},refresh:function(){this.reposition();this.select((this.clickedNode&&this.clickedNode.id)||this.root)},reposition:function(){this.graph.computeLevels(this.root,0,\\\"ignore\\\");this.geom.setRightLevelToShow(this.clickedNode,this.canvas);this.graph.eachNode(function(z){if(z.exist){z.drawn=true}});this.compute(\\\"end\\\")},requestNodes:function(B,C){var A=c.merge(this.controller,C),z=this.config.levelsToShow;if(A.request){var E=[],D=B._depth;B.eachLevel(0,z,function(F){if(F.drawn&&!F.anySubnode()){E.push(F);F._level=z-(F._depth-D)}});this.group.requestNodes(E,A)}else{A.onComplete()}},contract:function(D,E){var C=this.config.orientation;var z=this.geom,B=this.group;if(E){z.switchOrientation(E)}var A=y.call(this);if(E){z.switchOrientation(C)}B.contract(A,c.merge(this.controller,D))},move:function(A,B){this.compute(\\\"end\\\",false);var z=B.Move,C={x:z.offsetX,y:z.offsetY};if(z.enable){this.geom.translate(A.endPos.add(C).$scale(-1),\\\"end\\\")}this.fx.animate(c.merge(this.controller,{modes:[\\\"linear\\\"]},B))},expand:function(A,B){var z=w.call(this,A);this.group.expand(z,c.merge(this.controller,B))},selectPath:function(C){var B=this;this.graph.eachNode(function(E){E.selected=false});function D(F){if(F==null||F.selected){return}F.selected=true;c.each(B.group.getSiblings([F])[F.id],function(G){G.exist=true;G.drawn=true});var E=F.getParents();E=(E.length>0)?E[0]:null;D(E)}for(var z=0,A=[C.id].concat(x);z<A.length;z++){D(this.graph.getNode(A[z]))}},setRoot:function(G,F,E){if(this.busy){return}this.busy=true;var D=this,B=this.canvas;var z=this.graph.getNode(this.root);var A=this.graph.getNode(G);function C(){if(this.config.multitree&&A.data.$orn){var I=A.data.$orn;var J={left:\\\"right\\\",right:\\\"left\\\",top:\\\"bottom\\\",bottom:\\\"top\\\"}[I];z.data.$orn=J;(function H(K){K.eachSubnode(function(L){if(L.id!=G){L.data.$orn=J;H(L)}})})(z);delete A.data.$orn}this.root=G;this.clickedNode=A;this.graph.computeLevels(this.root,0,\\\"ignore\\\");this.geom.setRightLevelToShow(A,B,{execHide:false,onShow:function(K){if(!K.drawn){K.drawn=true;K.setData(\\\"alpha\\\",1,\\\"end\\\");K.setData(\\\"alpha\\\",0);K.pos.setc(A.pos.x,A.pos.y)}}});this.compute(\\\"end\\\");this.busy=true;this.fx.animate({modes:[\\\"linear\\\",\\\"node-property:alpha\\\"],onComplete:function(){D.busy=false;D.onClick(G,{onComplete:function(){E&&E.onComplete()}})}})}delete z.data.$orns;if(F==\\\"animate\\\"){C.call(this);D.selectPath(A)}else{if(F==\\\"replot\\\"){C.call(this);this.select(this.root)}}},addSubtree:function(z,B,A){if(B==\\\"replot\\\"){this.op.sum(z,c.extend({type:\\\"replot\\\"},A||{}))}else{if(B==\\\"animate\\\"){this.op.sum(z,c.extend({type:\\\"fade:seq\\\"},A||{}))}}},removeSubtree:function(E,A,D,C){var B=this.graph.getNode(E),z=[];B.eachLevel(+!A,false,function(F){z.push(F.id)});if(D==\\\"replot\\\"){this.op.removeNode(z,c.extend({type:\\\"replot\\\"},C||{}))}else{if(D==\\\"animate\\\"){this.op.removeNode(z,c.extend({type:\\\"fade:seq\\\"},C||{}))}}},select:function(z,C){var H=this.group,F=this.geom;var D=this.graph.getNode(z),B=this.canvas;var G=this.graph.getNode(this.root);var A=c.merge(this.controller,C);var E=this;A.onBeforeCompute(D);this.selectPath(D);this.clickedNode=D;this.requestNodes(D,{onComplete:function(){H.hide(H.prepare(y.call(E)),A);F.setRightLevelToShow(D,B);E.compute(\\\"current\\\");E.graph.eachNode(function(K){var J=K.pos.getc(true);K.startPos.setc(J.x,J.y);K.endPos.setc(J.x,J.y);K.visited=false});var I={x:A.offsetX,y:A.offsetY};E.geom.translate(D.endPos.add(I).$scale(-1),[\\\"start\\\",\\\"current\\\",\\\"end\\\"]);H.show(w.call(E));E.plot();A.onAfterCompute(E.clickedNode);A.onComplete()}})},onClick:function(A,H){var C=this.canvas,G=this,z=this.geom,D=this.config;var F={Move:{enable:true,offsetX:D.offsetX||0,offsetY:D.offsetY||0},setRightLevelToShowConfig:false,onBeforeRequest:c.empty,onBeforeContract:c.empty,onBeforeMove:c.empty,onBeforeExpand:c.empty};var B=c.merge(this.controller,F,H);if(!this.busy){this.busy=true;var E=this.graph.getNode(A);this.selectPath(E,this.clickedNode);this.clickedNode=E;B.onBeforeCompute(E);B.onBeforeRequest(E);this.requestNodes(E,{onComplete:function(){B.onBeforeContract(E);G.contract({onComplete:function(){z.setRightLevelToShow(E,C,B.setRightLevelToShowConfig);B.onBeforeMove(E);G.move(E,{Move:B.Move,onComplete:function(){B.onBeforeExpand(E);G.expand(E,{onComplete:function(){G.busy=false;B.onAfterCompute(A);B.onComplete()}})}})}})}})}}})})();$jit.ST.$extend=true;$jit.ST.Op=new q({Implements:e.Op});$jit.ST.Group=new q({initialize:function(w){this.viz=w;this.canvas=w.canvas;this.config=w.config;this.animation=new u;this.nodes=null},requestNodes:function(B,A){var z=0,x=B.length,D={};var y=function(){A.onComplete()};var w=this.viz;if(x==0){y()}for(var C=0;C<x;C++){D[B[C].id]=B[C];A.request(B[C].id,B[C]._level,{onComplete:function(F,E){if(E&&E.children){E.id=F;w.op.sum(E,{type:\\\"nothing\\\"})}if(++z==x){w.graph.computeLevels(w.root,0);y()}}})}},contract:function(y,x){var w=this.viz;var z=this;y=this.prepare(y);this.animation.setOptions(c.merge(x,{$animating:false,compute:function(A){if(A==1){A=0.99}z.plotStep(1-A,x,this.$animating);this.$animating=\\\"contract\\\"},complete:function(){z.hide(y,x)}})).start()},hide:function(y,x){var w=this.viz;for(var z=0;z<y.length;z++){if(true||!x||!x.request){y[z].eachLevel(1,false,function(B){if(B.exist){c.extend(B,{drawn:false,exist:false})}})}else{var A=[];y[z].eachLevel(1,false,function(B){A.push(B.id)});w.op.removeNode(A,{type:\\\"nothing\\\"});w.labels.clearLabels()}}x.onComplete()},expand:function(x,w){var y=this;this.show(x);this.animation.setOptions(c.merge(w,{$animating:false,compute:function(z){y.plotStep(z,w,this.$animating);this.$animating=\\\"expand\\\"},complete:function(){y.plotStep(undefined,w,false);w.onComplete()}})).start()},show:function(w){var x=this.config;this.prepare(w);c.each(w,function(z){if(x.multitree&&!(\\\"$orn\\\" in z.data)){delete z.data.$orns;var y=\\\" \\\";z.eachSubnode(function(A){if((\\\"$orn\\\" in A.data)&&y.indexOf(A.data.$orn)<0&&A.exist&&!A.drawn){y+=A.data.$orn+\\\" \\\"}});z.data.$orns=y}z.eachLevel(0,x.levelsToShow,function(A){if(A.exist){A.drawn=true}})})},prepare:function(w){this.nodes=this.getNodesWithChildren(w);return this.nodes},getNodesWithChildren:function(y){var x=[],A=this.config,w=this.viz.root;y.sort(function(E,D){return(E._depth<=D._depth)-(E._depth>=D._depth)});for(var B=0;B<y.length;B++){if(y[B].anySubnode(\\\"exist\\\")){for(var z=B+1,C=false;!C&&z<y.length;z++){if(!A.multitree||\\\"$orn\\\" in y[z].data){C=C||y[B].isDescendantOf(y[z].id)}}if(!C){x.push(y[B])}}}return x},plotStep:function(G,C,I){var F=this.viz,z=this.config,y=F.canvas,H=y.getCtx(),w=this.nodes;var B,A;var x={};for(B=0;B<w.length;B++){A=w[B];x[A.id]=[];var E=z.multitree&&!(\\\"$orn\\\" in A.data);var D=E&&A.data.$orns;A.eachSubgraph(function(J){if(E&&D&&D.indexOf(J.data.$orn)>0&&J.drawn){J.drawn=false;x[A.id].push(J)}else{if((!E||!D)&&J.drawn){J.drawn=false;x[A.id].push(J)}}});A.drawn=true}if(w.length>0){F.fx.plot()}for(B in x){c.each(x[B],function(J){J.drawn=true})}for(B=0;B<w.length;B++){A=w[B];H.save();F.fx.plotSubtree(A,C,G,I);H.restore()}},getSiblings:function(w){var x={};c.each(w,function(A){var z=A.getParents();if(z.length==0){x[A.id]=[A]}else{var y=[];z[0].eachSubnode(function(B){y.push(B)});x[A.id]=y}});return x}});$jit.ST.Geom=new q({Implements:e.Geom,switchOrientation:function(w){this.config.orientation=w},dispatch:function(){var x=Array.prototype.slice.call(arguments);var y=x.shift(),w=x.length;var z=function(A){return typeof A==\\\"function\\\"?A():A};if(w==2){return(y==\\\"top\\\"||y==\\\"bottom\\\")?z(x[0]):z(x[1])}else{if(w==4){switch(y){case\\\"top\\\":return z(x[0]);case\\\"right\\\":return z(x[1]);case\\\"bottom\\\":return z(x[2]);case\\\"left\\\":return z(x[3])}}}return undefined},getSize:function(E,D){var C=E.data,z=this.config;var y=z.siblingOffset;var B=(z.multitree&&(\\\"$orn\\\" in C)&&C.$orn)||z.orientation;var x=E.getData(\\\"width\\\")+y;var A=E.getData(\\\"height\\\")+y;if(!D){return this.dispatch(B,A,x)}else{return this.dispatch(B,x,A)}},getTreeBaseSize:function(A,B,x){var y=this.getSize(A,true),w=0,z=this;if(x(B,A)){return y}if(B===0){return 0}A.eachSubnode(function(C){w+=z.getTreeBaseSize(C,B-1,x)});return(y>w?y:w)+this.config.subtreeOffset},getEdge:function(C,B,A){var y=function(E,w){return function(){return C.pos.add(new p(E,w))}};var D=this.node;var x=C.getData(\\\"width\\\");var z=C.getData(\\\"height\\\");if(B==\\\"begin\\\"){if(D.align==\\\"center\\\"){return this.dispatch(A,y(0,z/2),y(-x/2,0),y(0,-z/2),y(x/2,0))}else{if(D.align==\\\"left\\\"){return this.dispatch(A,y(0,z),y(0,0),y(0,0),y(x,0))}else{if(D.align==\\\"right\\\"){return this.dispatch(A,y(0,0),y(-x,0),y(0,-z),y(0,0))}else{throw\\\"align: not implemented\\\"}}}}else{if(B==\\\"end\\\"){if(D.align==\\\"center\\\"){return this.dispatch(A,y(0,-z/2),y(x/2,0),y(0,z/2),y(-x/2,0))}else{if(D.align==\\\"left\\\"){return this.dispatch(A,y(0,0),y(x,0),y(0,z),y(0,0))}else{if(D.align==\\\"right\\\"){return this.dispatch(A,y(0,-z),y(0,0),y(0,0),y(-x,0))}else{throw\\\"align: not implemented\\\"}}}}}},getScaledTreePosition:function(B,D){var C=this.node;var x=B.getData(\\\"width\\\");var A=B.getData(\\\"height\\\");var z=(this.config.multitree&&(\\\"$orn\\\" in B.data)&&B.data.$orn)||this.config.orientation;var y=function(E,w){return function(){return B.pos.add(new p(E,w)).$scale(1-D)}};if(C.align==\\\"left\\\"){return this.dispatch(z,y(0,A),y(0,0),y(0,0),y(x,0))}else{if(C.align==\\\"center\\\"){return this.dispatch(z,y(0,A/2),y(-x/2,0),y(0,-A/2),y(x/2,0))}else{if(C.align==\\\"right\\\"){return this.dispatch(z,y(0,0),y(-x,0),y(0,-A),y(0,0))}else{throw\\\"align: not implemented\\\"}}}},treeFitsInCanvas:function(B,w,C){var y=w.getSize();var z=(this.config.multitree&&(\\\"$orn\\\" in B.data)&&B.data.$orn)||this.config.orientation;var x=this.dispatch(z,y.width,y.height);var A=this.getTreeBaseSize(B,C,function(E,D){return E===0||!D.anySubnode()});return(A<x)}});$jit.ST.Plot=new q({Implements:e.Plot,plotSubtree:function(z,w,A,E){var C=this.viz,x=C.canvas,y=C.config;A=Math.min(Math.max(0.001,A),1);if(A>=0){z.drawn=false;var D=x.getCtx();var B=C.geom.getScaledTreePosition(z,A);D.translate(B.x,B.y);D.scale(A,A)}this.plotTree(z,c.merge(w,{withLabels:true,hideLabels:!!A,plotSubtree:function(I,G){var F=y.multitree&&!(\\\"$orn\\\" in z.data);var H=F&&z.getData(\\\"orns\\\");return !F||H.indexOf(z.getData(\\\"orn\\\"))>-1}}),E);if(A>=0){z.drawn=true}},getAlignedPos:function(B,z,w){var y=this.node;var A,x;if(y.align==\\\"center\\\"){A={x:B.x-z/2,y:B.y-w/2}}else{if(y.align==\\\"left\\\"){x=this.config.orientation;if(x==\\\"bottom\\\"||x==\\\"top\\\"){A={x:B.x-z/2,y:B.y}}else{A={x:B.x,y:B.y-w/2}}}else{if(y.align==\\\"right\\\"){x=this.config.orientation;if(x==\\\"bottom\\\"||x==\\\"top\\\"){A={x:B.x-z/2,y:B.y-w}}else{A={x:B.x-z,y:B.y-w/2}}}else{throw\\\"align: not implemented\\\"}}}return A},getOrientation:function(w){var y=this.config;var x=y.orientation;if(y.multitree){var z=w.nodeFrom;var A=w.nodeTo;x=((\\\"$orn\\\" in z.data)&&z.data.$orn)||((\\\"$orn\\\" in A.data)&&A.data.$orn)}return x}});$jit.ST.Label={};$jit.ST.Label.Native=new q({Implements:e.Label.Native,renderLabel:function(z,B,y){var x=z.getCtx(),D=B.pos.getc(true),A=B.getData(\\\"width\\\"),w=B.getData(\\\"height\\\"),C=this.viz.fx.getAlignedPos(D,A,w);x.fillText(B.name,C.x+A/2,C.y+w/2)}});$jit.ST.Label.DOM=new q({Implements:e.Label.DOM,placeLabel:function(P,J,F){var B=J.pos.getc(true),O=this.viz.config,K=O.Node,x=this.viz.canvas,C=J.getData(\\\"width\\\"),M=J.getData(\\\"height\\\"),y=x.getSize(),G,N;var A=x.translateOffsetX,z=x.translateOffsetY,E=x.scaleOffsetX,D=x.scaleOffsetY,I=B.x*E+A,H=B.y*D+z;if(K.align==\\\"center\\\"){G={x:Math.round(I-C/2+y.width/2),y:Math.round(H-M/2+y.height/2)}}else{if(K.align==\\\"left\\\"){N=O.orientation;if(N==\\\"bottom\\\"||N==\\\"top\\\"){G={x:Math.round(I-C/2+y.width/2),y:Math.round(H+y.height/2)}}else{G={x:Math.round(I+y.width/2),y:Math.round(H-M/2+y.height/2)}}}else{if(K.align==\\\"right\\\"){N=O.orientation;if(N==\\\"bottom\\\"||N==\\\"top\\\"){G={x:Math.round(I-C/2+y.width/2),y:Math.round(H-M+y.height/2)}}else{G={x:Math.round(I-C+y.width/2),y:Math.round(H-M/2+y.height/2)}}}else{throw\\\"align: not implemented\\\"}}}var L=P.style;L.left=G.x+\\\"px\\\";L.top=G.y+\\\"px\\\";L.display=this.fitsInCanvas(G,x)?\\\"\\\":\\\"none\\\";F.onPlaceLabel(P,J)}});$jit.ST.Label.SVG=new q({Implements:[$jit.ST.Label.DOM,e.Label.SVG],initialize:function(w){this.viz=w}});$jit.ST.Label.HTML=new q({Implements:[$jit.ST.Label.DOM,e.Label.HTML],initialize:function(w){this.viz=w}});$jit.ST.Plot.NodeTypes=new q({none:{render:c.empty,contains:c.lambda(false)},circle:{render:function(x,w){var z=x.getData(\\\"dim\\\"),A=this.getAlignedPos(x.pos.getc(true),z,z),y=z/2;this.nodeHelper.circle.render(\\\"fill\\\",{x:A.x+y,y:A.y+y},y,w)},contains:function(w,A){var y=w.getData(\\\"dim\\\"),z=this.getAlignedPos(w.pos.getc(true),y,y),x=y/2;this.nodeHelper.circle.contains({x:z.x+x,y:z.y+x},A,x)}},square:{render:function(x,w){var z=x.getData(\\\"dim\\\"),y=z/2,A=this.getAlignedPos(x.pos.getc(true),z,z);this.nodeHelper.square.render(\\\"fill\\\",{x:A.x+y,y:A.y+y},y,w)},contains:function(w,A){var y=w.getData(\\\"dim\\\"),z=this.getAlignedPos(w.pos.getc(true),y,y),x=y/2;this.nodeHelper.square.contains({x:z.x+x,y:z.y+x},A,x)}},ellipse:{render:function(z,x){var y=z.getData(\\\"width\\\"),w=z.getData(\\\"height\\\"),A=this.getAlignedPos(z.pos.getc(true),y,w);this.nodeHelper.ellipse.render(\\\"fill\\\",{x:A.x+y/2,y:A.y+w/2},y,w,x)},contains:function(y,A){var x=y.getData(\\\"width\\\"),w=y.getData(\\\"height\\\"),z=this.getAlignedPos(y.pos.getc(true),x,w);this.nodeHelper.ellipse.contains({x:z.x+x/2,y:z.y+w/2},A,x,w)}},rectangle:{render:function(z,x){var y=z.getData(\\\"width\\\"),w=z.getData(\\\"height\\\"),A=this.getAlignedPos(z.pos.getc(true),y,w);this.nodeHelper.rectangle.render(\\\"fill\\\",{x:A.x+y/2,y:A.y+w/2},y,w,x)},contains:function(y,A){var x=y.getData(\\\"width\\\"),w=y.getData(\\\"height\\\"),z=this.getAlignedPos(y.pos.getc(true),x,w);this.nodeHelper.rectangle.contains({x:z.x+x/2,y:z.y+w/2},A,x,w)}}});$jit.ST.Plot.EdgeTypes=new q({none:c.empty,line:{render:function(x,z){var y=this.getOrientation(x),A=x.nodeFrom,B=x.nodeTo,w=A._depth<B._depth,D=this.viz.geom.getEdge(w?A:B,\\\"begin\\\",y),C=this.viz.geom.getEdge(w?B:A,\\\"end\\\",y);this.edgeHelper.line.render(D,C,z)},contains:function(x,D){var y=this.getOrientation(x),z=x.nodeFrom,A=x.nodeTo,w=z._depth<A._depth,C=this.viz.geom.getEdge(w?z:A,\\\"begin\\\",y),B=this.viz.geom.getEdge(w?A:z,\\\"end\\\",y);return this.edgeHelper.line.contains(C,B,D,this.edge.epsilon)}},arrow:{render:function(C,x){var B=this.getOrientation(C),y=C.nodeFrom,w=C.nodeTo,A=C.getData(\\\"dim\\\"),E=this.viz.geom.getEdge(y,\\\"begin\\\",B),F=this.viz.geom.getEdge(w,\\\"end\\\",B),D=C.data.$direction,z=(D&&D.length>1&&D[0]!=y.id);this.edgeHelper.arrow.render(E,F,A,z,x)},contains:function(x,D){var y=this.getOrientation(x),z=x.nodeFrom,A=x.nodeTo,w=z._depth<A._depth,C=this.viz.geom.getEdge(w?z:A,\\\"begin\\\",y),B=this.viz.geom.getEdge(w?A:z,\\\"end\\\",y);\\n return this.edgeHelper.arrow.contains(C,B,D,this.edge.epsilon)}},\\\"quadratic:begin\\\":{render:function(C,w){var B=this.getOrientation(C);var A=C.nodeFrom,D=C.nodeTo,F=A._depth<D._depth,x=this.viz.geom.getEdge(F?A:D,\\\"begin\\\",B),y=this.viz.geom.getEdge(F?D:A,\\\"end\\\",B),z=C.getData(\\\"dim\\\"),E=w.getCtx();E.beginPath();E.moveTo(x.x,x.y);switch(B){case\\\"left\\\":E.quadraticCurveTo(x.x+z,x.y,y.x,y.y);break;case\\\"right\\\":E.quadraticCurveTo(x.x-z,x.y,y.x,y.y);break;case\\\"top\\\":E.quadraticCurveTo(x.x,x.y+z,y.x,y.y);break;case\\\"bottom\\\":E.quadraticCurveTo(x.x,x.y-z,y.x,y.y);break}E.stroke()}},\\\"quadratic:end\\\":{render:function(C,w){var B=this.getOrientation(C);var A=C.nodeFrom,D=C.nodeTo,F=A._depth<D._depth,x=this.viz.geom.getEdge(F?A:D,\\\"begin\\\",B),y=this.viz.geom.getEdge(F?D:A,\\\"end\\\",B),z=C.getData(\\\"dim\\\"),E=w.getCtx();E.beginPath();E.moveTo(x.x,x.y);switch(B){case\\\"left\\\":E.quadraticCurveTo(y.x-z,y.y,y.x,y.y);break;case\\\"right\\\":E.quadraticCurveTo(y.x+z,y.y,y.x,y.y);break;case\\\"top\\\":E.quadraticCurveTo(y.x,y.y-z,y.x,y.y);break;case\\\"bottom\\\":E.quadraticCurveTo(y.x,y.y+z,y.x,y.y);break}E.stroke()}},bezier:{render:function(C,w){var B=this.getOrientation(C),A=C.nodeFrom,D=C.nodeTo,F=A._depth<D._depth,x=this.viz.geom.getEdge(F?A:D,\\\"begin\\\",B),y=this.viz.geom.getEdge(F?D:A,\\\"end\\\",B),z=C.getData(\\\"dim\\\"),E=w.getCtx();E.beginPath();E.moveTo(x.x,x.y);switch(B){case\\\"left\\\":E.bezierCurveTo(x.x+z,x.y,y.x-z,y.y,y.x,y.y);break;case\\\"right\\\":E.bezierCurveTo(x.x-z,x.y,y.x+z,y.y,y.x,y.y);break;case\\\"top\\\":E.bezierCurveTo(x.x,x.y+z,y.x,y.y-z,y.x,y.y);break;case\\\"bottom\\\":E.bezierCurveTo(x.x,x.y-z,y.x,y.y+z,y.x,y.y);break}E.stroke()}}});$jit.ST.Plot.NodeTypes.implement({\\\"areachart-stacked\\\":{render:function(W,D){var U=W.pos.getc(true),w=W.getData(\\\"width\\\"),A=W.getData(\\\"height\\\"),G=this.getAlignedPos(U,w,A),ab=G.x,aa=G.y,L=W.getData(\\\"stringArray\\\"),F=W.getData(\\\"dimArray\\\"),B=W.getData(\\\"valueArray\\\"),ad=c.reduce(B,function(aj,ak){return aj+ak[0]},0),ac=c.reduce(B,function(aj,ak){return aj+ak[1]},0),I=W.getData(\\\"colorArray\\\"),C=I.length,Y=W.getData(\\\"config\\\"),J=W.getData(\\\"gradient\\\"),ai=Y.showLabels,N=Y.showAggregates,ae=Y.Label,T=W.getData(\\\"prev\\\");var M=D.getCtx(),H=W.getData(\\\"border\\\");if(I&&F&&L){for(var ah=0,af=F.length,K=0,E=0,X=0;ah<af;ah++){M.fillStyle=M.strokeStyle=I[ah%C];M.save();if(J&&(F[ah][0]>0||F[ah][1]>0)){var R=K+F[ah][0],P=E+F[ah][1],ag=Math.atan((P-R)/w),Z=55;var V=M.createLinearGradient(ab+w/2,aa-(R+P)/2,ab+w/2+Z*Math.sin(ag),aa-(R+P)/2+Z*Math.cos(ag));var Q=c.rgbToHex(c.map(c.hexToRgb(I[ah%C].slice(1)),function(x){return(x*0.85)>>0}));V.addColorStop(0,I[ah%C]);V.addColorStop(1,Q);M.fillStyle=V}M.beginPath();M.moveTo(ab,aa-K);M.lineTo(ab+w,aa-E);M.lineTo(ab+w,aa-E-F[ah][1]);M.lineTo(ab,aa-K-F[ah][0]);M.lineTo(ab,aa-K);M.fill();M.restore();if(H){var S=H.name==L[ah];var z=S?0.7:0.8;var Q=c.rgbToHex(c.map(c.hexToRgb(I[ah%C].slice(1)),function(x){return(x*z)>>0}));M.strokeStyle=Q;M.lineWidth=S?4:1;M.save();M.beginPath();if(H.index===0){M.moveTo(ab,aa-K);M.lineTo(ab,aa-K-F[ah][0])}else{M.moveTo(ab+w,aa-E);M.lineTo(ab+w,aa-E-F[ah][1])}M.stroke();M.restore()}K+=(F[ah][0]||0);E+=(F[ah][1]||0);if(F[ah][0]>0){X+=(B[ah][0]||0)}}if(T&&ae.type==\\\"Native\\\"){M.save();M.beginPath();M.fillStyle=M.strokeStyle=ae.color;M.font=ae.style+\\\" \\\"+ae.size+\\\"px \\\"+ae.family;M.textAlign=\\\"center\\\";M.textBaseline=\\\"middle\\\";var O=N(W.name,ad,ac,W,X);if(O!==false){M.fillText(O!==true?O:X,ab,aa-K-Y.labelOffset-ae.size/2,w)}if(ai(W.name,ad,ac,W)){M.fillText(W.name,ab,aa+ae.size/2+Y.labelOffset)}M.restore()}}},contains:function(C,E){var J=C.pos.getc(true),z=C.getData(\\\"width\\\"),N=C.getData(\\\"height\\\"),M=this.getAlignedPos(J,z,N),L=M.x,K=M.y,O=C.getData(\\\"dimArray\\\"),w=E.x-L;if(E.x<L||E.x>L+z||E.y>K||E.y<K-N){return false}for(var F=0,D=O.length,I=K,A=K;F<D;F++){var B=O[F];I-=B[0];A-=B[1];var G=I+(A-I)*w/z;if(E.y>=G){var H=+(w>z/2);return{name:C.getData(\\\"stringArray\\\")[F],color:C.getData(\\\"colorArray\\\")[F],value:C.getData(\\\"valueArray\\\")[F][H],index:H}}}return false}}});$jit.AreaChart=new q({st:null,colors:[\\\"#416D9C\\\",\\\"#70A35E\\\",\\\"#EBB056\\\",\\\"#C74243\\\",\\\"#83548B\\\",\\\"#909291\\\",\\\"#557EAA\\\"],selected:{},busy:false,initialize:function(y){this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Margin\\\",\\\"Label\\\",\\\"AreaChart\\\"),{Label:{type:\\\"Native\\\"}},y);var z=this.config.showLabels,x=c.type(z),A=this.config.showAggregates,w=c.type(A);this.config.showLabels=x==\\\"function\\\"?z:c.lambda(z);this.config.showAggregates=w==\\\"function\\\"?A:c.lambda(A);this.initializeViz()},initializeViz:function(){var x=this.config,B=this,w=x.type.split(\\\":\\\")[0],A={};var z=new $jit.ST({injectInto:x.injectInto,width:x.width,height:x.height,orientation:\\\"bottom\\\",levelDistance:0,siblingOffset:0,subtreeOffset:0,withLabels:x.Label.type!=\\\"Native\\\",useCanvas:x.useCanvas,Label:{type:x.Label.type},Node:{overridable:true,type:\\\"areachart-\\\"+w,align:\\\"left\\\",width:1,height:1},Edge:{type:\\\"none\\\"},Tips:{enable:x.Tips.enable,type:\\\"Native\\\",force:true,onShow:function(G,F,D){var E=D;x.Tips.onShow(G,E,F)}},Events:{enable:true,type:\\\"Native\\\",onClick:function(F,G,D){if(!x.filterOnClick&&!x.Events.enable){return}var E=G.getContains();if(E){x.filterOnClick&&B.filter(E.name)}x.Events.enable&&x.Events.onClick(E,G,D)},onRightClick:function(E,F,D){if(!x.restoreOnRightClick){return}B.restore()},onMouseMove:function(F,G,D){if(!x.selectOnHover){return}if(F){var E=G.getContains();B.select(F.id,E.name,E.index)}else{B.select(false,false,false)}}},onCreateLabel:function(J,G){var P=x.Label,O=G.getData(\\\"valueArray\\\"),H=c.reduce(O,function(Q,R){return Q+R[0]},0),M=c.reduce(O,function(Q,R){return Q+R[1]},0);if(G.getData(\\\"prev\\\")){var L={wrapper:doc.createElement(\\\"div\\\"),aggregate:doc.createElement(\\\"div\\\"),label:doc.createElement(\\\"div\\\")};var D=L.wrapper,N=L.label,E=L.aggregate,F=D.style,K=N.style,I=E.style;A[G.id]=L;D.appendChild(N);D.appendChild(E);if(!x.showLabels(G.name,H,M,G)){N.style.display=\\\"none\\\"}if(!x.showAggregates(G.name,H,M,G)){E.style.display=\\\"none\\\"}F.position=\\\"relative\\\";F.overflow=\\\"visible\\\";F.fontSize=P.size+\\\"px\\\";F.fontFamily=P.family;F.color=P.color;F.textAlign=\\\"center\\\";I.position=K.position=\\\"absolute\\\";J.style.width=G.getData(\\\"width\\\")+\\\"px\\\";J.style.height=G.getData(\\\"height\\\")+\\\"px\\\";N.innerHTML=G.name;J.appendChild(D)}},onPlaceLabel:function(V,P){if(!P.getData(\\\"prev\\\")){return}var T=A[P.id],E=T.wrapper.style,D=T.label.style,O=T.aggregate.style,M=P.getData(\\\"width\\\"),K=P.getData(\\\"height\\\"),J=P.getData(\\\"dimArray\\\"),G=P.getData(\\\"valueArray\\\"),L=c.reduce(G,function(W,X){return W+X[0]},0),H=c.reduce(G,function(W,X){return W+X[1]},0),I=parseInt(E.fontSize,10),N=V.style;if(J&&G){if(x.showLabels(P.name,L,H,P)){D.display=\\\"\\\"}else{D.display=\\\"none\\\"}var F=x.showAggregates(P.name,L,H,P);if(F!==false){O.display=\\\"\\\"}else{O.display=\\\"none\\\"}E.width=O.width=D.width=V.style.width=M+\\\"px\\\";O.left=D.left=-M/2+\\\"px\\\";for(var S=0,Q=G.length,R=0,U=0;S<Q;S++){if(J[S][0]>0){R+=G[S][0];U+=J[S][0]}}O.top=(-I-x.labelOffset)+\\\"px\\\";D.top=(x.labelOffset+U)+\\\"px\\\";V.style.top=parseInt(V.style.top,10)-U+\\\"px\\\";V.style.height=E.height=U+\\\"px\\\";T.aggregate.innerHTML=F!==true?F:R}}});var y=z.canvas.getSize(),C=x.Margin;z.config.offsetY=-y.height/2+C.bottom+(x.showLabels&&(x.labelOffset+x.Label.size));z.config.offsetX=(C.right-C.left)/2;this.delegate=z;this.canvas=this.delegate.canvas},loadJSON:function(N){var J=c.time(),B=[],M=this.delegate,Q=c.splat(N.label),I=c.splat(N.color||this.colors),O=this.config,x=!!O.type.split(\\\":\\\")[1],z=O.animate;for(var K=0,y=N.values,H=y.length;K<H-1;K++){var P=y[K],E=y[K-1],F=y[K+1];var L=c.splat(y[K].values),w=c.splat(y[K+1].values);var A=c.zip(L,w);var D=0,C=0;B.push({id:J+P.label,name:P.label,data:{value:A,\\\"$valueArray\\\":A,\\\"$colorArray\\\":I,\\\"$stringArray\\\":Q,\\\"$next\\\":F.label,\\\"$prev\\\":E?E.label:false,\\\"$config\\\":O,\\\"$gradient\\\":x},children:[]})}var G={id:J+\\\"$root\\\",name:\\\"\\\",data:{\\\"$type\\\":\\\"none\\\",\\\"$width\\\":1,\\\"$height\\\":1},children:B};M.loadJSON(G);this.normalizeDims();M.compute();M.select(M.root);if(z){M.fx.animate({modes:[\\\"node-property:height:dimArray\\\"],duration:1500})}},updateJSON:function(G,x){if(this.busy){return}this.busy=true;var D=this.delegate,F=D.graph,A=G.label&&c.splat(G.label),E=G.values,w=this.config.animate,C=this,B={};for(var z=0,y=E.length;z<y;z++){B[E[z].label]=E[z]}F.eachNode(function(L){var H=B[L.name],I=L.getData(\\\"stringArray\\\"),K=L.getData(\\\"valueArray\\\"),J=L.getData(\\\"next\\\");if(H){H.values=c.splat(H.values);c.each(K,function(M,N){M[0]=H.values[N];if(A){I[N]=A[N]}});L.setData(\\\"valueArray\\\",K)}if(J){H=B[J];if(H){c.each(K,function(M,N){M[1]=H.values[N]})}}});this.normalizeDims();D.compute();D.select(D.root);if(w){D.fx.animate({modes:[\\\"node-property:height:dimArray\\\"],duration:1500,onComplete:function(){C.busy=false;x&&x.onComplete()}})}},filter:function(z,A){if(this.busy){return}this.busy=true;if(this.config.Tips.enable){this.delegate.tips.hide()}this.select(false,false,false);var x=c.splat(z);var w=this.delegate.graph.getNode(this.delegate.root);var y=this;this.normalizeDims();w.eachAdjacency(function(B){var E=B.nodeTo,D=E.getData(\\\"dimArray\\\",\\\"end\\\"),C=E.getData(\\\"stringArray\\\");E.setData(\\\"dimArray\\\",c.map(D,function(G,F){return(c.indexOf(x,C[F])>-1)?G:[0,0]}),\\\"end\\\")});this.delegate.fx.animate({modes:[\\\"node-property:dimArray\\\"],duration:1500,onComplete:function(){y.busy=false;A&&A.onComplete()}})},restore:function(x){if(this.busy){return}this.busy=true;if(this.config.Tips.enable){this.delegate.tips.hide()}this.select(false,false,false);this.normalizeDims();var w=this;this.delegate.fx.animate({modes:[\\\"node-property:height:dimArray\\\"],duration:1500,onComplete:function(){w.busy=false;x&&x.onComplete()}})},select:function(B,x,w){if(!this.config.selectOnHover){return}var y=this.selected;if(y.id!=B||y.name!=x||y.index!=w){y.id=B;y.name=x;y.index=w;this.delegate.graph.eachNode(function(C){C.setData(\\\"border\\\",false)});if(B){var A=this.delegate.graph.getNode(B);A.setData(\\\"border\\\",y);var z=w===0?\\\"prev\\\":\\\"next\\\";z=A.getData(z);if(z){A=this.delegate.graph.getByName(z);if(A){A.setData(\\\"border\\\",{name:x,index:1-w})}}}this.delegate.plot()}},getLegend:function(){var y={};var z;this.delegate.graph.getNode(this.delegate.root).eachAdjacency(function(A){z=A.nodeTo});var x=z.getData(\\\"colorArray\\\"),w=x.length;c.each(z.getData(\\\"stringArray\\\"),function(B,A){y[B]=x[A%w]});return y},getMaxValue:function(){var w=0;this.delegate.graph.eachNode(function(B){var y=B.getData(\\\"valueArray\\\"),x=0,A=0;c.each(y,function(C){x+=+C[0];A+=+C[1]});var z=A>x?A:x;w=w>z?w:z});return w},normalizeDims:function(){var C=this.delegate.graph.getNode(this.delegate.root),z=0;C.eachAdjacency(function(){z++});var B=this.getMaxValue()||1,F=this.delegate.canvas.getSize(),y=this.config,A=y.Margin,D=y.labelOffset+y.Label.size,w=(F.width-(A.left+A.right))/z,x=y.animate,E=F.height-(A.top+A.bottom)-(y.showAggregates&&D)-(y.showLabels&&D);this.delegate.graph.eachNode(function(L){var I=0,K=0,G=[];c.each(L.getData(\\\"valueArray\\\"),function(M){I+=+M[0];K+=+M[1];G.push([0,0])});var J=K>I?K:I;L.setData(\\\"width\\\",w);if(x){L.setData(\\\"height\\\",J*E/B,\\\"end\\\");L.setData(\\\"dimArray\\\",c.map(L.getData(\\\"valueArray\\\"),function(M){return[M[0]*E/B,M[1]*E/B]}),\\\"end\\\");var H=L.getData(\\\"dimArray\\\");if(!H){L.setData(\\\"dimArray\\\",G)}}else{L.setData(\\\"height\\\",J*E/B);L.setData(\\\"dimArray\\\",c.map(L.getData(\\\"valueArray\\\"),function(M){return[M[0]*E/B,M[1]*E/B]}))}})}});n.BarChart={$extend:true,animate:true,type:\\\"stacked\\\",labelOffset:3,barsOffset:0,hoveredColor:\\\"#9fd4ff\\\",orientation:\\\"horizontal\\\",showAggregates:true,showLabels:true,Tips:{enable:false,onShow:c.empty,onHide:c.empty},Events:{enable:false,onClick:c.empty}};$jit.ST.Plot.NodeTypes.implement({\\\"barchart-stacked\\\":{render:function(R,C){var H=R.pos.getc(true),Q=R.getData(\\\"width\\\"),O=R.getData(\\\"height\\\"),M=this.getAlignedPos(H,Q,O),L=M.x,K=M.y,N=R.getData(\\\"dimArray\\\"),F=R.getData(\\\"valueArray\\\"),E=R.getData(\\\"colorArray\\\"),B=E.length,Y=R.getData(\\\"stringArray\\\");var T=C.getCtx(),w={},U=R.getData(\\\"border\\\"),z=R.getData(\\\"gradient\\\"),aa=R.getData(\\\"config\\\"),A=aa.orientation==\\\"horizontal\\\",D=aa.showAggregates,P=aa.showLabels,J=aa.Label;if(E&&N&&Y){for(var X=0,S=N.length,W=0,G=0;X<S;X++){T.fillStyle=T.strokeStyle=E[X%B];if(z){var Z;if(A){Z=T.createLinearGradient(L+W+N[X]/2,K,L+W+N[X]/2,K+O)}else{Z=T.createLinearGradient(L,K-W-N[X]/2,L+Q,K-W-N[X]/2)}var V=c.rgbToHex(c.map(c.hexToRgb(E[X%B].slice(1)),function(x){return(x*0.5)>>0}));Z.addColorStop(0,V);Z.addColorStop(0.5,E[X%B]);Z.addColorStop(1,V);T.fillStyle=Z}if(A){T.fillRect(L+W,K,N[X],O)}else{T.fillRect(L,K-W-N[X],Q,N[X])}if(U&&U.name==Y[X]){w.acum=W;w.dimValue=N[X]}W+=(N[X]||0);G+=(F[X]||0)}if(U){T.save();T.lineWidth=2;T.strokeStyle=U.color;if(A){T.strokeRect(L+w.acum+1,K+1,w.dimValue-2,O-2)}else{T.strokeRect(L+1,K-w.acum-w.dimValue+1,Q-2,w.dimValue-2)}T.restore()}if(J.type==\\\"Native\\\"){T.save();T.fillStyle=T.strokeStyle=J.color;T.font=J.style+\\\" \\\"+J.size+\\\"px \\\"+J.family;T.textBaseline=\\\"middle\\\";var I=D(R.name,G,R);if(I!==false){I=I!==true?I:G;if(A){T.textAlign=\\\"right\\\";T.fillText(I,L+W-aa.labelOffset,K+O/2)}else{T.textAlign=\\\"center\\\";T.fillText(I,L+Q/2,K-O-J.size/2-aa.labelOffset)}}if(P(R.name,G,R)){if(A){T.textAlign=\\\"center\\\";T.translate(L-aa.labelOffset-J.size/2,K+O/2);T.rotate(Math.PI/2);T.fillText(R.name,0,0)}else{T.textAlign=\\\"center\\\";T.fillText(R.name,L+Q/2,K+J.size/2+aa.labelOffset)}}T.restore()}}},contains:function(D,F){var I=D.pos.getc(true),A=D.getData(\\\"width\\\"),N=D.getData(\\\"height\\\"),M=this.getAlignedPos(I,A,N),L=M.x,J=M.y,O=D.getData(\\\"dimArray\\\"),B=D.getData(\\\"config\\\"),z=F.x-L,w=B.orientation==\\\"horizontal\\\";if(w){if(F.x<L||F.x>L+A||F.y>J+N||F.y<J){return false}}else{if(F.x<L||F.x>L+A||F.y>J||F.y<J-N){return false}}for(var G=0,E=O.length,K=(w?L:J);G<E;G++){var C=O[G];if(w){K+=C;var H=K;if(F.x<=H){return{name:D.getData(\\\"stringArray\\\")[G],color:D.getData(\\\"colorArray\\\")[G],value:D.getData(\\\"valueArray\\\")[G],label:D.name}}}else{K-=C;var H=K;if(F.y>=H){return{name:D.getData(\\\"stringArray\\\")[G],color:D.getData(\\\"colorArray\\\")[G],value:D.getData(\\\"valueArray\\\")[G],label:D.name}}}}return false}},\\\"barchart-grouped\\\":{render:function(S,C){var I=S.pos.getc(true),R=S.getData(\\\"width\\\"),P=S.getData(\\\"height\\\"),N=this.getAlignedPos(I,R,P),M=N.x,L=N.y,O=S.getData(\\\"dimArray\\\"),G=S.getData(\\\"valueArray\\\"),Y=G.length,F=S.getData(\\\"colorArray\\\"),B=F.length,aa=S.getData(\\\"stringArray\\\");var U=C.getCtx(),w={},V=S.getData(\\\"border\\\"),z=S.getData(\\\"gradient\\\"),ac=S.getData(\\\"config\\\"),A=ac.orientation==\\\"horizontal\\\",E=ac.showAggregates,Q=ac.showLabels,K=ac.Label,D=(A?P:R)/Y;if(F&&O&&aa){for(var Z=0,T=Y,X=0,H=0;Z<T;Z++){U.fillStyle=U.strokeStyle=F[Z%B];if(z){var ab;if(A){ab=U.createLinearGradient(M+O[Z]/2,L+D*Z,M+O[Z]/2,L+D*(Z+1))}else{ab=U.createLinearGradient(M+D*Z,L-O[Z]/2,M+D*(Z+1),L-O[Z]/2)}var W=c.rgbToHex(c.map(c.hexToRgb(F[Z%B].slice(1)),function(x){return(x*0.5)>>0}));ab.addColorStop(0,W);ab.addColorStop(0.5,F[Z%B]);ab.addColorStop(1,W);U.fillStyle=ab}if(A){U.fillRect(M,L+D*Z,O[Z],D)}else{U.fillRect(M+D*Z,L-O[Z],D,O[Z])}if(V&&V.name==aa[Z]){w.acum=D*Z;w.dimValue=O[Z]}X+=(O[Z]||0);H+=(G[Z]||0)}if(V){U.save();U.lineWidth=2;U.strokeStyle=V.color;if(A){U.strokeRect(M+1,L+w.acum+1,w.dimValue-2,D-2)}else{U.strokeRect(M+w.acum+1,L-w.dimValue+1,D-2,w.dimValue-2)}U.restore()}if(K.type==\\\"Native\\\"){U.save();U.fillStyle=U.strokeStyle=K.color;U.font=K.style+\\\" \\\"+K.size+\\\"px \\\"+K.family;U.textBaseline=\\\"middle\\\";var J=E(S.name,H,S);if(J!==false){J=J!==true?J:H;if(A){U.textAlign=\\\"right\\\";U.fillText(J,M+Math.max.apply(null,O)-ac.labelOffset,L+P/2)}else{U.textAlign=\\\"center\\\";U.fillText(J,M+R/2,L-Math.max.apply(null,O)-K.size/2-ac.labelOffset)}}if(Q(S.name,H,S)){if(A){U.textAlign=\\\"center\\\";U.translate(M-ac.labelOffset-K.size/2,L+P/2);U.rotate(Math.PI/2);U.fillText(S.name,0,0)}else{U.textAlign=\\\"center\\\";\\n U.fillText(S.name,M+R/2,L+K.size/2+ac.labelOffset)}}U.restore()}}},contains:function(J,F){var B=J.pos.getc(true),I=J.getData(\\\"width\\\"),H=J.getData(\\\"height\\\"),E=this.getAlignedPos(B,I,H),D=E.x,C=E.y,G=J.getData(\\\"dimArray\\\"),M=G.length,P=J.getData(\\\"config\\\"),A=F.x-D,w=P.orientation==\\\"horizontal\\\",z=(w?H:I)/M;if(w){if(F.x<D||F.x>D+I||F.y>C+H||F.y<C){return false}}else{if(F.x<D||F.x>D+I||F.y>C||F.y<C-H){return false}}for(var L=0,K=G.length;L<K;L++){var O=G[L];if(w){var N=C+z*L;if(F.x<=D+O&&F.y>=N&&F.y<=N+z){return{name:J.getData(\\\"stringArray\\\")[L],color:J.getData(\\\"colorArray\\\")[L],value:J.getData(\\\"valueArray\\\")[L],label:J.name}}}else{var N=D+z*L;if(F.x>=N&&F.x<=N+z&&F.y>=C-O){return{name:J.getData(\\\"stringArray\\\")[L],color:J.getData(\\\"colorArray\\\")[L],value:J.getData(\\\"valueArray\\\")[L],label:J.name}}}}return false}}});$jit.BarChart=new q({st:null,colors:[\\\"#416D9C\\\",\\\"#70A35E\\\",\\\"#EBB056\\\",\\\"#C74243\\\",\\\"#83548B\\\",\\\"#909291\\\",\\\"#557EAA\\\"],selected:{},busy:false,initialize:function(y){this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Margin\\\",\\\"Label\\\",\\\"BarChart\\\"),{Label:{type:\\\"Native\\\"}},y);var z=this.config.showLabels,x=c.type(z),A=this.config.showAggregates,w=c.type(A);this.config.showLabels=x==\\\"function\\\"?z:c.lambda(z);this.config.showAggregates=w==\\\"function\\\"?A:c.lambda(A);this.initializeViz()},initializeViz:function(){var x=this.config,B=this;var w=x.type.split(\\\":\\\")[0],D=x.orientation==\\\"horizontal\\\",A={};var z=new $jit.ST({injectInto:x.injectInto,width:x.width,height:x.height,orientation:D?\\\"left\\\":\\\"bottom\\\",levelDistance:0,siblingOffset:x.barsOffset,subtreeOffset:0,withLabels:x.Label.type!=\\\"Native\\\",useCanvas:x.useCanvas,Label:{type:x.Label.type},Node:{overridable:true,type:\\\"barchart-\\\"+w,align:\\\"left\\\",width:1,height:1},Edge:{type:\\\"none\\\"},Tips:{enable:x.Tips.enable,type:\\\"Native\\\",force:true,onShow:function(H,G,E){var F=E;x.Tips.onShow(H,F,G)}},Events:{enable:true,type:\\\"Native\\\",onClick:function(G,H,E){if(!x.Events.enable){return}var F=H.getContains();x.Events.onClick(F,H,E)},onMouseMove:function(G,H,E){if(!x.hoveredColor){return}if(G){var F=H.getContains();B.select(G.id,F.name,F.index)}else{B.select(false,false,false)}}},onCreateLabel:function(J,H){var P=x.Label,N=H.getData(\\\"valueArray\\\"),M=c.reduce(N,function(Q,R){return Q+R},0);var L={wrapper:doc.createElement(\\\"div\\\"),aggregate:doc.createElement(\\\"div\\\"),label:doc.createElement(\\\"div\\\")};var E=L.wrapper,O=L.label,F=L.aggregate,G=E.style,K=O.style,I=F.style;A[H.id]=L;E.appendChild(O);E.appendChild(F);if(!x.showLabels(H.name,M,H)){K.display=\\\"none\\\"}if(!x.showAggregates(H.name,M,H)){I.display=\\\"none\\\"}G.position=\\\"relative\\\";G.overflow=\\\"visible\\\";G.fontSize=P.size+\\\"px\\\";G.fontFamily=P.family;G.color=P.color;G.textAlign=\\\"center\\\";I.position=K.position=\\\"absolute\\\";J.style.width=H.getData(\\\"width\\\")+\\\"px\\\";J.style.height=H.getData(\\\"height\\\")+\\\"px\\\";I.left=K.left=\\\"0px\\\";O.innerHTML=H.name;J.appendChild(E)},onPlaceLabel:function(U,P){if(!A[P.id]){return}var T=A[P.id],G=T.wrapper.style,E=T.label.style,O=T.aggregate.style,V=x.type.split(\\\":\\\")[0]==\\\"grouped\\\",F=x.orientation==\\\"horizontal\\\",K=P.getData(\\\"dimArray\\\"),I=P.getData(\\\"valueArray\\\"),M=(V&&F)?Math.max.apply(null,K):P.getData(\\\"width\\\"),L=(V&&!F)?Math.max.apply(null,K):P.getData(\\\"height\\\"),J=parseInt(G.fontSize,10),N=U.style;if(K&&I){G.width=O.width=E.width=U.style.width=M+\\\"px\\\";for(var S=0,Q=I.length,R=0;S<Q;S++){if(K[S]>0){R+=I[S]}}if(x.showLabels(P.name,R,P)){E.display=\\\"\\\"}else{E.display=\\\"none\\\"}var H=x.showAggregates(P.name,R,P);if(H!==false){O.display=\\\"\\\"}else{O.display=\\\"none\\\"}if(x.orientation==\\\"horizontal\\\"){O.textAlign=\\\"right\\\";E.textAlign=\\\"left\\\";E.textIndex=O.textIndent=x.labelOffset+\\\"px\\\";O.top=E.top=(L-J)/2+\\\"px\\\";U.style.height=G.height=L+\\\"px\\\"}else{O.top=(-J-x.labelOffset)+\\\"px\\\";E.top=(x.labelOffset+L)+\\\"px\\\";U.style.top=parseInt(U.style.top,10)-L+\\\"px\\\";U.style.height=G.height=L+\\\"px\\\"}T.aggregate.innerHTML=H!==true?H:R}}});var y=z.canvas.getSize(),C=x.Margin;if(D){z.config.offsetX=y.width/2-C.left-(x.showLabels&&(x.labelOffset+x.Label.size));z.config.offsetY=(C.bottom-C.top)/2}else{z.config.offsetY=-y.height/2+C.bottom+(x.showLabels&&(x.labelOffset+x.Label.size));z.config.offsetX=(C.right-C.left)/2}this.delegate=z;this.canvas=this.delegate.canvas},loadJSON:function(K){if(this.busy){return}this.busy=true;var H=c.time(),C=[],J=this.delegate,N=c.splat(K.label),G=c.splat(K.color||this.colors),L=this.config,w=!!L.type.split(\\\":\\\")[1],z=L.animate,y=L.orientation==\\\"horizontal\\\",A=this;for(var I=0,x=K.values,E=x.length;I<E;I++){var M=x[I];var B=c.splat(x[I].values);var F=0;C.push({id:H+M.label,name:M.label,data:{value:B,\\\"$valueArray\\\":B,\\\"$colorArray\\\":G,\\\"$stringArray\\\":N,\\\"$gradient\\\":w,\\\"$config\\\":L},children:[]})}var D={id:H+\\\"$root\\\",name:\\\"\\\",data:{\\\"$type\\\":\\\"none\\\",\\\"$width\\\":1,\\\"$height\\\":1},children:C};J.loadJSON(D);this.normalizeDims();J.compute();J.select(J.root);if(z){if(y){J.fx.animate({modes:[\\\"node-property:width:dimArray\\\"],duration:1500,onComplete:function(){A.busy=false}})}else{J.fx.animate({modes:[\\\"node-property:height:dimArray\\\"],duration:1500,onComplete:function(){A.busy=false}})}}else{this.busy=false}},updateJSON:function(y,C){if(this.busy){return}this.busy=true;this.select(false,false,false);var z=this.delegate;var B=z.graph;var x=y.values;var w=this.config.animate;var A=this;var D=this.config.orientation==\\\"horizontal\\\";c.each(x,function(E){var F=B.getByName(E.label);if(F){F.setData(\\\"valueArray\\\",c.splat(E.values));if(y.label){F.setData(\\\"stringArray\\\",c.splat(y.label))}}});this.normalizeDims();z.compute();z.select(z.root);if(w){if(D){z.fx.animate({modes:[\\\"node-property:width:dimArray\\\"],duration:1500,onComplete:function(){A.busy=false;C&&C.onComplete()}})}else{z.fx.animate({modes:[\\\"node-property:height:dimArray\\\"],duration:1500,onComplete:function(){A.busy=false;C&&C.onComplete()}})}}},select:function(y,w){if(!this.config.hoveredColor){return}var x=this.selected;if(x.id!=y||x.name!=w){x.id=y;x.name=w;x.color=this.config.hoveredColor;this.delegate.graph.eachNode(function(z){if(y==z.id){z.setData(\\\"border\\\",x)}else{z.setData(\\\"border\\\",false)}});this.delegate.plot()}},getLegend:function(){var y={};var z;this.delegate.graph.getNode(this.delegate.root).eachAdjacency(function(A){z=A.nodeTo});var x=z.getData(\\\"colorArray\\\"),w=x.length;c.each(z.getData(\\\"stringArray\\\"),function(B,A){y[B]=x[A%w]});return y},getMaxValue:function(){var x=0,w=this.config.type.split(\\\":\\\")[0]==\\\"stacked\\\";this.delegate.graph.eachNode(function(A){var y=A.getData(\\\"valueArray\\\"),z=0;if(!y){return}if(w){c.each(y,function(B){z+=+B})}else{z=Math.max.apply(null,y)}x=x>z?x:z});return x},setBarType:function(w){this.config.type=w;this.delegate.config.Node.type=\\\"barchart-\\\"+w.split(\\\":\\\")[0]},normalizeDims:function(){var G=this.delegate.graph.getNode(this.delegate.root),B=0;G.eachAdjacency(function(){B++});var D=this.getMaxValue()||1,J=this.delegate.canvas.getSize(),z=this.config,C=z.Margin,H=C.left+C.right,A=C.top+C.bottom,x=z.orientation==\\\"horizontal\\\",w=(J[x?\\\"height\\\":\\\"width\\\"]-(x?A:H)-(B-1)*z.barsOffset)/B,y=z.animate,I=J[x?\\\"width\\\":\\\"height\\\"]-(x?H:A)-(!x&&z.showAggregates&&(z.Label.size+z.labelOffset))-(z.showLabels&&(z.Label.size+z.labelOffset)),F=x?\\\"height\\\":\\\"width\\\",E=x?\\\"width\\\":\\\"height\\\";this.delegate.graph.eachNode(function(N){var M=0,K=[];c.each(N.getData(\\\"valueArray\\\"),function(O){M+=+O;K.push(0)});N.setData(F,w);if(y){N.setData(E,M*I/D,\\\"end\\\");N.setData(\\\"dimArray\\\",c.map(N.getData(\\\"valueArray\\\"),function(O){return O*I/D}),\\\"end\\\");var L=N.getData(\\\"dimArray\\\");if(!L){N.setData(\\\"dimArray\\\",K)}}else{N.setData(E,M*I/D);N.setData(\\\"dimArray\\\",c.map(N.getData(\\\"valueArray\\\"),function(O){return O*I/D}))}})}});n.PieChart={$extend:true,animate:true,offset:25,sliceOffset:0,labelOffset:3,type:\\\"stacked\\\",hoveredColor:\\\"#9fd4ff\\\",Events:{enable:false,onClick:c.empty},Tips:{enable:false,onShow:c.empty,onHide:c.empty},showLabels:true,resizeLabels:false,updateHeights:false};g.Radial=new q({compute:function(x){var y=c.splat(x||[\\\"current\\\",\\\"start\\\",\\\"end\\\"]);f.compute(this.graph,y,this.config);this.graph.computeLevels(this.root,0,\\\"ignore\\\");var w=this.createLevelDistanceFunc();this.computeAngularWidths(y);this.computePositions(y,w)},computePositions:function(D,A){var F=D;var E=this.graph;var B=E.getNode(this.root);var C=this.parent;var w=this.config;for(var y=0,x=F.length;y<x;y++){var z=F[y];B.setPos(k(0,0),z);B.setData(\\\"span\\\",Math.PI*2,z)}B.angleSpan={begin:0,end:2*Math.PI};E.eachBFS(this.root,function(K){var Q=K.angleSpan.end-K.angleSpan.begin;var S=K.angleSpan.begin;var R=A(K);var T=0,G=[],J={};K.eachSubnode(function(W){T+=W._treeAngularWidth;for(var X=0,V=F.length;X<V;X++){var Z=F[X],Y=W.getData(\\\"dim\\\",Z);J[Z]=(Z in J)?(Y>J[Z]?Y:J[Z]):Y}G.push(W)},\\\"ignore\\\");if(C&&C.id==K.id&&G.length>0&&G[0].dist){G.sort(function(W,V){return(W.dist>=V.dist)-(W.dist<=V.dist)})}for(var M=0,O=G.length;M<O;M++){var I=G[M];if(!I._flag){var U=I._treeAngularWidth/T*Q;var H=S+U/2;for(var N=0,L=F.length;N<L;N++){var P=F[N];I.setPos(k(H,R),P);I.setData(\\\"span\\\",U,P);I.setData(\\\"dim-quotient\\\",I.getData(\\\"dim\\\",P)/J[P],P)}I.angleSpan={begin:S,end:S+U};S+=U}}},\\\"ignore\\\")},setAngularWidthForNodes:function(w){this.graph.eachBFS(this.root,function(z,x){var y=z.getData(\\\"angularWidth\\\",w[0])||5;z._angularWidth=y/x},\\\"ignore\\\")},setSubtreesAngularWidth:function(){var w=this;this.graph.eachNode(function(x){w.setSubtreeAngularWidth(x)},\\\"ignore\\\")},setSubtreeAngularWidth:function(z){var y=this,x=z._angularWidth,w=0;z.eachSubnode(function(A){y.setSubtreeAngularWidth(A);w+=A._treeAngularWidth},\\\"ignore\\\");z._treeAngularWidth=Math.max(x,w)},computeAngularWidths:function(w){this.setAngularWidthForNodes(w);this.setSubtreesAngularWidth()}});$jit.Sunburst=new q({Implements:[d,o,g.Radial],initialize:function(w){var y=$jit.Sunburst;var x={interpolation:\\\"linear\\\",levelDistance:100,Node:{type:\\\"multipie\\\",height:0},Edge:{type:\\\"none\\\"},Label:{textAlign:\\\"start\\\",textBaseline:\\\"middle\\\"}};this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Node\\\",\\\"Edge\\\",\\\"Fx\\\",\\\"Tips\\\",\\\"NodeStyles\\\",\\\"Events\\\",\\\"Navigation\\\",\\\"Controller\\\",\\\"Label\\\"),x,w);var z=this.config;if(z.useCanvas){this.canvas=z.useCanvas;this.config.labelContainer=this.canvas.id+\\\"-label\\\"}else{if(z.background){z.background=c.merge({type:\\\"Circles\\\"},z.background)}this.canvas=new l(this,z);this.config.labelContainer=(typeof z.injectInto==\\\"string\\\"?z.injectInto:z.injectInto.id)+\\\"-label\\\"}this.graphOptions={klass:b,Node:{selected:false,exist:true,drawn:true}};this.graph=new e(this.graphOptions,this.config.Node,this.config.Edge);this.labels=new y.Label[z.Label.type](this);this.fx=new y.Plot(this,y);this.op=new y.Op(this);this.json=null;this.root=null;this.rotated=null;this.busy=false;this.initializeExtras()},createLevelDistanceFunc:function(){var w=this.config.levelDistance;return function(x){return(x._depth+1)*w}},refresh:function(){this.compute();this.plot()},reposition:function(){this.compute(\\\"end\\\")},rotate:function(y,z,x){var w=y.getPos(x.property||\\\"current\\\").getp(true).theta;this.rotated=y;this.rotateAngle(-w,z,x)},rotateAngle:function(y,B,x){var z=this;var w=c.merge(this.config,x||{},{modes:[\\\"polar\\\"]});var A=x.property||(B===\\\"animate\\\"?\\\"end\\\":\\\"current\\\");if(B===\\\"animate\\\"){this.fx.animation.pause()}this.graph.eachNode(function(D){var C=D.getPos(A);C.theta+=y;if(C.theta<0){C.theta+=Math.PI*2}});if(B==\\\"animate\\\"){this.fx.animate(w)}else{if(B==\\\"replot\\\"){this.fx.plot();this.busy=false}}},plot:function(){this.fx.plot()}});$jit.Sunburst.$extend=true;(function(w){w.Op=new q({Implements:e.Op});w.Plot=new q({Implements:e.Plot});w.Label={};w.Label.Native=new q({Implements:e.Label.Native,initialize:function(x){this.viz=x;this.label=x.config.Label;this.config=x.config},renderLabel:function(C,E,G){var N=E.getData(\\\"span\\\");if(N<Math.PI/2&&Math.tan(N)*this.config.levelDistance*E._depth<10){return}var O=C.getCtx();var A=O.measureText(E.name);if(E.id==this.viz.root){var M=-A.width/2,K=0,L=0;var z=0}else{var D=5;var z=G.levelDistance-D;var J=E.pos.clone();J.rho+=D;var B=J.getp(true);var H=J.getc(true);var M=H.x,K=H.y;var F=Math.PI;var I=(B.theta>F/2&&B.theta<3*F/2);var L=I?B.theta+F:B.theta;if(I){M-=Math.abs(Math.cos(B.theta)*A.width);K+=Math.sin(B.theta)*A.width}else{if(E.id==this.viz.root){M-=A.width/2}}}O.save();O.translate(M,K);O.rotate(L);O.fillText(E.name,0,0);O.restore()}});w.Label.SVG=new q({Implements:e.Label.SVG,initialize:function(x){this.viz=x},placeLabel:function(N,C,E){var J=C.pos.getc(true),M=this.viz,A=this.viz.canvas;var F=A.getSize();var B={x:Math.round(J.x+F.width/2),y:Math.round(J.y+F.height/2)};N.setAttribute(\\\"x\\\",B.x);N.setAttribute(\\\"y\\\",B.y);var G=N.getBBox();if(G){var L=N.getAttribute(\\\"x\\\");var I=N.getAttribute(\\\"y\\\");var z=C.pos.getp(true);var D=Math.PI;var H=(z.theta>D/2&&z.theta<3*D/2);if(H){N.setAttribute(\\\"x\\\",L-G.width);N.setAttribute(\\\"y\\\",I-G.height)}else{if(C.id==M.root){N.setAttribute(\\\"x\\\",L-G.width/2)}}var K=H?z.theta+D:z.theta;if(C._depth){N.setAttribute(\\\"transform\\\",\\\"rotate(\\\"+K*360/(2*D)+\\\" \\\"+L+\\\" \\\"+I+\\\")\\\")}}E.onPlaceLabel(N,C)}});w.Label.HTML=new q({Implements:e.Label.HTML,initialize:function(x){this.viz=x},placeLabel:function(G,A,C){var E=A.pos.clone(),y=this.viz.canvas,F=A.getData(\\\"height\\\"),B=((F||A._depth==0)?F:this.viz.config.levelDistance)/2,D=y.getSize();E.rho+=B;E=E.getc(true);var z={x:Math.round(E.x+D.width/2),y:Math.round(E.y+D.height/2)};var x=G.style;x.left=z.x+\\\"px\\\";x.top=z.y+\\\"px\\\";x.display=this.fitsInCanvas(z,y)?\\\"\\\":\\\"none\\\";C.onPlaceLabel(G,A)}});w.Plot.NodeTypes=new q({none:{render:c.empty,contains:c.lambda(false),anglecontains:function(B,D){var A=B.getData(\\\"span\\\")/2,y=B.pos.theta;var z=y-A,x=y+A;if(z<0){z+=Math.PI*2}var C=Math.atan2(D.y,D.x);if(C<0){C+=Math.PI*2}if(z>x){return(C>z&&C<=Math.PI*2)||C<x}else{return C>z&&C<x}}},pie:{render:function(C,A){var G=C.getData(\\\"span\\\")/2,z=C.pos.theta;var B=z-G,D=z+G;var F=C.pos.getp(true);var x=new b(F.rho,B);var y=x.getc(true);x.theta=D;var E=x.getc(true);var H=A.getCtx();H.beginPath();H.moveTo(0,0);H.lineTo(y.x,y.y);H.moveTo(0,0);H.lineTo(E.x,E.y);H.moveTo(0,0);H.arc(0,0,F.rho*C.getData(\\\"dim-quotient\\\"),B,D,false);H.fill()},contains:function(z,B){if(this.nodeTypes.none.anglecontains.call(this,z,B)){var x=Math.sqrt(B.x*B.x+B.y*B.y);var y=this.config.levelDistance,A=z._depth;return(x<=y*A)}return false}},multipie:{render:function(D,B){var K=D.getData(\\\"height\\\");var E=K?K:this.config.levelDistance;var J=D.getData(\\\"span\\\")/2,A=D.pos.theta;var C=A-J,G=A+J;var I=D.pos.getp(true);var y=new b(I.rho,C);var z=y.getc(true);y.theta=G;var H=y.getc(true);y.rho+=E;var x=y.getc(true);y.theta=C;var F=y.getc(true);var L=B.getCtx();L.moveTo(0,0);L.beginPath();L.arc(0,0,I.rho,C,G,false);L.arc(0,0,I.rho+E,G,C,true);L.moveTo(z.x,z.y);L.lineTo(F.x,F.y);L.moveTo(H.x,H.y);L.lineTo(x.x,x.y);L.fill();if(D.collapsed){L.save();L.lineWidth=2;L.moveTo(0,0);L.beginPath();L.arc(0,0,I.rho+E+5,G-0.01,C+0.01,true);L.stroke();L.restore()}},contains:function(A,D){if(this.nodeTypes.none.anglecontains.call(this,A,D)){var y=Math.sqrt(D.x*D.x+D.y*D.y);var x=A.getData(\\\"height\\\");var B=x?x:this.config.levelDistance;var z=this.config.levelDistance,C=A._depth;return(y>=z*C)&&(y<=(z*C+B))}return false}},\\\"gradient-multipie\\\":{render:function(A,x){var F=x.getCtx();var E=A.getData(\\\"height\\\");var B=E?E:this.config.levelDistance;var y=F.createRadialGradient(0,0,A.getPos().rho,0,0,A.getPos().rho+B);var D=c.hexToRgb(A.getData(\\\"color\\\")),C=[];c.each(D,function(G){C.push(parseInt(G*0.5,10))});var z=c.rgbToHex(C);y.addColorStop(0,z);y.addColorStop(1,A.getData(\\\"color\\\"));F.fillStyle=y;this.nodeTypes.multipie.render.call(this,A,x)},contains:function(x,y){return this.nodeTypes.multipie.contains.call(this,x,y)}},\\\"gradient-pie\\\":{render:function(C,z){var x=z.getCtx();var D=x.createRadialGradient(0,0,0,0,0,C.getPos().rho);var B=c.hexToRgb(C.getData(\\\"color\\\")),y=[];c.each(B,function(E){y.push(parseInt(E*0.5,10))});var A=c.rgbToHex(y);D.addColorStop(1,A);D.addColorStop(0,C.getData(\\\"color\\\"));x.fillStyle=D;this.nodeTypes.pie.render.call(this,C,z)},contains:function(x,y){return this.nodeTypes.pie.contains.call(this,x,y)}}});w.Plot.EdgeTypes=new q({none:c.empty,line:{render:function(x,y){var A=x.nodeFrom.pos.getc(true),z=x.nodeTo.pos.getc(true);this.edgeHelper.line.render(A,z,y)},contains:function(x,A){var z=x.nodeFrom.pos.getc(true),y=x.nodeTo.pos.getc(true);return this.edgeHelper.line.contains(z,y,A,this.edge.epsilon)}},arrow:{render:function(y,z){var D=y.nodeFrom.pos.getc(true),C=y.nodeTo.pos.getc(true),B=y.getData(\\\"dim\\\"),A=y.data.$direction,x=(A&&A.length>1&&A[0]!=y.nodeFrom.id);this.edgeHelper.arrow.render(D,C,B,x,z)},contains:function(x,A){var z=x.nodeFrom.pos.getc(true),y=x.nodeTo.pos.getc(true);return this.edgeHelper.arrow.contains(z,y,A,this.edge.epsilon)}},hyperline:{render:function(x,y){var B=x.nodeFrom.pos.getc(),A=x.nodeTo.pos.getc(),z=Math.max(B.norm(),A.norm());this.edgeHelper.hyperline.render(B.$scale(1/z),A.$scale(1/z),z,y)},contains:c.lambda(false)}})})($jit.Sunburst);$jit.Sunburst.Plot.NodeTypes.implement({\\\"piechart-stacked\\\":{render:function(U,A){var T=U.pos.getp(true),C=U.getData(\\\"dimArray\\\"),S=U.getData(\\\"valueArray\\\"),G=U.getData(\\\"colorArray\\\"),z=G.length,M=U.getData(\\\"stringArray\\\"),P=U.getData(\\\"span\\\")/2,K=U.pos.theta,F=K-P,J=K+P,R=new b;var N=A.getCtx(),L={},I=U.getData(\\\"gradient\\\"),D=U.getData(\\\"border\\\"),Z=U.getData(\\\"config\\\"),ai=Z.showLabels,Y=Z.resizeLabels,ab=Z.Label;var ae=Z.sliceOffset*Math.cos((F+J)/2);var E=Z.sliceOffset*Math.sin((F+J)/2);if(G&&C&&M){for(\\n var af=0,ac=C.length,w=0,X=0;af<ac;af++){var B=C[af],ag=G[af%z];if(B<=0){continue}N.fillStyle=N.strokeStyle=ag;if(I&&B){var ad=N.createRadialGradient(ae,E,w+Z.sliceOffset,ae,E,w+B+Z.sliceOffset);var x=c.hexToRgb(ag),W=c.map(x,function(al){return(al*0.8)>>0}),y=c.rgbToHex(W);ad.addColorStop(0,ag);ad.addColorStop(0.5,ag);ad.addColorStop(1,y);N.fillStyle=ad}R.rho=w+Z.sliceOffset;R.theta=F;var ah=R.getc(true);R.theta=J;var O=R.getc(true);R.rho+=B;var aj=R.getc(true);R.theta=F;var Q=R.getc(true);N.beginPath();N.arc(ae,E,w+0.01,F,J,false);N.arc(ae,E,w+B+0.01,J,F,true);N.fill();if(D&&D.name==M[af]){L.acum=w;L.dimValue=C[af];L.begin=F;L.end=J}w+=(B||0);X+=(S[af]||0)}if(D){N.save();N.globalCompositeOperation=\\\"source-over\\\";N.lineWidth=2;N.strokeStyle=D.color;var aa=F<J?1:-1;N.beginPath();N.arc(ae,E,L.acum+0.01+1,L.begin,L.end,false);N.arc(ae,E,L.acum+L.dimValue+0.01-1,L.end,L.begin,true);N.closePath();N.stroke();N.restore()}if(ai&&ab.type==\\\"Native\\\"){N.save();N.fillStyle=N.strokeStyle=ab.color;var V=Y?U.getData(\\\"normalizedDim\\\"):1,H=(ab.size*V)>>0;H=H<+Y?+Y:H;N.font=ab.style+\\\" \\\"+H+\\\"px \\\"+ab.family;N.textBaseline=\\\"middle\\\";N.textAlign=\\\"center\\\";R.rho=w+Z.labelOffset+Z.sliceOffset;R.theta=U.pos.theta;var ak=R.getc(true);N.fillText(U.name,ak.x,ak.y);N.restore()}}},contains:function(z,D){if(this.nodeTypes.none.anglecontains.call(this,z,D)){var F=Math.sqrt(D.x*D.x+D.y*D.y);var w=this.config.levelDistance,C=z._depth;var x=z.getData(\\\"config\\\");if(F<=w*C+x.sliceOffset){var G=z.getData(\\\"dimArray\\\");for(var B=0,A=G.length,E=x.sliceOffset;B<A;B++){var y=G[B];if(F>=E&&F<=E+y){return{name:z.getData(\\\"stringArray\\\")[B],color:z.getData(\\\"colorArray\\\")[B],value:z.getData(\\\"valueArray\\\")[B],label:z.name}}E+=y}}return false}return false}}});$jit.PieChart=new q({sb:null,colors:[\\\"#416D9C\\\",\\\"#70A35E\\\",\\\"#EBB056\\\",\\\"#C74243\\\",\\\"#83548B\\\",\\\"#909291\\\",\\\"#557EAA\\\"],selected:{},busy:false,initialize:function(w){this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"PieChart\\\",\\\"Label\\\"),{Label:{type:\\\"Native\\\"}},w);this.initializeViz()},initializeViz:function(){var x=this.config,B=this;var w=x.type.split(\\\":\\\")[0];var A=new $jit.Sunburst({injectInto:x.injectInto,width:x.width,height:x.height,useCanvas:x.useCanvas,withLabels:x.Label.type!=\\\"Native\\\",Label:{type:x.Label.type},Node:{overridable:true,type:\\\"piechart-\\\"+w,width:1,height:1},Edge:{type:\\\"none\\\"},Tips:{enable:x.Tips.enable,type:\\\"Native\\\",force:true,onShow:function(F,E,C){var D=C;x.Tips.onShow(F,D,E)}},Events:{enable:true,type:\\\"Native\\\",onClick:function(E,F,C){if(!x.Events.enable){return}var D=F.getContains();x.Events.onClick(D,F,C)},onMouseMove:function(E,F,C){if(!x.hoveredColor){return}if(E){var D=F.getContains();B.select(E.id,D.name,D.index)}else{B.select(false,false,false)}}},onCreateLabel:function(F,E){var C=x.Label;if(x.showLabels){var D=F.style;D.fontSize=C.size+\\\"px\\\";D.fontFamily=C.family;D.color=C.color;D.textAlign=\\\"center\\\";F.innerHTML=E.name}},onPlaceLabel:function(S,M){if(!x.showLabels){return}var G=M.pos.getp(true),J=M.getData(\\\"dimArray\\\"),P=M.getData(\\\"span\\\")/2,H=M.pos.theta,R=H-P,D=H+P,U=new b;var L=x.showLabels,F=x.resizeLabels,I=x.Label;if(J){for(var Q=0,N=J.length,O=0;Q<N;Q++){O+=J[Q]}var T=F?M.getData(\\\"normalizedDim\\\"):1,C=(I.size*T)>>0;C=C<+F?+F:C;S.style.fontSize=C+\\\"px\\\";U.rho=O+x.labelOffset+x.sliceOffset;U.theta=(R+D)/2;var G=U.getc(true);var E=B.canvas.getSize();var K={x:Math.round(G.x+E.width/2),y:Math.round(G.y+E.height/2)};S.style.left=K.x+\\\"px\\\";S.style.top=K.y+\\\"px\\\"}}});var z=A.canvas.getSize(),y=Math.min;A.config.levelDistance=y(z.width,z.height)/2-x.offset-x.sliceOffset;this.delegate=A;this.canvas=this.delegate.canvas;this.canvas.getCtx().globalCompositeOperation=\\\"lighter\\\"},loadJSON:function(K){var H=c.time(),B=[],J=this.delegate,N=c.splat(K.label),D=N.length,G=c.splat(K.color||this.colors),y=G.length,L=this.config,w=!!L.type.split(\\\":\\\")[1],z=L.animate,F=D==1;for(var I=0,x=K.values,E=x.length;I<E;I++){var M=x[I];var A=c.splat(M.values);B.push({id:H+M.label,name:M.label,data:{value:A,\\\"$valueArray\\\":A,\\\"$colorArray\\\":F?c.splat(G[I%y]):G,\\\"$stringArray\\\":N,\\\"$gradient\\\":w,\\\"$config\\\":L,\\\"$angularWidth\\\":c.reduce(A,function(O,P){return O+P})},children:[]})}var C={id:H+\\\"$root\\\",name:\\\"\\\",data:{\\\"$type\\\":\\\"none\\\",\\\"$width\\\":1,\\\"$height\\\":1},children:B};J.loadJSON(C);this.normalizeDims();J.refresh();if(z){J.fx.animate({modes:[\\\"node-property:dimArray\\\"],duration:1500})}},updateJSON:function(y,C){if(this.busy){return}this.busy=true;var z=this.delegate;var B=z.graph;var x=y.values;var w=this.config.animate;var A=this;c.each(x,function(D){var F=B.getByName(D.label),E=c.splat(D.values);if(F){F.setData(\\\"valueArray\\\",E);F.setData(\\\"angularWidth\\\",c.reduce(E,function(G,H){return G+H}));if(y.label){F.setData(\\\"stringArray\\\",c.splat(y.label))}}});this.normalizeDims();if(w){z.compute(\\\"end\\\");z.fx.animate({modes:[\\\"node-property:dimArray:span\\\",\\\"linear\\\"],duration:1500,onComplete:function(){A.busy=false;C&&C.onComplete()}})}else{z.refresh()}},select:function(y,w){if(!this.config.hoveredColor){return}var x=this.selected;if(x.id!=y||x.name!=w){x.id=y;x.name=w;x.color=this.config.hoveredColor;this.delegate.graph.eachNode(function(z){if(y==z.id){z.setData(\\\"border\\\",x)}else{z.setData(\\\"border\\\",false)}});this.delegate.plot()}},getLegend:function(){var y={};var z;this.delegate.graph.getNode(this.delegate.root).eachAdjacency(function(A){z=A.nodeTo});var x=z.getData(\\\"colorArray\\\"),w=x.length;c.each(z.getData(\\\"stringArray\\\"),function(B,A){y[B]=x[A%w]});return y},getMaxValue:function(){var w=0;this.delegate.graph.eachNode(function(z){var x=z.getData(\\\"valueArray\\\"),y=0;c.each(x,function(A){y+=+A});w=w>y?w:y});return w},normalizeDims:function(){var x=this.delegate.graph.getNode(this.delegate.root),w=0;x.eachAdjacency(function(){w++});var B=this.getMaxValue()||1,A=this.config,y=A.animate,z=this.delegate.config.levelDistance;this.delegate.graph.eachNode(function(G){var F=0,C=[];c.each(G.getData(\\\"valueArray\\\"),function(H){F+=+H;C.push(1)});var E=(C.length==1)&&!A.updateHeights;if(y){G.setData(\\\"dimArray\\\",c.map(G.getData(\\\"valueArray\\\"),function(H){return E?z:(H*z/B)}),\\\"end\\\");var D=G.getData(\\\"dimArray\\\");if(!D){G.setData(\\\"dimArray\\\",C)}}else{G.setData(\\\"dimArray\\\",c.map(G.getData(\\\"valueArray\\\"),function(H){return E?z:(H*z/B)}))}G.setData(\\\"normalizedDim\\\",F/B)})}});g.TM={};g.TM.SliceAndDice=new q({compute:function(B){var x=this.graph.getNode(this.clickedNode&&this.clickedNode.id||this.root);this.controller.onBeforeCompute(x);var z=this.canvas.getSize(),y=this.config,A=z.width,w=z.height;this.graph.computeLevels(this.root,0,\\\"ignore\\\");x.getPos(B).setc(-A/2,-w/2);x.setData(\\\"width\\\",A,B);x.setData(\\\"height\\\",w+y.titleHeight,B);this.computePositions(x,x,this.layout.orientation,B);this.controller.onAfterCompute(x)},computePositions:function(F,D,P,y){var M=0;F.eachSubnode(function(R){M+=R.getData(\\\"area\\\",y)});var Q=this.config,N=Q.offset,J=F.getData(\\\"width\\\",y),H=Math.max(F.getData(\\\"height\\\",y)-Q.titleHeight,0),x=F==D?1:(D.getData(\\\"area\\\",y)/M);var I,G,L,B,A,E,C;var O=(P==\\\"h\\\");if(O){P=\\\"v\\\";I=H;G=J*x;L=\\\"height\\\";B=\\\"y\\\";A=\\\"x\\\";E=Q.titleHeight;C=0}else{P=\\\"h\\\";I=H*x;G=J;L=\\\"width\\\";B=\\\"x\\\";A=\\\"y\\\";E=0;C=Q.titleHeight}var w=D.getPos(y);D.setData(\\\"width\\\",G,y);D.setData(\\\"height\\\",I,y);var K=0,z=this;D.eachSubnode(function(S){var R=S.getPos(y);R[B]=K+w[B]+E;R[A]=w[A]+C;z.computePositions(D,S,P,y);K+=S.getData(L,y)})}});g.TM.Area={compute:function(w){w=w||\\\"current\\\";var C=this.graph.getNode(this.clickedNode&&this.clickedNode.id||this.root);this.controller.onBeforeCompute(C);var y=this.config,F=this.canvas.getSize(),x=F.width,E=F.height,D=y.offset,z=x-D,B=E-D;this.graph.computeLevels(this.root,0,\\\"ignore\\\");C.getPos(w).setc(-x/2,-E/2);C.setData(\\\"width\\\",x,w);C.setData(\\\"height\\\",E,w);var A={top:-E/2+y.titleHeight,left:-x/2,width:z,height:B-y.titleHeight};this.computePositions(C,A,w);this.controller.onAfterCompute(C)},computeDim:function(B,C,E,A,z,x){if(B.length+C.length==1){var y=(B.length==1)?B:C;this.layoutLast(y,E,A,x);return}if(B.length>=2&&C.length==0){C=[B.shift()]}if(B.length==0){if(C.length>0){this.layoutRow(C,E,A,x)}return}var D=B[0];if(z(C,E)>=z([D].concat(C),E)){this.computeDim(B.slice(1),C.concat([D]),E,A,z,x)}else{var F=this.layoutRow(C,E,A,x);this.computeDim(B,[],F.dim,F,z,x)}},worstAspectRatio:function(x,F){if(!x||x.length==0){return Number.MAX_VALUE}var y=0,G=0,B=Number.MAX_VALUE;for(var D=0,C=x.length;D<C;D++){var z=x[D]._area;y+=z;B=B<z?B:z;G=G>z?G:z}var E=F*F,A=y*y;return Math.max(E*G/A,A/(E*B))},avgAspectRatio:function(B,y){if(!B||B.length==0){return Number.MAX_VALUE}var D=0;for(var z=0,x=B.length;z<x;z++){var C=B[z]._area;var A=C/y;D+=y>A?y/A:A/y}return D/x},layoutLast:function(y,x,B,A){var z=y[0];z.getPos(A).setc(B.left,B.top);z.setData(\\\"width\\\",B.width,A);z.setData(\\\"height\\\",B.height,A)}};g.TM.Squarified=new q({Implements:g.TM.Area,computePositions:function(A,D,x){var z=this.config,F=Math.max;if(D.width>=D.height){this.layout.orientation=\\\"h\\\"}else{this.layout.orientation=\\\"v\\\"}var w=A.getSubnodes([1,1],\\\"ignore\\\");if(w.length>0){this.processChildrenLayout(A,w,D,x);for(var C=0,B=w.length;C<B;C++){var G=w[C],H=z.offset,I=F(G.getData(\\\"height\\\",x)-H-z.titleHeight,0),y=F(G.getData(\\\"width\\\",x)-H,0),E=G.getPos(x);D={width:y,height:I,top:E.y+z.titleHeight,left:E.x};this.computePositions(G,D,x)}}},processChildrenLayout:function(G,w,C,x){var A=C.width*C.height;var B,y=w.length,D=0,H=[];for(B=0;B<y;B++){H[B]=parseFloat(w[B].getData(\\\"area\\\",x));D+=H[B]}for(B=0;B<y;B++){w[B]._area=A*H[B]/D}var z=this.layout.horizontal()?C.height:C.width;w.sort(function(J,I){var K=I._area-J._area;return K?K:(I.id==J.id?0:(I.id<J.id?1:-1))});var F=[w[0]];var E=w.slice(1);this.squarify(E,F,z,C,x)},squarify:function(y,B,x,A,z){this.computeDim(y,B,x,A,this.worstAspectRatio,z)},layoutRow:function(y,x,A,z){if(this.layout.horizontal()){return this.layoutV(y,x,A,z)}else{return this.layoutH(y,x,A,z)}},layoutV:function(x,I,E,y){var J=0,A=function(w){return w};c.each(x,function(w){J+=w._area});var z=A(J/I),F=0;for(var C=0,B=x.length;C<B;C++){var D=A(x[C]._area/z);var G=x[C];G.getPos(y).setc(E.left,E.top+F);G.setData(\\\"width\\\",z,y);G.setData(\\\"height\\\",D,y);F+=D}var H={height:E.height,width:E.width-z,top:E.top,left:E.left+z};H.dim=Math.min(H.width,H.height);if(H.dim!=H.height){this.layout.change()}return H},layoutH:function(x,G,C,y){var I=0;c.each(x,function(w){I+=w._area});var H=I/G,D=C.top,z=0;for(var B=0,A=x.length;B<A;B++){var E=x[B];var G=E._area/H;E.getPos(y).setc(C.left+z,D);E.setData(\\\"width\\\",G,y);E.setData(\\\"height\\\",H,y);z+=G}var F={height:C.height-H,width:C.width,top:C.top+H,left:C.left};F.dim=Math.min(F.width,F.height);if(F.dim!=F.width){this.layout.change()}return F}});g.TM.Strip=new q({Implements:g.TM.Area,computePositions:function(A,D,x){var w=A.getSubnodes([1,1],\\\"ignore\\\"),z=this.config,F=Math.max;if(w.length>0){this.processChildrenLayout(A,w,D,x);for(var C=0,B=w.length;C<B;C++){var G=w[C];var H=z.offset,I=F(G.getData(\\\"height\\\",x)-H-z.titleHeight,0),y=F(G.getData(\\\"width\\\",x)-H,0);var E=G.getPos(x);D={width:y,height:I,top:E.y+z.titleHeight,left:E.x};this.computePositions(G,D,x)}}},processChildrenLayout:function(G,w,B,x){var z=B.width*B.height;var A,y=w.length,C=0,H=[];for(A=0;A<y;A++){H[A]=+w[A].getData(\\\"area\\\",x);C+=H[A]}for(A=0;A<y;A++){w[A]._area=z*H[A]/C}var F=this.layout.horizontal()?B.width:B.height;var E=[w[0]];var D=w.slice(1);this.stripify(D,E,F,B,x)},stripify:function(y,B,x,A,z){this.computeDim(y,B,x,A,this.avgAspectRatio,z)},layoutRow:function(y,x,A,z){if(this.layout.horizontal()){return this.layoutH(y,x,A,z)}else{return this.layoutV(y,x,A,z)}},layoutV:function(x,G,D,y){var H=0;c.each(x,function(w){H+=w._area});var z=H/G,E=0;for(var B=0,A=x.length;B<A;B++){var F=x[B];var C=F._area/z;F.getPos(y).setc(D.left,D.top+(G-C-E));F.setData(\\\"width\\\",z,y);F.setData(\\\"height\\\",C,y);E+=C}return{height:D.height,width:D.width-z,top:D.top,left:D.left+z,dim:G}},layoutH:function(x,F,C,y){var H=0;c.each(x,function(w){H+=w._area});var G=H/F,D=C.height-G,z=0;for(var B=0,A=x.length;B<A;B++){var E=x[B];var I=E._area/G;E.getPos(y).setc(C.left+z,C.top+D);E.setData(\\\"width\\\",I,y);E.setData(\\\"height\\\",G,y);z+=I}return{height:C.height-G,width:C.width,top:C.top,left:C.left,dim:F}}});g.Icicle=new q({compute:function(E){E=E||\\\"current\\\";var D=this.graph.getNode(this.root),z=this.config,H=this.canvas.getSize(),w=H.width,G=H.height,A=z.offset,C=z.constrained?z.levelsToShow:Number.MAX_VALUE;this.controller.onBeforeCompute(D);e.Util.computeLevels(this.graph,D.id,0,\\\"ignore\\\");var F=0;e.Util.eachLevel(D,0,false,function(J,I){if(I>F){F=I}});var y=this.graph.getNode(this.clickedNode&&this.clickedNode.id||D.id);var x=Math.min(F,C-1);var B=y._depth;if(this.layout.horizontal()){this.computeSubtree(y,-w/2,-G/2,w/(x+1),G,B,x,E)}else{this.computeSubtree(y,-w/2,-G/2,w,G/(x+1),B,x,E)}},computeSubtree:function(G,I,F,w,L,E,A,H){G.getPos(H).setc(I,F);G.setData(\\\"width\\\",w,H);G.setData(\\\"height\\\",L,H);var C,K=0,J=0;var z=e.Util.getSubnodes(G,[1,1],\\\"ignore\\\");if(!z.length){return}c.each(z,function(x){J+=x.getData(\\\"dim\\\")});for(var D=0,B=z.length;D<B;D++){if(this.layout.horizontal()){C=L*z[D].getData(\\\"dim\\\")/J;this.computeSubtree(z[D],I+w,F,w,C,E,A,H);F+=C}else{C=w*z[D].getData(\\\"dim\\\")/J;this.computeSubtree(z[D],I,F+L,C,L,E,A,H);I+=C}}}});$jit.Icicle=new q({Implements:[d,o,g.Icicle],layout:{orientation:\\\"h\\\",vertical:function(){return this.orientation==\\\"v\\\"},horizontal:function(){return this.orientation==\\\"h\\\"},change:function(){this.orientation=this.vertical()?\\\"h\\\":\\\"v\\\"}},initialize:function(w){var x={animate:false,orientation:\\\"h\\\",offset:2,levelsToShow:Number.MAX_VALUE,constrained:false,Node:{type:\\\"rectangle\\\",overridable:true},Edge:{type:\\\"none\\\"},Label:{type:\\\"Native\\\"},duration:700,fps:45};var z=n(\\\"Canvas\\\",\\\"Node\\\",\\\"Edge\\\",\\\"Fx\\\",\\\"Tips\\\",\\\"NodeStyles\\\",\\\"Events\\\",\\\"Navigation\\\",\\\"Controller\\\",\\\"Label\\\");this.controller=this.config=c.merge(z,x,w);this.layout.orientation=this.config.orientation;var y=this.config;if(y.useCanvas){this.canvas=y.useCanvas;this.config.labelContainer=this.canvas.id+\\\"-label\\\"}else{this.canvas=new l(this,y);this.config.labelContainer=(typeof y.injectInto==\\\"string\\\"?y.injectInto:y.injectInto.id)+\\\"-label\\\"}this.graphOptions={klass:p,Node:{selected:false,exist:true,drawn:true}};this.graph=new e(this.graphOptions,this.config.Node,this.config.Edge,this.config.Label);this.labels=new $jit.Icicle.Label[this.config.Label.type](this);this.fx=new $jit.Icicle.Plot(this,$jit.Icicle);this.op=new $jit.Icicle.Op(this);this.group=new $jit.Icicle.Group(this);this.clickedNode=null;this.initializeExtras()},refresh:function(){var w=this.config.Label.type;if(w!=\\\"Native\\\"){var x=this;this.graph.eachNode(function(y){x.labels.hideLabel(y,false)})}this.compute();this.plot()},plot:function(){this.fx.plot(this.config)},enter:function(y){if(this.busy){return}this.busy=true;var x=this,w=this.config;var z={onComplete:function(){if(w.request){x.compute()}if(w.animate){x.graph.nodeList.setDataset([\\\"current\\\",\\\"end\\\"],{alpha:[1,0]});e.Util.eachSubgraph(y,function(A){A.setData(\\\"alpha\\\",1,\\\"end\\\")},\\\"ignore\\\");x.fx.animate({duration:500,modes:[\\\"node-property:alpha\\\"],onComplete:function(){x.clickedNode=y;x.compute(\\\"end\\\");x.fx.animate({modes:[\\\"linear\\\",\\\"node-property:width:height\\\"],duration:1000,onComplete:function(){x.busy=false;x.clickedNode=y}})}})}else{x.clickedNode=y;x.busy=false;x.refresh()}}};if(w.request){this.requestNodes(clickedNode,z)}else{z.onComplete()}},out:function(){if(this.busy){return}var B=this,A=e.Util,y=this.config,D=this.graph,x=A.getParents(D.getNode(this.clickedNode&&this.clickedNode.id||this.root)),z=x[0],w=z,C=this.clickedNode;this.busy=true;this.events.hoveredNode=false;if(!z){this.busy=false;return}callback=\\n {onComplete:function(){B.clickedNode=z;if(y.request){B.requestNodes(z,{onComplete:function(){B.compute();B.plot();B.busy=false}})}else{B.compute();B.plot();B.busy=false}}};if(y.animate){this.clickedNode=w;this.compute(\\\"end\\\");this.clickedNode=C;this.fx.animate({modes:[\\\"linear\\\",\\\"node-property:width:height\\\"],duration:1000,onComplete:function(){B.clickedNode=w;D.nodeList.setDataset([\\\"current\\\",\\\"end\\\"],{alpha:[0,1]});A.eachSubgraph(C,function(E){E.setData(\\\"alpha\\\",1)},\\\"ignore\\\");B.fx.animate({duration:500,modes:[\\\"node-property:alpha\\\"],onComplete:function(){callback.onComplete()}})}})}else{callback.onComplete()}},requestNodes:function(y,z){var x=c.merge(this.controller,z),w=this.config.constrained?this.config.levelsToShow:Number.MAX_VALUE;if(x.request){var B=[],A=y._depth;e.Util.eachLevel(y,0,w,function(C){if(C.drawn&&!e.Util.anySubnode(C)){B.push(C);C._level=C._depth-A;if(this.config.constrained){C._level=w-C._level}}});this.group.requestNodes(B,x)}else{x.onComplete()}}});$jit.Icicle.Op=new q({Implements:e.Op});$jit.Icicle.Group=new q({initialize:function(w){this.viz=w;this.canvas=w.canvas;this.config=w.config},requestNodes:function(B,A){var z=0,x=B.length,D={};var y=function(){A.onComplete()};var w=this.viz;if(x==0){y()}for(var C=0;C<x;C++){D[B[C].id]=B[C];A.request(B[C].id,B[C]._level,{onComplete:function(F,E){if(E&&E.children){E.id=F;w.op.sum(E,{type:\\\"nothing\\\"})}if(++z==x){e.Util.computeLevels(w.graph,w.root,0);y()}}})}}});$jit.Icicle.Plot=new q({Implements:e.Plot,plot:function(A,y){A=A||this.viz.controller;var w=this.viz,B=w.graph,x=B.getNode(w.clickedNode&&w.clickedNode.id||w.root),z=x._depth;w.canvas.clear();this.plotTree(x,c.merge(A,{withLabels:true,hideLabels:false,plotSubtree:function(C,D){return !w.config.constrained||(D._depth-z<w.config.levelsToShow)}}),y)}});$jit.Icicle.Label={};$jit.Icicle.Label.Native=new q({Implements:e.Label.Native,renderLabel:function(x,y,A){var D=x.getCtx(),w=y.getData(\\\"width\\\"),C=y.getData(\\\"height\\\"),E=y.getLabelData(\\\"size\\\"),z=D.measureText(y.name);if(C<(E*1.5)||w<z.width){return}var B=y.pos.getc(true);D.fillText(y.name,B.x+w/2,B.y+C/2)}});$jit.Icicle.Label.SVG=new q({Implements:e.Label.SVG,initialize:function(w){this.viz=w},placeLabel:function(x,A,y){var C=A.pos.getc(true),z=this.viz.canvas;var w=z.getSize();var B={x:Math.round(C.x+w.width/2),y:Math.round(C.y+w.height/2)};x.setAttribute(\\\"x\\\",B.x);x.setAttribute(\\\"y\\\",B.y);y.onPlaceLabel(x,A)}});$jit.Icicle.Label.HTML=new q({Implements:e.Label.HTML,initialize:function(w){this.viz=w},placeLabel:function(x,B,y){var D=B.pos.getc(true),z=this.viz.canvas;var w=z.getSize();var C={x:Math.round(D.x+w.width/2),y:Math.round(D.y+w.height/2)};var A=x.style;A.left=C.x+\\\"px\\\";A.top=C.y+\\\"px\\\";A.display=\\\"\\\";y.onPlaceLabel(x,B)}});$jit.Icicle.Plot.NodeTypes=new q({none:{render:c.empty},rectangle:{render:function(z,x,K){var y=this.viz.config;var C=y.offset;var w=z.getData(\\\"width\\\");var H=z.getData(\\\"height\\\");var B=z.getData(\\\"border\\\");var G=z.pos.getc(true);var F=G.x+C/2,D=G.y+C/2;var J=x.getCtx();if(w-C<2||H-C<2){return}if(y.cushion){var A=z.getData(\\\"color\\\");var I=J.createRadialGradient(F+(w-C)/2,D+(H-C)/2,1,F+(w-C)/2,D+(H-C)/2,w<H?H:w);var E=c.rgbToHex(c.map(c.hexToRgb(A),function(L){return L*0.3>>0}));I.addColorStop(0,A);I.addColorStop(1,E);J.fillStyle=I}if(B){J.strokeStyle=B;J.lineWidth=3}J.fillRect(F,D,Math.max(0,w-C),Math.max(0,H-C));B&&J.strokeRect(G.x,G.y,w,H)},contains:function(y,A){if(this.viz.clickedNode&&!$jit.Graph.Util.isDescendantOf(y,this.viz.clickedNode.id)){return false}var z=y.pos.getc(true),x=y.getData(\\\"width\\\"),w=y.getData(\\\"height\\\");return this.nodeHelper.rectangle.contains({x:z.x+x/2,y:z.y+w/2},A,x,w)}}});$jit.Icicle.Plot.EdgeTypes=new q({none:c.empty});g.ForceDirected=new q({getOptions:function(D){var B=this.canvas.getSize();var y=B.width,A=B.height;var C=0;this.graph.eachNode(function(w){C++});var E=y*A/C,z=Math.sqrt(E);var x=this.config.levelDistance;return{width:y,height:A,tstart:y*0.1,nodef:function(w){return E/(w||1)},edgef:function(w){return z*(w-x)}}},compute:function(x,y){var z=c.splat(x||[\\\"current\\\",\\\"start\\\",\\\"end\\\"]);var w=this.getOptions();f.compute(this.graph,z,this.config);this.graph.computeLevels(this.root,0,\\\"ignore\\\");this.graph.eachNode(function(A){c.each(z,function(B){var C=A.getPos(B);if(C.equals(p.KER)){C.x=w.width/5*(Math.random()-0.5);C.y=w.height/5*(Math.random()-0.5)}A.disp={};c.each(z,function(D){A.disp[D]=r(0,0)})})});this.computePositions(z,w,y)},computePositions:function(A,y,B){var C=this.config.iterations,x=0,z=this;if(B){(function w(){for(var E=B.iter,D=0;D<E;D++){y.t=y.tstart;if(C){y.t*=(1-x++/(C-1))}z.computePositionStep(A,y);if(C&&x>=C){B.onComplete();return}}B.onStep(Math.round(x/(C-1)*100));setTimeout(w,1)})()}else{for(;x<C;x++){y.t=y.tstart*(1-x/(C-1));this.computePositionStep(A,y)}}},computePositionStep:function(D,w){var E=this.graph;var y=Math.min,C=Math.max;var B=r(0,0);E.eachNode(function(G){c.each(D,function(H){G.disp[H].x=0;G.disp[H].y=0});E.eachNode(function(H){if(H.id!=G.id){c.each(D,function(L){var J=G.getPos(L),I=H.getPos(L);B.x=J.x-I.x;B.y=J.y-I.y;var K=B.norm()||1;G.disp[L].$add(B.$scale(w.nodef(K)/K))})}})});var x=!!E.getNode(this.root).visited;E.eachNode(function(G){G.eachAdjacency(function(H){var I=H.nodeTo;if(!!I.visited===x){c.each(D,function(M){var K=G.getPos(M),J=I.getPos(M);B.x=K.x-J.x;B.y=K.y-J.y;var L=B.norm()||1;G.disp[M].$add(B.$scale(-w.edgef(L)/L));I.disp[M].$add(B.$scale(-1))})}});G.visited=!x});var F=w.t,z=w.width/2,A=w.height/2;E.eachNode(function(G){c.each(D,function(J){var H=G.disp[J];var I=H.norm()||1;var J=G.getPos(J);J.$add(r(H.x*y(Math.abs(H.x),F)/I,H.y*y(Math.abs(H.y),F)/I));J.x=y(z,C(-z,J.x));J.y=y(A,C(-A,J.y))})})}});$jit.ForceDirected=new q({Implements:[d,o,g.ForceDirected],initialize:function(x){var w=$jit.ForceDirected;var y={iterations:50,levelDistance:50};this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Node\\\",\\\"Edge\\\",\\\"Fx\\\",\\\"Tips\\\",\\\"NodeStyles\\\",\\\"Events\\\",\\\"Navigation\\\",\\\"Controller\\\",\\\"Label\\\"),y,x);var z=this.config;if(z.useCanvas){this.canvas=z.useCanvas;this.config.labelContainer=this.canvas.id+\\\"-label\\\"}else{if(z.background){z.background=c.merge({type:\\\"Circles\\\"},z.background)}this.canvas=new l(this,z);this.config.labelContainer=(typeof z.injectInto==\\\"string\\\"?z.injectInto:z.injectInto.id)+\\\"-label\\\"}this.graphOptions={klass:p,Node:{selected:false,exist:true,drawn:true}};this.graph=new e(this.graphOptions,this.config.Node,this.config.Edge);this.labels=new w.Label[z.Label.type](this);this.fx=new w.Plot(this,w);this.op=new w.Op(this);this.json=null;this.busy=false;this.initializeExtras()},refresh:function(){this.compute();this.plot()},reposition:function(){this.compute(\\\"end\\\")},computeIncremental:function(w){w=c.merge({iter:20,property:\\\"end\\\",onStep:c.empty,onComplete:c.empty},w||{});this.config.onBeforeCompute(this.graph.getNode(this.root));this.compute(w.property,w)},plot:function(){this.fx.plot()},animate:function(w){this.fx.animate(c.merge({modes:[\\\"linear\\\"]},w||{}))}});$jit.ForceDirected.$extend=true;(function(w){w.Op=new q({Implements:e.Op});w.Plot=new q({Implements:e.Plot});w.Label={};w.Label.Native=new q({Implements:e.Label.Native});w.Label.SVG=new q({Implements:e.Label.SVG,initialize:function(x){this.viz=x},placeLabel:function(H,B,C){var F=B.pos.getc(true),y=this.viz.canvas,z=y.translateOffsetX,x=y.translateOffsetY,G=y.scaleOffsetX,E=y.scaleOffsetY,D=y.getSize();var A={x:Math.round(F.x*G+z+D.width/2),y:Math.round(F.y*E+x+D.height/2)};H.setAttribute(\\\"x\\\",A.x);H.setAttribute(\\\"y\\\",A.y);C.onPlaceLabel(H,B)}});w.Label.HTML=new q({Implements:e.Label.HTML,initialize:function(x){this.viz=x},placeLabel:function(I,C,D){var G=C.pos.getc(true),z=this.viz.canvas,A=z.translateOffsetX,y=z.translateOffsetY,H=z.scaleOffsetX,F=z.scaleOffsetY,E=z.getSize();var B={x:Math.round(G.x*H+A+E.width/2),y:Math.round(G.y*F+y+E.height/2)};var x=I.style;x.left=B.x+\\\"px\\\";x.top=B.y+\\\"px\\\";x.display=this.fitsInCanvas(B,z)?\\\"\\\":\\\"none\\\";D.onPlaceLabel(I,C)}});w.Plot.NodeTypes=new q({none:{render:c.empty,contains:c.lambda(false)},circle:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.circle.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.circle.contains(z,A,y)}},ellipse:{render:function(A,y){var B=A.pos.getc(true),z=A.getData(\\\"width\\\"),x=A.getData(\\\"height\\\");this.nodeHelper.ellipse.render(\\\"fill\\\",B,z,x,y)},contains:function(z,B){var A=z.pos.getc(true),y=z.getData(\\\"width\\\"),x=z.getData(\\\"height\\\");return this.nodeHelper.ellipse.contains(A,B,y,x)}},square:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.square.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.square.contains(z,A,y)}},rectangle:{render:function(A,y){var B=A.pos.getc(true),z=A.getData(\\\"width\\\"),x=A.getData(\\\"height\\\");this.nodeHelper.rectangle.render(\\\"fill\\\",B,z,x,y)},contains:function(z,B){var A=z.pos.getc(true),y=z.getData(\\\"width\\\"),x=z.getData(\\\"height\\\");return this.nodeHelper.rectangle.contains(A,B,y,x)}},triangle:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.triangle.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.triangle.contains(z,A,y)}},star:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.star.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.star.contains(z,A,y)}}});w.Plot.EdgeTypes=new q({none:c.empty,line:{render:function(x,y){var A=x.nodeFrom.pos.getc(true),z=x.nodeTo.pos.getc(true);this.edgeHelper.line.render(A,z,y)},contains:function(x,A){var z=x.nodeFrom.pos.getc(true),y=x.nodeTo.pos.getc(true);return this.edgeHelper.line.contains(z,y,A,this.edge.epsilon)}},arrow:{render:function(y,z){var D=y.nodeFrom.pos.getc(true),C=y.nodeTo.pos.getc(true),B=y.getData(\\\"dim\\\"),A=y.data.$direction,x=(A&&A.length>1&&A[0]!=y.nodeFrom.id);this.edgeHelper.arrow.render(D,C,B,x,z)},contains:function(x,A){var z=x.nodeFrom.pos.getc(true),y=x.nodeTo.pos.getc(true);return this.edgeHelper.arrow.contains(z,y,A,this.edge.epsilon)}}})})($jit.ForceDirected);$jit.TM={};var v=$jit.TM;$jit.TM.$extend=true;v.Base={layout:{orientation:\\\"h\\\",vertical:function(){return this.orientation==\\\"v\\\"},horizontal:function(){return this.orientation==\\\"h\\\"},change:function(){this.orientation=this.vertical()?\\\"h\\\":\\\"v\\\"}},initialize:function(w){var x={orientation:\\\"h\\\",titleHeight:13,offset:2,levelsToShow:0,constrained:false,animate:false,Node:{type:\\\"rectangle\\\",overridable:true,width:3,height:3,color:\\\"#444\\\"},Label:{textAlign:\\\"center\\\",textBaseline:\\\"top\\\"},Edge:{type:\\\"none\\\"},duration:700,fps:45};this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Node\\\",\\\"Edge\\\",\\\"Fx\\\",\\\"Controller\\\",\\\"Tips\\\",\\\"NodeStyles\\\",\\\"Events\\\",\\\"Navigation\\\",\\\"Label\\\"),x,w);this.layout.orientation=this.config.orientation;var y=this.config;if(y.useCanvas){this.canvas=y.useCanvas;this.config.labelContainer=this.canvas.id+\\\"-label\\\"}else{if(y.background){y.background=c.merge({type:\\\"Circles\\\"},y.background)}this.canvas=new l(this,y);this.config.labelContainer=(typeof y.injectInto==\\\"string\\\"?y.injectInto:y.injectInto.id)+\\\"-label\\\"}this.graphOptions={klass:p,Node:{selected:false,exist:true,drawn:true}};this.graph=new e(this.graphOptions,this.config.Node,this.config.Edge);this.labels=new v.Label[y.Label.type](this);this.fx=new v.Plot(this);this.op=new v.Op(this);this.group=new v.Group(this);this.geom=new v.Geom(this);this.clickedNode=null;this.busy=false;this.initializeExtras()},refresh:function(){if(this.busy){return}this.busy=true;var x=this;if(this.config.animate){this.compute(\\\"end\\\");this.config.levelsToShow>0&&this.geom.setRightLevelToShow(this.graph.getNode(this.clickedNode&&this.clickedNode.id||this.root));this.fx.animate(c.merge(this.config,{modes:[\\\"linear\\\",\\\"node-property:width:height\\\"],onComplete:function(){x.busy=false}}))}else{var w=this.config.Label.type;if(w!=\\\"Native\\\"){var x=this;this.graph.eachNode(function(y){x.labels.hideLabel(y,false)})}this.busy=false;this.compute();this.config.levelsToShow>0&&this.geom.setRightLevelToShow(this.graph.getNode(this.clickedNode&&this.clickedNode.id||this.root));this.plot()}},plot:function(){this.fx.plot()},leaf:function(w){return w.getSubnodes([1,1],\\\"ignore\\\").length==0},enter:function(C){if(this.busy){return}this.busy=true;var y=this,x=this.config,A=this.graph,w=C,z=this.clickedNode;var B={onComplete:function(){if(x.levelsToShow>0){y.geom.setRightLevelToShow(C)}if(x.levelsToShow>0||x.request){y.compute()}if(x.animate){A.nodeList.setData(\\\"alpha\\\",0,\\\"end\\\");C.eachSubgraph(function(D){D.setData(\\\"alpha\\\",1,\\\"end\\\")},\\\"ignore\\\");y.fx.animate({duration:500,modes:[\\\"node-property:alpha\\\"],onComplete:function(){y.clickedNode=w;y.compute(\\\"end\\\");y.clickedNode=z;y.fx.animate({modes:[\\\"linear\\\",\\\"node-property:width:height\\\"],duration:1000,onComplete:function(){y.busy=false;y.clickedNode=w}})}})}else{y.busy=false;y.clickedNode=C;y.refresh()}}};if(x.request){this.requestNodes(w,B)}else{B.onComplete()}},out:function(){if(this.busy){return}this.busy=true;this.events.hoveredNode=false;var A=this,y=this.config,C=this.graph,x=C.getNode(this.clickedNode&&this.clickedNode.id||this.root).getParents(),z=x[0],w=z,B=this.clickedNode;if(!z){this.busy=false;return}callback={onComplete:function(){A.clickedNode=z;if(y.request){A.requestNodes(z,{onComplete:function(){A.compute();A.plot();A.busy=false}})}else{A.compute();A.plot();A.busy=false}}};if(y.levelsToShow>0){this.geom.setRightLevelToShow(z)}if(y.animate){this.clickedNode=w;this.compute(\\\"end\\\");this.clickedNode=B;this.fx.animate({modes:[\\\"linear\\\",\\\"node-property:width:height\\\"],duration:1000,onComplete:function(){A.clickedNode=w;C.eachNode(function(D){D.setDataset([\\\"current\\\",\\\"end\\\"],{alpha:[0,1]})},\\\"ignore\\\");B.eachSubgraph(function(D){D.setData(\\\"alpha\\\",1)},\\\"ignore\\\");A.fx.animate({duration:500,modes:[\\\"node-property:alpha\\\"],onComplete:function(){callback.onComplete()}})}})}else{callback.onComplete()}},requestNodes:function(y,z){var x=c.merge(this.controller,z),w=this.config.levelsToShow;if(x.request){var B=[],A=y._depth;y.eachLevel(0,w,function(D){var C=w-(D._depth-A);if(D.drawn&&!D.anySubnode()&&C>0){B.push(D);D._level=C}});this.group.requestNodes(B,x)}else{x.onComplete()}},reposition:function(){this.compute(\\\"end\\\")}};v.Op=new q({Implements:e.Op,initialize:function(w){this.viz=w}});v.Geom=new q({Implements:e.Geom,getRightLevelToShow:function(){return this.viz.config.levelsToShow},setRightLevelToShow:function(x){var y=this.getRightLevelToShow(),w=this.viz.labels;x.eachLevel(0,y+1,function(A){var z=A._depth-x._depth;if(z>y){A.drawn=false;A.exist=false;A.ignore=true;w.hideLabel(A,false)}else{A.drawn=true;A.exist=true;delete A.ignore}});x.drawn=true;delete x.ignore}});v.Group=new q({initialize:function(w){this.viz=w;this.canvas=w.canvas;this.config=w.config},requestNodes:function(B,A){var z=0,x=B.length,D={};var y=function(){A.onComplete()};var w=this.viz;if(x==0){y()}for(var C=0;C<x;C++){D[B[C].id]=B[C];A.request(B[C].id,B[C]._level,{onComplete:function(F,E){if(E&&E.children){E.id=F;w.op.sum(E,{type:\\\"nothing\\\"})}if(++z==x){w.graph.computeLevels(w.root,0);y()}}})}}});v.Plot=new q({Implements:e.Plot,initialize:function(w){this.viz=w;this.config=w.config;this.node=this.config.Node;this.edge=this.config.Edge;this.animation=new u;this.nodeTypes=new v.Plot.NodeTypes;this.edgeTypes=new v.Plot.EdgeTypes;this.labels=w.labels},plot:function(y,x){var w=this.viz,z=w.graph;w.canvas.clear();this.plotTree(z.getNode(w.clickedNode&&w.clickedNode.id||w.root),c.merge(w.config,y||{},{withLabels:true,hideLabels:false,plotSubtree:function(B,A){return B.anySubnode(\\\"exist\\\")}}),x)}});v.Label={};v.Label.Native=new q({Implements:e.Label.Native,initialize:function(w){this.config=w.config;this.leaf=w.leaf},renderLabel:function(z,A,B){if(!this.leaf(A)&&!this.config.titleHeight){return}var D=A.pos.getc(true),G=z.getCtx(),w=A.getData(\\\"width\\\"),F=A.getData(\\\"height\\\"),E=D.x+w/2,C=D.y;G.fillText(A.name,E,C,w)}});v.Label.SVG=new q({Implements:e.Label.SVG,initialize:function(w){this.viz=w;this.leaf=w.leaf;this.config=w.config},placeLabel:function(G,A,B){var E=A.pos.getc(true),x=this.viz.canvas,y=x.translateOffsetX,w=x.translateOffsetY,F=x.scaleOffsetX,D=x.scaleOffsetY,C=x.getSize();var z={x:Math.round(E.x*F+y+C.width/2),y:Math.round(E.y*D+w+C.height/2)};G.setAttribute(\\\"x\\\",z.x);G.setAttribute(\\\"y\\\",z.y);if(!this.leaf(A)&&!this.config.titleHeight){G.style.display=\\\"none\\\"}B.onPlaceLabel(G,A)}});v.Label.HTML=new q({Implements:e.Label.HTML,initialize:function(w){this.viz=w;this.leaf=w.leaf;this.config=w.config},placeLabel:function(H,B,C){var F=B.pos.getc(true),y=this.viz.canvas,z=y.translateOffsetX,x=y.translateOffsetY,G=y.scaleOffsetX,E=y.scaleOffsetY,D=y.getSize();var A={x:Math.round(F.x*G+z+D.width/2),y:Math.round(F.y*E+x+D.height/2)};var w=H.style;w.left=A.x+\\\"px\\\";w.top=A.y+\\\"px\\\";w.width=B.getData(\\\"width\\\")*G+\\\"px\\\";w.height=B.getData(\\\"height\\\")*E+\\\"px\\\";w.zIndex=B._depth*100;w.display=\\\"\\\";if(!this.leaf(B)&&!this.config.titleHeight){H.style.display=\\\"none\\\"}C.onPlaceLabel(H,B)}});v.Plot.NodeTypes=new q({none:{render:c.empty},rectangle:{render:function(z,x,M){var D=this.viz.leaf(z),y=this.config,I=y.offset,C=y.titleHeight,H=z.pos.getc(true),\\n w=z.getData(\\\"width\\\"),J=z.getData(\\\"height\\\"),B=z.getData(\\\"border\\\"),L=x.getCtx(),G=H.x+I/2,E=H.y+I/2;if(w<=I||J<=I){return}if(D){if(y.cushion){var K=L.createRadialGradient(G+(w-I)/2,E+(J-I)/2,1,G+(w-I)/2,E+(J-I)/2,w<J?J:w);var A=z.getData(\\\"color\\\");var F=c.rgbToHex(c.map(c.hexToRgb(A),function(N){return N*0.2>>0}));K.addColorStop(0,A);K.addColorStop(1,F);L.fillStyle=K}L.fillRect(G,E,w-I,J-I);if(B){L.save();L.strokeStyle=B;L.strokeRect(G,E,w-I,J-I);L.restore()}}else{if(C>0){L.fillRect(H.x+I/2,H.y+I/2,w-I,C-I);if(B){L.save();L.strokeStyle=B;L.strokeRect(H.x+I/2,H.y+I/2,w-I,J-I);L.restore()}}}},contains:function(z,B){if(this.viz.clickedNode&&!z.isDescendantOf(this.viz.clickedNode.id)||z.ignore){return false}var A=z.pos.getc(true),y=z.getData(\\\"width\\\"),x=this.viz.leaf(z),w=x?z.getData(\\\"height\\\"):this.config.titleHeight;return this.nodeHelper.rectangle.contains({x:A.x+y/2,y:A.y+w/2},B,y,w)}}});v.Plot.EdgeTypes=new q({none:c.empty});v.SliceAndDice=new q({Implements:[d,o,v.Base,g.TM.SliceAndDice]});v.Squarified=new q({Implements:[d,o,v.Base,g.TM.Squarified]});v.Strip=new q({Implements:[d,o,v.Base,g.TM.Strip]});$jit.RGraph=new q({Implements:[d,o,g.Radial],initialize:function(w){var x=$jit.RGraph;var y={interpolation:\\\"linear\\\",levelDistance:100};this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Node\\\",\\\"Edge\\\",\\\"Fx\\\",\\\"Controller\\\",\\\"Tips\\\",\\\"NodeStyles\\\",\\\"Events\\\",\\\"Navigation\\\",\\\"Label\\\"),y,w);var z=this.config;if(z.useCanvas){this.canvas=z.useCanvas;this.config.labelContainer=this.canvas.id+\\\"-label\\\"}else{if(z.background){z.background=c.merge({type:\\\"Circles\\\"},z.background)}this.canvas=new l(this,z);this.config.labelContainer=(typeof z.injectInto==\\\"string\\\"?z.injectInto:z.injectInto.id)+\\\"-label\\\"}this.graphOptions={klass:b,Node:{selected:false,exist:true,drawn:true}};this.graph=new e(this.graphOptions,this.config.Node,this.config.Edge);this.labels=new x.Label[z.Label.type](this);this.fx=new x.Plot(this,x);this.op=new x.Op(this);this.json=null;this.root=null;this.busy=false;this.parent=false;this.initializeExtras()},createLevelDistanceFunc:function(){var w=this.config.levelDistance;return function(x){return(x._depth+1)*w}},refresh:function(){this.compute();this.plot()},reposition:function(){this.compute(\\\"end\\\")},plot:function(){this.fx.plot()},getNodeAndParentAngle:function(D){var y=false;var C=this.graph.getNode(D);var A=C.getParents();var z=(A.length>0)?A[0]:false;if(z){var w=z.pos.getc(),B=C.pos.getc();var x=w.add(B.scale(-1));y=Math.atan2(x.y,x.x);if(y<0){y+=2*Math.PI}}return{parent:z,theta:y}},tagChildren:function(A,C){if(A.angleSpan){var B=[];A.eachAdjacency(function(D){B.push(D.nodeTo)},\\\"ignore\\\");var w=B.length;for(var z=0;z<w&&C!=B[z].id;z++){}for(var y=(z+1)%w,x=0;C!=B[y].id;y=(y+1)%w){B[y].dist=x++}}},onClick:function(B,x){if(this.root!=B&&!this.busy){this.busy=true;this.root=B;var y=this;this.controller.onBeforeCompute(this.graph.getNode(B));var z=this.getNodeAndParentAngle(B);this.tagChildren(z.parent,B);this.parent=z.parent;this.compute(\\\"end\\\");var w=z.theta-z.parent.endPos.theta;this.graph.eachNode(function(C){C.endPos.set(C.endPos.getp().add(k(w,0)))});var A=this.config.interpolation;x=c.merge({onComplete:c.empty},x||{});this.fx.animate(c.merge({hideLabels:true,modes:[A]},x,{onComplete:function(){y.busy=false;x.onComplete()}}))}}});$jit.RGraph.$extend=true;(function(w){w.Op=new q({Implements:e.Op});w.Plot=new q({Implements:e.Plot});w.Label={};w.Label.Native=new q({Implements:e.Label.Native});w.Label.SVG=new q({Implements:e.Label.SVG,initialize:function(x){this.viz=x},placeLabel:function(H,B,C){var F=B.pos.getc(true),y=this.viz.canvas,z=y.translateOffsetX,x=y.translateOffsetY,G=y.scaleOffsetX,E=y.scaleOffsetY,D=y.getSize();var A={x:Math.round(F.x*G+z+D.width/2),y:Math.round(F.y*E+x+D.height/2)};H.setAttribute(\\\"x\\\",A.x);H.setAttribute(\\\"y\\\",A.y);C.onPlaceLabel(H,B)}});w.Label.HTML=new q({Implements:e.Label.HTML,initialize:function(x){this.viz=x},placeLabel:function(I,C,D){var G=C.pos.getc(true),z=this.viz.canvas,A=z.translateOffsetX,y=z.translateOffsetY,H=z.scaleOffsetX,F=z.scaleOffsetY,E=z.getSize();var B={x:Math.round(G.x*H+A+E.width/2),y:Math.round(G.y*F+y+E.height/2)};var x=I.style;x.left=B.x+\\\"px\\\";x.top=B.y+\\\"px\\\";x.display=this.fitsInCanvas(B,z)?\\\"\\\":\\\"none\\\";D.onPlaceLabel(I,C)}});w.Plot.NodeTypes=new q({none:{render:c.empty,contains:c.lambda(false)},circle:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.circle.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.circle.contains(z,A,y)}},ellipse:{render:function(A,y){var B=A.pos.getc(true),z=A.getData(\\\"width\\\"),x=A.getData(\\\"height\\\");this.nodeHelper.ellipse.render(\\\"fill\\\",B,z,x,y)},contains:function(z,B){var A=z.pos.getc(true),y=z.getData(\\\"width\\\"),x=z.getData(\\\"height\\\");return this.nodeHelper.ellipse.contains(A,B,y,x)}},square:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.square.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.square.contains(z,A,y)}},rectangle:{render:function(A,y){var B=A.pos.getc(true),z=A.getData(\\\"width\\\"),x=A.getData(\\\"height\\\");this.nodeHelper.rectangle.render(\\\"fill\\\",B,z,x,y)},contains:function(z,B){var A=z.pos.getc(true),y=z.getData(\\\"width\\\"),x=z.getData(\\\"height\\\");return this.nodeHelper.rectangle.contains(A,B,y,x)}},triangle:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.triangle.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.triangle.contains(z,A,y)}},star:{render:function(y,x){var A=y.pos.getc(true),z=y.getData(\\\"dim\\\");this.nodeHelper.star.render(\\\"fill\\\",A,z,x)},contains:function(x,A){var z=x.pos.getc(true),y=x.getData(\\\"dim\\\");return this.nodeHelper.star.contains(z,A,y)}}});w.Plot.EdgeTypes=new q({none:c.empty,line:{render:function(x,y){var A=x.nodeFrom.pos.getc(true),z=x.nodeTo.pos.getc(true);this.edgeHelper.line.render(A,z,y)},contains:function(x,A){var z=x.nodeFrom.pos.getc(true),y=x.nodeTo.pos.getc(true);return this.edgeHelper.line.contains(z,y,A,this.edge.epsilon)}},arrow:{render:function(y,z){var D=y.nodeFrom.pos.getc(true),C=y.nodeTo.pos.getc(true),B=y.getData(\\\"dim\\\"),A=y.data.$direction,x=(A&&A.length>1&&A[0]!=y.nodeFrom.id);this.edgeHelper.arrow.render(D,C,B,x,z)},contains:function(x,A){var z=x.nodeFrom.pos.getc(true),y=x.nodeTo.pos.getc(true);return this.edgeHelper.arrow.contains(z,y,A,this.edge.epsilon)}}})})($jit.RGraph);p.prototype.moebiusTransformation=function(y){var w=this.add(y);var x=y.$conjugate().$prod(this);x.x++;return w.$div(x)};e.Util.moebiusTransformation=function(y,A,z,x,w){this.eachNode(y,function(C){for(var B=0;B<z.length;B++){var E=A[B].scale(-1),D=x?x:z[B];C.getPos(z[B]).set(C.getPos(D).getc().moebiusTransformation(E))}},w)};$jit.Hypertree=new q({Implements:[d,o,g.Radial],initialize:function(w){var z=$jit.Hypertree;var x={radius:\\\"auto\\\",offset:0,Edge:{type:\\\"hyperline\\\"},duration:1500,fps:35};this.controller=this.config=c.merge(n(\\\"Canvas\\\",\\\"Node\\\",\\\"Edge\\\",\\\"Fx\\\",\\\"Tips\\\",\\\"NodeStyles\\\",\\\"Events\\\",\\\"Navigation\\\",\\\"Controller\\\",\\\"Label\\\"),x,w);var y=this.config;if(y.useCanvas){this.canvas=y.useCanvas;this.config.labelContainer=this.canvas.id+\\\"-label\\\"}else{if(y.background){y.background=c.merge({type:\\\"Circles\\\"},y.background)}this.canvas=new l(this,y);this.config.labelContainer=(typeof y.injectInto==\\\"string\\\"?y.injectInto:y.injectInto.id)+\\\"-label\\\"}this.graphOptions={klass:b,Node:{selected:false,exist:true,drawn:true}};this.graph=new e(this.graphOptions,this.config.Node,this.config.Edge);this.labels=new z.Label[y.Label.type](this);this.fx=new z.Plot(this,z);this.op=new z.Op(this);this.json=null;this.root=null;this.busy=false;this.initializeExtras()},createLevelDistanceFunc:function(){var A=this.getRadius();var C=0,w=Math.max,x=this.config;this.graph.eachNode(function(D){C=w(D._depth,C)},\\\"ignore\\\");C++;var B=function(D){return function(F){F.scale=A;var H=F._depth+1;var G=0,E=Math.pow;while(H){G+=E(D,H--)}return G-x.offset}};for(var z=0.51;z<=1;z+=0.01){var y=(1-Math.pow(z,C))/(1-z);if(y>=2){return B(z-0.01)}}return B(0.75)},getRadius:function(){var w=this.config.radius;if(w!==\\\"auto\\\"){return w}var x=this.canvas.getSize();return Math.min(x.width,x.height)/2},refresh:function(w){if(w){this.reposition();this.graph.eachNode(function(x){x.startPos.rho=x.pos.rho=x.endPos.rho;x.startPos.theta=x.pos.theta=x.endPos.theta})}else{this.compute()}this.plot()},reposition:function(){this.compute(\\\"end\\\");var w=this.graph.getNode(this.root).pos.getc().scale(-1);e.Util.moebiusTransformation(this.graph,[w],[\\\"end\\\"],\\\"end\\\",\\\"ignore\\\");this.graph.eachNode(function(x){if(x.ignore){x.endPos.rho=x.pos.rho;x.endPos.theta=x.pos.theta}})},plot:function(){this.fx.plot()},onClick:function(y,w){var x=this.graph.getNode(y).pos.getc(true);this.move(x,w)},move:function(A,y){var x=r(A.x,A.y);if(this.busy===false&&x.norm()<1){this.busy=true;var w=this.graph.getClosestNodeToPos(x),z=this;this.graph.computeLevels(w.id,0);this.controller.onBeforeCompute(w);y=c.merge({onComplete:c.empty},y||{});this.fx.animate(c.merge({modes:[\\\"moebius\\\"],hideLabels:true},y,{onComplete:function(){z.busy=false;y.onComplete()}}),x)}}});$jit.Hypertree.$extend=true;(function(w){w.Op=new q({Implements:e.Op});w.Plot=new q({Implements:e.Plot});w.Label={};w.Label.Native=new q({Implements:e.Label.Native,initialize:function(x){this.viz=x},renderLabel:function(z,B,y){var x=z.getCtx();var C=B.pos.getc(true);var A=this.viz.getRadius();x.fillText(B.name,C.x*A,C.y*A)}});w.Label.SVG=new q({Implements:e.Label.SVG,initialize:function(x){this.viz=x},placeLabel:function(I,C,D){var G=C.pos.getc(true),z=this.viz.canvas,A=z.translateOffsetX,y=z.translateOffsetY,H=z.scaleOffsetX,F=z.scaleOffsetY,E=z.getSize(),x=this.viz.getRadius();var B={x:Math.round((G.x*H)*x+A+E.width/2),y:Math.round((G.y*F)*x+y+E.height/2)};I.setAttribute(\\\"x\\\",B.x);I.setAttribute(\\\"y\\\",B.y);D.onPlaceLabel(I,C)}});w.Label.HTML=new q({Implements:e.Label.HTML,initialize:function(x){this.viz=x},placeLabel:function(J,D,E){var H=D.pos.getc(true),A=this.viz.canvas,B=A.translateOffsetX,z=A.translateOffsetY,I=A.scaleOffsetX,G=A.scaleOffsetY,F=A.getSize(),x=this.viz.getRadius();var C={x:Math.round((H.x*I)*x+B+F.width/2),y:Math.round((H.y*G)*x+z+F.height/2)};var y=J.style;y.left=C.x+\\\"px\\\";y.top=C.y+\\\"px\\\";y.display=this.fitsInCanvas(C,A)?\\\"\\\":\\\"none\\\";E.onPlaceLabel(J,D)}});w.Plot.NodeTypes=new q({none:{render:c.empty,contains:c.lambda(false)},circle:{render:function(z,x){var y=this.node,B=z.getData(\\\"dim\\\"),A=z.pos.getc();B=y.transform?B*(1-A.squaredNorm()):B;A.$scale(z.scale);if(B>0.2){this.nodeHelper.circle.render(\\\"fill\\\",A,B,x)}},contains:function(x,A){var y=x.getData(\\\"dim\\\"),z=x.pos.getc().$scale(x.scale);return this.nodeHelper.circle.contains(z,A,y)}},ellipse:{render:function(A,y){var B=A.pos.getc().$scale(A.scale),z=A.getData(\\\"width\\\"),x=A.getData(\\\"height\\\");this.nodeHelper.ellipse.render(\\\"fill\\\",B,z,x,y)},contains:function(z,B){var y=z.getData(\\\"width\\\"),x=z.getData(\\\"height\\\"),A=z.pos.getc().$scale(z.scale);return this.nodeHelper.circle.contains(A,B,y,x)}},square:{render:function(z,x){var y=this.node,B=z.getData(\\\"dim\\\"),A=z.pos.getc();B=y.transform?B*(1-A.squaredNorm()):B;A.$scale(z.scale);if(B>0.2){this.nodeHelper.square.render(\\\"fill\\\",A,B,x)}},contains:function(x,A){var y=x.getData(\\\"dim\\\"),z=x.pos.getc().$scale(x.scale);return this.nodeHelper.square.contains(z,A,y)}},rectangle:{render:function(B,y){var A=this.node,z=B.getData(\\\"width\\\"),x=B.getData(\\\"height\\\"),C=B.pos.getc();z=A.transform?z*(1-C.squaredNorm()):z;x=A.transform?x*(1-C.squaredNorm()):x;C.$scale(B.scale);if(z>0.2&&x>0.2){this.nodeHelper.rectangle.render(\\\"fill\\\",C,z,x,y)}},contains:function(z,B){var y=z.getData(\\\"width\\\"),x=z.getData(\\\"height\\\"),A=z.pos.getc().$scale(z.scale);return this.nodeHelper.rectangle.contains(A,B,y,x)}},triangle:{render:function(z,x){var y=this.node,B=z.getData(\\\"dim\\\"),A=z.pos.getc();B=y.transform?B*(1-A.squaredNorm()):B;A.$scale(z.scale);if(B>0.2){this.nodeHelper.triangle.render(\\\"fill\\\",A,B,x)}},contains:function(x,A){var y=x.getData(\\\"dim\\\"),z=x.pos.getc().$scale(x.scale);return this.nodeHelper.triangle.contains(z,A,y)}},star:{render:function(z,x){var y=this.node,B=z.getData(\\\"dim\\\"),A=z.pos.getc();B=y.transform?B*(1-A.squaredNorm()):B;A.$scale(z.scale);if(B>0.2){this.nodeHelper.star.render(\\\"fill\\\",A,B,x)}},contains:function(x,A){var y=x.getData(\\\"dim\\\"),z=x.pos.getc().$scale(x.scale);return this.nodeHelper.star.contains(z,A,y)}}});w.Plot.EdgeTypes=new q({none:c.empty,line:{render:function(x,y){var B=x.nodeFrom.pos.getc(true),A=x.nodeTo.pos.getc(true),z=x.nodeFrom.scale;this.edgeHelper.line.render({x:B.x*z,y:B.y*z},{x:A.x*z,y:A.y*z},y)},contains:function(x,B){var A=x.nodeFrom.pos.getc(true),z=x.nodeTo.pos.getc(true),y=x.nodeFrom.scale;this.edgeHelper.line.contains({x:A.x*y,y:A.y*y},{x:z.x*y,y:z.y*y},B,this.edge.epsilon)}},arrow:{render:function(y,z){var E=y.nodeFrom.pos.getc(true),D=y.nodeTo.pos.getc(true),A=y.nodeFrom.scale,C=y.getData(\\\"dim\\\"),B=y.data.$direction,x=(B&&B.length>1&&B[0]!=y.nodeFrom.id);this.edgeHelper.arrow.render({x:E.x*A,y:E.y*A},{x:D.x*A,y:D.y*A},C,x,z)},contains:function(x,B){var A=x.nodeFrom.pos.getc(true),z=x.nodeTo.pos.getc(true),y=x.nodeFrom.scale;this.edgeHelper.arrow.contains({x:A.x*y,y:A.y*y},{x:z.x*y,y:z.y*y},B,this.edge.epsilon)}},hyperline:{render:function(x,y){var B=x.nodeFrom.pos.getc(),A=x.nodeTo.pos.getc(),z=this.viz.getRadius();this.edgeHelper.hyperline.render(B,A,z,y)},contains:c.lambda(false)}})})($jit.Hypertree)\\n\\t\",\"filename\":\"/os/plugins/rgraph/jit-yc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const processListPayloads = {\\r\\n\\tgrow: [\\\"grow.js\\\"],\\r\\n\\thack: [\\\"hack.js\\\"],\\r\\n\\tweaken: [\\\"weak.js\\\"]\\r\\n}\\r\\n\",\"filename\":\"/os/plugins/rgraph/process-list.config.example.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { css } from \\\"/os/plugins/process-list/process-list_css.js\\\"\\r\\nimport { processListPayloads } from \\\"/os/plugins/process-list/process-list.config.js'\\r\\n// based on: https://github.com/PhilipArmstead/BitBurner-Scripts\\r\\n\\r\\nasync function mainPlugin(api) {\\r\\n\\r\\n\\tlet processList = new ProcessList(api);\\r\\n\\r\\n\\tprocessList.init()\\r\\n\\r\\n\\tprocessList.run();\\r\\n}\\r\\n\\r\\nexport class AttacksMonitor {\\r\\n\\t/** @param {import('/os/plugins/api_adapter').API_Object} api */\\r\\n\\tconstructor(api) {\\r\\n\\t\\tthis.#os = api.os;\\r\\n\\t\\t//this.#classes = api.classes;\\r\\n\\t\\t//this.#utils = api.utils\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @param {Boolean} disableGrouping\\r\\n\\t * @param {{param: String, isDescending: Boolean}} sort\\r\\n\\t **/\\r\\n\\tasync populateProcesses(disableGrouping, sort){\\r\\n\\t\\tlet processes = await this.#getRunningProcesses()\\r\\n\\r\\n\\t\\tprocesses = processes.map(serv =>\\r\\n\\t\\t\\t[\\r\\n\\t\\t\\t\\t...serv.ps\\r\\n\\t\\t\\t\\t\\t.filter(({ args }) => args.length)\\r\\n\\t\\t\\t\\t\\t.map(({ filename, args, threads }) => ({\\r\\n\\t\\t\\t\\t\\t\\thosts: [serv.hostname],\\r\\n\\t\\t\\t\\t\\t\\targs,\\r\\n\\t\\t\\t\\t\\t\\ttarget: args[0],\\r\\n\\t\\t\\t\\t\\t\\tthreads,\\r\\n\\t\\t\\t\\t\\t\\tfilename,\\r\\n\\t\\t\\t\\t\\t\\ttype: Object.keys(processListPayloads).find((key) => processListPayloads[key].includes(filename)),\\r\\n\\t\\t\\t\\t\\t}))\\r\\n\\t\\t\\t\\t .filter(({ type }) => type)\\r\\n\\t\\t\\t])\\r\\n\\t\\t\\t.flat();\\r\\n\\r\\n\\t\\tawait this.#os.getNS(ns => {\\r\\n\\t\\t\\tprocesses = processes.map((process) => ({ ...process, expiry: this.#getProcessExpiryDetails(ns, process) }))\\r\\n\\t\\t})\\r\\n\\t\\t\\r\\n\\r\\n\\t\\tif (!disableGrouping) {\\r\\n\\t\\t\\tfor (let i = 0; i < processes.length; ++i) {\\r\\n\\t\\t\\t\\tlet j = processes.length\\r\\n\\t\\t\\t\\twhile (--j > i) {\\r\\n\\t\\t\\t\\t\\tif (processes[i].type === processes[j].type && JSON.stringify(processes[i].args) === JSON.stringify(processes[j].args)) {\\r\\n\\t\\t\\t\\t\\t\\tprocesses[i].threads += processes[j].threads\\r\\n\\t\\t\\t\\t\\t\\tprocesses[i].hosts = [...processes[i].hosts, ...processes[j].hosts]\\r\\n\\t\\t\\t\\t\\t\\tprocesses.splice(j, 1)\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn processes.sort((a, b) => {\\r\\n\\t\\t\\tconst valueA = a[sort.param]\\r\\n\\t\\t\\tconst valueB = b[sort.param]\\r\\n\\r\\n\\t\\t\\tif (sort.param === \\\"expiry\\\") {\\r\\n\\t\\t\\t\\treturn valueB.timeRunning / valueB.duration - valueA.timeRunning / valueA.duration\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tif (typeof valueA === \\\"string\\\") {\\r\\n\\t\\t\\t\\t\\treturn sort.isDescending ? valueB.localeCompare(valueA) : valueA.localeCompare(valueB)\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\treturn sort.isDescending ? valueB - valueA : valueA - valueB\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t})\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @param {NS} ns\\r\\n\\t * @param {{ filename: String, args: String[], hosts: String[] }} process\\r\\n\\t * @return {{duration: Number, timeRunning: Number}|null}\\r\\n\\t */\\r\\n\\t#getProcessExpiryDetails(ns, { filename, hosts, args }) {\\r\\n\\t\\tlet empty = { duration: 0, timeRunning: 0 };\\r\\n\\t\\tif (!ns.serverExists(hosts[0])) return empty;\\r\\n\\r\\n\\t\\tconst logs = ns.getScriptLogs(filename, hosts[0], ...args)\\r\\n\\t\\tlet i = logs.length\\r\\n\\t\\tlet log\\r\\n\\t\\tlet scriptData = ns.getRunningScript(filename, hosts[0], ...args)\\r\\n\\t\\tif (!scriptData) return empty;\\r\\n\\r\\n\\t\\tconst { onlineRunningTime, offlineRunningTime } = scriptData\\r\\n\\t\\tconst timeRunning = onlineRunningTime + offlineRunningTime\\r\\n\\t\\tconst pattern = new RegExp(/^sleep:.+?([\\\\d.]+)/)\\r\\n\\t\\tconst duration = logs.reduce((total, logOutput) => {\\r\\n\\t\\t\\tconst match = logOutput.match(pattern)\\r\\n\\t\\t\\treturn total + (match?.[1] ? Number(match?.[1]) : 0)\\r\\n\\t\\t}, 0) / 1000\\r\\n\\t\\tconst returnValue = {\\r\\n\\t\\t\\tduration,\\r\\n\\t\\t\\ttimeRunning\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\twhile (!log && i--) {\\r\\n\\t\\t\\tif (logs[i].indexOf(\\\": Executing\\\") !== -1) {\\r\\n\\t\\t\\t\\tlog = logs[i]\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (log) {\\r\\n\\t\\t\\tconst time = log.match(/([0-9.])+ /g).map(Number)\\r\\n\\t\\t\\treturnValue.duration += time.length > 1 ? time[0] * 60 + time[1] : time[0]\\r\\n\\t\\t}\\r\\n\\t\\treturn returnValue\\r\\n\\t}\\r\\n\\r\\n\\tasync #getRunningProcesses() {\\r\\n\\t\\tlet processes = this.#getRootedServers()\\r\\n\\t\\t\\t.filter(server => server.ramUsed)\\r\\n\\r\\n\\t\\tawait this.#os.getNS(ns => {\\r\\n\\t\\t\\tprocesses = processes.filter(serv => ns.serverExists(serv.hostname))\\r\\n\\t\\t\\tprocesses.forEach(server => {\\r\\n\\t\\t\\t\\tserver.ps = ns.ps(server.hostname)\\r\\n\\t\\t\\t})\\r\\n\\t\\t})\\r\\n\\t\\t\\r\\n\\t\\treturn processes;\\r\\n\\t}\\r\\n\\r\\n\\t#getRootedServers() {\\r\\n\\t\\tlet servers = this.#os.getServersManager().serversObjFull;\\r\\n\\t\\treturn servers.filter(serv => serv.hasAdminRights)\\r\\n\\t}\\r\\n\\r\\n\\t#os\\r\\n}\\r\\n\\r\\nclass ProcessList {\\r\\n\\t/** @param {import('/os/plugins/api_adapter').API_Object} api */\\r\\n\\tconstructor(api) {\\r\\n\\t\\tthis.#os = api.os;\\r\\n\\t\\tthis.#classes = api.classes;\\r\\n\\t\\tthis.#utils = api.utils\\r\\n\\r\\n\\t\\tthis.#attacksMonitor = new AttacksMonitor(api);\\r\\n\\t}\\r\\n\\r\\n\\tinit() {\\r\\n\\t\\tthis.#sort = {\\r\\n\\t\\t\\tparam: \\\"expiry\\\",\\r\\n\\t\\t\\tisDescending: true,\\r\\n\\t\\t}\\r\\n\\t\\tthis.#os.getGUI().injectCSS(css, \\\"process-list-style\\\");\\r\\n\\t\\tthis.#createWidget()\\r\\n\\t}\\r\\n\\r\\n\\tasync run() {\\r\\n\\t\\tlet resizeOnce = true;\\r\\n\\t\\twhile (this.#contentDiv.parentElement) {\\r\\n\\t\\t\\tif (this.#widget.isVisible) {\\r\\n\\t\\t\\t\\tthis.#contentDiv.querySelector(\\\".process-list__body\\\").innerHTML = await this.#renderAttacksHTML();\\r\\n\\t\\t\\t\\t//await ns.sleep(200)\\r\\n\\r\\n\\t\\t\\t\\tif (resizeOnce) {\\r\\n\\t\\t\\t\\t\\tlet elem = this.#contentDiv.querySelector('.process-list');\\r\\n\\t\\t\\t\\t\\tconsole.log(elem.getBoundingClientRect().width, elem.getBoundingClientRect().height)\\r\\n\\t\\t\\t\\t\\telem.parentNode.parentNode.style.width = Math.min(Math.max(elem.getBoundingClientRect().width + 10, 200), 400) + 'px';\\r\\n\\t\\t\\t\\t\\telem.parentNode.parentNode.style.height = Math.min(Math.max(elem.getBoundingClientRect().height + 10, 200), 700) + 'px';\\r\\n\\t\\t\\t\\t\\tresizeOnce = false;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tawait this.#utils.sleep(300)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t#createWidget() {\\r\\n\\t\\tthis.#createWindowWidget()\\r\\n\\t\\t\\r\\n\\t\\tthis.#contentDiv.classList.add(\\\"window--script-monitor\\\")\\r\\n\\r\\n\\r\\n\\r\\n\\t\\tconst sort = this.#sort;\\r\\n\\t\\tArray.from(this.#contentDiv.querySelectorAll(\\\"[data-sort]\\\")).forEach((element) => {\\r\\n\\t\\t\\tconst param = element.dataset.sort\\r\\n\\t\\t\\telement.addEventListener(\\\"click\\\", () => {\\r\\n\\t\\t\\t\\tif (sort.param === param) {\\r\\n\\t\\t\\t\\t\\tsort.isDescending = !sort.isDescending\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tsort.param = param\\r\\n\\t\\t\\t\\t\\tsort.isDescending = true\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t})\\r\\n\\t\\t})\\r\\n\\t}\\r\\n\\r\\n\\t#createWindowWidget() {\\r\\n\\t\\tlet windowWidget = this.#classes.newWindowWidget(this);\\r\\n\\t\\twindowWidget.init();\\r\\n\\t\\twindowWidget.getContentDiv().classList.add('greenScrollbar')\\r\\n\\t\\twindowWidget.getContentDiv().classList.add('grayBackground')\\r\\n\\t\\twindowWidget.getContentDiv().classList.add('process-list__container')\\r\\n\\t\\twindowWidget.setTitle('Process list')\\r\\n\\t\\twindowWidget.getContentDiv().innerHTML =`\\r\\n\\t\\t<div class=\\\"process-list\\\">\\r\\n\\t\\t\\t<div class=\\\"process-list__head\\\">\\r\\n\\t\\t\\t\\t<button class=\\\"process-cell\\\" data-sort=\\\"target\\\">Target</button>\\r\\n\\t\\t\\t\\t<button class=\\\"process-cell\\\" data-sort=\\\"threads\\\">Threads</button>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div class=\\\"process-list__body\\\"></div>\\r\\n\\t\\t</div>\\r\\n\\t`\\r\\n\\r\\n\\t\\twindowWidget.show();\\r\\n\\r\\n\\t\\tthis.#widget = windowWidget\\r\\n\\t\\tthis.#contentDiv = windowWidget.getContentDiv()\\r\\n\\t}\\r\\n\\r\\n\\tasync #renderAttacksHTML() {\\r\\n\\t\\tlet disableGrouping = true;\\r\\n\\t\\tlet attacks = await this.#attacksMonitor.populateProcesses(disableGrouping, this.#sort);\\r\\n\\r\\n\\t\\tlet html = attacks.map((process) => this.#renderProcessAsRow(process)).join(\\\"\\\")\\r\\n\\t\\treturn html;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @param {{ type: String, target: String, hosts: String[], threads: Number, expiry: { duration: Number, timeRunning: Number }? }} process\\r\\n\\t * @return {String}\\r\\n\\t **/\\r\\n\\t#renderProcessAsRow({ type, target, hosts, threads, expiry }) {\\r\\n\\t\\tconst row = globalThis[\\\"document\\\"].createElement(\\\"div\\\")\\r\\n\\t\\tconst progress = expiry ? Math.min(100, expiry.timeRunning / expiry.duration * 100).toFixed(2) : null\\r\\n\\r\\n\\t\\trow.classList.add(\\\"process\\\", `process--type-${type}`)\\r\\n\\t\\trow.insertAdjacentHTML(\\\"beforeend\\\", `\\r\\n\\t\\t<div class=\\\"process-cell process__item\\\" title=\\\"Running on ${hosts.join(\\\", \\\")}\\\">\\r\\n\\t\\t\\t${target}\\r\\n\\t\\t\\t${progress ?\\r\\n\\t\\t\\t\\t`<span class=\\\"process__progress-bar\\\" style=\\\"width: ${progress}%\\\"></span>` :\\r\\n\\t\\t\\t\\t\\\"\\\"\\r\\n\\t\\t\\t}\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"process-cell process__threads\\\">\\r\\n\\t\\t\\t${threads.toLocaleString()}\\r\\n\\t\\t</div>\\r\\n\\t`)\\r\\n\\r\\n\\t\\treturn row.outerHTML\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t#os\\r\\n\\t#classes\\r\\n\\t#utils\\r\\n\\r\\n\\t/** @type {import('/os/window_widget.js').WindowWidget} */\\r\\n\\t#widget\\r\\n\\t#contentDiv\\r\\n\\t#attacksMonitor\\r\\n\\t#sort\\r\\n}\\r\\n\",\"filename\":\"/os/plugins/process-list/process-list.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":692}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const css = `\\n\\t.window.window--script-monitor {\\n\\t\\theight: 400px;\\n\\t\\twidth: 300px;\\n\\t}\\n\\n\\t.process-list__container .process-list__head button {\\n\\t\\tbackground: none;\\n\\t\\tborder: none;\\n\\t\\tcolor: #FFF;\\n\\t\\tfont: inherit;\\n\\t\\tpointer-events: cursor;\\n\\t}\\n\\n\\t.process-list__body {\\n\\t\\tbackground: #000000d6;\\n\\t\\tcolor: #0f0;\\n\\t}\\n\\n\\t.process-list > * {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-wrap: wrap;\\n\\t}\\n\\n\\t.process-list__head {\\n\\t\\tflex: 1 0 auto;\\n\\t\\tmargin-bottom: 4px;\\n\\t}\\n\\n\\t.process-list__head .process-cell {\\n\\t\\tdisplay: block;\\n\\t}\\n\\n\\t.process {\\n\\t\\tdisplay: flex;\\n\\t\\tflex: 1 0 100%;\\n\\t}\\n\\n\\t.process-cell {\\n\\t\\tpadding: 2px 1px;\\n\\t\\ttext-align: left;\\n\\t}\\n\\n\\t.process-cell:last-child {\\n\\t\\tmargin-left: auto;\\n\\t\\ttext-align: right;\\n\\t}\\n\\n\\t.process__progress-bar {\\n\\t\\tbackground: currentColor;\\n\\t\\tbottom: 0;\\n\\t\\tleft: 0;\\n\\t\\topacity: 0.3;\\n\\t\\tposition: absolute;\\n\\t\\ttop: 0;\\n\\t}\\n\\n\\t.process {\\n\\t\\tcolor: #00a5f3;\\n\\t\\tdisplay: flex;\\n\\t\\tflex: 1 0 100%;\\n\\t\\tposition: relative;\\n\\t}\\n\\n\\t.process--type-weaken {\\n\\t\\tcolor: #f3f330;\\n\\t}\\n\\n\\t.process--type-hack {\\n\\t\\tcolor: #33d833;\\n\\t}\\n`\\n\",\"filename\":\"/os/plugins/process-list/process-list_css.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const processListPayloads = {\\r\\n\\tgrow: [\\\"grow.js\\\"],\\r\\n\\thack: [\\\"hack.js\\\"],\\r\\n\\tweaken: [\\\"weak.js\\\"]\\r\\n}\\r\\n\",\"filename\":\"/os/plugins/process-list/process-list.config.example.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// fork: https://github.com/lethern/bitpacker\\r\\n// original: https://github.com/davidsiems/bitpacker\\r\\n\\r\\nexport const BP_LIB = {\\r\\n\\tListBitpacks,\\r\\n\\tLoadManifest,\\r\\n\\tBitpackAdd,\\r\\n}\\r\\n\\r\\nconst baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\r\\nconst DownloadPackageURL = `${baseLiveURL}/DownloadPackage`;\\r\\n\\r\\nasync function ListBitpacks() {\\r\\n\\tlet downloadResultOp = new Promise((resolve, reject) => {\\r\\n\\t\\tlet xhr = new XMLHttpRequest();\\r\\n\\t\\tlet apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\r\\n\\t\\tlet url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\r\\n\\t\\txhr.onreadystatechange = function () {\\r\\n\\t\\t\\tif (xhr.readyState != XMLHttpRequest.DONE) return;\\r\\n\\r\\n\\t\\t\\ttry {\\r\\n\\t\\t\\t\\tlet responseJson = JSON.parse(xhr.responseText);\\r\\n\\t\\t\\t\\tif (responseJson.error) {\\r\\n\\t\\t\\t\\t\\treject(responseJson.error);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tlet docs = [];\\r\\n\\t\\t\\t\\t\\tfor (let docIndex in responseJson.documents) {\\r\\n\\t\\t\\t\\t\\t\\tlet doc = responseJson.documents[docIndex];\\r\\n\\t\\t\\t\\t\\t\\tdocs.push(ConvertFirestoreObject(doc.fields));\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tresolve(docs);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcatch (syntaxError) {\\r\\n\\t\\t\\t\\treject(syntaxError);\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\t\\txhr.onerror = (e) => {\\r\\n\\t\\t\\treject(e);\\r\\n\\t\\t};\\r\\n\\t\\txhr.open('GET', url, true);\\r\\n\\t\\txhr.send(null);\\r\\n\\t});\\r\\n\\r\\n\\treturn await downloadResultOp;\\r\\n}\\r\\n\\r\\nfunction ConvertFirestoreObject(json) {\\r\\n\\tconst prop = GetFirestoreProperty(json);\\r\\n\\tif (prop === 'doubleValue' || prop === 'integerValue') {\\r\\n\\t\\tjson = Number(json[prop]);\\r\\n\\t}\\r\\n\\telse if (prop === 'arrayValue') {\\r\\n\\t\\tjson = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\r\\n\\t}\\r\\n\\telse if (prop === 'mapValue') {\\r\\n\\t\\tjson = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\r\\n\\t}\\r\\n\\telse if (prop === 'geoPointValue') {\\r\\n\\t\\tjson = {\\r\\n\\t\\t\\tlatitude: 0, longitude: 0,\\r\\n\\t\\t\\t...json[prop]\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\telse if (prop) {\\r\\n\\t\\tjson = json[prop];\\r\\n\\t}\\r\\n\\telse if (typeof json === 'object') {\\r\\n\\t\\tObject.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\r\\n\\t}\\r\\n\\treturn json;\\r\\n}\\r\\n\\r\\nfunction GetFirestoreProperty(value) {\\r\\n\\tconst props = {\\r\\n\\t\\tarrayValue: true,\\r\\n\\t\\tbytesValue: true,\\r\\n\\t\\tbooleanValue: true,\\r\\n\\t\\tdoubleValue: true,\\r\\n\\t\\tgeoPointValue: true,\\r\\n\\t\\tintegerValue: true,\\r\\n\\t\\tmapValue: true,\\r\\n\\t\\tnullValue: true,\\r\\n\\t\\treferenceValue: true,\\r\\n\\t\\tstringValue: true,\\r\\n\\t\\ttimestampValue: true\\r\\n\\t};\\r\\n\\treturn Object.keys(value).find((k) => props[k]);\\r\\n}\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').OS_API} os */\\r\\nasync function LoadManifest(os) {\\r\\n\\ttry {\\r\\n\\t\\tconst path = 'packages.txt';\\r\\n\\t\\tlet manifestJSON = await os.getNS(ns => ns.read(path));\\r\\n\\r\\n\\t\\tif (!manifestJSON || !manifestJSON.length) return; // throw \\\"Missing or empty file \\\" + path;\\r\\n\\t\\tlet manifest = JSON.parse(manifestJSON);\\r\\n\\t\\treturn manifest;\\r\\n\\t}\\r\\n\\tcatch (syntaxError) {\\r\\n\\t\\tthrow \\\"Couldn't parse packages.txt: \\\"+syntaxError.message;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').OS_API} os */\\r\\nasync function BitpackAdd(os, options, bitpack, version) {\\r\\n\\tif (!version)\\r\\n\\t\\tversion = 'latest';\\r\\n\\tlet manifest = await LoadManifest(os);\\r\\n\\r\\n\\tif (manifest === undefined)\\r\\n\\t\\tmanifest = await CreateManifest(os);\\r\\n\\r\\n\\tlet existing = manifest.bitpacks[bitpack];\\r\\n\\r\\n\\tif ((existing && existing !== version) || !existing) {\\r\\n\\t\\tlet metadata = await DownloadBitpack(os, options, bitpack, version);\\r\\n\\t\\tif (!metadata) {\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tmanifest.bitpacks[bitpack] = `${metadata.version}`;\\r\\n\\t\\t\\tawait SaveManifest(os, manifest);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\treturn true;\\r\\n}\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').OS_API} os */\\r\\nasync function CreateManifest(os) {\\r\\n\\tlet manifest = {\\r\\n\\t\\tbitpacks: {}\\r\\n\\t};\\r\\n\\tawait SaveManifest(os, manifest);\\r\\n\\treturn manifest;\\r\\n}\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').OS_API} os */\\r\\nasync function SaveManifest(os, manifest) {\\r\\n\\tlet manifestJSON = JSON.stringify(manifest, undefined, 4);\\r\\n\\tawait os.getNS(ns => ns.write('packages.txt', manifestJSON, 'w'));\\r\\n}\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').OS_API} os */\\r\\nasync function DownloadBitpack(os, options, bitpack, version) {\\r\\n\\tlet request = {\\r\\n\\t\\tbitpack: bitpack,\\r\\n\\t\\tversion: version\\r\\n\\t};\\r\\n\\r\\n\\tlet downloadResultOp = new Promise((resolve, reject) => {\\r\\n\\t\\tlet xhr = new XMLHttpRequest();\\r\\n\\t\\t\\r\\n\\t\\txhr.onreadystatechange = function () {\\r\\n\\t\\t\\tif (xhr.readyState == XMLHttpRequest.DONE) {\\r\\n\\t\\t\\t\\ttry {\\r\\n\\t\\t\\t\\t\\tlet responseJson = JSON.parse(xhr.responseText);\\r\\n\\t\\t\\t\\t\\tif (responseJson.error) {\\r\\n\\t\\t\\t\\t\\t\\treject(responseJson.error);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\tresolve(responseJson.bitpack);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tcatch (syntaxError) {\\r\\n\\t\\t\\t\\t\\treject(syntaxError);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t};\\r\\n\\t\\txhr.onerror = (e) => {\\r\\n\\t\\t\\treject(e);\\r\\n\\t\\t};\\r\\n\\t\\txhr.open('POST', DownloadPackageURL, true);\\r\\n\\t\\txhr.setRequestHeader('Content-Type', 'application/json');\\r\\n\\t\\txhr.send(JSON.stringify(request));\\r\\n\\t});\\r\\n\\r\\n\\tlet payload = await downloadResultOp;\\r\\n\\tif (!payload) {\\r\\n\\t\\tthrow `Failed to download ${bitpack}:${version}`;\\r\\n\\t}\\r\\n\\tDeleteBitpack(os, options, bitpack);\\r\\n\\r\\n\\tfor (let filename in payload.files) {\\r\\n\\t\\tawait os.getNS(ns => ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w'));\\r\\n\\t}\\r\\n\\t//Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\r\\n\\treturn payload.metadata;\\r\\n}\\r\\n\\r\\n/** @param {import('/os/plugins/api_adapter.js').OS_API} os */\\r\\nasync function DeleteBitpack(os, options, bitpack) {\\r\\n\\tawait os.getNS(ns => {\\r\\n\\t\\tlet files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`)\\r\\n\\t\\tfor (let file of files) {\\r\\n\\t\\t\\tif (!file.startsWith(`/bitpacks/${bitpack}`))\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\tns.rm(file);\\r\\n\\t\\t}\\r\\n\\t});\\r\\n}\\r\\n\",\"filename\":\"/os/plugins/bitpacker/bp_lib.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nimport { BP_LIB } from '/os/plugins/bitpacker/bp_lib.js'\\r\\n\\r\\nasync function mainPlugin(api) {\\r\\n\\tlet bitpacker = new BitpackerPlugin(api);\\r\\n\\r\\n\\tbitpacker.init()\\r\\n\\r\\n\\tbitpacker.run();\\r\\n}\\r\\n\\r\\nclass BitpackerPlugin {\\r\\n\\t/** @param {import('/os/plugins/api_adapter').API_Object} api */\\r\\n\\tconstructor(api) {\\r\\n\\t\\tthis.os = api.os;\\r\\n\\t\\tthis.#classes = api.classes;\\r\\n\\t\\tthis.#utils = api.utils\\r\\n\\r\\n\\t\\tthis.#windowWidget = this.#classes.newWindowWidget(this);\\r\\n\\t\\t//this.#windowWidget.listen(WindowWidget_EVENT.SHOW, () => this.#onShow());\\r\\n\\r\\n\\t\\tthis.adapter = new BitpackerAdapter(api);\\r\\n\\t}\\r\\n\\r\\n\\tinit() {\\r\\n\\t\\tthis.os.getGUI().injectCSS(bitpacker_css, 'bitpacker_css');\\r\\n\\t\\tthis.#createWidget()\\r\\n\\r\\n\\t\\tthis.#availableLibrary = new BitpackerAvailableLibrary(this.#contentDiv, this);\\r\\n\\t\\tthis.#installedLibrary = new BitpackerInstalledLibrary(this.#contentDiv, this);\\r\\n\\t\\tthis.#myPacksLibrary = new BitpackerMyPacksLibrary(this.#contentDiv, this);\\r\\n\\t\\tthis.#currentVisible = this.#availableLibrary;\\r\\n\\t}\\r\\n\\r\\n\\tasync run() {\\r\\n\\t\\tawait this.#currentVisible.render()\\r\\n\\t}\\r\\n\\r\\n\\t#classes\\r\\n\\t#utils\\r\\n\\t/** @type {import('/os/window_widget.js').WindowWidget} */\\r\\n\\t#windowWidget\\r\\n\\t#contentDiv\\r\\n\\t#aboutWindow\\r\\n\\tadapter\\r\\n\\t#availableLibrary\\r\\n\\t#installedLibrary\\r\\n\\t#myPacksLibrary\\r\\n\\t/** @type {LibraryList} */\\r\\n\\t#currentVisible\\r\\n\\r\\n\\r\\n\\t#createWidget() {\\r\\n\\t\\tlet windowWidget = this.#windowWidget;\\r\\n\\t\\twindowWidget.init();\\r\\n\\t\\twindowWidget.getContentDiv().style.display = 'block';\\r\\n\\t\\twindowWidget.getContentDiv().classList.add('whiteScrollbar')\\r\\n\\t\\twindowWidget.getContentDiv().classList.add('grayBackground')\\r\\n\\t\\twindowWidget.setTitle('Bitpacker (Work In Progress)')\\r\\n\\r\\n\\t\\twindowWidget.addMenuItem({ label: 'Available', callback: () => this.#onAvailableClick() })\\r\\n\\t\\twindowWidget.addMenuItem({ label: 'Installed', callback: () => this.#onInstalledClick() })\\r\\n\\t\\t//windowWidget.addMenuItem({ label: 'My Packs', callback: () => this.#onMyPacksClick() })\\r\\n\\r\\n\\t\\twindowWidget.addMenuItem({ label: 'About', callback: () => this.#onAboutMenuClick() })\\r\\n\\t\\twindowWidget.show();\\r\\n\\r\\n\\t\\tthis.#contentDiv = windowWidget.getContentDiv()\\r\\n\\t}\\r\\n\\r\\n\\t#onAvailableClick() {\\r\\n\\t\\tif (this.#currentVisible == this.#availableLibrary) return;\\r\\n\\t\\tthis.#currentVisible = this.#availableLibrary;\\r\\n\\t\\tthis.#currentVisible.render();\\r\\n\\t}\\r\\n\\r\\n\\t#onInstalledClick() {\\r\\n\\t\\tif (this.#currentVisible == this.#installedLibrary) return;\\r\\n\\t\\tthis.#currentVisible = this.#installedLibrary;\\r\\n\\t\\tthis.#currentVisible.render();\\r\\n\\t}\\r\\n\\r\\n\\t#onMyPacksClick() {\\r\\n\\t\\tif (this.#currentVisible == this.#myPacksLibrary) return;\\r\\n\\t\\tthis.#currentVisible = this.#myPacksLibrary;\\r\\n\\t\\tthis.#currentVisible.render();\\r\\n\\t}\\r\\n\\r\\n\\t#onAboutMenuClick() {\\r\\n\\t\\tif (!this.#aboutWindow) {\\r\\n\\t\\t\\tthis.#aboutWindow = this.os.getGUI().createAboutWindow({\\r\\n\\t\\t\\t\\t'Name': 'Packages Manager',\\r\\n\\t\\t\\t\\t'MyPacks': 'degaz#3692',\\r\\n\\t\\t\\t\\t'URL': 'https://github.com/davidsiems/bitpacker',\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t\\tthis.#aboutWindow.show()\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\nclass LibraryList {\\r\\n\\tconstructor(contentDiv) {\\r\\n\\t\\tthis.contentDiv = contentDiv;\\r\\n\\t}\\r\\n\\r\\n\\t// interface\\r\\n\\t/** @returns {Promise<any>} */\\r\\n\\tasync getBitpacks() { }\\r\\n\\tprintRow(row, lis) { }\\r\\n\\t/** @returns {string[]} */\\r\\n\\tgetHeaders() { }\\r\\n\\r\\n\\tasync render() {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tlet data = await this.getBitpacks();\\r\\n\\t\\t\\tthis.listData = {};\\r\\n\\t\\t\\tthis.renderBitpacks(data);\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tthis.renderError(e);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\trenderBitpacks(data) {\\r\\n\\t\\tthis.contentDiv.innerHTML = '';\\r\\n\\t\\tlet list = LibraryList.createTable(this.contentDiv, 'bitpacks-list')\\r\\n\\r\\n\\t\\tthis.renderHeader(list);\\r\\n\\r\\n\\t\\tlet tbody = globalThis['document'].createElement('tbody');\\r\\n\\t\\tlist.appendChild(tbody);\\r\\n\\r\\n\\t\\tdata.forEach(row => {\\r\\n\\t\\t\\tthis.printRow(row, tbody);\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\trenderHeader(list) {\\r\\n\\t\\tlet doc = globalThis['document'];\\r\\n\\t\\tlet headers = this.getHeaders();\\r\\n\\t\\tlet header_div = doc.createElement('thead');\\r\\n\\r\\n\\t\\tlist.appendChild(header_div);\\r\\n\\r\\n\\t\\theaders.forEach(h => {\\r\\n\\t\\t\\theader_div.appendChild(doc.createElement(\\\"th\\\")).\\r\\n\\t\\t\\t\\tappendChild(doc.createTextNode(h));\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tshowMore(rowData) {\\r\\n\\t\\tconsole.log('showMore', rowData)\\r\\n\\t\\tif (!rowData || !rowData.detailsRow) return;\\r\\n\\r\\n\\t\\tif (this.lastShownDetails) {\\r\\n\\t\\t\\tthis.lastShownDetails.style['display'] = 'none';\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconsole.log('showMore ok');\\r\\n\\t\\trowData.detailsRow.style['display'] = '';\\r\\n\\t\\tthis.lastShownDetails = rowData.detailsRow;\\r\\n\\t}\\r\\n\\r\\n\\trenderError(e) {\\r\\n\\t\\tconsole.error(e);\\r\\n\\t\\tthis.contentDiv.innerHTML = `\\r\\n<div>There was an error: ${e}</div>`;\\r\\n\\t}\\r\\n\\r\\n\\tstatic separateMainAndDetails(row, mainCells, detailsCells, columns) {\\r\\n\\t\\tObject.entries(row).forEach(([key, val]) => {\\r\\n\\t\\t\\tlet indx = columns.findIndex(col => col == key);\\r\\n\\t\\t\\tif (indx != -1) {\\r\\n\\t\\t\\t\\tmainCells[indx] = val;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tdetailsCells.push([key, val]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tstatic createTable(parent, css) {\\r\\n\\t\\tlet div = globalThis['document'].createElement('table');\\r\\n\\t\\tif (parent) parent.appendChild(div);\\r\\n\\t\\tif (css) div.classList.add(css);\\r\\n\\t\\treturn div;\\r\\n\\t}\\r\\n\\r\\n\\tstatic createRow(parent, css) {\\r\\n\\t\\tlet div = globalThis['document'].createElement('tr');\\r\\n\\t\\tif (parent) parent.appendChild(div);\\r\\n\\t\\tif (css) div.classList.add(css);\\r\\n\\t\\treturn div;\\r\\n\\t}\\r\\n\\r\\n\\tstatic createCell(text, parent) {\\r\\n\\t\\tlet div = globalThis['document'].createElement('td');\\r\\n\\t\\tdiv.textContent = text;\\r\\n\\t\\tif (parent) parent.appendChild(div);\\r\\n\\t\\treturn div;\\r\\n\\t}\\r\\n\\r\\n\\tstatic createButton(text, callback, parent) {\\r\\n\\t\\tlet cell = LibraryList.createCell('', parent);\\r\\n\\t\\tlet btn = globalThis['document'].createElement('button');\\r\\n\\t\\tbtn.type = 'button';\\r\\n\\t\\tbtn.textContent = text;\\r\\n\\t\\tbtn.addEventListener('click', callback);\\r\\n\\t\\tcell.appendChild(btn);\\r\\n\\t\\treturn btn;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nclass BitpackerAvailableLibrary extends LibraryList{\\r\\n\\t/** @param {BitpackerPlugin} bitpackerPlugin */\\r\\n\\tconstructor(contentDiv, bitpackerPlugin) {\\r\\n\\t\\tsuper(contentDiv)\\r\\n\\t\\tthis.#bitpackerPlugin = bitpackerPlugin;\\r\\n\\t}\\r\\n\\r\\n\\tasync getBitpacks() {\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tthis.owned = await this.#bitpackerPlugin.adapter.getInstalledBitpacks();\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tthis.owned = {};\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\treturn await this.#bitpackerPlugin.adapter.getAvailableBitpacks();\\r\\n\\t}\\r\\n\\r\\n\\tgetHeaders() {\\r\\n\\t\\treturn [\\\"\\\", \\\"\\\", \\\"Name\\\", \\\"Description\\\"]\\r\\n\\t}\\r\\n\\r\\n\\tprintRow(row, parent) {\\r\\n\\t\\tlet uniqueName = row.uniqueName;\\r\\n\\t\\tlet data = {};\\r\\n\\t\\tif (uniqueName) {\\r\\n\\t\\t\\tdata = this.listData[uniqueName] = { name: uniqueName };\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet mainRow = data.mainRow = LibraryList.createRow(parent);\\r\\n\\t\\tlet detailsRow = data.detailsRow = LibraryList.createRow(parent, 'bpDetails');\\r\\n\\t\\tdetailsRow.style['display'] = 'none';\\r\\n\\r\\n\\t\\t// buttons\\r\\n\\t\\tif (this.owned[uniqueName]) {\\r\\n\\t\\t\\tLibraryList.createCell('installed', mainRow);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tLibraryList.createButton('install', () => this.#bitpackerPlugin.adapter.addPack(data), mainRow);\\r\\n\\t\\t}\\r\\n\\t\\tLibraryList.createButton('more', () => this.showMore(data), mainRow);\\r\\n\\r\\n\\t\\t// info\\r\\n\\t\\tlet mainCells = [];\\r\\n\\t\\tlet detailsCells = [];\\r\\n\\t\\tlet columns = [\\\"uniqueName\\\", \\\"shortDescription\\\", \\\"myPacks\\\"];\\r\\n\\t\\tLibraryList.separateMainAndDetails(row, mainCells, detailsCells, columns)\\r\\n\\r\\n\\t\\tfor (let i = 0; i < columns.length; ++i) {\\r\\n\\t\\t\\tLibraryList.createCell(mainCells[i] || '', mainRow);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// details\\r\\n\\t\\tlet cell = LibraryList.createCell(\\r\\n\\t\\t\\tdetailsCells.map(d => d[0]+\\\": \\\"+d[1]).join(\\\"; \\\"),\\r\\n\\t\\t\\tdetailsRow);\\r\\n\\t\\tcell.colSpan = 4;\\r\\n\\t}\\r\\n\\r\\n\\t#bitpackerPlugin\\r\\n}\\r\\n\\r\\nclass BitpackerInstalledLibrary extends LibraryList {\\r\\n\\t/** @param {BitpackerPlugin} bitpackerPlugin */\\r\\n\\tconstructor(contentDiv, bitpackerPlugin) {\\r\\n\\t\\tsuper(contentDiv)\\r\\n\\t\\tthis.#bitpackerPlugin = bitpackerPlugin;\\r\\n\\t}\\r\\n\\r\\n\\tasync getBitpacks() {\\r\\n\\t\\tlet all = await this.#bitpackerPlugin.adapter.getAvailableBitpacks();\\r\\n\\t\\tlet bitpacks = await this.#bitpackerPlugin.adapter.getInstalledBitpacks();\\r\\n\\t\\treturn Object.entries(bitpacks).map(([k, v]) => ({\\r\\n\\t\\t\\tuniqueName: k,\\r\\n\\t\\t\\tversion: v,\\r\\n\\t\\t\\tdescription: all[k] ?? '',\\r\\n\\t\\t}));\\r\\n\\t}\\r\\n\\r\\n\\tgetHeaders() {\\r\\n\\t\\treturn [\\\"\\\", \\\"\\\", \\\"Name\\\", \\\"Version\\\"]\\r\\n\\t}\\r\\n\\r\\n\\tprintRow(row, parent) {\\r\\n\\t\\tlet uniqueName = row.uniqueName;\\r\\n\\t\\tlet data = {};\\r\\n\\t\\tif (uniqueName) {\\r\\n\\t\\t\\tdata = this.listData[uniqueName] = {};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet mainRow = data.mainRow = LibraryList.createRow(parent);\\r\\n\\t\\tlet detailsRow = data.detailsRow = LibraryList.createRow(parent, 'bpDetails');\\r\\n\\t\\tdetailsRow.style['display'] = 'none';\\r\\n\\r\\n\\t\\t// buttons\\r\\n\\t\\t//LibraryList.createButton('install', () => this.#bitpackerPlugin.adapter.addPack(this.listData[uniqueName]), mainRow);\\r\\n\\t\\t//LibraryList.createButton('more', () => this.showMore(this.listData[uniqueName]), mainRow);\\r\\n\\r\\n\\t\\t// info\\r\\n\\t\\tlet mainCells = [];\\r\\n\\t\\tlet detailsCells = [];\\r\\n\\t\\tlet columns = [\\\"uniqueName\\\", \\\"version\\\", \\\"description\\\"];\\r\\n\\t\\tLibraryList.separateMainAndDetails(row, mainCells, detailsCells, columns)\\r\\n\\r\\n\\t\\tfor (let i = 0; i < columns.length; ++i) {\\r\\n\\t\\t\\tLibraryList.createCell(mainCells[i] || '', mainRow);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// details\\r\\n\\t\\tlet cell = LibraryList.createCell(\\r\\n\\t\\t\\tdetailsCells.map(d => d[0] + \\\": \\\" + d[1]).join(\\\"; \\\"),\\r\\n\\t\\t\\tdetailsRow);\\r\\n\\t\\tcell.colSpan = 2;\\r\\n\\t}\\r\\n\\r\\n\\t#bitpackerPlugin\\r\\n}\\r\\n\\r\\nclass BitpackerMyPacksLibrary extends LibraryList {\\r\\n\\t/** @param {BitpackerPlugin} bitpackerPlugin */\\r\\n\\tconstructor(contentDiv, bitpackerPlugin) {\\r\\n\\t\\tsuper(contentDiv)\\r\\n\\t\\tthis.#bitpackerPlugin = bitpackerPlugin;\\r\\n\\t}\\r\\n\\r\\n\\tasync getBitpacks() {\\r\\n\\t\\treturn await BP_LIB.ListBitpacks();\\r\\n\\t}\\r\\n\\r\\n\\tprintRow(row, parent) {\\r\\n\\t\\tlet uniqueName = row.uniqueName;\\r\\n\\t\\tlet data = {};\\r\\n\\t\\tif (uniqueName) {\\r\\n\\t\\t\\tdata = this.listData[uniqueName] = {};\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet mainRow = data.mainRow = LibraryList.createRow(parent);\\r\\n\\t\\tlet detailsRow = data.detailsRow = LibraryList.createRow(parent, 'bpDetails');\\r\\n\\t\\tdetailsRow.style['display'] = 'none';\\r\\n\\r\\n\\t\\t// buttons\\r\\n\\t\\tLibraryList.createButton('install', () => this.#bitpackerPlugin.adapter.addPack(this.listData[uniqueName]), mainRow);\\r\\n\\t\\tLibraryList.createButton('more', () => this.showMore(this.listData[uniqueName]), mainRow);\\r\\n\\r\\n\\t\\t// info\\r\\n\\t\\tlet mainCells = [];\\r\\n\\t\\tlet detailsCells = [];\\r\\n\\t\\tlet columns = [\\\"uniqueName\\\", \\\"shortDescription\\\", \\\"myPacks\\\"];\\r\\n\\t\\tLibraryList.separateMainAndDetails(row, mainCells, detailsCells, columns)\\r\\n\\r\\n\\t\\tfor (let i = 0; i < columns.length; ++i) {\\r\\n\\t\\t\\tLibraryList.createCell(mainCells[i] || '', mainRow);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// details\\r\\n\\t\\tlet cell = LibraryList.createCell(\\r\\n\\t\\t\\tdetailsCells.map(d => d[0] + \\\": \\\" + d[1]).join(\\\"; \\\"),\\r\\n\\t\\t\\tdetailsRow);\\r\\n\\t\\tcell.colSpan = 4;\\r\\n\\t}\\r\\n\\r\\n\\t#bitpackerPlugin\\r\\n}\\r\\n\\r\\nclass BitpackerAdapter {\\r\\n\\tconstructor(api) {\\r\\n\\t\\tthis.#api = api;\\r\\n\\t\\tthis.#os = api.os;\\r\\n\\t}\\r\\n\\r\\n\\tasync addPack(data) {\\r\\n\\t\\tif (!data) return;\\r\\n\\r\\n\\t\\ttry {\\r\\n\\t\\t\\tlet options = {};\\r\\n\\t\\t\\tlet bitpack = data.name;\\r\\n\\t\\t\\tlet version = \\\"\\\";\\r\\n\\t\\t\\tawait BP_LIB.BitpackAdd(this.#os, options, bitpack, version);\\r\\n\\t\\t} catch (e) {\\r\\n\\t\\t\\tconsole.error(e);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tasync getInstalledBitpacks() {\\r\\n\\t\\tlet manifest = await BP_LIB.LoadManifest(this.#os)\\r\\n\\t\\tif (!manifest) throw \\\"Missing or empty file packages.txt\\\";\\r\\n\\t\\treturn manifest.bitpacks;\\r\\n\\t}\\r\\n\\r\\n\\tasync getAvailableBitpacks() {\\r\\n\\t\\treturn await BP_LIB.ListBitpacks();\\r\\n\\t}\\r\\n\\r\\n\\t#api\\r\\n\\t#os\\r\\n}\\r\\n\\r\\nconst bitpacker_css = `\\r\\n.bitpacks-list {\\r\\n\\tborder-spacing: 0;\\r\\n\\tborder-collapse: collapse;\\r\\n\\tborder: none;\\r\\n}\\r\\n.bitpacks-list thead {\\r\\n\\ttext-align: left;\\r\\n}\\r\\n.bitpacks-list tr {\\r\\n}\\r\\n.bitpacks-list td, .bitpacks-list th {\\r\\n\\tpadding: 2px 5px;\\r\\n\\tborder: none;\\r\\n}\\r\\n.bitpacks-list td:nth-child(1){ /*installed*/\\r\\n\\tfont-size: 13.5px;\\r\\n}\\r\\n.bitpacks-list td:nth-child(3){ /*id*/\\r\\n\\twhite-space: nowrap;\\r\\n}\\r\\n.bitpacks-list tr:nth-child(4n+1){\\r\\n\\tbackground: #e4e4e4;\\r\\n}\\r\\n.bitpacks-list button{\\r\\n\\tborder-left: 1px solid white;\\r\\n\\tborder-top: 1px solid white;\\r\\n\\tborder-right: 2px solid rgb(128,128,128);\\r\\n\\tborder-bottom: 1px solid rgb(128,128,128);\\r\\n\\tbackground: rgb(192, 192, 192);\\r\\n\\tmargin: 0;\\r\\n\\tpadding: 1px 3px;\\r\\n}\\r\\n.bitpacks-list button:active {\\r\\n\\tborder-left: 2px solid rgb(128,128,128);\\r\\n\\tborder-top: 1px solid rgb(128,128,128);\\r\\n\\tborder-right: 1px solid white;\\r\\n\\tborder-bottom: 1px solid white;\\r\\n}\\r\\n.bitpacks-list .bpDetails{\\r\\n\\tbackground: #cbdcda;\\r\\n}\\r\\n`;\\r\\n\",\"filename\":\"/os/plugins/bitpacker/bitpacker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    // App one\\r\\n    // ---\\r\\n\\r\\n    let appOne = new AppFactory(ns)\\r\\n    const appOneHandleFn = await appOne.mount({\\r\\n      config: { id: 'app-one', showTips: false },\\r\\n      rootComponent: PrimaryAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-one booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then booting a second app...')\\r\\n\\r\\n    // App two\\r\\n    // ---\\r\\n\\r\\n    let appTwo = new AppFactory(ns)\\r\\n    const appTwoHandleFn = await appTwo.mount({\\r\\n      config: { id: 'app-two', showTips: false },\\r\\n      rootComponent: DifferentAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-two booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then logging mounted apps to debug console...')\\r\\n\\r\\n    // Retrieve references to both running apps using the handle / lookup functions\\r\\n    // returned from the mount() method calls earlier.\\r\\n    const [runningAppOne, runningAppTwo] = [appOneHandleFn(), appTwoHandleFn()]\\r\\n\\r\\n    // Display running app info in debug console / devtools (Debug -> Activate)\\r\\n    console.debug(runningAppOne)\\r\\n    console.debug(runningAppTwo)\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst PrimaryAppRoot = {\\r\\n  name: 'primary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <!--\\r\\n      Use the \\\"tray-hide\\\" prop to hide this window from the app tray\\r\\n    -->\\r\\n    <bbv-win\\r\\n      tray-hide\\r\\n      title=\\\"I'm hidden from the App Tray\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      start-width=\\\"20%\\\"\\r\\n      @close=\\\"appShutdown\\\"\\r\\n    >\\r\\n      <p>\\r\\n        This window doesn't appear in the app tray, and instead this window is configured to\\r\\n        shutdown the app where it's mounted when it's closed.\\r\\n      </p>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\nconst DifferentAppRoot = {\\r\\n  name: 'secondary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <main>\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win title=\\\"I've got a special title in the tray\\\" tray-title=\\\"🥇\\\" class=\\\"__CMP_NAME__\\\">\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win\\r\\n        title=\\\"I have a special title in the tray, too!\\\"\\r\\n        tray-title=\\\"🥈\\\"\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n      >\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n    </main>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/1-the-app-tray.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, toStr, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class SassLoader {\\r\\n  static #moduleGlobalKey = 'Sass'\\r\\n\\r\\n  static async Fetch() {\\r\\n    let module = this.#getModule()\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      await this.#loadSassModule()\\r\\n      module = this.#getModule()\\r\\n    }\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      throw new Error(`SassLoader could not load module in Fetch()`)\\r\\n    }\\r\\n\\r\\n    return this.#wrapModule(module)\\r\\n  }\\r\\n\\r\\n  static #loadSassModule() {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      this.#doDefineHack()\\r\\n\\r\\n      const onScriptLoad = (() => {\\r\\n        // console.log('sass:load')\\r\\n        const module = this.#getModule()\\r\\n        if (this.#isValidModule(module)) {\\r\\n          resolve(module)\\r\\n          // console.log('sass:loadResolve')\\r\\n        } else {\\r\\n          reject()\\r\\n          console.error('bb-vue: sass:loadReject', this)\\r\\n          throw new Error('SassLoader could not load module in #loadSassModule()')\\r\\n        }\\r\\n        this.#undoDefineHack()\\r\\n      }).bind(this)\\r\\n\\r\\n      let sassJSScript = doc.createElement('script')\\r\\n      sassJSScript.type = 'text/javascript'\\r\\n      sassJSScript.src = 'https://cdn.jsdelivr.net/npm/sass.js@0.11.1/dist/sass.sync.js'\\r\\n      sassJSScript.onload = onScriptLoad\\r\\n      sassJSScript.onerror = reject\\r\\n\\r\\n      doc.head.appendChild(sassJSScript)\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static async #compileAsyncWrapper(module, rawScss, scssCompilerOptions, ...args) {\\r\\n    let compilerOptionsMerged = Object.assign({ style: module.style.expanded }, scssCompilerOptions)\\r\\n    return new Promise((resolve, reject) => {\\r\\n      // console.log('compile', rawScss)\\r\\n      module.compile(\\r\\n        rawScss,\\r\\n        compilerOptionsMerged,\\r\\n        (compileResult) => {\\r\\n          if (compileResult.status !== 0) {\\r\\n            reject(compileResult)\\r\\n            // console.log('compile:reject', compileResult)\\r\\n          } else {\\r\\n            resolve(toStr(compileResult.text))\\r\\n            // console.log('compile:resolve', compileResult.text)\\r\\n          }\\r\\n        },\\r\\n        ...args\\r\\n      )\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static #getModule() {\\r\\n    return win[this.#moduleGlobalKey]\\r\\n  }\\r\\n\\r\\n  static #wrapModule(module) {\\r\\n    if (!this.#isValidModule(module))\\r\\n      throw new Error('SassLoader cannot wrap invalid module', module)\\r\\n    module.compileAsync = async (rawCss, scssOptions, ...args) =>\\r\\n      await this.#compileAsyncWrapper(module, rawCss, scssOptions, ...args)\\r\\n    return module\\r\\n  }\\r\\n\\r\\n  static #isValidModule(module) {\\r\\n    return module && module.compile\\r\\n  }\\r\\n\\r\\n  static #doDefineHack() {\\r\\n    if (win.define) {\\r\\n      win._defineBak = win.define\\r\\n      win.define = undefined\\r\\n    }\\r\\n  }\\r\\n\\r\\n  static #undoDefineHack() {\\r\\n    if (win._defineBak) {\\r\\n      win.define = win._defineBak\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray-group',\\r\\n  props: ['appTitle', 'trayTeleport'],\\r\\n  template: html`\\r\\n    <transition name=\\\"appTrayGroupFadeUp\\\" appear>\\r\\n      <div\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n        :class=\\\"{ trayTeleport: trayTeleport !== undefined }\\\"\\r\\n        :id=\\\"trayTeleport !== undefined ? 'app-tray' : undefined\\\"\\r\\n        :title=\\\"appTitle\\\"\\r\\n      >\\r\\n        <template v-if=\\\"appTitle\\\">\\r\\n          <div class=\\\"app_title\\\">{{ appTitle }}</div>\\r\\n        </template>\\r\\n        <slot />\\r\\n      </div>\\r\\n    </transition>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      display: flex;\\r\\n      padding: 5px;\\r\\n      background-color: var(--bbvWinTitlebarBgColor);\\r\\n      transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      position: relative;\\r\\n\\r\\n      &.trayTeleport {\\r\\n        background-color: transparent;\\r\\n        padding: 5px 0;\\r\\n\\r\\n        .bbv-button {\\r\\n          padding-bottom: 3px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.trayTeleport:empty {\\r\\n        clip-path: inset(0 100%);\\r\\n      }\\r\\n\\r\\n      &:hover {\\r\\n        .app_title {\\r\\n          opacity: 1;\\r\\n          transform: translateY(0) scale(1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &:not(:first-child) {\\r\\n        margin-left: 12px;\\r\\n      }\\r\\n\\r\\n      .app_title {\\r\\n        position: absolute;\\r\\n        bottom: calc(100% + 6px);\\r\\n        padding: 6px 12px;\\r\\n        font-size: 14px;\\r\\n        text-align: center;\\r\\n        white-space: nowrap;\\r\\n        overflow: hidden;\\r\\n        z-index: -1;\\r\\n        left: 5px;\\r\\n        transform: translateY(30px) scale(0.2);\\r\\n        transform-origin: bottom left;\\r\\n        border-radius: 2px;\\r\\n        box-shadow: 0px 0px 3px 0px var(--bbvBoxShadowColor2);\\r\\n        color: var(--bbvAppInnerFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transition: opacity 0.4s ease, transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\\r\\n      }\\r\\n\\r\\n      .bbv-button {\\r\\n        color: var(--bbvAppTrayFgColor);\\r\\n        padding: 6px 7px;\\r\\n        overflow: hidden;\\r\\n        white-space: nowrap;\\r\\n        border-bottom: 2px solid transparent;\\r\\n        transition: border-color 0.2s ease;\\r\\n        line-height: 1;\\r\\n\\r\\n        &.isOpen {\\r\\n          border-bottom-color: var(--bbvAppTrayFgColor);\\r\\n          background-color: var(--bbvButtonHoverBgColor);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .bbv-button + .bbv-button {\\r\\n        margin-left: 8px;\\r\\n      }\\r\\n\\r\\n      &.appTrayGroupFadeUp-enter-from,\\r\\n      &.appTrayGroupFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(75px);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//\\n//\\n// NOTE:\\n// Ideally some of these files would be in separate resource folders,\\n// but I've been running into circular reference issues in-game :verysadge:\\n//\\n//\\n\\n//\\n//\\n// CONSTANTS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Keys used for globalThis storage and lookup\\n */\\nexport const Keys = Object.freeze({\\n  libKey: 'bbVue',\\n  vueModuleKey: 'Vue',\\n  vueUseModuleKey: 'VueUse',\\n  mittModuleKey: 'Mitt',\\n  rootAppKey: 'rootApp',\\n  globalBusKey: 'rootBus',\\n})\\n\\n/**\\n * Tokens used when processing a consumer app style and template values\\n */\\nexport const ReplacementTokens = Object.freeze({\\n  appId: '__APP_ID__',\\n  componentName: '__CMP_NAME__',\\n})\\n\\n//\\n//\\n// GLOBALS MANAGEMENT /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\nexport const RootApp = {\\n  rootAttr: 'bbv-root',\\n  raw() {\\n    return getGlobal(Keys.rootAppKey)\\n  },\\n  instance() {\\n    return this.raw()?._instance\\n  },\\n  appDef() {\\n    return this.raw()?._component\\n  },\\n  component() {\\n    return this.instance()?.ctx\\n  },\\n  set(val) {\\n    return setGlobal(Keys.rootAppKey, val)\\n  },\\n  async cleanup() {\\n    await sleep(15)\\n    try {\\n      this.raw()?.unmount()\\n    } catch (error) {\\n      console.debug(\\\"bb-vue: Issue cleaning up AppRoot, but don't worry about it\\\")\\n    }\\n    await this.removeDom()\\n    deleteGlobal(Keys.rootAppKey)\\n    await sleep(15)\\n  },\\n  async removeDom() {\\n    await sleep(15)\\n    doc.querySelector(`[${this.rootAttr}]`)?.remove()\\n  },\\n  async addDom(appId) {\\n    doc.body.insertAdjacentHTML('afterbegin', html`<div id=\\\"${appId}\\\" bbv-root></div>`)\\n    await sleep(15)\\n  },\\n}\\n\\n/**\\n * Reference to window global\\n */\\nexport const win = globalThis['window']\\n\\n/**\\n * Reference to document global\\n */\\nexport const doc = globalThis['document']\\n\\n/**\\n * Reference to bundled lodash library\\n */\\nexport const lodash = win._\\n\\n/**\\n * Initialize globalThis storage\\n */\\nif (lodash.isObjectLike(win[Keys.libKey]) === false) {\\n  win[Keys.libKey] = {}\\n}\\n\\n/**\\n * Sets a value by key to internal library storage\\n * @param {String} key Path to set, utilizing `lodash.set`\\n * @param {any} value\\n * @returns {any} A reference to the value passed in, from the store\\n * * @see https://lodash.com/docs/4.17.15#set\\n */\\nexport function setGlobal(key, value) {\\n  lodash.set(win[Keys.libKey], key, value)\\n  return getGlobal(key)\\n}\\n\\n/**\\n * Retrieves a value by key from internal library storage\\n * @param {String} key Path to get, utilizing `lodash.get`\\n * @returns {any} Value from or undefined if not set\\n * @see https://lodash.com/docs/4.17.15#get\\n */\\nexport function getGlobal(key, defaultValue) {\\n  return lodash['get'](win[Keys.libKey], key, defaultValue)\\n}\\n\\n/**\\n * Deletes a global key from globalThis\\n * @param {String} key Property to destroy\\n * @returns {void}\\n */\\nexport function deleteGlobal(key) {\\n  delete win[Keys.libKey][key]\\n}\\n\\n/**\\n * Load the Vue library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Vue} An instance of Vue, or a falsy value indicating the library is not loaded\\n */\\nexport function Vue({ silent = false } = {}) {\\n  let vue = win[Keys.vueModuleKey]\\n  if (!vue && !silent)\\n    throw new Error('Vue is not loaded on window global; check VueLoader:Get for issues')\\n  return vue\\n}\\n\\n/**\\n * Load the VueUse library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {VueUse} An instance of VueUse, or a falsy value indicating the library is not loaded\\n */\\nexport function VueUse({ silent = false } = {}) {\\n  let vueUse = win[Keys.vueUseModuleKey]\\n  if (!vueUse && !silent)\\n    throw new Error('VueUse is not loaded on window global; check AppRoot:loadDeps for issues')\\n  return vueUse\\n}\\n\\n/**\\n * Load the Mitt library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Mitt} An instance of Mitt, or a falsy value indicating the library is not loaded\\n */\\nexport function Mitt({ silent = false } = {}) {\\n  let mitt = getGlobal('Mitt')\\n  if (!mitt && !silent)\\n    throw new Error('Mitt is not loaded on window global; check MittLoader:Get for issues')\\n  return mitt\\n}\\n\\n//\\n//\\n// EXCEPTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Processing exception, most often originating from SCSS compiler usage in `ComponentManager`.\\n * Signifies an issue when preparing components for injection into `bbVue.rootApp`\\n */\\nexport class ProcessingException {\\n  constructor(step, originalError) {\\n    this.step = step\\n    this.originalError = originalError\\n  }\\n\\n  toString() {\\n    return `ERROR: [ProcessingException] Failure during '${this.step}' processing\\\\n${\\n      this.originalError?.formatted || toJson(this.originalError)\\n    }`\\n  }\\n}\\n\\n/**\\n * Component validation exception thrown by `AppFactory`.\\n * Signifies an issue with components being provided to `AppFactory` by a consumer app definition.\\n */\\nexport class ComponentValidationException {\\n  constructor(message, cmpDef) {\\n    this.message = message\\n    this.componentDefinition = cmpDef\\n  }\\n\\n  toString() {\\n    return `ERROR: [ComponentValidationException] ${this.message}\\\\n${toJson(\\n      this.componentDefinition\\n    )}`\\n  }\\n}\\n\\n// APP TRAVERSAL /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Walk the Vue VNode tree and find the closest parent consumer root mount (CRM)\\n * @param {componentInstanceVm} startingVm\\n * The view-model / `this` binding from the component where the search originates\\n * @returns {crmInstanceVm | null} The closest CRM instance or null\\n */\\nexport function getClosestCrm(startingVm) {\\n  let consumerRoot = null\\n  let parent = startingVm.$parent\\n  while (parent && !consumerRoot) {\\n    if (parent.$options.__consumerRoot === true) {\\n      consumerRoot = parent\\n    }\\n    parent = parent.$parent\\n  }\\n  return consumerRoot\\n}\\n\\n// GENERAL FUNCTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Cleanup an error string\\n * @param {String} error Error string to cleanup\\n * @returns Removes odd internal delimiters and other noisy chars from a BitBurner error\\n */\\nexport function cleanupError(error) {\\n  return String(error)\\n    .replace('|DELIMITER|', '')\\n    .replaceAll('|DELIMITER|', ' » ')\\n    .replaceAll('<br>', '')\\n    .replaceAll('Stack:', '')\\n}\\n\\n/**\\n * Wait for ms then continue\\n * @param {Number} ms Millis to wait\\n * @returns {Promise<void>}\\n */\\nexport async function sleep(ms) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => resolve(), ms)\\n  })\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function scss() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function css() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function html() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression; reconstructs provided template string with no changes\\n * @param {Array} strings\\n * @param  {...any} values\\n * @returns {String}\\n */\\nfunction templatePassthrough(strings, ...values) {\\n  let str = ''\\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '')\\n  })\\n  return str\\n}\\n\\n/**\\n * Attempts to convert a value to string using `lodash.toString`,\\n * and then trim the string with `lodash.trim`\\n * @param {any} value Value to coerce to string\\n * @returns {string} value\\n */\\nexport function toStr(value) {\\n  return lodash.trim(lodash.toString(value))\\n}\\n\\n/**\\n * Attempts to decern a given value's \\\"blankness\\\" via:\\n * - `lodash.isNil` and\\n * - `lodash.isEmpty`\\n * @param {any} value Value to be checked for blankness\\n * @returns {boolean} Is value blank\\n */\\nexport function isBlank(value) {\\n  if (lodash.isNil(value)) return true\\n  if (lodash.isString(value) && lodash.isEmpty(value)) return true\\n  return lodash.isEmpty(value)\\n}\\n\\n/**\\n * Attempt to convert an object to JSON via `JSON.stringify`, or fallback\\n * to a more robust JSON stringifier if needed\\n * @param {any} value\\n * @returns {String} result\\n */\\nexport function toJson(value) {\\n  try {\\n    return JSON.stringify(value, null, '  ')\\n  } catch (error) {\\n    try {\\n      return toJsonSafe(value, 4, 4, '  ')\\n    } catch (error) {\\n      return '[COULD NOT SERIALIZE] ' + value\\n    }\\n  }\\n}\\n\\n/**\\n * Attempt to convert a string to it's parsed JSON result\\n * @param {any} value\\n * @returns {any | null} resultOrNull\\n */\\nexport function fromJson(value) {\\n  try {\\n    return JSON.parse(value)\\n  } catch (error) {\\n    console.error(`bb-vue: Could not parse JSON string: ${value}`)\\n    return null\\n  }\\n}\\n\\n/**\\n * @param {String} value\\n */\\nexport function uppercaseFirstLetter(value) {\\n  return String(value).charAt(0).toUpperCase() + String(value).slice(1)\\n}\\n\\n/**\\n * Returns the JSON representation of an object.\\n *\\n * @param {value} object the object\\n * @param {number} objectMaxDepth for objects, the maximum number of times to recurse into descendants\\n * @param {number} arrayMaxLength for arrays, the maximum number of elements to enumerate\\n * @param {string} indent the string to use for indentation\\n * @return {string} the JSON representation\\n */\\nconst toJsonSafe = function (object, objectMaxDepth, arrayMaxLength, indent) {\\n  'use strict'\\n\\n  /**\\n   * Escapes control characters, quote characters, backslash characters and quotes the string.\\n   *\\n   * @param {string} string the string to quote\\n   * @returns {String} the quoted string\\n   */\\n  function quote(string) {\\n    escapable.lastIndex = 0\\n    var escaped\\n    if (escapable.test(string)) {\\n      escaped = string.replace(escapable, function (a) {\\n        var replacement = replacements[a]\\n        if (typeof replacement === 'string') return replacement\\n        // Pad the unicode representation with leading zeros, up to 4 characters.\\n        return '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)\\n      })\\n    } else escaped = string\\n    return '\\\"' + escaped + '\\\"'\\n  }\\n\\n  /**\\n   * Returns the String representation of an object.\\n   *\\n   * Based on <a href=\\\"https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js\\\">https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js</a>\\n   *\\n   * @param {string} path the fully-qualified path of value in the JSON object\\n   * @param {type} value the value of the property\\n   * @param {string} cumulativeIndent the indentation to apply at this level\\n   * @param {number} depth the current recursion depth\\n   * @return {String} the JSON representation of the object, or \\\"null\\\" for values that aren't valid\\n   * in JSON (e.g. infinite numbers).\\n   */\\n  function toString(path, value, cumulativeIndent, depth) {\\n    switch (typeof value) {\\n      case 'string':\\n        return quote(value)\\n      case 'number': {\\n        // JSON numbers must be finite\\n        if (isFinite(value)) return String(value)\\n        return 'null'\\n      }\\n      case 'boolean':\\n        return String(value)\\n      case 'object': {\\n        if (!value) return 'null'\\n        var valueIndex = values.indexOf(value)\\n        if (valueIndex !== -1) return 'Reference => ' + paths[valueIndex]\\n        values.push(value)\\n        paths.push(path)\\n        if (depth > objectMaxDepth) return '...'\\n\\n        // Make an array to hold the partial results of stringifying this object value.\\n        var partial = []\\n\\n        // Is the value an array?\\n        var i\\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\\n          // The value is an array. Stringify every element\\n          var length = Math.min(value.length, arrayMaxLength)\\n\\n          // Whether a property has one or multiple values, they should be treated as the same\\n          // object depth. As such, we do not increment the object depth when recursing into an\\n          // array.\\n          for (i = 0; i < length; ++i) {\\n            partial[i] = toString(\\n              path + '.' + i,\\n              value[i],\\n              cumulativeIndent + indent,\\n              depth,\\n              arrayMaxLength\\n            )\\n          }\\n          if (i < value.length) {\\n            // arrayMaxLength reached\\n            partial[i] = '...'\\n          }\\n          return '\\\\n' + cumulativeIndent + '[' + partial.join(', ') + '\\\\n' + cumulativeIndent + ']'\\n        }\\n\\n        // Otherwise, iterate through all of the keys in the object.\\n        for (var subKey in value) {\\n          if (Object.prototype.hasOwnProperty.call(value, subKey)) {\\n            var subValue\\n            try {\\n              subValue = toString(\\n                path + '.' + subKey,\\n                value[subKey],\\n                cumulativeIndent + indent,\\n                depth + 1\\n              )\\n              partial.push(quote(subKey) + ': ' + subValue)\\n            } catch (e) {\\n              // this try/catch due to forbidden accessors on some objects\\n              if (e.message) subKey = e.message\\n              else subKey = 'access denied'\\n            }\\n          }\\n        }\\n        var result = '\\\\n' + cumulativeIndent + '{\\\\n'\\n        for (i = 0; i < partial.length; ++i)\\n          result += cumulativeIndent + indent + partial[i] + ',\\\\n'\\n        if (partial.length > 0) {\\n          // Remove trailing comma\\n          result = result.slice(0, result.length - 2) + '\\\\n'\\n        }\\n        result += cumulativeIndent + '}'\\n        return result\\n      }\\n      default:\\n        return 'null'\\n    }\\n  }\\n\\n  if (indent === undefined) indent = '  '\\n  if (objectMaxDepth === undefined) objectMaxDepth = 0\\n  if (arrayMaxLength === undefined) arrayMaxLength = 50\\n  // Matches characters that must be escaped\\n\\n  // prettier-ignore\\n  // eslint-disable-next-line\\n  var escapable = /[\\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g\\n\\n  // The replacement characters\\n  var replacements = {\\n    '\\\\b': '\\\\\\\\b',\\n    '\\\\t': '\\\\\\\\t',\\n    '\\\\n': '\\\\\\\\n',\\n    '\\\\f': '\\\\\\\\f',\\n    '\\\\r': '\\\\\\\\r',\\n    '\\\"': '\\\\\\\\\\\"',\\n    '\\\\\\\\': '\\\\\\\\\\\\\\\\',\\n  }\\n  // A list of all the objects that were seen (used to avoid recursion)\\n  var values = []\\n  // The path of an object in the JSON object, with indexes corresponding to entries in the\\n  // \\\"values\\\" variable.\\n  var paths = []\\n  return toString('root', object, '', 0)\\n}\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces)\\n  return num >= 0 ? '$' + numberShort : numberShort.replace('-', '-$')\\n}\\n\\nconst symbols = ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S', 'o', 'n', 'e33', 'e36', 'e39']\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  for (\\n    var i = 0, sign = Math.sign(num), num = Math.abs(num);\\n    num >= 1000 && i < symbols.length;\\n    i++\\n  )\\n    num /= 1000\\n  return (\\n    (sign < 0 ? '-' : '') +\\n    num.toFixed(\\n      Math.max(\\n        0,\\n        Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num)))\\n      )\\n    ) +\\n    symbols[i]\\n  )\\n}\\n\\n/**\\n * Elapsed time between two dates, or a number of seconds\\n * @param {number} timeStart Defaults to 0\\n * @param {number} timeEnd Defaults to 0\\n * @returns {string} Elapsed time in human-friendly format\\n */\\nexport function timeDiff(timeStart = 0, timeEnd = 0) {\\n  let diff\\n  if (timeStart && timeEnd) {\\n    diff = timeEnd - timeStart\\n  } else {\\n    diff = timeStart * 1000\\n  }\\n  var hours = Math.floor(diff / (1000 * 60 * 60))\\n  diff -= hours * (1000 * 60 * 60)\\n  var mins = Math.floor(diff / (1000 * 60))\\n  diff -= mins * (1000 * 60)\\n  var secs = Math.floor(diff / 1000)\\n  diff -= secs * 1000\\n  var ms = Math.floor(diff)\\n  diff -= ms\\n  let toRet = []\\n  if (hours > 0) {\\n    toRet.push(`${hours}h`)\\n  }\\n  if (mins > 0) {\\n    toRet.push(`${mins}m`)\\n  }\\n  if (secs > 0) {\\n    toRet.push(`${secs}s`)\\n  }\\n  if (ms > 0 && !secs) {\\n    toRet.push(`${ms}ms`)\\n  }\\n  return toRet.join(' ')\\n}\",\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const asciichart = function (exports) {\\r\\n  exports.black = '\\\\x1b[30m'\\r\\n  exports.red = '\\\\x1b[31m'\\r\\n  exports.green = '\\\\x1b[32m'\\r\\n  exports.yellow = '\\\\x1b[33m'\\r\\n  exports.blue = '\\\\x1b[34m'\\r\\n  exports.magenta = '\\\\x1b[35m'\\r\\n  exports.cyan = '\\\\x1b[36m'\\r\\n  exports.lightgray = '\\\\x1b[37m'\\r\\n  exports.default = '\\\\x1b[39m'\\r\\n  exports.darkgray = '\\\\x1b[90m'\\r\\n  exports.lightred = '\\\\x1b[91m'\\r\\n  exports.lightgreen = '\\\\x1b[92m'\\r\\n  exports.lightyellow = '\\\\x1b[93m'\\r\\n  exports.lightblue = '\\\\x1b[94m'\\r\\n  exports.lightmagenta = '\\\\x1b[95m'\\r\\n  exports.lightcyan = '\\\\x1b[96m'\\r\\n  exports.white = '\\\\x1b[97m'\\r\\n  exports.reset = '\\\\x1b[0m'\\r\\n\\r\\n  function colored(char, color) {\\r\\n    // do not color it if color is not specified\\r\\n    return color === undefined ? char : color + char + exports.reset\\r\\n  }\\r\\n\\r\\n  exports.colored = colored\\r\\n\\r\\n  exports.plot = function (series, cfg = undefined) {\\r\\n    // this function takes both one array and array of arrays\\r\\n    // if an array of numbers is passed it is transformed to\\r\\n    // an array of exactly one array with numbers\\r\\n    if (typeof series[0] == 'number') {\\r\\n      series = [series]\\r\\n    }\\r\\n\\r\\n    cfg = typeof cfg !== 'undefined' ? cfg : {}\\r\\n\\r\\n    let min = typeof cfg.min !== 'undefined' ? cfg.min : series[0][0]\\r\\n    let max = typeof cfg.max !== 'undefined' ? cfg.max : series[0][0]\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      for (let i = 0; i < series[j].length; i++) {\\r\\n        min = Math.min(min, series[j][i])\\r\\n        max = Math.max(max, series[j][i])\\r\\n      }\\r\\n    }\\r\\n\\r\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\r\\n    let range = Math.abs(max - min)\\r\\n    let offset = typeof cfg.offset !== 'undefined' ? cfg.offset : 3\\r\\n    let padding = typeof cfg.padding !== 'undefined' ? cfg.padding : '           '\\r\\n    let height = typeof cfg.height !== 'undefined' ? cfg.height : range\\r\\n    let colors = typeof cfg.colors !== 'undefined' ? cfg.colors : []\\r\\n    let ratio = range !== 0 ? height / range : 1\\r\\n    let min2 = Math.round(min * ratio)\\r\\n    let max2 = Math.round(max * ratio)\\r\\n    let rows = Math.abs(max2 - min2)\\r\\n    let width = 0\\r\\n    for (let i = 0; i < series.length; i++) {\\r\\n      width = Math.max(width, series[i].length)\\r\\n    }\\r\\n    width = width + offset\\r\\n    let symbols = typeof cfg.symbols !== 'undefined' ? cfg.symbols : defaultSymbols\\r\\n    let format =\\r\\n      typeof cfg.format !== 'undefined'\\r\\n        ? cfg.format\\r\\n        : function (x) {\\r\\n            return (padding + x.toFixed(2)).slice(-padding.length)\\r\\n          }\\r\\n\\r\\n    let result = new Array(rows + 1) // empty space\\r\\n    for (let i = 0; i <= rows; i++) {\\r\\n      result[i] = new Array(width)\\r\\n      for (let j = 0; j < width; j++) {\\r\\n        result[i][j] = ' '\\r\\n      }\\r\\n    }\\r\\n    for (let y = min2; y <= max2; ++y) {\\r\\n      // axis + labels\\r\\n      let label = format(rows > 0 ? max - ((y - min2) * range) / rows : y, y - min2)\\r\\n      result[y - min2][Math.max(offset - label.length, 0)] = label\\r\\n      result[y - min2][offset - 1] = y == 0 ? symbols[0] : symbols[1]\\r\\n    }\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      let currentColor = colors[j % colors.length]\\r\\n      let y0 = Math.round(series[j][0] * ratio) - min2\\r\\n      result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\r\\n\\r\\n      for (let x = 0; x < series[j].length - 1; x++) {\\r\\n        // plot the line\\r\\n        let y0 = Math.round(series[j][x + 0] * ratio) - min2\\r\\n        let y1 = Math.round(series[j][x + 1] * ratio) - min2\\r\\n        if (y0 == y1) {\\r\\n          result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\r\\n        } else {\\r\\n          result[rows - y1][x + offset] = colored(y0 > y1 ? symbols[5] : symbols[6], currentColor)\\r\\n          result[rows - y0][x + offset] = colored(y0 > y1 ? symbols[7] : symbols[8], currentColor)\\r\\n          let from = Math.min(y0, y1)\\r\\n          let to = Math.max(y0, y1)\\r\\n          for (let y = from + 1; y < to; y++) {\\r\\n            result[rows - y][x + offset] = colored(symbols[9], currentColor)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return result\\r\\n      .map(function (x) {\\r\\n        return x.join('')\\r\\n      })\\r\\n      .join('\\\\n')\\r\\n  }\\r\\n}\\r\\n\\r\\nglobalThis.asciichart = {}\\r\\nasciichart(globalThis.asciichart)\\r\\n\\r\\nexport default globalThis.asciichart\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-lib.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-tabs',\\r\\n  template: html` <span>__CMP_NAME__</span> `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainer } from '/bitpacks/bb-vue/misc-examples/svgchart-ui.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 60\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 20\\r\\n\\r\\n  const textSize = 5.0\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 100\\r\\n  const conHeight = 80\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n  ns.atExit(function () {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  })\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n\\r\\n  //I KNOW this is where the object is rendered/created (lines below), but I have no freakin' idea how to get it to render to another\\r\\n  //object/window in HTML/CSS/VUE or whatever.  I know it's probably as simple as calling the 'container' from this script, but I'm at a loss.\\r\\n\\r\\n  //The below line is where the graph is being 'dropped'.  Default is the overview hooks.  Would like to render to a moveable window.\\r\\n  const dropPage = doc.getElementById(SVGChartContainer)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n\\r\\n  //Uncomment the below line to have the container connect to the above constant.  By default it's set to the overview hooks.\\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('test', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('test', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('test', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n  //First argument is the ticker that it targets.  Would need to pass this off to the window wrapper?  I guess?\\r\\n  var ticker = ns.args[0]\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.tprint('Uh oh NAN:')\\r\\n            ns.tprint(moneyList)\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n        }\\r\\n\\r\\n        topText.innerHTML = 'BULLISH'\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = ticker + ': ' + ns.nFormat(ns.stock.getPrice(ticker), '$0.00a')\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'BEARISH'\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n      }\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.1'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-builder.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win-manager',\\r\\n  inject: ['internals'],\\r\\n  template: `<!-- __CMP_NAME__ -->`,\\r\\n  data() {\\r\\n    return {\\r\\n      baseStackingIndex: 1510,\\r\\n      recentlyActiveWinMounts: [],\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.internals.winManager = this\\r\\n  },\\r\\n  methods: {\\r\\n    addWin(winMount) {\\r\\n      this.internals.store.winMounts.push(winMount)\\r\\n    },\\r\\n    removeWin(winMount) {\\r\\n      this.scrubRecentWinMountActivity(winMount)\\r\\n      this.internals.store.winMounts = this.internals.store.winMounts.filter((x) => {\\r\\n        return x.uuid != winMount.uuid\\r\\n      })\\r\\n    },\\r\\n    logRecentWinMountActivity(winMount) {\\r\\n      if (this.recentlyActiveWinMounts[0] == winMount) return\\r\\n      this.recentlyActiveWinMounts = [winMount, ...this.recentlyActiveWinMounts.slice(0, 4)]\\r\\n    },\\r\\n    scrubRecentWinMountActivity(winMount) {\\r\\n      this.recentlyActiveWinMounts = this.recentlyActiveWinMounts.filter((x) => x !== winMount)\\r\\n    },\\r\\n    getRecommendedPosition(winMount) {\\r\\n      const rootOffset = { x: 295, y: 30 }\\r\\n      const standardOffset = { x: 30, y: 60 }\\r\\n\\r\\n      // const prevOpenedWinMounts = this.internals.store.winMounts.filter((x) => x.hasOpened === true)\\r\\n      let curOffset = rootOffset\\r\\n      let targetWinMount = this.recentlyActiveWinMounts[1]\\r\\n      if (targetWinMount && targetWinMount.winState === WinStates.open) curOffset = standardOffset\\r\\n      if (!targetWinMount) targetWinMount = winMount\\r\\n\\r\\n      return {\\r\\n        x: parseInt(targetWinMount.style.left ?? 0) + curOffset.x,\\r\\n        y: parseInt(targetWinMount.style.top ?? 0) + curOffset.y,\\r\\n      }\\r\\n    },\\r\\n    bringToFront(winMount) {\\r\\n      let otherWins = this.internals.store.winMounts.filter((x) => winMount.uuid != x.uuid)\\r\\n      this.logRecentWinMountActivity(winMount)\\r\\n      winMount.stackingIndex = this.baseStackingIndex + otherWins.length\\r\\n      let sortedOtherWins = [...otherWins].sort((a, b) => a.stackingIndex - b.stackingIndex)\\r\\n      sortedOtherWins.forEach((x, i) => (x.stackingIndex = this.baseStackingIndex + i))\\r\\n    },\\r\\n    async closeAllWinsByCrmUuid(crmUuid) {\\r\\n      return new Promise((resolve) => {\\r\\n        this.internals.store.winMounts.forEach((winMount) => {\\r\\n          if (winMount.owner.$options.__uuid == crmUuid) {\\r\\n            winMount.close()\\r\\n          }\\r\\n        })\\r\\n        setTimeout(() => {\\r\\n          resolve()\\r\\n        }, 500)\\r\\n      })\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getClosestCrm, html, css, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\nimport useDraggableWin from '/bitpacks/bb-vue/components/concerns/useDraggableWin.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win',\\r\\n  template: html`\\r\\n    <div\\r\\n      ref=\\\"thisWin\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ shouldDisplay, isDragging, isCollapsed: draggable.isCollapsed }\\\"\\r\\n      :style=\\\"style\\\"\\r\\n      @pointerdown=\\\"bringToFront\\\"\\r\\n      @keydown.stop\\r\\n    >\\r\\n      <div class=\\\"win_titlebar\\\" ref=\\\"dragHandle\\\">\\r\\n        <div class=\\\"win_title\\\">{{ title }}<slot name=\\\"title\\\" /></div>\\r\\n        <template v-if=\\\"canClose || canCollapse\\\">\\r\\n          <div class=\\\"win_controls\\\" ref=\\\"winControls\\\">\\r\\n            <bbv-button class=\\\"win_collapse\\\" @click=\\\"toggleCollapse\\\">\\r\\n              <span v-if=\\\"draggable.isCollapsed\\\">🔽</span>\\r\\n              <span v-else>🔼</span>\\r\\n            </bbv-button>\\r\\n            <bbv-button class=\\\"win_close\\\" @click=\\\"close\\\">❎</bbv-button>\\r\\n          </div>\\r\\n        </template>\\r\\n      </div>\\r\\n      <div class=\\\"win_content\\\" :class=\\\"{ noPad: noPad !== false, noScroll: noScroll !== false }\\\">\\r\\n        <slot name=\\\"default\\\"></slot>\\r\\n      </div>\\r\\n      <div class=\\\"win_actions\\\">\\r\\n        <slot name=\\\"actions\\\"></slot>\\r\\n      </div>\\r\\n      <!-- Hack to disable selection on other parts of document while dragging windows -->\\r\\n      <template v-if=\\\"isDragging\\\">\\r\\n        <component is=\\\"style\\\" type=\\\"text/css\\\"> body *::selection { all: inherit; } </component>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  emits: ['open', 'close', 'collapse'],\\r\\n  props: {\\r\\n    title: {\\r\\n      type: String,\\r\\n      default: '',\\r\\n    },\\r\\n    startOpen: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    startPosition: {\\r\\n      type: Object,\\r\\n    },\\r\\n    startWidth: {\\r\\n      type: String,\\r\\n    },\\r\\n    startHeight: {\\r\\n      type: String,\\r\\n    },\\r\\n    canClose: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    canCollapse: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    noPad: {\\r\\n      default: false,\\r\\n    },\\r\\n    noScroll: {\\r\\n      default: false,\\r\\n    },\\r\\n    trayHide: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    trayTitle: {\\r\\n      type: String,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      uuid: crypto.randomUUID(),\\r\\n      owner: null,\\r\\n      draggable: {\\r\\n        savedHeight: 0,\\r\\n        isCollapsed: false,\\r\\n      },\\r\\n      stackingIndex: 1,\\r\\n      winState: WinStates.closed,\\r\\n      shouldDisplay: false,\\r\\n      hasOpened: false,\\r\\n      WinStates,\\r\\n    }\\r\\n  },\\r\\n  watch: {\\r\\n    async winState(newVal, oldVal) {\\r\\n      if (newVal == WinStates.open && oldVal == WinStates.closed) {\\r\\n        // Position window on first open\\r\\n        if (this.hasOpened === false) {\\r\\n          this.hasOpened = true\\r\\n          useDraggableWin(this.draggable, {\\r\\n            win: this,\\r\\n            winManager: this.internals.winManager,\\r\\n            dragHandleRef: this.$refs.dragHandle,\\r\\n            dragIgnoreRef: this.$refs.winControls,\\r\\n            draggableRef: this.$refs.thisWin,\\r\\n            startPosition: this.$props.startPosition,\\r\\n          })\\r\\n        }\\r\\n\\r\\n        // Lag win opens just a bit to ensure CSS transitions are applied\\r\\n        await this.$nextTick()\\r\\n        this.shouldDisplay = true\\r\\n        this.bringToFront()\\r\\n      } else if (newVal == WinStates.closed) {\\r\\n        this.shouldDisplay = false\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    style() {\\r\\n      const collapsedOverrides = {\\r\\n        ...this.draggable.style,\\r\\n        height: 'auto',\\r\\n        minWidth: undefined,\\r\\n        minHeight: undefined,\\r\\n      }\\r\\n\\r\\n      let draggableStyles = this.draggable.isCollapsed ? collapsedOverrides : this.draggable.style\\r\\n      if (this.draggable.savedHeight !== 0 && !this.draggable.isCollapsed) {\\r\\n        draggableStyles.height = this.draggable.savedHeight\\r\\n        this.draggable.savedHeight = 0\\r\\n      }\\r\\n\\r\\n      return {\\r\\n        width: this.$props.startWidth,\\r\\n        height: this.$props.startHeight,\\r\\n        zIndex: this.stackingIndex,\\r\\n        ...draggableStyles,\\r\\n      }\\r\\n    },\\r\\n    isDragging() {\\r\\n      return this.draggable.isDragging\\r\\n    },\\r\\n  },\\r\\n  created() {\\r\\n    this.owner = getClosestCrm(this)\\r\\n  },\\r\\n  async mounted() {\\r\\n    this.internals.winManager.addWin(this)\\r\\n    if (this.$props.startOpen) {\\r\\n      this.winState = WinStates.open\\r\\n    }\\r\\n  },\\r\\n  beforeUnmount() {\\r\\n    this.internals.winManager.removeWin(this)\\r\\n  },\\r\\n  methods: {\\r\\n    async open() {\\r\\n      if (this.winState == WinStates.open) return\\r\\n      this.winState = WinStates.open\\r\\n      await sleep(200)\\r\\n      this.$emit('open', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    async close() {\\r\\n      if (this.winState == WinStates.closed) return\\r\\n      this.winState = WinStates.closed\\r\\n      await sleep(200)\\r\\n      this.$emit('close', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    toggleCollapse() {\\r\\n      if (this.draggable.isCollapsed === false) {\\r\\n        this.draggable.savedHeight = this.draggable.style.height\\r\\n      }\\r\\n      this.draggable.isCollapsed = !this.draggable.isCollapsed\\r\\n      this.$emit('collapse', { winMount: this, isCollapsed: this.draggable.isCollapsed })\\r\\n    },\\r\\n    bringToFront(event) {\\r\\n      if (event && event.path.some((x) => x == this.$refs.winControls)) return\\r\\n      this.internals.winManager.bringToFront(this)\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n\\r\\n      display: flex;\\r\\n      flex-direction: column;\\r\\n\\r\\n      resize: both;\\r\\n      min-width: 250px;\\r\\n      min-height: 250px;\\r\\n\\r\\n      overflow: hidden;\\r\\n      border: 2px solid var(--bbvBorderColor);\\r\\n      border-radius: 10px;\\r\\n\\r\\n      background-color: var(--bbvAppInnerBgColor);\\r\\n      box-shadow: inset 0px 0px 70px 0px var(--bbvBoxShadowColor1),\\r\\n        0px 0px 20px 0px var(--bbvBoxShadowColor2);\\r\\n\\r\\n      transition: opacity 0.2s ease-out, transform 0.2s ease-out;\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transform: translateY(25px);\\r\\n      }\\r\\n\\r\\n      &.isDragging {\\r\\n        opacity: 0.9;\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        min-height: 0;\\r\\n        resize: none;\\r\\n\\r\\n        .win_content {\\r\\n          display: none;\\r\\n        }\\r\\n\\r\\n        .win_actions {\\r\\n          background-color: var(--bbvBoxShadowColor1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_titlebar {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        font-size: 12px;\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        user-select: none;\\r\\n        cursor: grab;\\r\\n      }\\r\\n\\r\\n      .win_title {\\r\\n        display: flex;\\r\\n        flex-grow: 1;\\r\\n        padding: 3px 15px 3px 7px;\\r\\n      }\\r\\n\\r\\n      .win_controls {\\r\\n        display: flex;\\r\\n        justify-content: space-around;\\r\\n        flex-grow: 0;\\r\\n        font-size: 14px;\\r\\n        cursor: auto;\\r\\n\\r\\n        .bbv-button {\\r\\n          margin: 3px;\\r\\n          padding: 2px;\\r\\n          padding-bottom: 4px;\\r\\n          border-radius: 5px;\\r\\n          border-radius: 0;\\r\\n          background-color: var(--bbvWinActionsBgColor);\\r\\n\\r\\n          &:last-child {\\r\\n            margin-right: 6px;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_content {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 25px 15px;\\r\\n        flex-grow: 1;\\r\\n        overflow-y: auto;\\r\\n        color: var(--bbvFontLightColor);\\r\\n\\r\\n        &.noPad {\\r\\n          padding: 0;\\r\\n        }\\r\\n\\r\\n        &:not(.noPad) > *:first-child {\\r\\n          margin-top: 0;\\r\\n          padding-top: 0;\\r\\n        }\\r\\n\\r\\n        &.noScroll {\\r\\n          overflow: hidden;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_actions {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        padding: 8px 15px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        font-size: 12px;\\r\\n\\r\\n        &:empty {\\r\\n          display: none;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { ComponentValidationException, ProcessingException, ReplacementTokens } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class ComponentManager {\\r\\n  #appConfig\\r\\n  #Sass\\r\\n  #scssResources\\r\\n  #hasProcessed = false\\r\\n  #rawComponents = new Set()\\r\\n  #processingReports = []\\r\\n\\r\\n  constructor(appConfig, Sass, scssResources) {\\r\\n    this.#appConfig = appConfig\\r\\n    this.#Sass = Sass\\r\\n    this.#scssResources = toStr(scssResources)\\r\\n  }\\r\\n\\r\\n  add(...args) {\\r\\n    if (isBlank(args)) {\\r\\n      throw new Error('Please provide one or more components to add')\\r\\n    }\\r\\n    for (let cmpDef of args) {\\r\\n      cmpDef = Object.assign({}, cmpDef)\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#rawComponents.add(cmpDef)\\r\\n    }\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async processAll() {\\r\\n    for (let cmpDef of this.#rawComponents) {\\r\\n      let processed = await this.#processSingle(cmpDef)\\r\\n      this.#processingReports.push(processed)\\r\\n    }\\r\\n    this.#hasProcessed = true\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  registerWithVueApp(vueApp) {\\r\\n    if (this.#hasProcessed === false) {\\r\\n      throw new Error('All components must be processed before being registered with the vueApp')\\r\\n    }\\r\\n\\r\\n    this.#processingReports.forEach((processingReport) => {\\r\\n      if (!processingReport.cmpDef.__libraryRoot) {\\r\\n        // Remove old cmpDef before adding new one\\r\\n        if (vueApp.component(processingReport.cmpDef.name) && vueApp?._context?.components) {\\r\\n          delete vueApp._context.components[processingReport.cmpDef.name]\\r\\n        }\\r\\n        vueApp.component(processingReport.cmpDef.name, processingReport.cmpDef)\\r\\n      }\\r\\n    })\\r\\n\\r\\n    return vueApp\\r\\n  }\\r\\n\\r\\n  gatherAllProcessedStyles() {\\r\\n    return this.#processingReports.map((x) => x.cmpDef.__processedStyles)\\r\\n  }\\r\\n\\r\\n  static Validate(cmpDef) {\\r\\n    if (isBlank(cmpDef)) {\\r\\n      throw new ComponentValidationException('Component definition is empty', cmpDef)\\r\\n    }\\r\\n    if (isBlank(toStr(cmpDef.name))) {\\r\\n      throw new ComponentValidationException(`Component needs 'name' key of type String`, cmpDef)\\r\\n    }\\r\\n    /* if (isBlank(toStr(cmpDef.template))) {\\r\\n      throw new ComponentValidationException(\\r\\n        `Component needs 'template' key of type String`,\\r\\n        cmpDef\\r\\n      )\\r\\n    } */\\r\\n    return cmpDef\\r\\n  }\\r\\n\\r\\n  async #processSingle(cmpDef) {\\r\\n    let { css, didProcess: didProcessCss } = this.#processCss(cmpDef)\\r\\n    let { scss, didProcess: didProcessScss } = await this.#processScss(cmpDef)\\r\\n    let { template, didProcess: didProcessTemplate } = this.#processTemplate(cmpDef)\\r\\n\\r\\n    if (didProcessCss) {\\r\\n      delete cmpDef.css\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    if (didProcessScss) {\\r\\n      delete cmpDef.scss\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    let processedMergedStyles = [css, scss].join('\\\\n\\\\n')\\r\\n    if (didProcessScss || didProcessCss) {\\r\\n      cmpDef.__processedStyles = processedMergedStyles\\r\\n    }\\r\\n\\r\\n    if (didProcessTemplate) {\\r\\n      cmpDef.template = template\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      cmpDef,\\r\\n      results: {\\r\\n        css,\\r\\n        scss,\\r\\n        styles: processedMergedStyles,\\r\\n        template,\\r\\n        didProcessCss,\\r\\n        didProcessScss,\\r\\n        didProcessTemplate,\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #processCss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let css = [cmpDef.css, cmpDef.style].find((x) => !isBlank(x))\\r\\n\\r\\n    if (css) {\\r\\n      try {\\r\\n        css = this.#performTokenReplacements(css, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        css = ''\\r\\n        throw new ProcessingException('CSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { css: toStr(css), didProcess }\\r\\n  }\\r\\n\\r\\n  async #processScss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let scss = ''\\r\\n\\r\\n    scss = [cmpDef.scss, cmpDef.sass].find((x) => !isBlank(x))\\r\\n    if (scss) {\\r\\n      scss = this.#performTokenReplacements(scss, this.#appConfig.appId, cmpDef.name)\\r\\n      scss = `${this.#scssResources}\\\\n${scss}`\\r\\n      try {\\r\\n        scss = await this.#Sass.compileAsync(scss, {})\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        scss = ''\\r\\n        throw new ProcessingException('SCSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { scss: toStr(scss), didProcess }\\r\\n  }\\r\\n\\r\\n  #processTemplate(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let template = toStr(cmpDef.template)\\r\\n\\r\\n    if (!isBlank(template)) {\\r\\n      try {\\r\\n        template = this.#performTokenReplacements(template, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        template = ''\\r\\n        throw new ProcessingException('Template', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { template: toStr(template), didProcess }\\r\\n  }\\r\\n\\r\\n  #performTokenReplacements(value, appId, componentName) {\\r\\n    if (!lodash.isString(value)) return value\\r\\n    value = value.replaceAll(ReplacementTokens.appId, appId)\\r\\n    value = value.replaceAll(ReplacementTokens.componentName, componentName)\\r\\n    return value\\r\\n  }\\r\\n\\r\\n  get processedLibraryRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__libraryRoot === true).cmpDef\\r\\n  }\\r\\n\\r\\n  get processedConsumerRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__consumerRoot === true).cmpDef\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/2-writing-styles-scss.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/1-adding-components.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/3-controlling-your-app.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-button',\\r\\n  template: html`\\r\\n    <button\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ icon, small }\\\"\\r\\n      :tabindex=\\\"noFocus === false ? undefined : '-1'\\\"\\r\\n    >\\r\\n      <slot />\\r\\n    </button>\\r\\n  `,\\r\\n  props: {\\r\\n    icon: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    small: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    noFocus: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      font-family: inherit;\\r\\n      font-size: inherit;\\r\\n      padding: 8px;\\r\\n      cursor: pointer;\\r\\n      border: none;\\r\\n      border-radius: 2px;\\r\\n      color: var(--bbvButtonFgColor);\\r\\n      background-color: var(--bbvButtonBgColor);\\r\\n      margin: 0;\\r\\n      transition: color 0.15s, background-color 0.3s;\\r\\n\\r\\n      &:hover {\\r\\n        color: var(--bbvButtonHoverFgColor);\\r\\n        background-color: var(--bbvButtonHoverBgColor);\\r\\n      }\\r\\n\\r\\n      &[disabled]:hover {\\r\\n        background-color: var(--bbvButtonBgColor);\\r\\n        cursor: not-allowed;\\r\\n      }\\r\\n\\r\\n      &.small {\\r\\n        padding: 6px;\\r\\n        font-size: 12px;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n\\r\\n      &.icon {\\r\\n        padding: 2px;\\r\\n        line-height: 1.5;\\r\\n      }\\r\\n\\r\\n      & > code {\\r\\n        padding: 4px 3px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        border-radius: 4px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html, Keys, Mitt, RootApp, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport AppRootStyles from '/bitpacks/bb-vue/components/internal/AppRoot.Styles.js';\\r\\nimport ConsumerRoot from '/bitpacks/bb-vue/components/internal/ConsumerRoot.js';\\r\\nimport CssManager from '/bitpacks/bb-vue/components/internal/CssManager.js';\\r\\nimport WinManager from '/bitpacks/bb-vue/components/internal/WinManager.js';\\r\\nimport AppTray from '/bitpacks/bb-vue/components/internal/AppTray.js';\\r\\nimport AppTrayGroup from '/bitpacks/bb-vue/components/internal/AppTrayGroup.js';\\r\\nimport Win from '/bitpacks/bb-vue/components/internal/Win.js';\\r\\n\\r\\nimport Button from '/bitpacks/bb-vue/components/Button.js';\\r\\nimport JsonDisplay from '/bitpacks/bb-vue/components/JsonDisplay.js';\\r\\nimport Tabs from '/bitpacks/bb-vue/components/Tabs.js';\\r\\nimport ObjectDisplay from '/bitpacks/bb-vue/components/ObjectDisplay.js';\\r\\nimport LogDisplay from '/bitpacks/bb-vue/components/LogDisplay.js';\\r\\n\\r\\nexport const ComponentLibrary = [\\r\\n  ConsumerRoot,\\r\\n  CssManager,\\r\\n  Win,\\r\\n  WinManager,\\r\\n  AppTray,\\r\\n  AppTrayGroup,\\r\\n  Button,\\r\\n  JsonDisplay,\\r\\n  ObjectDisplay,\\r\\n  LogDisplay,\\r\\n  Tabs,\\r\\n]\\r\\n\\r\\nconst rootShutdownTimeout = 2000\\r\\nexport default {\\r\\n  __libraryRoot: true,\\r\\n  name: 'bbv-app-root',\\r\\n  template: html`\\r\\n    <transition name=\\\"rootAppIntro\\\" appear>\\r\\n      <main class=\\\"__CMP_NAME__\\\" bbv-container v-if=\\\"depsLoaded\\\">\\r\\n        <transition-group name=\\\"consumerRootIntro\\\" appear>\\r\\n          <bbv-consumer-root\\r\\n            v-for=\\\"def in consumerRootDefs\\\"\\r\\n            :key=\\\"def.__uuid\\\"\\r\\n            :id=\\\"def.__uuid\\\"\\r\\n            :consumer-root-def=\\\"def\\\"\\r\\n            @consumer-root-mounted=\\\"mountConsumerRoot\\\"\\r\\n            @consumer-root-unmount-requested=\\\"unmountConsumerRootByUuid\\\"\\r\\n            @root-shutdown-requested=\\\"rootShutdown\\\"\\r\\n          />\\r\\n        </transition-group>\\r\\n        <bbv-css-manager :consumer-root-defs=\\\"consumerRootDefs\\\" />\\r\\n        <bbv-win-manager />\\r\\n        <bbv-app-tray />\\r\\n      </main>\\r\\n    </transition>\\r\\n  `,\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n    return {\\r\\n      depsLoaded: false,\\r\\n      hasSeenCrms: false,\\r\\n      rootShutdownTimeoutFn: null,\\r\\n      internals: {\\r\\n        bus: bus,\\r\\n        send: bus.emit,\\r\\n        listen: bus.on,\\r\\n        store: {\\r\\n          consumerRootDefs: [],\\r\\n          consumerRootMounts: [],\\r\\n          winMounts: [],\\r\\n        },\\r\\n        winManager: null,\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.loadDeps()\\r\\n  },\\r\\n  provide() {\\r\\n    return this.$data\\r\\n  },\\r\\n  computed: {\\r\\n    isReady() {\\r\\n      return this.internals.winManager\\r\\n    },\\r\\n    consumerRootDefs() {\\r\\n      return this.isReady ? this.allCrds : []\\r\\n    },\\r\\n    allCrds() {\\r\\n      return this.internals.store.consumerRootDefs\\r\\n    },\\r\\n    allCrms() {\\r\\n      return this.internals.store.consumerRootMounts\\r\\n    },\\r\\n  },\\r\\n  watch: {\\r\\n    /**\\r\\n     * Watch for CRMs. When seen some, notify AppRoot that some have\\r\\n     * been added. Wait for them to go away. Once they are gone, do a self\\r\\n     * cleanup after `rootShutdownTimeout` ms. Shutdown timeout can be\\r\\n     * cancelled by new CRM additions.\\r\\n     */\\r\\n    'internals.store.consumerRootMounts': {\\r\\n      handler(newVal) {\\r\\n        // Ensure AppRoot knows CRMs have been seen added at some point\\r\\n        if (this.hasSeenCrms !== true && newVal?.length >= 1) {\\r\\n          this.hasSeenCrms = true\\r\\n        }\\r\\n\\r\\n        // If a CRM is removed, if it was the last, and if AppRoot has seen CRMs before\\r\\n        if (this.hasSeenCrms === true && newVal?.length === 0) {\\r\\n          if (this.rootShutdownTimeoutFn === null) {\\r\\n            // Create a shutdown timeout func to end the entire RootApp\\r\\n            this.rootShutdownTimeoutFn = setTimeout(() => {\\r\\n              console.debug('bb-vue: AppRoot cannot find any CRMs and is shutting down')\\r\\n              this.rootShutdown()\\r\\n            }, rootShutdownTimeout)\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Clear an ongoing shutdown timeout if a new CRM is added\\r\\n        if (newVal?.length >= 1 && this.rootShutdownTimeoutFn !== null) {\\r\\n          clearTimeout(this.rootShutdownTimeoutFn)\\r\\n          this.rootShutdownTimeoutFn = null\\r\\n        }\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  methods: {\\r\\n    async loadDeps() {\\r\\n      // console.time('AppRoot:loadDeps')\\r\\n      if (!win[Keys.vueUseModuleKey]) {\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/shared@7.5.3/index.iife.min.js')\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/core@7.5.3/index.iife.min.js')\\r\\n      }\\r\\n      this.depsLoaded = true\\r\\n      // console.timeEnd('AppRoot:loadDeps')\\r\\n    },\\r\\n    addConsumerRootDef(consumerRootDef) {\\r\\n      const { markRaw } = Vue()\\r\\n      let rawConsumerRootDef = markRaw(consumerRootDef)\\r\\n      this.internals.store.consumerRootDefs = [\\r\\n        ...this.allCrds.filter((x) => {\\r\\n          return x.__uuid !== rawConsumerRootDef.__uuid\\r\\n        }),\\r\\n        rawConsumerRootDef,\\r\\n      ]\\r\\n\\r\\n      return () => this.findConsumerRootMount(rawConsumerRootDef.__uuid)\\r\\n    },\\r\\n    mountConsumerRoot(consumerRootMount) {\\r\\n      this.internals.store.consumerRootMounts = [\\r\\n        ...this.allCrms.filter((x) => {\\r\\n          return x.$options.__uuid !== consumerRootMount.$options.__uuid\\r\\n        }),\\r\\n        consumerRootMount,\\r\\n      ]\\r\\n    },\\r\\n    async unmountConsumerRootByUuid(crmUuid) {\\r\\n      await this.internals.winManager.closeAllWinsByCrmUuid(crmUuid)\\r\\n      this.internals.store.consumerRootMounts = this.allCrms.filter((x) => {\\r\\n        return x.$options.__uuid !== crmUuid\\r\\n      })\\r\\n      this.internals.store.consumerRootDefs = this.allCrds.filter((x) => {\\r\\n        return x.__uuid !== crmUuid\\r\\n      })\\r\\n    },\\r\\n    findConsumerRootMount(rootMountName) {\\r\\n      return (\\r\\n        this.allCrms.find((x) => {\\r\\n          return rootMountName == x.$options.__uuid\\r\\n        }) ?? null\\r\\n      )\\r\\n    },\\r\\n    async rootShutdown() {\\r\\n      for (const x of this.allCrms) {\\r\\n        await this.unmountConsumerRootByUuid(x.$options.__uuid)\\r\\n      }\\r\\n      setTimeout(() => {\\r\\n        RootApp.cleanup()\\r\\n      }, 50)\\r\\n    },\\r\\n  },\\r\\n  ...AppRootStyles,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-json-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ fill: fill !== false, wrap: wrap !== false }\\\">\\r\\n      <div class=\\\"json_inner\\\">{{ toJson(data) }}</div>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {},\\r\\n    },\\r\\n    fill: {\\r\\n      default: false,\\r\\n    },\\r\\n    wrap: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      &.fill {\\r\\n        height: 100%;\\r\\n\\r\\n        .json_inner {\\r\\n          height: 100%;\\r\\n          max-height: unset;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.wrap {\\r\\n        .json_inner {\\r\\n          white-space: pre-wrap;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .json_inner {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 10px 5px;\\r\\n        width: 100%;\\r\\n        max-height: 300px;\\r\\n        overflow: auto;\\r\\n        white-space: pre;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-radius: 5px;\\r\\n        border-top-left-radius: 0;\\r\\n        border-bottom-left-radius: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, getGlobal, html, setGlobal, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// ascii dep\\r\\nimport asciichart from '/bitpacks/bb-vue/misc-examples/asciichart-lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'ascii-chart-app' },\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  name: 'ascii-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"ASCII Chart\\\" no-pad start-width=\\\"50%\\\">\\r\\n      <div class=\\\"chartBg\\\" @pointerenter=\\\"pauseEvents = true\\\" @pointerleave=\\\"pauseEvents = false\\\">\\r\\n        <pre class=\\\"chartDisplay\\\" ref=\\\"chartDisplay\\\">{{ this.chartOutput }}</pre>\\r\\n      </div>\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {\\r\\n      bus: null,\\r\\n      chartHistory: [],\\r\\n      eventBuffer: [],\\r\\n      pauseEvents: false,\\r\\n    }\\r\\n  },\\r\\n\\r\\n  computed: {\\r\\n    chartOutput() {\\r\\n      if (this.chartHistory.length < 1) return ''\\r\\n      return asciichart.plot(this.chartHistory)\\r\\n    },\\r\\n  },\\r\\n\\r\\n  watch: {\\r\\n    pauseEvents(newVal) {\\r\\n      if (newVal !== true) {\\r\\n        this.$refs.chartDisplay?.scrollTo({ left: 0, behavior: 'smooth' })\\r\\n        this.flushBuffer()\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  mounted() {\\r\\n    this.bus = getGlobal('asciiBus')\\r\\n    if (!this.bus) {\\r\\n      this.bus = getGlobal('Mitt').createBus()\\r\\n      setGlobal('asciiBus', this.bus)\\r\\n    }\\r\\n    this.bus.on('asciiChartCollector', this.handleBusEvent)\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    handleBusEvent(data) {\\r\\n      if (this.pauseEvents) {\\r\\n        this.eventBuffer = [data, ...this.eventBuffer]\\r\\n      } else {\\r\\n        this.chartHistory = [data?.value, ...this.chartHistory]\\r\\n      }\\r\\n      if (this.chartHistory.length > 600) {\\r\\n        this.chartHistory.pop()\\r\\n      }\\r\\n    },\\r\\n    async flushBuffer() {\\r\\n      for (let i = this.eventBuffer.length - 1; i >= 0; i--) {\\r\\n        let entry = this.eventBuffer[i]\\r\\n        if (!entry) return\\r\\n        this.bus.emit('asciiChartCollector', entry)\\r\\n        this.eventBuffer.pop()\\r\\n        await sleep(10)\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      .win_content {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n      }\\r\\n\\r\\n      .chartBg {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        width: 100%;\\r\\n        min-height: 350px;\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        padding: 30px 0;\\r\\n      }\\r\\n\\r\\n      .chartDisplay {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        overflow: auto;\\r\\n        padding: 30px 0;\\r\\n        font-family: 'FreeMono';\\r\\n        cursor: default;\\r\\n        user-select: none;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-ui.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  let bus = getGlobal('asciiBus')\\r\\n  if (!bus) {\\r\\n    throw new Error('Run the asciichart-ui.js script first!')\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    bus.emit('asciiChartCollector', { value: (Math.random() - 0.5) * 10 })\\r\\n    await ns.sleep(50)\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-collector.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { WinStates, TrayItemTypes } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, doc, html, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ isCollapsed, shouldDisplay }\\\">\\r\\n      <transition-group name=\\\"appTrayItemFadeUp\\\" appear>\\r\\n        <bbv-app-tray-group key=\\\"actions\\\" tray-teleport />\\r\\n        <template v-for=\\\"group in trayItems\\\" :key=\\\"group.root.uuid\\\">\\r\\n          <bbv-app-tray-group :app-title=\\\"group.root.title\\\">\\r\\n            <template :key=\\\"win.uuid\\\" v-for=\\\"win in group.winMounts\\\">\\r\\n              <bbv-button\\r\\n                :title=\\\"win.title\\\"\\r\\n                @click=\\\"toggleTrayItem(win)\\\"\\r\\n                :class=\\\"{ isOpen: win.winState == WinStates.open }\\\"\\r\\n              >\\r\\n                {{ win.title }}\\r\\n              </bbv-button>\\r\\n            </template>\\r\\n          </bbv-app-tray-group>\\r\\n        </template>\\r\\n      </transition-group>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  data() {\\r\\n    return {\\r\\n      WinStates,\\r\\n      TrayItemTypes,\\r\\n      isCollapsed: false,\\r\\n      isHidden: false,\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    trayItems() {\\r\\n      let winMountTrayItems = this.internals.store.winMounts\\r\\n        .map((winMount) => this.buildTrayItemFor(TrayItemTypes.winMount, winMount))\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let consumerRootMountTrayItems = this.internals.store.consumerRootMounts\\r\\n        .map((consumerRootMount) =>\\r\\n          this.buildTrayItemFor(TrayItemTypes.consumerRootMount, consumerRootMount)\\r\\n        )\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let winsByRoots = consumerRootMountTrayItems.reduce((acc, root) => {\\r\\n        let ownedWins = winMountTrayItems.filter((x) => x.ownerUuid == root.uuid)\\r\\n        if (ownedWins.length) {\\r\\n          acc.push({ root, winMounts: ownedWins })\\r\\n        }\\r\\n        return acc\\r\\n      }, [])\\r\\n\\r\\n      return winsByRoots\\r\\n    },\\r\\n    shouldDisplay() {\\r\\n      return this.isHidden === false && this.trayItems.length\\r\\n    },\\r\\n  },\\r\\n  mounted() {\\r\\n    this.watchGameDock()\\r\\n  },\\r\\n  methods: {\\r\\n    watchGameDock() {\\r\\n      const { useIntervalFn } = VueUse()\\r\\n      useIntervalFn(() => {\\r\\n        let gameDockSelector = doc.querySelector('.MuiDrawer-root.MuiDrawer-docked')\\r\\n        let width = gameDockSelector?.clientWidth\\r\\n        if (!width) {\\r\\n          this.isHidden = true\\r\\n          return\\r\\n        }\\r\\n        this.isHidden = false\\r\\n        if (width < 240) {\\r\\n          this.isCollapsed = true\\r\\n        } else {\\r\\n          this.isCollapsed = false\\r\\n        }\\r\\n      }, 400)\\r\\n    },\\r\\n    toggleTrayItem(trayItem) {\\r\\n      if (trayItem.winState != WinStates.open) {\\r\\n        trayItem.winMount.open()\\r\\n      } else {\\r\\n        trayItem.winMount.close()\\r\\n      }\\r\\n    },\\r\\n    buildTrayItemFor(trayItemType, trayCompatibleItem) {\\r\\n      const winTrayItem = (winMount) => {\\r\\n        const ownerOpts = winMount.owner.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.winMount,\\r\\n          uuid: winMount.uuid,\\r\\n          title: winMount.title,\\r\\n          ownerUuid: ownerOpts.__uuid,\\r\\n          winState: winMount.winState,\\r\\n          winMount: winMount,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      const rootTrayItem = (consumerRootMount) => {\\r\\n        const opts = consumerRootMount.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.consumerRootMount,\\r\\n          uuid: opts.__uuid,\\r\\n          title: opts.name,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      let trayItem\\r\\n      switch (trayItemType) {\\r\\n        case TrayItemTypes.winMount:\\r\\n          trayItem = winTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n        case TrayItemTypes.consumerRootMount:\\r\\n          trayItem = rootTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n      }\\r\\n\\r\\n      if (trayItem.kind == TrayItemTypes.winMount) {\\r\\n        if (trayItem.winMount.trayHide !== false) {\\r\\n          return null\\r\\n        }\\r\\n        if (trayItem.winMount.trayTitle) {\\r\\n          trayItem.title = trayItem.winMount.trayTitle\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return trayItem\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include typo-basic;\\r\\n\\r\\n      pointer-events: auto;\\r\\n      position: absolute;\\r\\n      z-index: 1400;\\r\\n\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n\\r\\n      display: flex;\\r\\n      align-items: stretch;\\r\\n      padding: 10px;\\r\\n      width: 249px;\\r\\n      height: 62px;\\r\\n      clip-path: inset(-60px 0 0 0);\\r\\n\\r\\n      box-shadow: inset 0px 0px 20px 0px var(--bbvBoxShadowColor1);\\r\\n      border-top: 1px solid var(--bbvBorderColor);\\r\\n      background-color: var(--bbvAppTrayBgColor);\\r\\n      transition: width 0.2s cubic-bezier(0.86, 0, 0.07, 1), opacity 0.4s ease, transform 0.4s ease;\\r\\n\\r\\n      &:hover {\\r\\n        width: 100%;\\r\\n        z-index: 1600;\\r\\n\\r\\n        &.isCollapsed {\\r\\n          width: 100%;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        width: 57px;\\r\\n      }\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        transform: translateY(100px);\\r\\n        opacity: 0;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-active,\\r\\n      .appTrayItemFadeUp-leave-active {\\r\\n        transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-from,\\r\\n      .appTrayItemFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(50px);\\r\\n        transform-origin: left center;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/3-connecting-with-scripts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, Vue } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nclass Utils {\\r\\n  static isUndefined(x) {\\r\\n    return x === undefined\\r\\n  }\\r\\n  static pick(o, props) {\\r\\n    let x = {}\\r\\n    props.forEach((k) => {\\r\\n      x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omit(o, props) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (props.indexOf(k) === -1) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omitBy(o, pred) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (!pred(o[k])) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  // custom defaults function suited to our specific purpose\\r\\n  static defaults(o, ...sources) {\\r\\n    sources.forEach((s) => {\\r\\n      Object.keys(s).forEach((k) => {\\r\\n        if (this.isUndefined(o[k]) || o[k] === '') o[k] = s[k]\\r\\n      })\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\\r\\nclass VueScriptX {\\r\\n  constructor() {\\r\\n    this.installed = false\\r\\n    this.promise = Promise.resolve()\\r\\n    this.loaded = {}\\r\\n    this.props = ['unload', 'src', 'type', 'async', 'integrity', 'text', 'crossorigin']\\r\\n  }\\r\\n  install(app) {\\r\\n    app.config.globalProperties.$scriptx = this\\r\\n    let self = this\\r\\n    if (self.installed) return\\r\\n    app.component('scriptx', {\\r\\n      props: self.props,\\r\\n      // Uses render method with <slot>s, see: https://v3.vuejs.org/guide/render-function.html\\r\\n      render() {\\r\\n        const { h } = Vue()\\r\\n        return h(\\r\\n          'div',\\r\\n          { style: 'display:none' },\\r\\n          this.$slots.default ? this.$slots.default() : undefined\\r\\n        )\\r\\n      },\\r\\n      mounted() {\\r\\n        let parent = this.$el.parentElement\\r\\n        if (!this.src) {\\r\\n          self.promise = self.promise.then(() => {\\r\\n            let script = doc.createElement('script')\\r\\n            let el = this.$el.innerHTML\\r\\n            el = el.replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&')\\r\\n            script.type = 'text/javascript'\\r\\n            script.appendChild(doc.createTextNode(el))\\r\\n            parent.appendChild(script)\\r\\n            this.$emit('loaded') // any other proper way to do this or emit error?\\r\\n          })\\r\\n        } else {\\r\\n          let opts = Utils.omitBy(Utils.pick(this, self.props), Utils.isUndefined)\\r\\n          opts.parent = parent\\r\\n          // this syntax results in an implicit return\\r\\n          let load = () => {\\r\\n            self.load(this.src, opts).then(\\r\\n              () => this.$emit('loaded'),\\r\\n              (err) => this.$emit('error', err)\\r\\n            )\\r\\n          }\\r\\n          if (Utils.isUndefined(this.async) || this.async === 'false')\\r\\n            self.promise = self.promise.then(load)\\r\\n          // serialize execution\\r\\n          else load() // inject immediately\\r\\n        }\\r\\n        this.$nextTick(() => {\\r\\n          this.$el.parentElement.removeChild(this.$el)\\r\\n          // NOTE: this.$el.remove() may be used, but IE sucks, see: https://github.com/taoeffect/vue-script2/pull/17\\r\\n        })\\r\\n      },\\r\\n      unmounted() {\\r\\n        if (this.unload) {\\r\\n          new Function(this.unload)() // eslint-disable-line\\r\\n          delete self.loaded[this.src]\\r\\n        }\\r\\n      },\\r\\n    })\\r\\n    self.installed = true\\r\\n  }\\r\\n  load(src, opts = { parent: doc.head }) {\\r\\n    if (!this.loaded[src]) {\\r\\n      this.loaded[src] = new Promise((resolve, reject) => {\\r\\n        let script = doc.createElement('script')\\r\\n        // omit the special options that VueScriptX supports\\r\\n        Utils.defaults(script, Utils.omit(opts, ['unload', 'parent']), { type: 'text/javascript' })\\r\\n        // async may not be used with 'doc.write'\\r\\n        script.async = false\\r\\n        script.src = src\\r\\n        // crossorigin in HTML and crossOrigin in the DOM per HTML spec\\r\\n        if (opts.crossorigin) {\\r\\n          script.crossOrigin = opts.crossorigin\\r\\n        }\\r\\n        // handle onload and onerror\\r\\n        script.onload = () => resolve(src)\\r\\n        script.onerror = () => reject(new Error(src))\\r\\n        opts.parent.appendChild(script)\\r\\n      })\\r\\n    }\\r\\n    return this.loaded[src]\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default new VueScriptX()\",\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { cleanupError, css, formatMoney, formatNumberShort, html, lodash, timeDiff, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport const formatRam = (gb) => {\\r\\n  const sizes = ['GB', 'TB', 'PB']\\r\\n  const marker = 1000\\r\\n  const precision = 2\\r\\n  gb = parseInt(gb) || 0\\r\\n  if (gb == 0) return 'n/a'\\r\\n  const i = parseInt(Math.floor(Math.log(gb) / Math.log(marker)))\\r\\n  if (i == 0) return gb + sizes[i]\\r\\n  return (gb / Math.pow(marker, i)).toFixed(precision) + sizes[i]\\r\\n}\\r\\n\\r\\nexport const mapOrder = (array, myorder, key, catchAll) => {\\r\\n  var order = myorder.reduce((r, k, i) => ((r[k] = i + 1), r), {})\\r\\n  const theSort = array.sort(\\r\\n    (a, b) => (order[a[key]] || order[catchAll]) - (order[b[key]] || order[catchAll])\\r\\n  )\\r\\n  return theSort\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-object-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"item in objectPrinter\\\">\\r\\n        <div class=\\\"objectRow\\\">\\r\\n          <div class=\\\"label\\\" :title=\\\"item.label\\\">{{ item.label }}</div>\\r\\n          <div class=\\\"value\\\">\\r\\n            <template v-if=\\\"item.subType == 'logs'\\\">\\r\\n              <bbv-log-display :data=\\\"item.value\\\" />\\r\\n            </template>\\r\\n            <template v-else>{{ item.value }}</template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {\\r\\n        ezTime: 1642319498647,\\r\\n        ezTime2: 1642319596738,\\r\\n        bigNum: 8989810859287482,\\r\\n        smolNum: 21,\\r\\n        bigArr: [\\r\\n          'asflkajlfkasjflkasjflkasjflkasjflaskjfaslfkjaslfkjaslfkasjflkj',\\r\\n          'lkasjfl',\\r\\n          4,\\r\\n          89,\\r\\n          22,\\r\\n          10,\\r\\n        ],\\r\\n        path: '/nuburn/exec/_test.js',\\r\\n        host: 'home',\\r\\n        threads: 1,\\r\\n        pid: 14,\\r\\n        uuid: '5f01bd66-44df-4214-96b4-e2d47eff455a',\\r\\n        options: {\\r\\n          bounceBack: 'hello there!',\\r\\n        },\\r\\n        logs: [],\\r\\n        timeStart: 1642317178466,\\r\\n        result: 'hello there! 1661.8602317640846',\\r\\n        timeEnd: 1642317180215,\\r\\n        smolArr: [4, 5, 7, 2],\\r\\n        bigObj: {\\r\\n          moreStuff: 'poasifpasofiapsof',\\r\\n          ok: true,\\r\\n          nice: 'got it',\\r\\n          arr: [4, 2, 5, 5, 4, 7, 4, 6, 4, 5, 1],\\r\\n          key: '💛',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    objectPrinter() {\\r\\n      if (!lodash.isObjectLike(this.data)) return\\r\\n\\r\\n      const dateTimeMatcher = new RegExp(/.*[tT]ime|[dD]ate.*/, 'gm')\\r\\n      const ramLikes = ['ram', 'ramUsed', 'ramUsage', 'ramTotal', 'ramFree', 'ramAvail']\\r\\n      const secondLikes = ['onlineRunningTime', 'offlineRunningTime', 'timeLifespan']\\r\\n      const dateLikes = ['timeOfBirth', 'timeOfDeath', 'timeStart', 'timeEnd']\\r\\n      const moneyLikes = [\\r\\n        'onlineMoneyMade',\\r\\n        'offlineMoneyMade',\\r\\n        'profit',\\r\\n        'money',\\r\\n        'cost',\\r\\n        'spend',\\r\\n        'price',\\r\\n      ]\\r\\n      const numberIgnores = ['pid', 'threads']\\r\\n\\r\\n      // Build object array from entries\\r\\n      let objArray = Object.entries({ ...this.data }).map(([label, value]) => {\\r\\n        label = String(label).trim()\\r\\n        let valueOfflimits = false\\r\\n\\r\\n        let type = 'default'\\r\\n        let subType = 'default'\\r\\n\\r\\n        // General classification\\r\\n        if ((dateTimeMatcher['exec'](label) || dateLikes.includes(label)) && lodash.isNumber(value))\\r\\n          type = 'date'\\r\\n        else if (lodash.isString(value)) type = 'string'\\r\\n        else if (lodash.isNumber(value)) type = 'number'\\r\\n        else if (lodash.isArray(value)) type = 'array'\\r\\n        else if (lodash.isPlainObject(value)) type = 'object'\\r\\n\\r\\n        // Subtype classification\\r\\n        if (type == 'array') {\\r\\n          if (label.toLowerCase() == 'logs') {\\r\\n            subType = 'logs'\\r\\n          } else if (value?.length > 4 || value?.some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        } else if (type == 'object') {\\r\\n          if (Object.keys(value).count > 4 || Object.values(value).some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Basic processing\\r\\n        if (type == 'string') value = value.trim()\\r\\n        if (type == 'string' && label == 'error') {\\r\\n          value = cleanupError(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Time processing\\r\\n        if (['string', 'number', 'date'].includes(type) && ramLikes.includes(label)) {\\r\\n          value = formatRam(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          ['string', 'number', 'date'].includes(type) &&\\r\\n          secondLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = timeDiff(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Date processing\\r\\n        if (type == 'date' && !valueOfflimits) {\\r\\n          try {\\r\\n            value = new Date(value).toLocaleTimeString()\\r\\n            valueOfflimits = true\\r\\n          } catch (error) {\\r\\n            /* shh */\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Number processing\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          moneyLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatMoney(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          !numberIgnores.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatNumberShort(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        return {\\r\\n          label,\\r\\n          value,\\r\\n          type,\\r\\n          subType,\\r\\n        }\\r\\n      })\\r\\n\\r\\n      // Sort object entries based on known keys + common datatypes\\r\\n      let labelOrders = [\\r\\n        'server',\\r\\n        'filename',\\r\\n        'args',\\r\\n        'pid',\\r\\n        'threads',\\r\\n        ...ramLikes,\\r\\n        ...secondLikes,\\r\\n        ...dateLikes,\\r\\n        'status',\\r\\n        'result',\\r\\n        'error',\\r\\n        'onlineMoneyMade',\\r\\n        'onlineExpGained',\\r\\n        'script',\\r\\n        'path',\\r\\n        'host',\\r\\n        'uuid',\\r\\n        'options',\\r\\n        '*',\\r\\n        'logs',\\r\\n      ]\\r\\n\\r\\n      return mapOrder(objArray, labelOrders, 'label', '*')\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson, cleanupError },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include bbv-scrollbar;\\r\\n\\r\\n      width: 100%;\\r\\n      overflow: auto;\\r\\n      box-shadow: 0px 0px 10px 0px var(--bbvBoxShadowColor1);\\r\\n\\r\\n      .objectRow {\\r\\n        display: flex;\\r\\n        justify-content: stretch;\\r\\n        width: 100%;\\r\\n\\r\\n        &:first-child,\\r\\n        &:last-child {\\r\\n          .label,\\r\\n          .value {\\r\\n            padding-top: 8px;\\r\\n            padding-bottom: 8px;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        &:last-child {\\r\\n          .label {\\r\\n            border-color: transparent;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .label {\\r\\n        width: 20%;\\r\\n        min-width: 120px;\\r\\n        max-width: 220px;\\r\\n        padding: 3px 12px 3px 8px;\\r\\n        border-bottom: 1px solid var(--bbvInputBorderFadeColor);\\r\\n        flex-shrink: 0;\\r\\n        overflow: hidden;\\r\\n        text-overflow: ellipsis;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .value {\\r\\n        flex-grow: 1;\\r\\n        font-size: 12px;\\r\\n        white-space: pre-wrap;\\r\\n        word-break: break-all;\\r\\n        padding: 4px 4px 4px 8px;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-left: 2px solid var(--bbvInputBorderFadeColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/2-events-and-communication.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getGlobal, Keys, setGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class MittLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Mitt module.\\r\\n   * @returns {Promise<{ createBus: Function }>} Mitt constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = getGlobal(Keys.mittModuleKey)\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import('https://unpkg.com/mitt@3.0.0/dist/mitt.mjs')\\r\\n    let moduleWrapper = { createBus: module.default }\\r\\n\\r\\n    setGlobal(Keys.mittModuleKey, moduleWrapper)\\r\\n\\r\\n    return moduleWrapper\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/0-getting-started.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, lodash, Vue, VueUse, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default async function useDraggableWin(store, options = {}) {\\r\\n  const { reactive, watch } = Vue()\\r\\n  const { useDraggable, useElementBounding, until } = VueUse()\\r\\n\\r\\n  // Handle options + validations\\r\\n  let opts = reactive({\\r\\n    win: null,\\r\\n    winManager: null,\\r\\n    dragHandleRef: null,\\r\\n    draggableRef: null,\\r\\n    dragIgnoreRef: null,\\r\\n    startPosition: null,\\r\\n    constrain: true,\\r\\n    constrainPadding: 0,\\r\\n    ...lodash.omitBy(options, lodash.isNil),\\r\\n  })\\r\\n  if (!lodash.isObjectLike(store)) {\\r\\n    throw new Error('Must provide store as first arg')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.win)) {\\r\\n    throw new Error('Must provide win in options')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.winManager)) {\\r\\n    throw new Error('Must provide winManager in options')\\r\\n  }\\r\\n  if (!opts.dragHandleRef) {\\r\\n    throw new Error('Must provide dragHandleRef in options')\\r\\n  }\\r\\n  if (!opts.draggableRef) {\\r\\n    throw new Error('Must provide draggableRef in options')\\r\\n  }\\r\\n\\r\\n  // Fill provided store with initial state\\r\\n  store.isDragging = false\\r\\n  store.style = {}\\r\\n  store.fixedRoot = useElementBounding(doc.querySelector('[bbv-root]'))\\r\\n  store.draggableTarget = useElementBounding(opts.draggableRef)\\r\\n\\r\\n  // Helper to manually position draggable\\r\\n  const manuallyPositionDraggable = async ({ x, y }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.left = `${x}px`\\r\\n    ele.style.top = `${y}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n  const manuallySizeDraggable = async ({ width, height }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.width = `${width}px`\\r\\n    ele.style.height = `${height}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n\\r\\n  // Wait until draggableTarget is mounted, might be a better way?\\r\\n  await until(store.draggableTarget).toMatch((x) => x.width > 0)\\r\\n\\r\\n  // Sync minWidth / minHeight from CSS styles applied to window\\r\\n  store.minWidth = parseInt(win.getComputedStyle(opts.draggableRef).minWidth)\\r\\n  store.minHeight = parseInt(win.getComputedStyle(opts.draggableRef).minHeight)\\r\\n\\r\\n  // Set initial position - if none is provided - based on winManager recommendation\\r\\n  let initialPos = { x: 0, y: 0 }\\r\\n  if (opts.startPosition === null) {\\r\\n    initialPos = opts.winManager.getRecommendedPosition(opts.win)\\r\\n  } else {\\r\\n    initialPos = { x: opts.startPosition?.x ?? 0, y: opts.startPosition?.y ?? 0 }\\r\\n  }\\r\\n\\r\\n  // Do initial positioning of window\\r\\n  manuallyPositionDraggable(initialPos)\\r\\n\\r\\n  // Watch for position changes\\r\\n  store.isDragging = useDraggable(opts.dragHandleRef, {\\r\\n    initialValue: initialPos,\\r\\n    onMove: async (p) => manuallyPositionDraggable(p),\\r\\n    onStart: (_, e) => !e.path.some((x) => x == opts.dragIgnoreRef),\\r\\n  }).isDragging\\r\\n\\r\\n  // Watch for size changes\\r\\n  watch(store.draggableTarget, () => manuallySizeDraggable(store.draggableTarget), { deep: true })\\r\\n}\\r\\n\\r\\nasync function updateStore(ctx) {\\r\\n  const { reactive } = Vue()\\r\\n\\r\\n  let padding = ctx.opts.constrainPadding\\r\\n  let root = ctx.store.fixedRoot\\r\\n  let draggable = ctx.store.draggableTarget\\r\\n\\r\\n  let newSize = reactive({ width: draggable.width, height: draggable.height })\\r\\n  let newPos = reactive({ x: draggable.x, y: draggable.y })\\r\\n\\r\\n  // Clamp window size and position if desired\\r\\n  if (ctx.opts.constrain) {\\r\\n    const { useClamp } = VueUse()\\r\\n\\r\\n    newSize.width = useClamp(newSize.width, ctx.store.minWidth, root.width - padding * 2)\\r\\n    newSize.height = useClamp(\\r\\n      newSize.height,\\r\\n      ctx.store.isCollapsed ? 0 : ctx.store.minHeight,\\r\\n      root.height - padding * 2\\r\\n    )\\r\\n\\r\\n    newPos.x = useClamp(newPos.x, padding, root.width - newSize.width - padding)\\r\\n    newPos.y = useClamp(newPos.y, padding, root.bottom - newSize.height - padding)\\r\\n  }\\r\\n\\r\\n  // Update style object to be bound to draggableTarget in consumer template\\r\\n  ctx.store.style = {\\r\\n    left: `${newPos.x}px`,\\r\\n    top: `${newPos.y}px`,\\r\\n    width: `${newSize.width}px`,\\r\\n    height: `${newSize.height}px`,\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, isBlank, lodash } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-log-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"[logTs, tsRows] in logsMap\\\" :key=\\\"logTs\\\">\\r\\n        <div class=\\\"tsRow\\\" :class='{ hasTs: logTs !== \\\"noTs\\\" }'>\\r\\n          <div class=\\\"logTs\\\" v-if=\\\"logTs !== 'noTs'\\\">{{ logTs }}</div>\\r\\n          <div class=\\\"simpleRows\\\">\\r\\n            <template v-for=\\\"row in tsRows\\\" :key=\\\"row\\\">\\r\\n              <div class=\\\"simpleRow\\\">{{ row }}</div>\\r\\n            </template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: () => [],\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    logsMap() {\\r\\n      if (!lodash.isArray(this.data)) return\\r\\n\\r\\n      // Build object array from entries\\r\\n      let mergedLogs = new Map()\\r\\n      let reversed = [...this.data].reverse()\\r\\n      reversed.forEach((logRow) => {\\r\\n        logRow = String(logRow)\\r\\n        let logTs = Array.from(logRow.matchAll(/\\\\[(.*?)\\\\]/g))\\r\\n        if (!isBlank(logTs) && lodash['get'](logTs, '[0][1]')) {\\r\\n          let tsMatch = logTs[0][0]\\r\\n          logTs = logTs[0][1]\\r\\n          logRow = logRow.replaceAll(tsMatch, '')\\r\\n        } else {\\r\\n          logTs = 'noTs'\\r\\n        }\\r\\n        let existingLogs = mergedLogs['get'](logTs) || []\\r\\n        mergedLogs.set(logTs, [...existingLogs, logRow.trim()])\\r\\n      })\\r\\n\\r\\n      return mergedLogs\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      width: 100%;\\r\\n\\r\\n      .tsRow {\\r\\n        display: flex;\\r\\n        align-items: flex-start;\\r\\n        width: 100%;\\r\\n        padding: 3px 0;\\r\\n\\r\\n        &.hasTs .simpleRow {\\r\\n          padding: 0 8px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .logTs {\\r\\n        padding: 1.5px;\\r\\n        border-radius: 5px;\\r\\n        background-color: var(--bbvInputBorderFadeColor);\\r\\n        width: max-content;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .simpleRows {\\r\\n        flex-grow: 1;\\r\\n      }\\r\\n\\r\\n      .simpleRow {\\r\\n        line-height: 14px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr, toJson, RootApp, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport ComponentManager from '/bitpacks/bb-vue/ComponentManager.js';\\r\\nimport MittLoader from '/bitpacks/bb-vue/MittLoader.js';\\r\\nimport SassLoader from '/bitpacks/bb-vue/SassLoader.js';\\r\\nimport VueLoader from '/bitpacks/bb-vue/VueLoader.js';\\r\\n\\r\\nimport ScriptX from '/bitpacks/bb-vue/components/internal/ScriptX.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { default as AppRoot, ComponentLibrary } from '/bitpacks/bb-vue/components/internal/AppRoot.js';\\r\\n\\r\\nconst CreateOrGetRootVueApp = async (Vue, Sass, forceReload = false) => {\\r\\n  const rootConfig = {\\r\\n    appId: 'bb-vue-root',\\r\\n  }\\r\\n\\r\\n  // console.time('CreateOrGetRootVueApp')\\r\\n\\r\\n  if (forceReload == true || (RootApp.raw() && !RootApp.instance())) {\\r\\n    console.debug(`bb-vue: AppFactory found remnants of previous app, doing cleanup`)\\r\\n    await RootApp.cleanup()\\r\\n  } else if (RootApp.raw() && RootApp.instance()) {\\r\\n    console.debug(`bb-vue: AppFactory found existing app, returning instance`)\\r\\n    return RootApp.raw()\\r\\n  }\\r\\n\\r\\n  console.debug(`bb-vue: AppFactory building new Vue app`)\\r\\n\\r\\n  let componentManager = new ComponentManager(rootConfig, Sass, AppRoot.scssResources)\\r\\n  componentManager.add(AppRoot, ...ComponentLibrary)\\r\\n  await componentManager.processAll()\\r\\n\\r\\n  let processedLibraryRoot = {\\r\\n    ...componentManager.processedLibraryRoot,\\r\\n    __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n  }\\r\\n\\r\\n  let rootApp\\r\\n  rootApp = Vue.createApp(processedLibraryRoot)\\r\\n  rootApp.use(ScriptX)\\r\\n  componentManager.registerWithVueApp(rootApp)\\r\\n\\r\\n  await RootApp.addDom(rootConfig.appId)\\r\\n  rootApp.mount(`#${rootConfig.appId}`)\\r\\n  RootApp.set(rootApp)\\r\\n\\r\\n  // console.timeEnd('CreateOrGetRootVueApp')\\r\\n\\r\\n  return rootApp\\r\\n}\\r\\n\\r\\n//\\r\\n\\r\\nexport default class AppFactory {\\r\\n  #ns\\r\\n  #appConfig\\r\\n  #rootComponent\\r\\n  #componentsInQueue = new Set()\\r\\n  #mounted = false\\r\\n\\r\\n  constructor(ns) {\\r\\n    if (isBlank(ns) || !(ns.tprint || ns.sleep || ns.exit)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique reference to the ns object! ` +\\r\\n          `Try sending the ns object from the script where you're creating this AppFactory.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    this.#ns = ns\\r\\n    this.#mounted = false\\r\\n    this.#componentsInQueue = new Set()\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async mount({ config = {}, components = [], rootComponent = {} }) {\\r\\n    this.#configure(config)\\r\\n    this.#addComponents(components)\\r\\n    this.#setRootComponent(rootComponent)\\r\\n\\r\\n    this.#validateStart()\\r\\n    this.#validateOneMount()\\r\\n\\r\\n    // console.time('AppFactory:start')\\r\\n\\r\\n    const { Vue, Sass } = await this.#runLoaders()\\r\\n\\r\\n    // Mount root app\\r\\n    let rootVueApp = await CreateOrGetRootVueApp(Vue, Sass, this.#appConfig.forceReload)\\r\\n\\r\\n    let componentManager = new ComponentManager(\\r\\n      this.#appConfig,\\r\\n      Sass,\\r\\n      [RootApp.appDef().scssResources, this.#appConfig.scssResources].join('\\\\n\\\\n')\\r\\n    )\\r\\n    componentManager.add(...this.#componentsInQueue)\\r\\n    await componentManager.processAll()\\r\\n    componentManager.registerWithVueApp(rootVueApp)\\r\\n\\r\\n    let processedConsumerRoot = {\\r\\n      ...componentManager.processedConsumerRoot,\\r\\n      __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n    }\\r\\n\\r\\n    let consumerAppHandleFn = addConsumerRootDef(this.#ns, processedConsumerRoot)\\r\\n\\r\\n    this.#mounted = true\\r\\n\\r\\n    if (this.#appConfig.showTips) {\\r\\n      this.#ns.tprint(\\r\\n        `\\\\n\\\\n📦 Your bb-vue app (#${\\r\\n          this.#appConfig.appId\\r\\n        }) is now mounted!\\\\n\\\\n🧰 Use the Debug -> Activate menu to open the BitBurner Developer Tools.\\\\n👓 In the Elements tab, you should find your app at the top of the <body> tag.\\\\n\\\\n🎉 Have fun!\\\\n\\\\nP.S. If you're sick of seeing this message, add \\\\`showTips: false\\\\` to your app's configuration object.\\\\n\\\\n`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    // console.timeEnd('AppFactory:start')\\r\\n\\r\\n    return consumerAppHandleFn\\r\\n  }\\r\\n\\r\\n  #configure(instanceConfig = {}) {\\r\\n    if (isBlank(instanceConfig.id)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique ID! ` +\\r\\n          `Try using \\\\`crypto.randomUUID()\\\\` if you can't think of one.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    let defaultConfig = {\\r\\n      appId: toStr(instanceConfig.id),\\r\\n      showTips: true,\\r\\n      forceReload: false,\\r\\n      shutdownWithPid: null,\\r\\n      shutdownRootWithPid: null,\\r\\n      scssResources: '',\\r\\n    }\\r\\n\\r\\n    delete instanceConfig.id\\r\\n    this.#appConfig = Object.assign(defaultConfig, instanceConfig)\\r\\n\\r\\n    if (!isBlank(this.#appConfig.scssResources)) {\\r\\n      if (!lodash.isString(this.#appConfig.scssResources)) {\\r\\n        throw new TypeError('SCSS resources added to AppFactory must be of type String')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #addComponents(components) {\\r\\n    if (!lodash.isArray(components)) {\\r\\n      throw new Error('Please provide one or more components to add as an array')\\r\\n    }\\r\\n\\r\\n    for (let cmpDef of components) {\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#componentsInQueue.add(cmpDef)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #setRootComponent(componentDefinition = {}) {\\r\\n    let cmpDef = { ...ComponentManager.Validate(componentDefinition) }\\r\\n    cmpDef.__consumerRoot = true\\r\\n    cmpDef.__appId = this.#appConfig.appId\\r\\n    cmpDef.__uuid = `${cmpDef.name}-${crypto.randomUUID()}`\\r\\n    cmpDef.__config = this.#appConfig\\r\\n    this.#rootComponent = cmpDef\\r\\n    this.#componentsInQueue.add(cmpDef)\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async #runLoaders() {\\r\\n    const [Vue, Mitt, Sass] = await Promise.all([\\r\\n      VueLoader.Fetch(),\\r\\n      MittLoader.Fetch(),\\r\\n      SassLoader.Fetch(),\\r\\n    ])\\r\\n    return { Vue, Mitt, Sass }\\r\\n  }\\r\\n\\r\\n  #validateStart() {\\r\\n    if (this.#componentsInQueue.size < 1) {\\r\\n      throw new Error('You must add at least one component to an AppFactory')\\r\\n    }\\r\\n\\r\\n    if (isBlank(this.#rootComponent)) {\\r\\n      throw new Error('You must add one root component to an AppFactory')\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #validateOneMount() {\\r\\n    if (this.#mounted === true) {\\r\\n      throw new Error('You can only mount an AppFactory instance once')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Registers a consumer app definition, to be mounted by the parent `bbVue.rootApp` instance as a CRM\\r\\n * @param {consumerAppDef} appDef The definition of a consumer app\\r\\n * @returns {function} Lookup function to retrieve consumer app instance\\r\\n */\\r\\nfunction addConsumerRootDef(ns, appDef) {\\r\\n  try {\\r\\n    // Lookup rootApp ctx\\r\\n    let rootApp = RootApp.component()\\r\\n\\r\\n    // Hook in orphan protection if requested\\r\\n    // BUGGED: ns race conditions due to repeated ns.getRunningScript() calls\\r\\n    /* if (appDef.__config.shutdownWithPid || appDef.__config.shutdownRootWithPid) {\\r\\n      // Watch pid on interval\\r\\n      const pidWatchRate = 500\\r\\n      const pidWatch = setInterval(async () => {\\r\\n        // Attempt to find running PID\\r\\n        let pid = ns?.getRunningScript()?.pid\\r\\n\\r\\n        // Eject if pid is healthy\\r\\n        if (pid > 0) return\\r\\n\\r\\n        // Try to shutdown either AppRoot or consumer root as needed\\r\\n        try {\\r\\n          if (appDef.__config.shutdownRootWithPid) {\\r\\n            await rootApp.rootShutdown()\\r\\n          } else {\\r\\n            await rootApp.unmountConsumerRootByUuid(appDef.__uuid)\\r\\n          }\\r\\n        } catch (error) {\\r\\n          ns.tprint(\\r\\n            `ERROR: bb-vue app \\\"${appDef.name}\\\" is orphaned but ending process failed:\\\\n${toJson(\\r\\n              error\\r\\n            )}`\\r\\n          )\\r\\n        } finally {\\r\\n          // Whatever the result of the cleanup, end the interval\\r\\n          clearInterval(pidWatch)\\r\\n        }\\r\\n      }, pidWatchRate)\\r\\n    } */\\r\\n\\r\\n    // Add appDef to rootApp and return app handle to consumer\\r\\n    return rootApp.addConsumerRootDef(appDef)\\r\\n  } catch (error) {\\r\\n    throw new Error(\\r\\n      `rootApp cannot be located, or issue mounting consumer appDef:\\\\n${toJson(error)}`\\r\\n    )\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/4-complex-and-fun.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Keys, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class VueLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Vue module.\\r\\n   * @returns {Promise<Vue>} Vue constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = Vue({ silent: true })\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import(\\r\\n      /* 'https://unpkg.com/vue@3.2.26/dist/vue.esm-browser.prod.js' */\\r\\n      'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.esm-browser.js'\\r\\n    )\\r\\n\\r\\n    win[Keys.vueModuleKey] = module\\r\\n\\r\\n    return module\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { css } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  scssResources: css`\\r\\n    @mixin typo-basic {\\r\\n      & {\\r\\n        font-family: 'FreeMono', monospace;\\r\\n        font-size: 14px;\\r\\n        font-weight: bold;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    @mixin bbv-scrollbar($size: 4px, $width: $size, $height: $size) {\\r\\n      &::-webkit-scrollbar {\\r\\n        display: initial;\\r\\n\\r\\n        @if $width {\\r\\n          width: $width;\\r\\n        } @else {\\r\\n          width: $size;\\r\\n        }\\r\\n\\r\\n        @if $height {\\r\\n          height: $height;\\r\\n        } @else {\\r\\n          height: $size;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-thumb {\\r\\n        background-color: var(--bbvScrollbarFgColor);\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-track {\\r\\n        background-color: var(--bbvScrollbarBgColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    body {\\r\\n      --bbvScrollbarFgColor: #12b3e3;\\r\\n      --bbvScrollbarBgColor: #0b1420;\\r\\n      --bbvBorderColor: #0f4878;\\r\\n      --bbvBoxShadowColor1: #0000007a;\\r\\n      --bbvBoxShadowColor2: #040f18;\\r\\n      --bbvAppInnerFgColor: #89d3e4;\\r\\n      --bbvAppInnerBgColor: #274b64;\\r\\n      --bbvFontLightColor: #89d3e4;\\r\\n      --bbvFontLightAltColor: #89d3e4;\\r\\n      --bbvButtonFgColor: #12b3e3;\\r\\n      --bbvButtonBgColor: #0b1420;\\r\\n      --bbvButtonHoverFgColor: #00fff3;\\r\\n      --bbvButtonHoverBgColor: #162a47;\\r\\n      --bbvWinTitlebarFgColor: #89d3e4;\\r\\n      --bbvWinTitlebarBgColor: #0f4878;\\r\\n      --bbvWinActionsFgColor: #83d5d9;\\r\\n      --bbvWinActionsBgColor: #0f4878;\\r\\n      --bbvHackerDarkFgColor: #c5c255;\\r\\n      --bbvHackerDarkBgColor: #171c23;\\r\\n      --bbvHackerDarkAltBgColor: #333146;\\r\\n      --bbvAppTrayFgColor: #89d3e4;\\r\\n      --bbvAppTrayBorderColor: #4bb4c5;\\r\\n      --bbvAppTrayBgColor: #274b64;\\r\\n      --bbvInputBorderColor: #357073;\\r\\n      --bbvInputBorderFadeColor: #{fade-out(#357073, 0.5)};\\r\\n      --bbvInputBgColor: #{fade-out(#274b64, 0.5)};\\r\\n      --bbvActiveColor: #954ea7;\\r\\n      --bbvSuccessColor: #4fb168;\\r\\n      --bbvErrorColor: #984e4e;\\r\\n      --bbvErrorDarkColor: #0b1420;\\r\\n    }\\r\\n\\r\\n    [bbv-root] {\\r\\n      @include typo-basic;\\r\\n\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n      top: 0;\\r\\n      right: 0;\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n      pointer-events: none;\\r\\n    }\\r\\n\\r\\n    [bbv-foreground] {\\r\\n      z-index: 1500;\\r\\n\\r\\n      & > * {\\r\\n        pointer-events: auto;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      * {\\r\\n        box-sizing: border-box;\\r\\n      }\\r\\n\\r\\n      code,\\r\\n      button,\\r\\n      input,\\r\\n      th,\\r\\n      td,\\r\\n      tr {\\r\\n        @include typo-basic;\\r\\n      }\\r\\n\\r\\n      @keyframes bbvFlashBusy {\\r\\n        from {\\r\\n          filter: hue-rotate(0deg);\\r\\n        }\\r\\n        to {\\r\\n          filter: hue-rotate(360deg);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-active,\\r\\n      &.rootAppIntro-leave-active,\\r\\n      &.consumerRootIntro-enter-active,\\r\\n      &.consumerRootIntro-leave-active {\\r\\n        transition: opacity 0.4s ease;\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-from,\\r\\n      &.rootAppIntro-leave-to,\\r\\n      &.consumerRootIntro-enter-from,\\r\\n      &.consumerRootIntro-leave-to {\\r\\n        opacity: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app' },\\r\\n      rootComponent: ChartContainer,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainer = 'svgChartContainer'\\r\\n\\r\\nconst ChartContainer = {\\r\\n  name: 'svg-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"SVG Chart\\\" no-pad start-height=\\\"80%\\\" start-width=\\\"80%\\\">\\r\\n      <div v-once id=\\\"${SVGChartContainer}\\\" />\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  computed: {},\\r\\n\\r\\n  watch: {},\\r\\n\\r\\n  mounted() {},\\r\\n\\r\\n  methods: {},\\r\\n\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-ui.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Mitt, Vue, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-consumer-root',\\r\\n  emits: ['consumer-root-mounted', 'consumer-root-unmount-requested', 'root-shutdown-requested'],\\r\\n  props: {\\r\\n    consumerRootDef: {\\r\\n      type: Object,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n\\r\\n    return {\\r\\n      private: {\\r\\n        bus,\\r\\n        consumerRootMount: null,\\r\\n      },\\r\\n      appStore: {},\\r\\n      appListen: bus.on,\\r\\n      appSend: this.appSendWrapper,\\r\\n      appShutdown: this.appShutdownWrapper,\\r\\n      rootShutdown: this.rootShutdownWrapper,\\r\\n    }\\r\\n  },\\r\\n  provide() {\\r\\n    const { reactivePick } = VueUse()\\r\\n    return reactivePick(\\r\\n      this.$data,\\r\\n      'appStore',\\r\\n      'appListen',\\r\\n      'appSend',\\r\\n      'appShutdown',\\r\\n      'rootShutdown'\\r\\n    )\\r\\n  },\\r\\n  methods: {\\r\\n    appSendWrapper(event, data) {\\r\\n      switch (event) {\\r\\n        default:\\r\\n          this.private.bus.emit(event, data)\\r\\n          break\\r\\n      }\\r\\n    },\\r\\n    appShutdownWrapper() {\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        throw new Error('Tried to shutdown a null app root', this.private.consumerRootMount)\\r\\n      } else {\\r\\n        this.$emit(\\r\\n          'consumer-root-unmount-requested',\\r\\n          this.private.consumerRootMount.$options.__uuid\\r\\n        )\\r\\n      }\\r\\n    },\\r\\n    rootShutdownWrapper() {\\r\\n      this.$emit('root-shutdown-requested')\\r\\n    },\\r\\n    consumerRootMounted(vnode) {\\r\\n      this.private.consumerRootMount = vnode?.component?.ctx\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        console.debug(`bb-vue: App root is null for ${this.consumerRootDef.__uuid}`)\\r\\n      }\\r\\n      this.$emit('consumer-root-mounted', this.private.consumerRootMount)\\r\\n    },\\r\\n  },\\r\\n  render() {\\r\\n    const { h } = Vue()\\r\\n    return h(\\r\\n      'section',\\r\\n      { 'bbv-foreground': true },\\r\\n      h(this.consumerRootDef, {\\r\\n        onVnodeMounted: this.consumerRootMounted,\\r\\n      })\\r\\n    )\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const WinStates = Object.freeze({\\r\\n  open: 'open',\\r\\n  closed: 'closed',\\r\\n})\\r\\n\\r\\nexport const WinPositionStrategies = Object.freeze({\\r\\n  cascadeStack: 'cascadeStack',\\r\\n})\\r\\n\\r\\nexport const AppStates = Object.freeze({\\r\\n  hasWins: 'hasWins',\\r\\n  withoutWins: 'withoutWins',\\r\\n})\\r\\n\\r\\nexport const TrayItemTypes = Object.freeze({\\r\\n  winMount: 'winMount',\\r\\n  consumerRootMount: 'consumerRootMount',\\r\\n})\\r\\n\\r\\nexport const ComponentTiers = Object.freeze({\\r\\n  library: 'library',\\r\\n  consumer: 'consumer',\\r\\n})\",\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/5-demo-app.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-css-manager',\\r\\n  props: {\\r\\n    consumerRootDefs: {\\r\\n      type: Array,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n  computed: {\\r\\n    rootOptions() {\\r\\n      return this.$root.$options\\r\\n    },\\r\\n    styles() {\\r\\n      let styles = { root: '' }\\r\\n      styles.root = this.rootOptions.__finalStyles\\r\\n      this.consumerRootDefs.forEach((appDefinition) => {\\r\\n        styles[appDefinition.__uuid] = appDefinition.__finalStyles\\r\\n      })\\r\\n      return styles\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <transition-group :duration=\\\"{ enter: 0, leave: 1000 }\\\">\\r\\n      <component\\r\\n        is=\\\"style\\\"\\r\\n        v-for=\\\"(sheet, appName) in styles\\\"\\r\\n        :key=\\\"appName\\\"\\r\\n        :id=\\\"'styles-for-' + appName\\\"\\r\\n        type=\\\"text/css\\\"\\r\\n      >\\r\\n        {{ sheet.join('') }}\\r\\n      </component>\\r\\n    </transition-group>\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @see: Learn more about Vue here: https://v3.vuejs.org/\\r\\n * @see: Learn more about Sass here: https://sass-lang.com/\\r\\n * @see: Learn more about bb-vue here: https://github.com/smolgumball/bb-vue\\r\\n */\\r\\n\\r\\n// Start with a single import from the bb-vue library\\r\\nimport AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n/**\\r\\n * These functions are used to enable nicer syntax highlighting of HTML/CSS in VSCode.\\r\\n * Specifically the `prettier - code formatter`, `es6-string-css` and `es6-string-html`\\r\\n * extensions can be used.You can safely remove these imports, as long as you remove references to them below.\\r\\n **/\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// Note the standard BitBurner function signature here.\\r\\n// Always start your bb-vue apps from standard BitBurner scripts since you will\\r\\n// need to pass a valid NS instance to the AppFactory constructor!\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  // Wrap your AppFactory usage with try/catch for better error messages\\r\\n  try {\\r\\n    const myAppFactory = new AppFactory(ns)\\r\\n    const myAppHandleFn = await myAppFactory.mount({\\r\\n      // An app ID is always required\\r\\n      config: { id: 'my-first-app' },\\r\\n\\r\\n      // Additional components are optional.\\r\\n      // Here, we're adding just one extra\\r\\n      components: [MyJsonComponent],\\r\\n\\r\\n      // A root component is always required\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n\\r\\n    // You can retrieve a reference to your root component\\r\\n    // by running the function returned from mount()\\r\\n    console.debug(myAppHandleFn())\\r\\n  } catch (error) {\\r\\n    // In case something goes wrong, log it out and halt the program\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  // Every component needs a unique name\\r\\n  name: 'my-first-root-component',\\r\\n\\r\\n  // Here, we \\\"inject\\\" a helper function provided by the bb-vue library.\\r\\n  // Running this function shuts down your entire app. It is wired to a button\\r\\n  // click at the bottom of the bbv-win component, in the #actions slot!\\r\\n  inject: ['appShutdown'],\\r\\n\\r\\n  // Your template is where a lot of the magic happens. Render DOM elements here,\\r\\n  // and use various Vue-specific techniques like `v-for`, @event binding, etc.\\r\\n  // Learn more about Vue here: https://v3.vuejs.org/\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"Hello from bb-vue!\\\">\\r\\n      <p>Render your own components:</p>\\r\\n      <my-json-display :display=\\\"myData\\\" />\\r\\n\\r\\n      <p>Or use the built-in components:</p>\\r\\n      <bbv-json-display :data=\\\"jsonData\\\" />\\r\\n\\r\\n      <p>\\r\\n        Update your app's data store: <strong>{{ myData.ezCounter }}</strong><br />\\r\\n        <bbv-button @click=\\\"myData.ezCounter++\\\">Add 1</bbv-button>\\r\\n      </p>\\r\\n\\r\\n      <template #actions>\\r\\n        Or shut everything down:\\r\\n        <bbv-button @click=\\\"appShutdown\\\">Shutdown App</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  // The data function tells Vue what kind of reactive data you'd like to use.\\r\\n  // Changing these values from inside or outside the component will cause the\\r\\n  // component to update automatically! Learn more about Vue here: https://v3.vuejs.org/\\r\\n  data() {\\r\\n    return {\\r\\n      myData: { 'bb-vue-is': 'easy to use!', ezCounter: 0 },\\r\\n      jsonData: {\\r\\n        'bb-vue-components': 'NICE.exe',\\r\\n        otherFeatures: ['SCSS support', 'App tray', 'NetScript communication', '...and more!'],\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n\\r\\n  // The scss key is where you define the styles for your component.\\r\\n  scss: css`\\r\\n    /*\\r\\n      You can reference your component name with __CMP_NAME__and it\\r\\n      will be replaced at startup. This happens in both templates and style blocks!\\r\\n    */\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n\\r\\n        /*\\r\\n          Have you noticed we're writing SCSS? bb-vue supports Sass 0.11.1\\r\\n          through the sass.js tool; a bit outdated now, but good enough for some\\r\\n          dank BitBurner components. Learn more about sass.js here:\\r\\n          https://github.com/medialize/sass.js/#sassjs\\r\\n        */\\r\\n        strong {\\r\\n          font-size: 13px;\\r\\n          padding: 3px 6px 1px 6px;\\r\\n          display: inline-block;\\r\\n          border-radius: 5px;\\r\\n\\r\\n          /*\\r\\n            You can use the provided CSS theming variables to color your elements.\\r\\n            Find all of them on the <body> tag of your BitBurner debug / devtools console.\\r\\n          */\\r\\n          color: var(--bbvHackerDarkFgColor);\\r\\n          background-color: var(--bbvHackerDarkBgColor);\\r\\n        }\\r\\n\\r\\n        button {\\r\\n          margin-top: 10px;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\n// Here's a simple supporting component that displays data passed to it.\\r\\n// It converts the data to a JSON string and then display it in the whitespace\\r\\n// sensitive HTML tag <pre>\\r\\nconst MyJsonComponent = {\\r\\n  name: 'my-json-display',\\r\\n  props: {\\r\\n    display: {\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <pre><code>{{ toJson(display) }}</code></pre>\\r\\n    </div>\\r\\n  `,\\r\\n  methods: {\\r\\n    toJson(value) {\\r\\n      return JSON.stringify(value, null, '  ')\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      background-color: #0000008c;\\r\\n      color: lawngreen;\\r\\n      padding: 10px 5px;\\r\\n\\r\\n      pre,\\r\\n      code {\\r\\n        margin: 0;\\r\\n        font-family: inherit;\\r\\n        overflow: auto;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/0-getting-started.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/4-sending-data-from-scripts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let rhiUIint = `const rhiUI = {\\n  createElement: function (type) {\\n    return document.createElement(type);\\n  },\\n  floatWindow: function(id, head, width, height, padding, bWeight, bRadius, content) {\\n    let div = document.createElement(\\\"div\\\");\\n    let iDiv = document.createElement(\\\"div\\\");\\n    div.style.position = \\\"absolute\\\";\\n    div.style.padding = \\\"0px\\\";\\n    div.style.top = \\\"0px\\\";\\n    div.style.left = \\\"0px\\\";\\n    div.style.width = width + \\\"px\\\";\\n    div.style.height = height + \\\"px\\\";\\n    div.style.backgroundColor = \\\"rgba(20, 20, 20, 1)\\\";\\n    div.style.color = \\\"white\\\";\\n    div.style.zIndex = \\\"9999\\\";\\n    div.style.border = bWeight + \\\"px solid rgb(68, 68, 68)\\\";\\n    div.style.borderRadius = bRadius + \\\"px\\\";\\n    div.id = id;\\n    div.classList.add(\\\"rhiUI\\\");\\n    iDiv.style.padding = padding + \\\"px\\\";\\n    iDiv.id = id + \\\"in\\\";\\n    let header = document.createElement(\\\"div\\\");\\n    header.style.backgroundColor = \\\"rgba(40, 40, 40, 1)\\\";\\n    header.innerHTML = '<h3 id=\\\"' + id + 'head\\\" style=\\\"margin: 0px; pointer-events: none;\\\"> ' + head + ' </h3>';\\n    header.style.color = \\\"white\\\";\\n    header.id = id + \\\"header\\\";\\n    header.style.cursor = \\\"move\\\";\\n    header.style.padding = padding + \\\"px\\\";\\n    header.style.borderRadius = bRadius + \\\"px \\\" + bRadius + \\\"px 0px 0px\\\";\\n    header.style.borderBottom = bWeight + \\\"px solid rgb(68, 68, 68)\\\";\\n    //create minimize button\\n    let min = document.createElement(\\\"a\\\");\\n    min.id = id + \\\"min\\\";\\n    min.innerHTML = \\\"🗕\\\";\\n    min.style.color = \\\"white\\\";\\n    min.style.textDecoration = \\\"none\\\";\\n    min.style.float = \\\"right\\\";\\n    min.style.display = \\\"inline-block\\\";\\n    min.onclick = function() {document.getElementById(id + \\\"in\\\").style.display = \\\"none\\\"; document.getElementById(id + \\\"min\\\").innerHTML = \\\"gay\\\";};\\n    div.appendChild(header);\\n    iDiv.innerHTML = content;\\n    div.appendChild(iDiv);\\n    document.body.appendChild(div);\\n    //we have to do this after we add the element to the doc, otherwise we get issues\\n    let heado = document.getElementById(id + \\\"head\\\");\\n    heado.appendChild(min);\\n    this.dragElement(div);\\n    return div;\\n  },\\n  createGlobalScript: function (id, script) {\\n    let s = document.createElement(\\\"script\\\");\\n    s.id = id;\\n    s.innerHTML = script;\\n    document.head.appendChild(s);\\n  },\\n  dragElement: function(elmnt) {\\n    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\\n    if (document.getElementById(elmnt.id + \\\"header\\\")) {\\n      document.getElementById(elmnt.id + \\\"header\\\").onmousedown = dragMouseDown;\\n    } else {\\n      elmnt.onmousedown = dragMouseDown;\\n    }\\n    function dragMouseDown(e) {\\n      e = e || window.event;\\n      e.preventDefault();\\n      pos3 = e.clientX;\\n      pos4 = e.clientY;\\n      document.onmouseup = closeDragElement;\\n      document.onmousemove = elementDrag;\\n    }\\n    function elementDrag(e) {\\n      e = e || window.event;\\n      e.preventDefault();\\n      pos1 = pos3 - e.clientX;\\n      pos2 = pos4 - e.clientY;\\n      pos3 = e.clientX;\\n      pos4 = e.clientY;\\n      elmnt.style.top = (elmnt.offsetTop - pos2) + \\\"px\\\";\\n      elmnt.style.left = (elmnt.offsetLeft - pos1) + \\\"px\\\";\\n    }\\n    function closeDragElement() {\\n      document.onmouseup = null;\\n      document.onmousemove = null;\\n    }\\n  }\\n}`;\\nexport function initRhiUI() {\\n    let doc = eval(\\\"document\\\");\\n    if (doc.getElementById(\\\"rhiUI\\\") == null) {\\n        let scr = doc.createElement(\\\"script\\\");\\n        scr.innerHTML = rhiUIint;\\n        scr.id = \\\"rhiUI\\\";\\n        doc.head.appendChild(scr);\\n    }\\n    else {\\n        console.log(\\\"rhiUI already initialized, reloading..\\\");\\n        doc.getElementById(\\\"rhiUI\\\").innerHTML = rhiUIint;\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdWkvdWkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxRQUFRLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBc0ZiLENBQUE7QUFFRixNQUFNLFVBQVUsU0FBUztJQUN2QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRTtRQUN2QyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzNCO1NBQU07UUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDdEQsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0tBQ2xEO0FBQ0gsQ0FBQyJ9\",\"filename\":\"/ui/ui.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint-disable no-undef */\\nimport { initRhiUI } from \\\"/ui/ui.js\\\";\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n    initRhiUI();\\n    let content = `\\n  <h1>Test, hello world!</h1>\\n  <button onclick=\\\"alert('i work')\\\">Click me!</button>`;\\n    rhiUI.floatWindow('test', 'header', 300, 300, 5, 3, 10, content);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZUZsb2F0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VpL2V4YW1wbGVGbG9hdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkI7QUFDN0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV0QyxpQ0FBaUM7QUFDakMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUMzQixTQUFTLEVBQUUsQ0FBQztJQUNaLElBQUksT0FBTyxHQUFHOzt1REFFdUMsQ0FBQztJQUN0RCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuRSxDQUFDIn0=\",\"filename\":\"/ui/exampleFloat.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/ui/ui.js\",\"url\":\"blob:file:///bfe6ee29-0149-4641-9889-18fb3f8a1fd2\",\"moduleSequenceNumber\":17931},{\"filename\":\"/ui/exampleFloat.js\",\"url\":\"blob:file:///5c933664-4577-4cbc-bb8a-cc8cf1d4bd19\",\"moduleSequenceNumber\":17932}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    ns.tprint(ns.getSharePower())\\n}\",\"filename\":\"checkshare.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"checkshare.js\",\"url\":\"blob:file:///44ad4ef0-ad46-4f0f-88b1-1e4959bc68cc\",\"moduleSequenceNumber\":86808}],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getSharePower\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**  */\\r\\nexport async function main(ns) {\\r\\n    let corp = eval(\\\"ns.corporation\\\");\\r\\n    ns.tprint(corp.getCorporation());\\r\\n}\\r\\n\",\"filename\":\"test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///0ffe0b6c-26a9-4124-bf1e-8022215a5b5f\",\"moduleSequenceNumber\":16725}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let example = {\\n\\t\\\"hp\\\": {\\\"current\\\":10,\\\"max\\\":10},\\n\\t\\\"skills\\\": {\\\"hacking\\\":1,\\\"strength\\\":1,\\\"defense\\\":1,\\\"dexterity\\\":1,\\\"agility\\\":1,\\\"charisma\\\":1,\\\"intelligence\\\":0},\\n\\t\\\"exp\\\": {\\\"hacking\\\":0,\\\"strength\\\":0,\\\"defense\\\":0,\\\"dexterity\\\":0,\\\"agility\\\":0,\\\"charisma\\\":0,\\\"intelligence\\\":0},\\n\\t\\\"mults\\\": {\\n\\t\\t\\\"hacking_chance\\\":1.248706083443425,\\n\\t\\t\\\"hacking_speed\\\":1.248706083443425,\\n\\t\\t\\\"hacking_money\\\":1.248706083443425,\\n\\t\\t\\\"hacking_grow\\\":1.248706083443425,\\n\\t\\t\\\"hacking\\\":1.248706083443425,\\n\\t\\t\\\"hacking_exp\\\":1.248706083443425,\\n\\t\\t\\\"strength\\\":1.248706083443425,\\n\\t\\t\\\"strength_exp\\\":1.248706083443425,\\n\\t\\t\\\"defense\\\":1.248706083443425,\\n\\t\\t\\\"defense_exp\\\":1.248706083443425,\\n\\t\\t\\\"dexterity\\\":1.248706083443425,\\n\\t\\t\\\"dexterity_exp\\\":1.248706083443425,\\n\\t\\t\\\"agility\\\":1.248706083443425,\\n\\t\\t\\\"agility_exp\\\":1.248706083443425,\\n\\t\\t\\\"charisma\\\":1.548395543469847,\\n\\t\\t\\\"charisma_exp\\\":1.248706083443425,\\n\\t\\t\\\"hacknet_node_money\\\":1.248706083443425,\\n\\t\\t\\\"hacknet_node_purchase_cost\\\":0.7546959334265841,\\n\\t\\t\\\"hacknet_node_ram_cost\\\":0.7546959334265841,\\n\\t\\t\\\"hacknet_node_core_cost\\\":0.7546959334265841,\\n\\t\\t\\\"hacknet_node_level_cost\\\":0.7546959334265841,\\n\\t\\t\\\"company_rep\\\":1.248706083443425,\\n\\t\\t\\\"faction_rep\\\":1.248706083443425,\\n\\t\\t\\\"work_money\\\":1.248706083443425,\\n\\t\\t\\\"crime_success\\\":1.548395543469847,\\n\\t\\t\\\"crime_money\\\":1.548395543469847,\\n\\t\\t\\\"bladeburner_max_stamina\\\":1,\\n\\t\\t\\\"bladeburner_stamina_gain\\\":1,\\n\\t\\t\\\"bladeburner_analysis\\\":1,\\n\\t\\t\\\"bladeburner_success_chance\\\":1\\n\\t},\\n\\t\\\"numPeopleKilled\\\":0,\\n\\t\\\"money\\\":1030,\\n\\t\\\"city\\\":\\\"Sector-12\\\",\\n\\t\\\"location\\\":\\\"Travel Agency\\\",\\n\\t\\\"bitNodeN\\\":3,\\n\\t\\\"totalPlaytime\\\":4393143400,\\n\\t\\\"playtimeSinceLastAug\\\":1975600,\\n\\t\\\"playtimeSinceLastBitnode\\\":1975600,\\n\\t\\\"jobs\\\":{},\\n\\t\\\"factions\\\":[],\\n\\t\\\"tor\\\":false,\\n\\t\\\"inBladeburner\\\":false,\\n\\t\\\"hasCorporation\\\":true,\\n\\t\\\"entropy\\\":0\\n}\\n\\n/* eslint-disable no-constant-condition */\\n/** @param {NS} ns **/\\n/** @param {import(\\\".\\\").NS} ns */\\nexport async function main(ns) {\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = [];\\n\\t\\t\\tconst values = [];\\n\\t\\t\\theaders.push('---------------');\\n\\t\\t\\tvalues.push('-----------------CRIMES-----------------'); // ------------MONEY and PROFIT------------\\n\\t\\t\\theaders.push(\\\"Total Karma: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.heart.break(), '0,0'));\\n\\t\\t\\theaders.push(\\\"People Killed: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['numPeopleKilled'], '0,0'));\\n\\t\\t\\theaders.push('---------------');\\n\\t\\t\\tvalues.push('------------MONEY and PROFIT------------'); // ------------MONEY and PROFIT------------\\n\\t\\t\\theaders.push(\\\"Money: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['money'], '$0,0'));\\n\\t\\t\\tif (ns.gang.inGang()) {\\n\\t\\t\\t\\tif (ns.gang.getGangInformation()['moneyGainRate'] > 0) {\\n\\t\\t\\t\\t\\theaders.push(\\\"Gang Income: \\\");\\n\\t\\t\\t\\t\\tvalues.push('   ' + ns.nFormat((5 * ns.gang.getGangInformation()['moneyGainRate']), '$0,0') + ' /s');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\theaders.push('Hack Income: ');\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getTotalScriptIncome()[0], '$0,0') + ' /s');\\n\\t\\t\\tif (ns.hacknet.numHashes() > 0) {\\n\\t\\t\\t\\theaders.push('Hashes: ');\\n\\t\\t\\t\\tvalues.push(' ' + ns.hacknet.numHashes().toPrecision(3) + ' / ' + ns.hacknet.hashCapacity().toPrecision(3));\\n\\t\\t\\t}\\n\\t\\t\\theaders.push('---------------');\\n\\t\\t\\tvalues.push('------------SKILL EXPERIENCE------------'); // ------------SKILL EXPERIENCE------------\\n\\t\\t\\theaders.push(\\\"Hacking EXP: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['exp']['hacking'], '0,0'));\\n\\t\\t\\theaders.push(\\\"Strength EXP: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['exp']['strength'], '0,0'));\\n\\t\\t\\theaders.push(\\\"Defense EXP: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['exp']['defense'], '0,0'));\\n\\t\\t\\theaders.push(\\\"Dexterity EXP: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['exp']['dexterity'], '0,0'));\\n\\t\\t\\theaders.push(\\\"Agility EXP: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['exp']['agility'], '0,0'));\\n\\t\\t\\theaders.push(\\\"Charisma EXP: \\\");\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['exp']['charisma'], '0,0'));\\n\\t\\t\\theaders.push('Intelligence: ')\\n\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.getPlayer()['exp']['intelligence'], '0,0'));\\n\\t\\t\\tif (ns.gang.inGang()) {\\n\\t\\t\\t\\theaders.push('---------------');\\n\\t\\t\\t\\tvalues.push('------------------GANG------------------');\\n\\t\\t\\t\\theaders.push(\\\"Faction: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.gang.getGangInformation()['faction']);\\n\\t\\t\\t\\tlet gangType = (ns.gang.getGangInformation()['isHacking']) ? \\\"Hacking\\\" : \\\"Combat\\\";\\n\\t\\t\\t\\theaders.push(\\\"Type: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + gangType);\\n\\t\\t\\t\\theaders.push(\\\"Power: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.gang.getGangInformation()['power'], '0,0'));\\n\\t\\t\\t\\theaders.push(\\\"Respect: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.gang.getGangInformation()['respect'], '0,0'));\\n\\t\\t\\t\\theaders.push(\\\"Wanted Level: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.gang.getGangInformation()['wantedLevel'], '0,0'));\\n\\t\\t\\t\\tif (ns.gang.getGangInformation()['territoryWarfareEngaged']) {\\n\\t\\t\\t\\t\\theaders.push(\\\"Clash Chance: \\\");\\n\\t\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(ns.gang.getGangInformation()['territoryClashChance'], '0.0%'));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.getPlayer()['hasCorporation']) {\\n\\t\\t\\t\\tlet corp = eval(\\\"ns.corporation.getCorporation()\\\");\\n\\t\\t\\t\\theaders.push('---------------');\\n\\t\\t\\t\\tvalues.push('------------------CORP------------------');\\n\\t\\t\\t\\theaders.push(\\\"Name: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + corp['name']);\\n\\t\\t\\t\\theaders.push(\\\"Funds: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(corp['funds'], '$0,0'));\\n\\t\\t\\t\\theaders.push(\\\"Revenue: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(corp['revenue'], '$0,0') + '/s');\\n\\t\\t\\t\\theaders.push(\\\"Expenses: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(corp['expenses'], '$0,0') + '/s');\\n\\t\\t\\t\\theaders.push(\\\"Profit: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(corp['revenue'] - corp['expenses'], '$0,0') + '/s');\\n\\t\\t\\t\\theaders.push(\\\"Shares: \\\");\\n\\t\\t\\t\\tvalues.push('   ' + ns.nFormat(corp['numShares'], '0,0') + ' / ' + ns.nFormat(corp['totalShares'], '0,0'));\\n\\t\\t\\t}\\n\\t\\t\\theaders.push('---------------');\\n\\t\\t\\tvalues.push('---------------STATISTICS---------------'); // ---------------STATISTICS---------------\\n\\t\\t\\theaders.push('Home Ram Use: ');\\n\\t\\t\\tvalues.push(ns.nFormat(ns.getServerUsedRam('home'), '0,0') + ' / ' + ns.nFormat(ns.getServerMaxRam('home'), '0,0'));\\n\\t\\t\\theaders.push('Bit Node: ');\\n\\t\\t\\tvalues.push(ns.getPlayer()['bitNodeN']);\\n\\t\\t\\theaders.push('Time in Node: ');\\n\\t\\t\\tvalues.push(ns.tFormat(ns.getPlayer()['playtimeSinceLastBitnode']));\\n\\t\\t\\theaders.push('Total Playtime: ');\\n\\t\\t\\tvalues.push(ns.tFormat(ns.getPlayer()['totalPlaytime']));\\n\\t\\t\\theaders.push(ns.getPlayer()['city']);\\n\\t\\t\\tvalues.push(ns.getPlayer()['location']);\\n\\t\\t\\thook0.innerText = headers.join(\\\" \\\\n\\\");\\n\\t\\t\\thook1.innerText = values.join(\\\"\\\\n\\\");\\n\\t\\t}\\n\\t\\tcatch (err) {\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/src/hud.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.3,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getTotalScriptIncome\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"4\\\",\\n        \\\"ls\\\": \\\"7\\\",\\n        \\\"rm\\\": \\\"6\\\",\\n        \\\"bb-vue\\\": \\\"8\\\"\\n    },\\n    \\\"options\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"theme-browser\\\",\\n    \\\"author\\\": \\\"Phil Armstead & Jack (SurDaft) Stupple\\\",\\n    \\\"descriptiveName\\\": \\\"Theme Browser for BitBurner\\\",\\n    \\\"shortDescription\\\": \\\"Browse user submitted themes\\\",\\n    \\\"longDescription\\\": \\\"Browse user submitted themes within BitBurner; preview themes, see screenshots and user provided ratings\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\",\\n        \\\"ui\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/manual.txt\",\"text\":\"===\\n= BB Theme Browser\\n===\\n\\nBrowser themes submitted by other users, vote for your\\nfavourite and submit your own.\\n\\n===\\n\\nRegistration\\n\\nWe use an email / password auth system so that we know who\\nis submitting the theme. We don't actually use the email,\\nwe just use it for identification purposes.\\n\\nEach login will create a PAT token stored in your local\\nstorage. You can copy/paste it to avoid logging in, if you\\nwant. You can also integrate using the same method, for your\\nown app. Go ahead! https://bitburner.daft.host\\n\\n===\\n\\nBB Theme Browser Developers\\n\\nPhil and Jack have worked together on many projects over\\nthe years, this is the first non-work related project to\\nhave worked together on.\\n\\nPhil specializes in frontend development; VueJS, SCSS, \\nthe maths aspect of things.\\n\\nJack specializes in backend development and infrastructure,\\nmaking the API that the frontend works with.\\n\\nPhil:\\n    url: https://github.com/philiparmstead\\n    discord: Phil\\n\\nJack:\\n    url: https://github.com/surdaft\\n    discord: SurDaft\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/ls/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"ls\\\",\\n    \\\"author\\\": \\\"Solomon (Talamond) Bailem\\\",\\n    \\\"descriptiveName\\\": \\\"ls\\\",\\n    \\\"shortDescription\\\": \\\"Alternate ls tool with added features\\\",\\n    \\\"longDescription\\\": \\\"Alternative ls tool adding alternate view features, hidden files, and more\\\",\\n    \\\"tags\\\": [],\\n    \\\"aliases\\\": {\\n        \\\"ls\\\": \\\"ls.js\\\"\\n    },\\n    \\\"welcome\\\": \\\"Use ls -h to see options. Some files are now hidden without ls -a.\\\"\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/rm/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"rm\\\",\\n    \\\"author\\\": \\\"degaz\\\",\\n    \\\"descriptiveName\\\": \\\"More robust rm command\\\",\\n    \\\"shortDescription\\\": \\\"More robust rm command\\\",\\n    \\\"longDescription\\\": \\\"Remove files and directories. Has support for removing directories and prompting for confirmation.\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\"\\n    ],\\n    \\\"aliases\\\": {\\n        \\\"rm\\\": \\\"rm.js\\\"\\n    }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/rm/manual.txt\",\"text\":\"rm - Remove files and directories\\n\\nUsage:\\nrm [OPTIONS]... FILE... \\n\\n-f, --force\\n    ignore nonexistent files, never prompt\\n-r, -R, --recursive\\n    remove directories and their contents recursively \\n-v, --verbose\\n    explain what is being done \\n-h, --host\\n    run the command on the specified host\\n--help\\n    displays this help text\\n\\nExamples:\\nrm foo.txt\\n    Deletes foo.txt\\n\\nrm -rf foo.txt bar\\n    Deletes foo.txt and the 'bar' directory without prompting for confirmation\\n\\nalias rm=\\\"run /bitpacks/rm/rm.js\\\" to override the built-in terminal command.\\n\\nimport {rm} from \\\"/bitpacks/rm/rm.js\\\" to use in scripts.\\nfunction rm(ns: NS, files: string[], options: {recursive?: boolean, host: string});\\n\\nExample:\\nrm(ns, [\\\"test.txt\\\", \\\"some_directory\\\"], {recursive: true, host: 'n00dles'});\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/os/install_files_json.txt\",\"text\":\"{\\r\\n\\t\\\"welcomeLabel\\\": \\\"HackaOS :: Install\\\",\\r\\n\\t\\\"filesToDownload\\\": [\\r\\n\\t\\t\\\"os/constants.js\\\",\\r\\n\\t\\t\\\"os/logger.js\\\",\\r\\n\\t\\t\\\"os/event_listener.js\\\",\\r\\n\\t\\t\\\"os/gui.js\\\", \\r\\n\\t\\t\\\"os/main.js\\\",\\r\\n\\t\\t\\\"os/os.js\\\",\\r\\n\\t\\t\\\"os/terminal.js\\\",\\r\\n\\t\\t\\\"os/utils.js\\\",\\r\\n\\t\\t\\\"os/window_widget.js\\\",\\r\\n\\t\\t\\\"os/servers_manager.js\\\",\\r\\n\\r\\n\\t\\t\\\"os/app/files_explorer.js\\\",\\r\\n\\t\\t\\\"os/app/logger_render.js\\\",\\r\\n\\r\\n\\t\\t\\\"os/app/servers_explorer/connect.js\\\",\\r\\n\\t\\t\\\"os/app/servers_explorer/servers_explorer.js\\\",\\r\\n\\t\\t\\\"os/app/servers_explorer/servers_explorer_css.js\\\",\\r\\n\\r\\n\\t\\t\\\"os/plugins/plugins_manager.js\\\",\\r\\n\\t\\t\\\"os/plugins/plugins_utils.js\\\",\\r\\n\\t\\t\\\"os/plugins/api_adapter.js\\\",\\r\\n\\r\\n\\t\\t\\\"os/plugins/repl/repl.js\\\",\\r\\n\\t\\t\\\"os/plugins/repl/repl_json.txt\\\",\\r\\n\\r\\n\\t\\t\\\"os/plugins/rgraph/rgraph.js\\\",\\r\\n\\t\\t\\\"os/plugins/rgraph/attacks_monitor.js\\\",\\r\\n\\t\\t\\\"os/plugins/rgraph/rgraph_json.txt\\\",\\r\\n\\t\\t\\\"os/plugins/rgraph/jit-yc.js\\\",\\r\\n\\t\\t\\\"os/plugins/rgraph/process-list.config.example.js\\\",\\r\\n\\r\\n\\t\\t\\\"os/plugins/process-list/process-list.js\\\",\\r\\n\\t\\t\\\"os/plugins/process-list/process-list_css.js\\\",\\r\\n\\t\\t\\\"os/plugins/process-list/process-list_json.txt\\\",\\r\\n\\t\\t\\\"os/plugins/process-list/process-list.config.example.js\\\",\\r\\n\\t\\t\\r\\n\\t\\t\\\"os/plugins/bitpacker/bp_lib.js\\\",\\r\\n\\t\\t\\\"os/plugins/bitpacker/bitpacker.js\\\",\\r\\n\\t\\t\\\"os/plugins/bitpacker/bitpacker_json.txt\\\"\\r\\n\\t],\\r\\n\\t\\\"filesToClean\\\": [\\r\\n\\t],\\r\\n\\t\\\"installerVersion\\\": 1\\r\\n}\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/os/plugins/repl/repl_json.txt\",\"text\":\"{\\r\\n\\t\\\"id\\\": \\\"repl\\\",\\r\\n\\t\\\"description\\\": \\\"Allows to execute one-liner Javascript code within game, with access to game methods\\\",\\r\\n\\t\\\"links\\\": [\\r\\n\\t\\t\\\"https://github.com/Redmega/bitburner-scripts\\\"\\r\\n\\t],\\r\\n\\t\\\"dependencies\\\": [\\r\\n\\t]\\r\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/os/plugins/rgraph/rgraph_json.txt\",\"text\":\"{\\r\\n\\t\\\"id\\\": \\\"rgraph\\\",\\r\\n\\t\\\"description\\\": \\\"Graph visualisation for servers network\\\",\\r\\n\\t\\\"dependencies\\\": [\\r\\n\\t\\t\\\"jit\\\"\\r\\n\\t]\\r\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/os/plugins/process-list/process-list_json.txt\",\"text\":\"{\\r\\n\\t\\\"id\\\": \\\"process-list\\\",\\r\\n\\t\\\"description\\\": \\\"Attacks monitor\\\",\\r\\n\\t\\\"links\\\": [\\r\\n\\t],\\r\\n\\t\\\"dependencies\\\": [\\r\\n\\t]\\r\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/os/plugins/bitpacker/bitpacker_json.txt\",\"text\":\"{\\r\\n\\t\\\"id\\\": \\\"bitpacker\\\",\\r\\n\\t\\\"description\\\": \\\"Package manager for Bitburner\\\",\\r\\n\\t\\\"links\\\": [\\\"https://github.com/davidsiems/bitpacker\\\"],\\r\\n\\t\\\"dependencies\\\": [\\r\\n\\t]\\r\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/bb-vue/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"bb-vue\\\",\\n    \\\"author\\\": \\\"smolgumball\\\",\\n    \\\"descriptiveName\\\": \\\"Run Vue 3 apps inside BitBurner.\\\",\\n    \\\"shortDescription\\\": \\\"Extension for UI development using Vue 3 + SCSS in game. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"longDescription\\\": \\\"Includes starter components, examples, and lots of quality-of-life features for rapid UI development and extension inside BitBurner. Supports SCSS compilation of component styles, global SCSS mixins, loading of external stylesheets + scripts, and more. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"tags\\\": [\\n        \\\"library\\\",\\n        \\\"ui\\\",\\n        \\\"qol\\\",\\n        \\\"os\\\",\\n        \\\"ns2\\\"\\n    ]\\n}\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"22.1.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10255055566.2,\"moneyMax\":51275277831.00001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1313,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"40.7.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":11287131481.800001,\"moneyMax\":56435657409,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1269,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"95.6.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":5272953278.200001,\"moneyMax\":26364766391.000004,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1011,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"62.8.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":3761259016.8,\"moneyMax\":18806295084,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":977,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"56.4.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":6776479741.200001,\"moneyMax\":33882398706.000008,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1136,\"serverGrowth\":72}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"32.1.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":4046792804.4,\"moneyMax\":20233964022,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":57}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"72.2.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":3150422753.8,\"moneyMax\":15752113769,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1095,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"45.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":4139504560.4,\"moneyMax\":20697522802,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1216,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"77.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":4824366319.8,\"moneyMax\":24121831599,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1161,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"62.2.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":355029500.8,\"moneyMax\":1775147504,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1158,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"76.4.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1473,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"0.5.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":228698212.4,\"moneyMax\":1143491062,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":886,\"serverGrowth\":80}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"2.4.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":169114213.20000002,\"moneyMax\":845571066.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1003,\"serverGrowth\":72}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"6.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":133684427.60000001,\"moneyMax\":668422138,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":930,\"serverGrowth\":61}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"87.6.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":119195354.80000001,\"moneyMax\":595976774.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"15.1.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":151552662.6,\"moneyMax\":757763313,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":74}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"50.4.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":180585011.20000002,\"moneyMax\":902925056,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"37.7.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":222827809.20000002,\"moneyMax\":1114139046,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"65.4.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":152648880,\"moneyMax\":763244400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":60}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"42.1.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":135279004.8,\"moneyMax\":676395024.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":74}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"18.1.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":179819818,\"moneyMax\":899099090,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"14.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":159915151.8,\"moneyMax\":799575759.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":89}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"52.7.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":234679247.60000002,\"moneyMax\":1173396238.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"90.3.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":189419285,\"moneyMax\":947096425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":945,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"64.1.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":212098128,\"moneyMax\":1060490640,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":795,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"24.9.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":166521166.60000002,\"moneyMax\":832605833.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"57.5.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":170058053.20000002,\"moneyMax\":850290266.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":767,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"16.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":315162539.6,\"moneyMax\":1575812698.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":62}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"15.5.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":309128412.8,\"moneyMax\":1545642064,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"17.9.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":222939487,\"moneyMax\":1114697435,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"56.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":298423599,\"moneyMax\":1492117995,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"24.7.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":207538280,\"moneyMax\":1037691400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"7.9.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":149987150.6,\"moneyMax\":749935753,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":723,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"95.7.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":118951527.60000001,\"moneyMax\":594757638,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":485,\"serverGrowth\":58}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"53.8.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":122958547.2,\"moneyMax\":614792736,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":513,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"50.7.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":76380659.2,\"moneyMax\":381903296,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":419,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"11.6.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":37233164.6,\"moneyMax\":186165823,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":383,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"26.8.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":189398312.20000002,\"moneyMax\":946991561,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":734,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"59.5.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":48279255,\"moneyMax\":241396275,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":469,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"50.7.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":90510132,\"moneyMax\":452550660,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":576,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"89.2.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":103664578,\"moneyMax\":518322890,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":409,\"serverGrowth\":50}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"6.0.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":30010799,\"moneyMax\":150053995,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":282,\"serverGrowth\":53}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"39.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":47940457,\"moneyMax\":239702285,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":306,\"serverGrowth\":46}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"91.9.2.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":422,\"serverGrowth\":60}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"31.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":16276799.4,\"moneyMax\":81383997,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":293,\"serverGrowth\":54}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"1.9.4.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"22.4.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.906000000000001,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"97.6.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"86.5.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"81.7.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"85.5.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"29.2.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-853348.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[138,71,37,104,172,159,90,64,60,54,75,156,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"28.8.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"62.0.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"60.0.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"6.8.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"40.8.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"78.4.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":13434662.600000001,\"moneyMax\":67173313.00000001,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":219,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"75.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":11400518.8,\"moneyMax\":57002594,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":268,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"81.6.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"42.2.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":495,\"serverGrowth\":31}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"73.0.5.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1068,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"97.2.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":706,\"serverGrowth\":55}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"24.1.6.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":543,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"63.2.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":357,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"91.9.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":215,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"97.8.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":508,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"9.3.4.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":58,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"74.8.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"19.8.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"33.9.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":15.2507,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":149.98181681870656}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":6.5455,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":9.8235,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":190.2468,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":177652.00886211835}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"bp\":\"run /bitpacks/bp.js\",\"rm\":\"run /bitpacks/rm/rm.js\",\"map\":\"run src/map.js\",\"hud\":\"run /xsink/hud.js\",\"mapt\":\"run src/mapt.js --tail\"}","GlobalAliasesSave":"{\"mbg\":\"run /matrix/matrix.js\",\"togglesound\":\"home;run Bitburner-Sounds.js\",\"bootOS\":\"run /os/main.js\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":26604.634019069603,\"lastPrice\":26710.471890248085,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":17.97208085435897,\"otlkMagForecast\":32.03059574794665,\"cap\":593229834,\"spreadPerc\":0.4,\"shareTxForMovement\":51894,\"shareTxUntilMovement\":51894,\"totalShares\":100900000,\"maxShares\":20200000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":21605.637390541786,\"lastPrice\":21695.78111311511,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":false,\"otlkMag\":18.823747758765474,\"otlkMagForecast\":31.199448457776867,\"cap\":116689013,\"spreadPerc\":0.3,\"shareTxForMovement\":47846,\"shareTxUntilMovement\":47846,\"totalShares\":99600000,\"maxShares\":19900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":23601.316553824898,\"lastPrice\":23437.58016155386,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":12.130896438607751,\"otlkMagForecast\":63.54359716408119,\"cap\":477602052,\"spreadPerc\":0.1,\"shareTxForMovement\":53854,\"shareTxUntilMovement\":53854,\"totalShares\":78800000,\"maxShares\":15800000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":26073.666716610966,\"lastPrice\":25895.273310378307,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":12.380962987393326,\"otlkMagForecast\":37.93992911397543,\"cap\":111164531,\"spreadPerc\":0.4,\"shareTxForMovement\":84754,\"shareTxUntilMovement\":84754,\"totalShares\":61100000,\"maxShares\":12200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":46363.58256842036,\"lastPrice\":46651.49267556685,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":13.65152863497367,\"otlkMagForecast\":38.25310622493304,\"cap\":903157329,\"spreadPerc\":0.1,\"shareTxForMovement\":80635,\"shareTxUntilMovement\":80635,\"totalShares\":42700000,\"maxShares\":8500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":76209.49296011645,\"lastPrice\":77000.70484092498,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":true,\"otlkMag\":14.740993154858046,\"otlkMagForecast\":66.88823247311055,\"cap\":736442136,\"spreadPerc\":0.9,\"shareTxForMovement\":69912,\"shareTxUntilMovement\":69912,\"totalShares\":26600000,\"maxShares\":5300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":20263.18356749677,\"lastPrice\":20418.506191984554,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":9.322078582812313,\"otlkMagForecast\":60.29070009842169,\"cap\":222495139,\"spreadPerc\":0.4,\"shareTxForMovement\":89627,\"shareTxUntilMovement\":89627,\"totalShares\":118200000,\"maxShares\":23600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":25289.022156971,\"lastPrice\":24993.165701855833,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":14.44583051322449,\"otlkMagForecast\":35.29588808914118,\"cap\":94572512,\"spreadPerc\":0.4,\"shareTxForMovement\":51534,\"shareTxUntilMovement\":51534,\"totalShares\":63600000,\"maxShares\":12700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":28827.708908422668,\"lastPrice\":29059.869322968592,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":8.122827113495628,\"otlkMagForecast\":57.08885354997088,\"cap\":539337681,\"spreadPerc\":0.7,\"shareTxForMovement\":55956,\"shareTxUntilMovement\":55956,\"totalShares\":49200000,\"maxShares\":9800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9945.985888915418,\"lastPrice\":9878.888430352721,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":10.090736121929567,\"otlkMagForecast\":59.98691168847652,\"cap\":199711413,\"spreadPerc\":0.9,\"shareTxForMovement\":58472,\"shareTxUntilMovement\":58472,\"totalShares\":101600000,\"maxShares\":20300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19194.437399148734,\"lastPrice\":19311.76924061988,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":9.52555890791082,\"otlkMagForecast\":40.93316348154337,\"cap\":114451737,\"spreadPerc\":0.7,\"shareTxForMovement\":60843,\"shareTxUntilMovement\":60843,\"totalShares\":46100000,\"maxShares\":9200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":7705.752772088032,\"lastPrice\":7764.819391122889,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":6.430093462500011,\"otlkMagForecast\":56.99124740642426,\"cap\":168905163,\"spreadPerc\":0.2,\"shareTxForMovement\":75399,\"shareTxUntilMovement\":75399,\"totalShares\":114300000,\"maxShares\":22900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":16493.568526799667,\"lastPrice\":16599.191530767443,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":6.873725816272087,\"otlkMagForecast\":42.45436885627271,\"cap\":277350978,\"spreadPerc\":0.5,\"shareTxForMovement\":55148,\"shareTxUntilMovement\":55148,\"totalShares\":52100000,\"maxShares\":10400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":24711.335431333002,\"lastPrice\":24850.40245488052,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":11.083364987867522,\"otlkMagForecast\":59.67959760226838,\"cap\":552387593,\"spreadPerc\":0.4,\"shareTxForMovement\":88955,\"shareTxUntilMovement\":88955,\"totalShares\":37700000,\"maxShares\":7500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":12380.95920441714,\"lastPrice\":12447.031125170583,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":5.7712517790084386,\"otlkMagForecast\":44.10136423095549,\"cap\":206772288,\"spreadPerc\":0.5,\"shareTxForMovement\":73425,\"shareTxUntilMovement\":73425,\"totalShares\":55100000,\"maxShares\":11000000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":12146.986653473936,\"lastPrice\":12060.39160105612,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.369575598024988,\"otlkMagForecast\":54.500293394267786,\"cap\":280283305,\"spreadPerc\":0.5,\"shareTxForMovement\":76458,\"shareTxUntilMovement\":76458,\"totalShares\":52700000,\"maxShares\":10500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":15295.277684924306,\"lastPrice\":15406.583685873178,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":9.146965806265676,\"otlkMagForecast\":41.61704801273956,\"cap\":294834758,\"spreadPerc\":0.5,\"shareTxForMovement\":86523,\"shareTxUntilMovement\":86523,\"totalShares\":43700000,\"maxShares\":8700000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":15846.616607383361,\"lastPrice\":15759.456842302487,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":10.144990003897984,\"otlkMagForecast\":61.08685755223996,\"cap\":273126243,\"spreadPerc\":0.7,\"shareTxForMovement\":89420,\"shareTxUntilMovement\":89420,\"totalShares\":43500000,\"maxShares\":8700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":24688.923948413314,\"lastPrice\":24875.775502664128,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":3.2286755620959684,\"otlkMagForecast\":44.148564988328516,\"cap\":234359052,\"spreadPerc\":0.7,\"shareTxForMovement\":62294,\"shareTxUntilMovement\":62294,\"totalShares\":26300000,\"maxShares\":5300000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":7837.557908094962,\"lastPrice\":8020.830598544986,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.41,\"b\":true,\"otlkMag\":5.823508113682915,\"otlkMagForecast\":49.949047586010714,\"cap\":14172307,\"spreadPerc\":0.7,\"shareTxForMovement\":38131,\"shareTxUntilMovement\":38131,\"totalShares\":90300000,\"maxShares\":18100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7471.842063594894,\"lastPrice\":7377.354525012692,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.32,\"b\":true,\"otlkMag\":6.925590708303538,\"otlkMagForecast\":56.30581889172978,\"cap\":48765079,\"spreadPerc\":0.6,\"shareTxForMovement\":36869,\"shareTxUntilMovement\":36869,\"totalShares\":55700000,\"maxShares\":11100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4134.483404183718,\"lastPrice\":4158.954365931543,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":5.077929783692865,\"otlkMagForecast\":49.816996866037165,\"cap\":75329043,\"spreadPerc\":0.8,\"shareTxForMovement\":115440,\"shareTxUntilMovement\":115440,\"totalShares\":48900000,\"maxShares\":9800000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5987.402224771557,\"lastPrice\":6094.2969333257915,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.84,\"b\":false,\"otlkMag\":9.163486031998534,\"otlkMagForecast\":39.23877976831857,\"cap\":109248941,\"spreadPerc\":0.5,\"shareTxForMovement\":60466,\"shareTxUntilMovement\":60466,\"totalShares\":40600000,\"maxShares\":8100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6499.844758277787,\"lastPrice\":6406.6011869632175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.5,\"b\":true,\"otlkMag\":2.8813668574121887,\"otlkMagForecast\":54.56239263796964,\"cap\":95238919,\"spreadPerc\":1,\"shareTxForMovement\":24591,\"shareTxUntilMovement\":24591,\"totalShares\":32400000,\"maxShares\":6500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3665.591671645236,\"lastPrice\":3631.7627114957163,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.127035768140478,\"otlkMagForecast\":53.88899313040981,\"cap\":44808578,\"spreadPerc\":0.5,\"shareTxForMovement\":105509,\"shareTxUntilMovement\":105509,\"totalShares\":51000000,\"maxShares\":10200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3498.5102001698942,\"lastPrice\":3610.5305783413687,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.3,\"b\":false,\"otlkMag\":7.1586331135017565,\"otlkMagForecast\":47.369638766397244,\"cap\":119347240,\"spreadPerc\":1.6,\"shareTxForMovement\":31453,\"shareTxUntilMovement\":31453,\"totalShares\":11600000,\"maxShares\":2300000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3864.8380712468015,\"lastPrice\":3828.4342296152563,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":true,\"otlkMag\":2.8667690489439415,\"otlkMagForecast\":51.58953871791003,\"cap\":6536613,\"spreadPerc\":0.4,\"shareTxForMovement\":72775,\"shareTxUntilMovement\":72775,\"totalShares\":18200000,\"maxShares\":3600000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3964.6865996317633,\"lastPrice\":3936.043428671985,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":2.4254482670916793,\"otlkMagForecast\":50.04647265159636,\"cap\":70549425,\"spreadPerc\":0.7,\"shareTxForMovement\":61220,\"shareTxUntilMovement\":61220,\"totalShares\":12800000,\"maxShares\":2600000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1375.1395041858186,\"lastPrice\":1408.4964836210695,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":false,\"otlkMag\":2.164674644049388,\"otlkMagForecast\":51.04869067872695,\"cap\":58678513,\"spreadPerc\":1.2,\"shareTxForMovement\":20843,\"shareTxUntilMovement\":20843,\"totalShares\":11100000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1127.8080188367985,\"lastPrice\":1102.5607456471753,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.36,\"b\":false,\"otlkMag\":2.177122347603524,\"otlkMagForecast\":51.38951521904976,\"cap\":16990665,\"spreadPerc\":1.2,\"shareTxForMovement\":20894,\"shareTxUntilMovement\":20894,\"totalShares\":49400000,\"maxShares\":9900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":289.73589066766925,\"lastPrice\":285.4157049688152,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.56,\"b\":false,\"otlkMag\":11.663800770421572,\"otlkMagForecast\":37.75525349128996,\"cap\":6037388,\"spreadPerc\":0.8,\"shareTxForMovement\":37783,\"shareTxUntilMovement\":37783,\"totalShares\":202400000,\"maxShares\":40500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":22471.359784522145,\"lastPrice\":22304.71666530589,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":8.05891181410399,\"otlkMagForecast\":57.8063761379563,\"cap\":51240462,\"spreadPerc\":0.9,\"shareTxForMovement\":99243,\"shareTxUntilMovement\":99243,\"totalShares\":21200000,\"maxShares\":4200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":15771.189225775825,\"lastPrice\":15681.417971653536,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":11.490033025557597,\"otlkMagForecast\":61.06882094781445,\"cap\":58531846,\"spreadPerc\":0.6,\"shareTxForMovement\":167323,\"shareTxUntilMovement\":167323,\"totalShares\":30500000,\"maxShares\":6100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":23,\"lastUpdate\":1665606958434,\"ticksUntilCycle\":1}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":15,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":true,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":25,\"MaxLogCapacity\":200,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":100,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"vs-dark\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#B0D9A3\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#6BC16B\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#3D713D\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#8FAF85\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#38F100\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#2F3C2B\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#4AA52E\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#35A135\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#2F3C2B\"},\"styles\":{\"lineHeight\":1.1,\"fontFamily\":\"FiraCode Nerd Font Mono, FiraCode NF Regular, Lucida Sans Unicode, monospace\"},\"overview\":{\"x\":-2,\"y\":0,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"26","AllGangsSave":"{\"Slum Snakes\":{\"power\":1,\"territory\":0.14285714285714587},\"Tetrads\":{\"power\":1177.9675052508635,\"territory\":0},\"The Syndicate\":{\"power\":1132.9761125654309,\"territory\":0},\"The Dark Army\":{\"power\":1189.5181826230576,\"territory\":0},\"Speakers for the Dead\":{\"power\":4155.505189495627,\"territory\":0.8571428571428541},\"NiteSec\":{\"power\":1198.4702833241854,\"territory\":0},\"The Black Hand\":{\"power\":81.80553402774457,\"territory\":0}}","LastExportBonus":"1665272534852","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}